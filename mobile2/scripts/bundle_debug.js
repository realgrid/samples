/** 
 * RealGridJS v2.0.1.0001
 * Copyright (C) 2013-2019 WooriTech Inc.
 * All Rights Reserved.
 */
var RealGridJS = (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var Rectangle_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Rectangle.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var Rectangle = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function Rectangle(x, y, width, height) {
	        if (x === void 0) { x = 0; }
	        if (y === void 0) { y = 0; }
	        if (width === void 0) { width = 0; }
	        if (height === void 0) { height = 0; }
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	    }
	    Object.defineProperty(Rectangle.prototype, "left", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** left */
	        get: function () {
	            return this.x;
	        },
	        set: function (value) {
	            var dx = value - this.x;
	            this.x += dx;
	            this.width -= dx;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Rectangle.prototype, "right", {
	        /** right */
	        get: function () {
	            return this.x + this.width;
	        },
	        set: function (value) {
	            var dx = value - (this.x + this.width);
	            this.width += dx;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Rectangle.prototype, "top", {
	        /** top */
	        get: function () {
	            return this.y;
	        },
	        set: function (value) {
	            var dy = value - this.y;
	            this.y += dy;
	            this.height -= dy;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Rectangle.prototype, "bottom", {
	        /** bottom */
	        get: function () {
	            return this.y + this.height;
	        },
	        set: function (value) {
	            var dy = value - (this.y + this.height);
	            this.height += dy;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Rectangle.prototype, "isEmpty", {
	        /** isEmpty */
	        get: function () {
	            return this.width === 0 || this.height === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Rectangle.prototype.clone = function () {
	        return new Rectangle(this.x, this.y, this.width, this.height);
	    };
	    Rectangle.prototype.getInner = function () {
	        return new Rectangle(0, 0, this.width, this.height);
	    };
	    Rectangle.prototype.equals = function (r) {
	        return r === this
	            || r && this.x === r.x && this.y === r.y && this.width === r.width && this.height === r.height;
	    };
	    Rectangle.prototype.leftBy = function (delta) {
	        this.x += delta;
	        this.width -= delta;
	        return this;
	    };
	    Rectangle.prototype.rightBy = function (delta) {
	        this.width += delta;
	        return this;
	    };
	    Rectangle.prototype.topBy = function (delta) {
	        this.y += delta;
	        this.height -= delta;
	        return this;
	    };
	    Rectangle.prototype.bottomBy = function (delta) {
	        this.height += delta;
	        return this;
	    };
	    Rectangle.prototype.shrink = function (dx, dy) {
	        this.width -= dx;
	        this.height -= dy;
	        return this;
	    };
	    Rectangle.prototype.expand = function (dx, dy) {
	        this.width += dx;
	        this.height += dy;
	        return this;
	    };
	    Rectangle.prototype.contains = function (x, y) {
	        return x >= this.x && x <= this.x + this.width
	            && y >= this.y && y <= this.y + this.height;
	    };
	    Rectangle.prototype.setEmpty = function () {
	        this.width = this.height = 0;
	        return this;
	    };
	    Rectangle.prototype.set = function (x, y, width, height) {
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	        return this;
	    };
	    Rectangle.prototype.copy = function (r) {
	        this.x = r.x;
	        this.y = r.y;
	        this.width = r.width;
	        this.height = r.height;
	        return this;
	    };
	    Rectangle.prototype.copyHorz = function (r) {
	        this.x = r.x;
	        this.width = r.width;
	        return this;
	    };
	    Rectangle.prototype.copyVert = function (r) {
	        this.y = r.y;
	        this.height = r.height;
	        return this;
	    };
	    Rectangle.prototype.inflate = function (left, top, right, bottom) {
	        if (left === void 0) { left = 0; }
	        if (top === void 0) { top = undefined; }
	        if (right === void 0) { right = undefined; }
	        if (bottom === void 0) { bottom = undefined; }
	        top = top !== undefined ? top : 0;
	        right = right !== undefined ? right : left;
	        bottom = bottom !== undefined ? bottom : top;
	        if (left)
	            this.left = this.x - left;
	        if (top)
	            this.top = this.y - top;
	        if (right)
	            this.right = this.right + right;
	        if (bottom)
	            this.bottom = this.bottom + bottom;
	        return this;
	    };
	    Rectangle.prototype.offset = function (dx, dy) {
	        this.x += dx;
	        this.y += dy;
	        return this;
	    };
	    Rectangle.prototype.round = function () {
	        var r = this.clone();
	        r.x >>>= 0;
	        r.y >>>= 0;
	        r.width >>>= 0;
	        r.height >>>= 0;
	        return r;
	    };
	    Rectangle.prototype.union = function (r) {
	        var r2 = this.clone();
	        r2.left = Math.min(this.x, r.x);
	        r2.right = Math.max(this.right, r.right);
	        r2.top = Math.min(this.y, r.y);
	        r2.bottom = Math.max(this.bottom, r.bottom);
	        return r2;
	    };
	    Rectangle.prototype.normalize = function () {
	        if (this.width < 0) {
	            this.x -= this.width;
	            this.width *= -1;
	        }
	        if (this.height < 0) {
	            this.y -= this.height;
	            this.height *= -1;
	        }
	        return this;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    Rectangle.prototype.toString = function () {
	        return "{x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + "}";
	    };
	    return Rectangle;
	}());
	exports.Rectangle = Rectangle;
	});

	unwrapExports(Rectangle_1);
	var Rectangle_2 = Rectangle_1.Rectangle;

	var Utils_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var _win = window;
	var _doc = document;
	var _isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
	var _isOpera = !!window["opera"] || navigator.userAgent.indexOf(' OPR/') >= 0;
	//const _isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
	var _isWhale = !!window["whale"]; // whale은 체크만하고 처리하지는 않는다. 
	var _isChrome = !!window["chrome"] && !_isOpera; // Chrome 1+
	var _isFirefox = typeof window["InstallTrigger"] !== 'undefined'; // Firefox 1.0+
	var _isSafari = Object.prototype.toString.call(HTMLElement).indexOf('Constructor') > 0 || (!_isChrome && !_isOpera && navigator.userAgent.indexOf("Safari") >= 0);
	var _isWinSafari = _isSafari && (navigator.platform == "Win32" || navigator.userAgent.indexOf("Windows") >= 0);
	var _isIE = /*@cc_on!@*/  !!document["documentMode"]; // At least IE6
	var _isEdge = navigator.userAgent.toLowerCase().indexOf('edge/') >= 0; // MS Edge 
	var _isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window["MSStream"]; // iOS
	var _ieVer = (function () {
	    var undef, v = 3, div = document.createElement('div'), all = div.getElementsByTagName('i');
	    while (div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
	        all[0])
	        ;
	    return v > 4 ? v : undef;
	})();
	var _ieOld = _ieVer !== undefined && _ieVer <= 9;
	var _ieLeg = _ieVer !== undefined && _ieVer <= 8;
	var _ieTen = navigator.appVersion.indexOf("MSIE 10") !== -1;
	var _ieNine = navigator.appVersion.indexOf("MSIE 9") !== -1;
	var __epoch = new Date().getTime();
	var $$_mobile = undefined;
	var $$_activeGrid;
	var Utils = /** @class */ (function () {
	    function Utils() {
	    }
	    Utils.stopEvent = function (e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	            e.stopPropagation();
	        }
	        else {
	            e.returnValue = false;
	        }
	    };
	    Utils.$_getActiveGrid = function () {
	        return $$_activeGrid && $$_activeGrid.getHandler && $$_activeGrid.getHandler();
	    };
	    Utils.$_setActiveGrid = function (grid) {
	        if ($$_activeGrid != grid) {
	            grid && grid._fireGridActivated();
	        }
	        $$_activeGrid = grid;
	    };
	    Utils.isArray = function (v) {
	        return Array.isArray(v);
	    };
	    Utils.isNumber = function (value) {
	        return typeof value === "number";
	    };
	    Utils.getTimer = function () {
	        return new Date().getTime() - __epoch;
	    };
	    Utils.isWhiteSpace = function (s) {
	        return !s || !s.trim();
	    };
	    Utils.pad = function (value, len, c) {
	        len = Math.max(len || 2, 1);
	        c = c || '0';
	        return new Array(len - String(value).length + 1).join(c) + value;
	    };
	    Utils.pick = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var len = args.length;
	        var v;
	        for (var i = 0; i < len; i++) {
	            v = args[i];
	            if (v !== undefined && v !== null) {
	                return v;
	            }
	        }
	        return undefined;
	    };
	    Utils.included = function (value) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var len = args.length;
	        for (var i = 0; i < len; i++) {
	            if (args[i] == value) {
	                return true;
	            }
	        }
	        return false;
	    };
	    Utils.compareTextValue = function (v1, v2, caseSensitive, partialMatch) {
	        if (v1 === v2) {
	            return true;
	        }
	        var s1 = String(v1);
	        var s2 = v2 == null ? undefined : String(v2);
	        if (!s1 && !s2) {
	            return true;
	        }
	        if (!s1 || !s2) {
	            return false;
	        }
	        if (!caseSensitive) {
	            s1 = s1.toLowerCase();
	            s2 = s2.toLowerCase();
	        }
	        if (partialMatch) {
	            return s2.indexOf(s1) >= 0;
	        }
	        else {
	            return s1 == s2;
	        }
	    };
	    Utils.cast = function (obj, clazz) {
	        return obj instanceof clazz ? obj : null;
	    };
	    Utils.irandom = function (min, max) {
	        if (max !== undefined) {
	            var v1 = Math.floor(min);
	            var v2 = Math.floor(max);
	            return Math.floor(Math.random() * (v2 - v1) + v1);
	        }
	        else {
	            var v = Math.floor(min);
	            return Math.floor(Math.random() * v);
	        }
	    };
	    Utils.brandom = function () {
	        return Math.random() > 0.5 ? true : false;
	    };
	    Utils.erandom = function (clazz) {
	        return Object.keys(clazz);
	    };
	    Utils.alert = function (message) {
	    };
	    Utils.toInt = function (v, radix) {
	        return (v !== undefined && v !== null) ? parseInt(v, radix || 10) : 0;
	    };
	    Utils.toFloat = function (v) {
	        return (v !== undefined && v !== null) ? parseFloat(v) : 0;
	    };
	    Utils.toArray = function (v) {
	        if (v instanceof Array)
	            return v;
	        if (v !== undefined && v !== null)
	            return [v];
	        return null;
	    };
	    Utils.hex = function (value, len, c) {
	        if (len === void 0) { len = 2; }
	        if (c === void 0) { c = "0"; }
	        len = Math.max(len || 2, 1);
	        var s = value.toString(16);
	        c = c || "0";
	        return new Array(len - s.length + 1).join(c) + s;
	    };
	    Utils.getBounds = function (dom) {
	        var r = new Rectangle_1.Rectangle();
	        r.x = dom.offsetLeft;
	        r.y = dom.offsetTop;
	        r.width = dom.offsetWidth;
	        r.height = dom.offsetHeight;
	        return r;
	    };
	    Utils.toStr = function (value) {
	        if (typeof value === "number") {
	            return !isNaN(value) ? String(value) : "";
	        }
	        else {
	            return value !== null && value !== undefined ? String(value) : "";
	        }
	    };
	    Utils._included = function (value) {
	        var args = arguments;
	        var len = args.length;
	        for (var i = 1; i < len; i++) {
	            if (args[i] == value) {
	                return true;
	            }
	        }
	        return false;
	    };
	    Utils.setBounds = function (element, x, y, w, h) {
	        var style = element.style;
	        style.left = x + "px";
	        style.top = y + "px";
	        style.width = w + "px";
	        style.height = h + "px";
	    };
	    Utils.getClientRect = function (element) {
	        var r = element.getBoundingClientRect();
	        r["cx"] = element.offsetLeft;
	        r["cy"] = element.offsetTop;
	        return r;
	    };
	    Utils.getChildIndex = function (element) {
	        if (element) {
	            var parent = element.parentNode;
	            if (parent) {
	                var childs = parent.childNodes;
	                for (var i = 0; i < childs.length; i++) {
	                    if (childs[i] === element) {
	                        return i;
	                    }
	                }
	            }
	        }
	        return -1;
	    };
	    Utils.clearChildren = function (element) {
	        while (element.lastChild) {
	            element.removeChild(element.lastChild);
	        }
	    };
	    Utils.clearElements = function (element) {
	        while (element.lastChild) {
	            Utils.clearElements(element.lastChild);
	            element.removeChild(element.lastChild);
	        }
	    };
	    Utils.addChild = function (element, child) {
	        if (element && child && child.parentNode !== element) {
	            element.appendChild(child);
	            return true;
	        }
	        return false;
	    };
	    Utils.removeChild = function (element, child) {
	        if (element && child && child.parentNode === element) {
	            element.removeChild(child);
	            return true;
	        }
	        return false;
	    };
	    Utils.disableSelection = function (element) {
	        var css = element.style;
	        css["-moz-user-select"] = "-moz-none";
	        css["-khtml-user-select"] = "none";
	        css["-webkit-user-select"] = "none";
	        css["-o-user-select"] = "none";
	        css["-ms-user-select"] = "none";
	        css["user-select"] = "none";
	        /*
	        if (typeof element.onselectstart !== 'undefined') {
	            element.onselectstart = function() { return false; };
	        } else if (typeof element.style.MozUserSelect !== 'undefined') {
	            element.style.MozUserSelect = 'none';
	        } else {
	            element.onmousedown = function() { return false; };
	        }
	        */
	    };
	    Utils.setMobile = function (value) {
	        $$_mobile = value;
	    };
	    Utils.isMobile = function () {
	        if ($$_mobile == undefined) {
	            var check_1 = false;
	            if (navigator.userAgent.match(/Android/i)
	                || navigator.userAgent.match(/webOS/i)
	                || navigator.userAgent.match(/iPhone/i)
	                || navigator.userAgent.match(/iPad/i)
	                || navigator.userAgent.match(/iPod/i)
	                || navigator.userAgent.match(/BlackBerry/i)
	                || navigator.userAgent.match(/Windows Phone/i))
	                check_1 = true;
	            if (!check_1) {
	                (function (a) {
	                    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||
	                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
	                        check_1 = true;
	                })(navigator.userAgent || navigator.vendor || window["opera"]);
	            }
	            return check_1;
	        }
	        else {
	            return !!$$_mobile;
	        }
	    };
	    Utils.getBrowserSize = function () {
	        return {
	            width: _win.innerWidth || _doc.documentElement.clientWidth || _doc.body.clientWidth,
	            height: _win.innerHeight || _doc.documentElement.clientHeight || _doc.body.clientHeight
	        };
	    };
	    Utils.move = function (element, x, y) {
	        element.style.left = x + "px";
	        element.style.top = y + "px";
	    };
	    Utils.htmlEncode = function (text) {
	        return document.createElement('a').appendChild(document.createTextNode(text)).parentElement.innerHTML;
	    };
	    Utils.detach = function (element) {
	        element.parentNode && element.parentNode.removeChild(element);
	    };
	    Utils.getSize = function (element) {
	        var r = element.getBoundingClientRect();
	        return { width: r.width, height: r.height };
	    };
	    Utils.getScrolled = function () {
	        var body = document.body;
	        var docElem = document.documentElement;
	        return {
	            sx: window.pageXOffset || docElem.scrollLeft || body.scrollLeft,
	            sy: window.pageYOffset || docElem.scrollTop || body.scrollTop
	        };
	    };
	    Utils.getOffset = function (element) {
	        var box = element.getBoundingClientRect();
	        var body = document.body;
	        var docElem = document.documentElement;
	        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
	        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
	        var clientTop = docElem.clientTop || body.clientTop || 0;
	        var clientLeft = docElem.clientLeft || body.clientLeft || 0;
	        var x = box.left + scrollLeft - clientLeft;
	        var y = box.top + scrollTop - clientTop;
	        return { x: Math.round(x), y: Math.round(y) };
	    };
	    Utils.isAncestorOf = function (elt, child) {
	        var p = child.parentElement;
	        while (p) {
	            if (p == elt) {
	                return true;
	            }
	            p = p.parentElement;
	        }
	        return false;
	    };
	    Utils.equalArrays = function (a, b) {
	        if (a === b)
	            return true;
	        if (a == null || b == null)
	            return false;
	        var len = a.length;
	        if (len != b.length)
	            return false;
	        for (var i = 0; i < len; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    Utils.isLeapYear = function (year) {
	        return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
	    };
	    Utils.incMonth = function (d, delta) {
	        var day = d.getDate();
	        d.setDate(1);
	        d.setMonth(d.getMonth() + delta);
	        d.setDate(Math.min(day, Utils.month_days[Utils.isLeapYear(d.getFullYear()) ? 1 : 0][d.getMonth()]));
	        return d;
	    };
	    Utils.minDate = function (d1, d2) {
	        if (d1 !== null)
	            return d1;
	        if (d2 !== null)
	            return d2;
	        return d1.getTime() < d2.getTime() ? d1 : d2;
	    };
	    Utils.maxDate = function (d1, d2) {
	        if (d1 !== null)
	            return d2;
	        if (d2 !== null)
	            return d1;
	        return d1.getTime() > d2.getTime() ? d1 : d2;
	    };
	    Utils.win = _win;
	    Utils.isIE = _isIE;
	    Utils.isEdge = _isEdge;
	    Utils.isMac = _isMac;
	    Utils.ieOld = _ieOld;
	    Utils.isSafari = _isSafari;
	    Utils.isWinSafari = _isWinSafari;
	    Utils.isChrome = _isChrome;
	    Utils.isFirefox = _isFirefox;
	    Utils.isOpera = _isOpera;
	    Utils.ieLeg = _ieLeg;
	    Utils.ieTen = _ieTen;
	    Utils.week_days = window["RG_CONST"] && window["RG_CONST"]["WEEKDAYS"] ? window["RG_CONST"]["WEEKDAYS"] : ['일', '월', '화', '수', '목', '금', '토'];
	    Utils.month_days = [
	        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
	        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	    ];
	    Utils.$_INVISIBLE_EDIT_BOUNDS = new Rectangle_1.Rectangle(-10000, -10000, 100, 100);
	    return Utils;
	}());
	exports.Utils = Utils;
	});

	unwrapExports(Utils_1);
	var Utils_2 = Utils_1.Utils;

	var Base_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Base.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var $$_hash = 0;
	var Base = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function Base() {
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this.$_hash = $$_hash++;
	    }
	    Base.prototype.dispose = function () {
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Base.prototype.isMe = function (hash) {
	        return hash == this.$_hash;
	    };
	    Base.prototype.$_getters = function (proto) {
	        var getters = proto.$$_getters_$$;
	        if (!getters) {
	            var props = Object.getOwnPropertyNames(proto);
	            getters = proto.$$_getters_$$ = [];
	            for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
	                var prop = props_1[_i];
	                var p = Object.getOwnPropertyDescriptor(proto, prop);
	                if (p && p.get) {
	                    getters.push(p);
	                }
	            }
	        }
	        return getters;
	    };
	    Base.prototype.assignFrom = function (source) {
	        var proto = Object.getPrototypeOf(this);
	        if (source instanceof Base) {
	            var pSource = Object.getPrototypeOf(source);
	            var props = {};
	            while (pSource && pSource.constructor != Base) {
	                //let descs = Object.getOwnPropertyDescriptors(pSource);
	                //let descs = Object.getOwnPropertyNames(pSource);
	                var descs = this.$_getters(pSource);
	                //console.log(descs);
	                for (var k in descs) {
	                    if (!(k in props)) {
	                        props[k] = null;
	                        var p = Object.getOwnPropertyDescriptor(proto, k);
	                        if (p) {
	                            if (p.set) {
	                                var g = Object.getOwnPropertyDescriptor(pSource, k).get;
	                                if (g) {
	                                    p.set.call(this, g.call(source));
	                                }
	                            }
	                        }
	                        else {
	                            var proto2 = Object.getPrototypeOf(proto);
	                            while (proto2) {
	                                var p_1 = Object.getOwnPropertyDescriptor(proto2, k);
	                                if (p_1) {
	                                    if (p_1.set) {
	                                        var g = Object.getOwnPropertyDescriptor(pSource, k).get;
	                                        if (g) {
	                                            p_1.set.call(this, g.call(source));
	                                        }
	                                    }
	                                    proto2 = null;
	                                }
	                                else {
	                                    proto2 = Object.getPrototypeOf(proto2);
	                                }
	                            }
	                        }
	                    }
	                }
	                pSource = Object.getPrototypeOf(pSource);
	            }
	        }
	        else {
	            for (var k in source) {
	                var p = Object.getOwnPropertyDescriptor(proto, k);
	                if (p) {
	                    if (p.set) {
	                        p.set.call(this, source[k]);
	                    }
	                }
	                else {
	                    var proto2 = Object.getPrototypeOf(proto);
	                    while (proto2) {
	                        var p_2 = Object.getOwnPropertyDescriptor(proto2, k);
	                        if (p_2) {
	                            if (p_2.set) {
	                                p_2.set.call(this, source[k]);
	                            }
	                            proto2 = null;
	                        }
	                        else {
	                            proto2 = Object.getPrototypeOf(proto2);
	                        }
	                    }
	                }
	            }
	        }
	    };
	    Base.prototype.extend = function (source) {
	        for (var k in source) {
	            if (this.hasOwnProperty(k)) {
	                this[k] = source[k];
	            }
	        }
	    };
	    return Base;
	}());
	exports.Base = Base;
	});

	unwrapExports(Base_1);
	var Base_2 = Base_1.Base;

	var EventAware_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// EventAware.ts
	// 2019. 06. 30. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var EventAware = /** @class */ (function (_super) {
	    __extends(EventAware, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function EventAware() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._listeners = [];
	        return _this;
	    }
	    EventAware.prototype.dispose = function () {
	        this._listeners = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EventAware.prototype, "count", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._listeners.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    EventAware.prototype.addListener = function (listener) {
	        if (listener != null && this._listeners.indexOf(listener) < 0) {
	            this._listeners.push(listener);
	        }
	        return this;
	    };
	    EventAware.prototype.removeListener = function (listener) {
	        if (listener != null) {
	            var i = this._listeners.indexOf(listener);
	            if (i >= 0) {
	                this._listeners.splice(i, 1);
	            }
	        }
	        return this;
	    };
	    EventAware.prototype.fireEvent = function (event) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var args2 = Array.prototype.slice.call(arguments, 0);
	        args2[0] = this;
	        for (var i = 0, cnt = this._listeners.length; i < cnt; i++) {
	            var listener = this._listeners[i];
	            var callback = listener[event];
	            callback && callback.apply(listener, args2);
	        }
	    };
	    EventAware.prototype.fireConfirmEvent = function (event) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var args2 = Array.prototype.slice.call(arguments, 0);
	        args2[0] = this;
	        for (var i = 0, cnt = this._listeners.length; i < cnt; i++) {
	            var listener = this._listeners[i];
	            var callback = listener[event];
	            if (callback) {
	                var ret = callback.apply(listener, args2);
	                if (typeof ret === "boolean" && !ret) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    };
	    EventAware.prototype.fireMessageEvent = function (event) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var args2 = Array.prototype.slice.call(arguments, 0);
	        args2[0] = this;
	        for (var i = 0, cnt = this._listeners.length; i < cnt; i++) {
	            var listener = this._listeners[i];
	            var callback = listener[event];
	            if (callback) {
	                var ret = callback.apply(listener, args2);
	                if (typeof ret === "string" && ret) {
	                    return ret;
	                }
	            }
	        }
	        return null;
	    };
	    EventAware.prototype.fireObjectEvent = function (event) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var args2 = Array.prototype.slice.call(arguments, 0);
	        args2[0] = this;
	        for (var i = 0, cnt = this._listeners.length; i < cnt; i++) {
	            var listener = this._listeners[i];
	            var callback = listener[event];
	            if (callback) {
	                var ret = callback.apply(listener, args2);
	                if (ret) {
	                    return ret;
	                }
	            }
	        }
	        return null;
	    };
	    return EventAware;
	}(Base_1.Base));
	exports.EventAware = EventAware;
	});

	unwrapExports(EventAware_1);
	var EventAware_2 = EventAware_1.EventAware;

	var VisualStyles_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// VisualStyles.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var VisualStyles = /** @class */ (function (_super) {
	    __extends(VisualStyles, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function VisualStyles(owner, name, source, fireEvents) {
	        if (name === void 0) { name = null; }
	        if (source === void 0) { source = null; }
	        if (fireEvents === void 0) { fireEvents = false; }
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // style property fields
	        //-------------------------------------------------------------------------
	        _this._background = undefined;
	        _this._line = undefined;
	        _this._figureBackground = undefined;
	        _this._values = [];
	        _this._updateLock = 0;
	        _this._owner = owner;
	        _this._name = name;
	        _this._fireEvents = fireEvents;
	        source && _this.extend(source);
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    VisualStyles.initStyles = function (s) {
	        return s;
	    };
	    VisualStyles.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(VisualStyles.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            this._name = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualStyles.prototype, "fireEvents", {
	        /** fireEvents */
	        get: function () {
	            return this._fireEvents;
	        },
	        set: function (value) {
	            this._fireEvents = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualStyles.prototype, "background", {
	        //-------------------------------------------------------------------------
	        // style properties
	        //-------------------------------------------------------------------------
	        /** background */
	        get: function () {
	            return this.searchStyles(VisualStyles.BACKGROUND)._background;
	        },
	        set: function (value) {
	            if (value !== undefined) {
	                if (!this._values[VisualStyles.BACKGROUND] || value !== this._background) {
	                    this._background = value;
	                    this._values[VisualStyles.BACKGROUND] = true;
	                    if (this._fireEvents)
	                        this.changed(VisualStyles.BACKGROUND);
	                }
	            }
	            else if (this._values[VisualStyles.BACKGROUND]) {
	                delete this._background;
	                this._values[VisualStyles.BACKGROUND] = false;
	                if (this._fireEvents)
	                    this.changed(VisualStyles.BACKGROUND);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualStyles.prototype, "line", {
	        /** line */
	        get: function () {
	            return this.searchStyles(VisualStyles.LINE)._line;
	        },
	        set: function (value) {
	            if (value !== undefined) {
	                if (!this._values[VisualStyles.LINE] || value !== this._line) {
	                    this._line = value;
	                    this._values[VisualStyles.LINE] = true;
	                    if (this._fireEvents)
	                        this.changed(VisualStyles.LINE);
	                }
	            }
	            else if (this._values[VisualStyles.LINE]) {
	                delete this._line;
	                this._values[VisualStyles.LINE] = false;
	                if (this._fireEvents)
	                    this.changed(VisualStyles.LINE);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualStyles.prototype, "figureBackground", {
	        /** figureBackground */
	        get: function () {
	            return this.searchStyles(VisualStyles.FIGURE_BACKGROUND)._figureBackground;
	        },
	        set: function (value) {
	            if (value !== undefined) {
	                if (!this._values[VisualStyles.FIGURE_BACKGROUND] || value !== this._figureBackground) {
	                    this._figureBackground = value;
	                    this._values[VisualStyles.FIGURE_BACKGROUND] = true;
	                    if (this._fireEvents)
	                        this.changed(VisualStyles.FIGURE_BACKGROUND);
	                }
	            }
	            else if (this._values[VisualStyles.FIGURE_BACKGROUND]) {
	                delete this._figureBackground;
	                this._values[VisualStyles.FIGURE_BACKGROUND] = false;
	                if (this._fireEvents)
	                    this.changed(VisualStyles.FIGURE_BACKGROUND);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    VisualStyles.prototype.setParent = function (value, fireEvents) {
	    };
	    VisualStyles.prototype.clearValues = function () {
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    VisualStyles.prototype.extend = function (source, fireEvents) {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    VisualStyles.prototype.searchStyles = function (entry) {
	        if (this._values[entry]) {
	            return this;
	        }
	        var p = this._parent;
	        while (p) {
	            if (p._values[entry]) {
	                return p;
	            }
	            p = p._parent;
	        }
	        if (this._sysDefault && this._sysDefault._values[entry]) {
	            return this._sysDefault;
	        }
	        var p = this._parent;
	        while (p) {
	            if (p._sysDefault && p._sysDefault._values[entry]) {
	                return p._sysDefault;
	            }
	            p = p._parent;
	        }
	        return VisualStyles.Default;
	    };
	    VisualStyles.prototype.changed = function (entry, fireEvent) {
	        if (fireEvent === void 0) { fireEvent = true; }
	        if (this._updateLock == 0 && fireEvent) {
	            if (this._owner && this._owner.stylesChanged) {
	                this._owner.stylesChanged(entry);
	            }
	            else {
	                this.fireEvent(VisualStyles.CHANGED, entry);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // event entries
	    VisualStyles.CHANGED = "onVisualStylesChanged";
	    // style entries
	    VisualStyles.STYLE_ALL = -1;
	    VisualStyles.VISIBILITY = 0;
	    VisualStyles.BACKGROUND = 1;
	    VisualStyles.SELECTED_BACKGROUND = 2;
	    VisualStyles.INACTIVE_BACKGROUND = 3;
	    VisualStyles.FOREGROUND = 4;
	    VisualStyles.SELECTED_FOREGROUND = 5;
	    VisualStyles.INACTIVE_FOREGROUND = 6;
	    VisualStyles.BORDER = 10;
	    VisualStyles.BORDER_LEFT = 11;
	    VisualStyles.BORDER_RIGHT = 12;
	    VisualStyles.BORDER_TOP = 13;
	    VisualStyles.BORDER_BOTTOM = 14;
	    VisualStyles.LINE = 15;
	    VisualStyles.RENDERER = 16;
	    VisualStyles.TEXT_ALIGNMENT = 20;
	    VisualStyles.LINE_ALIGNMENT = 21;
	    VisualStyles.NUMBER_FORMAT = 22;
	    VisualStyles.DATETIME_FORMAT = 23;
	    VisualStyles.BOOLEAN_FORMAT = 24;
	    VisualStyles.PREFIX = 25;
	    VisualStyles.SUFFIX = 26;
	    VisualStyles.FONT = 30;
	    VisualStyles.FONT_FAMILY = 31;
	    VisualStyles.FONT_SIZE = 32;
	    VisualStyles.FONT_BOLD = 33;
	    VisualStyles.FONT_ITALIC = 34;
	    VisualStyles.FONT_UNDERLINE = 35;
	    VisualStyles.FONT_LINETHROUGH = 36;
	    VisualStyles.TEXT_WRAP = 37;
	    VisualStyles.PADDING_LEFT = 40;
	    VisualStyles.PADDING_RIGHT = 41;
	    VisualStyles.PADDING_TOP = 42;
	    VisualStyles.PADDING_BOTTOM = 43;
	    VisualStyles.ICON_INDEX = 44;
	    VisualStyles.ICON_LOCATION = 45;
	    VisualStyles.ICON_ALIGNMENT = 46;
	    VisualStyles.ICON_OFFSET = 47;
	    VisualStyles.ICON_PADDING = 48;
	    VisualStyles.CONTENT_FIT = 49;
	    VisualStyles.SELECTION_DISPLAY = 50;
	    VisualStyles.HOVERED_MASK_BACKGROUND = 51;
	    VisualStyles.HOVERED_MASK_BORDER = 52;
	    VisualStyles.HOVERED_BACKGROUND = 53;
	    VisualStyles.HOVERED_FOREGROUND = 54;
	    VisualStyles.FIGURE_BACKGROUND = 55;
	    VisualStyles.FIGURE_INACTIVE_BACKGROUND = 56;
	    VisualStyles.FIGURE_BORDER = 57;
	    VisualStyles.FIGURE_SIZE = 58;
	    VisualStyles.FIGURE_NAME = 59;
	    VisualStyles.FIGURE_STATE = 60;
	    VisualStyles.Default = VisualStyles.initStyles(new VisualStyles(null, "defaultStyles"));
	    return VisualStyles;
	}(EventAware_1.EventAware));
	exports.VisualStyles = VisualStyles;
	});

	unwrapExports(VisualStyles_1);
	var VisualStyles_2 = VisualStyles_1.VisualStyles;

	var CellIndex_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CellIndex.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var CellIndex = /** @class */ (function (_super) {
	    __extends(CellIndex, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellIndex(grid, itemIndex, column) {
	        if (grid === void 0) { grid = null; }
	        if (itemIndex === void 0) { itemIndex = -1; }
	        if (column === void 0) { column = null; }
	        var _this = _super.call(this) || this;
	        _this._itemIndex = -1;
	        _this._grid = grid;
	        _this._itemIndex = itemIndex;
	        _this._column = column;
	        return _this;
	    }
	    CellIndex.temp = function (grid, itemIndex, column) {
	        if (grid === void 0) { grid = null; }
	        if (itemIndex === void 0) { itemIndex = 0; }
	        if (column === void 0) { column = null; }
	        CellIndex.$_temp._grid = grid;
	        CellIndex.$_temp._itemIndex = itemIndex;
	        CellIndex.$_temp._column = column;
	        //CellIndex.$_item = null;
	        return CellIndex.$_temp;
	    };
	    CellIndex.areEquals = function (idx1, idx2) {
	        return (idx1 === idx2) ||
	            (idx1 && idx2 && idx1._grid === idx2._grid && idx1._itemIndex === idx2._itemIndex && idx1._column === idx2._column);
	    };
	    CellIndex.prototype.dispose = function () {
	        this._grid = null;
	        this._column = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellIndex.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "itemIndex", {
	        /** itemIndex */
	        get: function () {
	            return this._itemIndex;
	        },
	        set: function (value) {
	            this._itemIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "column", {
	        /** column */
	        get: function () {
	            return this._column;
	        },
	        set: function (value) {
	            this._column = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "dataColumn", {
	        /** dataColumn */
	        get: function () {
	            return this._column instanceof DataColumn_1.DataColumn ? this._column : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "valueColumn", {
	        /** valueColumn */
	        get: function () {
	            return this._column instanceof GridColumn_1.ValueColumn ? this._column : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "dataField", {
	        /** dataField */
	        get: function () {
	            return this._column instanceof DataColumn_1.DataColumn ? this._column.dataIndex : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "item", {
	        /** item */
	        get: function () {
	            return this._grid && this._grid.getItem(this._itemIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "dataRow", {
	        /** dataRow */
	        get: function () {
	            var item = this.item;
	            return item ? item.dataRow : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "dataId", {
	        /** dataId */
	        get: function () {
	            var item = this.item;
	            return item ? item.dataId : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "value", {
	        /** value */
	        get: function () {
	            var column = this._column;
	            if (column instanceof DataColumn_1.DataColumn) {
	                var fld = column.dataIndex;
	                if (fld < 0) {
	                    throw new Error("Not exists data field: " + column.fieldName);
	                }
	                var item = this.item;
	                if (!item) {
	                    throw new Error("Invalid item index: " + this._itemIndex);
	                }
	                return item.getData(fld);
	            }
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "fixed", {
	        get: function () {
	            if (this._grid && this._column && this._column.visible) {
	                var lm = this._grid.layoutManager;
	                var rootIndex = this._column.displayIndex; // this._column.root().displayIndex();
	                return rootIndex < lm.fixedColCount || rootIndex >= lm.rightFirstCol ||
	                    (this._itemIndex >= 0 && this._itemIndex < lm.fixedItemCount);
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "rowFixed", {
	        get: function () {
	            if (this._grid && this._column && this._column.visible) {
	                var lm = this._grid.layoutManager;
	                return this._itemIndex >= 0 && this._itemIndex < lm.fixedItemCount;
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "colFixed", {
	        get: function () {
	            if (this._grid && this._column && this._column.visible) {
	                var lm = this._grid.layoutManager;
	                var rootIndex = this._column.displayIndex; // this._column.root().displayIndex();
	                return rootIndex < lm.fixedColCount;
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "rightFixed", {
	        get: function () {
	            if (this._grid && this._column && this._column.visible) {
	                var lm = this._grid.layoutManager;
	                var rootIndex = this._column.displayIndex; // this._column.root().displayIndex();
	                return rootIndex >= lm.rightFirstCol;
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "isLast", {
	        get: function () {
	            if (this._column) {
	                if (this._grid && this._grid.visibleColumnCount > 0) {
	                    var column = this._grid.getVisibleColumn(this._grid.visibleColumnCount - 1);
	                    //column = column instanceof ValueColumn ? column : column.root.last;
	                    return column == this._column;
	                }
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "isTop", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellIndex.prototype, "isBottom", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellIndex.prototype.set = function (itemIndex, column, grid) {
	        grid !== undefined && (this._grid = grid);
	        this._itemIndex = itemIndex;
	        this._column = column;
	        return this;
	    };
	    CellIndex.prototype.assign = function (source) {
	        if (source) {
	            source.grid && (this._grid = source._grid);
	            this._itemIndex = source._itemIndex;
	            this._column = source._column;
	            // this._verticalStep = source._verticalStep;
	            // this._item = source._item ? source._item : null;
	        }
	        else {
	            //this._grid = null;
	            this._itemIndex = -1;
	            this._column = null;
	            // this._item = null;
	        }
	        return this;
	    };
	    CellIndex.prototype.clone = function () {
	        return new CellIndex(this._grid, this._itemIndex, this._column);
	    };
	    CellIndex.prototype.proxy = function () {
	        return {
	            itemIndex: isNaN(this._itemIndex) ? -1 : this._itemIndex,
	            column: (this._column ? this._column.name : null),
	            dataRow: this.dataRow,
	            fieldIndex: (this.dataColumn ? this._column.dataIndex : -1),
	            fieldName: (this.dataColumn ? this._column.fieldName : null)
	        };
	    };
	    CellIndex.prototype.normalize = function (grid) {
	        if (grid) {
	            this._grid = grid;
	            if (!this._column) {
	                this._column = grid.getFirstColumn();
	            }
	            this._itemIndex = Math.max(0, Math.min(this._itemIndex, grid.itemCount - 1));
	        }
	        return this;
	    };
	    CellIndex.prototype.right = function () {
	        // var column = $$_cellIndex_getRight(this._grid, this._column);
	        // if (column) {
	        // 	this._column = column;
	        // }
	        if (this._column && this._column.displayIndex < this._grid.visibleColumnCount - 1) {
	            this._column = this._grid.getVisibleColumn(this._column.displayIndex + 1);
	        }
	        else {
	            this._column = this._grid.getVisibleColumn(0);
	        }
	    };
	    CellIndex.prototype.next = function () {
	        // var column = $$_cellIndex_getNext(this._grid, this._column);
	        // if (column) {
	        // 	this._column = column;
	        // 	return true;
	        // }
	        if (this._column && this._column.displayIndex < this._grid.visibleColumnCount - 1) {
	            this._column = this._grid.getVisibleColumn(this._column.displayIndex + 1);
	        }
	        else {
	            this._column = this._grid.getVisibleColumn(0);
	        }
	        return true;
	    };
	    CellIndex.prototype.prev = function () {
	        if (this._column && this._column.displayIndex > 0) {
	            this._column = this._grid.getVisibleColumn(this._column.displayIndex - 1);
	        }
	        else {
	            this._column = this._grid.getVisibleColumn(0);
	        }
	        return true;
	    };
	    CellIndex.prototype.home = function () {
	        // var grid = this._grid;
	        // if (grid && grid.visibleColumnCount() > 0) {
	        // 	var column = grid.getVisibleColumn(0);
	        // 	this._column = column instanceof ValueColumn ? column : column.root().first();
	        // }
	        this._column = this._grid.getVisibleColumn(0);
	    };
	    CellIndex.prototype.up = function (editing, crossTab) {
	        // if ((this._verticalStep == VerticalMovingStep.ROW && !editing) || this.isBottom() || crossTab) {
	        // 	if (this._itemIndex < this._grid.itemCount() - 1) {
	        // 		this.incRow(1);
	        // 		if (this._verticalStep == VerticalMovingStep.CELL)
	        // 			this._column = ColumnGroup.getTop(this._column);
	        // 	}
	        // } else {
	        // 	this._column = ColumnGroup.getLower(this._column);
	        // }
	        this.incRow(-1);
	    };
	    CellIndex.prototype.down = function (editing, crossTab) {
	        // if ((this._verticalStep == VerticalMovingStep.ROW && !editing) || this.isBottom() || crossTab) {
	        // 	if (this._itemIndex < this._grid.itemCount() - 1) {
	        // 		this.incRow(1);
	        // 		if (this._verticalStep == VerticalMovingStep.CELL)
	        // 			this._column = ColumnGroup.getTop(this._column);
	        // 	}
	        // } else {
	        // 	this._column = ColumnGroup.getLower(this._column);
	        // }
	        this.incRow(1);
	    };
	    CellIndex.prototype.upper = function (editing, crossTab) {
	        // if ((this._verticalStep == VerticalMovingStep.ROW && !editing) || this.isBottom() || crossTab) {
	        // 	if (this._itemIndex < this._grid.itemCount() - 1) {
	        // 		this.incRow(1);
	        // 		if (this._verticalStep == VerticalMovingStep.CELL)
	        // 			this._column = ColumnGroup.getTop(this._column);
	        // 	}
	        // } else {
	        // 	this._column = ColumnGroup.getLower(this._column);
	        // }
	        this.incRow(-1);
	    };
	    CellIndex.prototype.lower = function (editing, crossTab) {
	        // if ((this._verticalStep == VerticalMovingStep.ROW && !editing) || this.isBottom() || crossTab) {
	        // 	if (this._itemIndex < this._grid.itemCount() - 1) {
	        // 		this.incRow(1);
	        // 		if (this._verticalStep == VerticalMovingStep.CELL)
	        // 			this._column = ColumnGroup.getTop(this._column);
	        // 	}
	        // } else {
	        // 	this._column = ColumnGroup.getLower(this._column);
	        // }
	        this.incRow(1);
	    };
	    CellIndex.prototype.last = function () {
	        if (this._grid) {
	            this._itemIndex = this._grid.itemCount - 1;
	        }
	    };
	    CellIndex.prototype.incRow = function (delta) {
	        if (this._grid) {
	            this._itemIndex = Math.max(0, Math.min(this._grid.itemCount - 1, this._itemIndex + delta));
	        }
	    };
	    CellIndex.prototype.isEditableLast = function () {
	        var grid = this._grid;
	        if (grid && this._column) {
	            var columns = grid.collectColumns(true, true, true);
	            var idx = columns.indexOf(this._column);
	            for (var i = idx + 1, cnt = columns.length; i < cnt; i++) {
	                var column = columns[i];
	                if (column instanceof DataColumn_1.SeriesColumn) {
	                    return false;
	                }
	                if (column.isEditable() && !column.isReadOnly() && column.isVisible()) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CellIndex.prototype.assignFrom = function (source) {
	        if (source instanceof CellIndex) {
	            this._grid = source._grid;
	            this._column = source._column;
	            this._itemIndex = source._itemIndex;
	        }
	        else {
	            _super.prototype.assignFrom.call(this, source);
	        }
	    };
	    CellIndex.prototype.toString = function () {
	        return "(" + this._itemIndex + ", " + this._column + ")";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    CellIndex.$_temp = new CellIndex();
	    return CellIndex;
	}(Base_1.Base));
	exports.CellIndex = CellIndex;
	var CellRange = /** @class */ (function (_super) {
	    __extends(CellRange, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellRange() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._row1 = 0;
	        _this._row2 = 0;
	        return _this;
	    }
	    CellRange.$_setRange = function (range, r1, c1, r2, c2) {
	        range._row1 = r1 <= r2 ? r1 : r2;
	        range._row2 = r1 <= r2 ? r2 : r1;
	        // range._col1 = c1.dataRoot().distance() <= c2.dataRoot().distance() ? c1 : c2;
	        // range._col2 = c1.dataRoot().distance() <= c2.dataRoot().distance() ? c2 : c1;
	        range._col1 = c1.index <= c2.index ? c1 : c2;
	        range._col2 = c1.index <= c2.index ? c2 : c1;
	        return range;
	    };
	    CellRange.create = function (index1, index2) {
	        if (!index2 || index1 === index2) {
	            var r = new CellRange();
	            r._row1 = r._row2 = index1.itemIndex;
	            r._col1 = r._col2 = index1.column;
	            return r;
	        }
	        else {
	            return CellRange.$_setRange(new CellRange(), index1.itemIndex, index1.column, index2.itemIndex, index2.column);
	        }
	    };
	    CellRange.temp = function (index1, index2) {
	        var r = CellRange.$_TEMP;
	        if (!index2 || index1 === index2) {
	            r._row1 = r._row2 = index1.itemIndex;
	            r._col1 = r._col2 = index1.column;
	            return r;
	        }
	        else {
	            return CellRange.$_setRange(r, index1.itemIndex, index1.column, index2.itemIndex, index2.column);
	        }
	    };
	    CellRange.createRange = function (r1, c1, r2, c2) {
	        return CellRange.$_setRange(new CellRange(), r1, c1, r2, c2);
	    };
	    Object.defineProperty(CellRange.prototype, "empty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return (this._row2 < this._row1) || (!this._col2 && !this._col2);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "r1", {
	        get: function () {
	            return this._row1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "c1", {
	        get: function () {
	            return this._col1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "r2", {
	        get: function () {
	            return this._row2;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "c2", {
	        get: function () {
	            return this._col2;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "top", {
	        get: function () {
	            return this._row1 <= this._row2 ? this._row1 : this._row2;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "bottom", {
	        get: function () {
	            return this._row1 <= this._row2 ? this._row2 : this._row1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "firstCell", {
	        get: function () {
	            var index = new CellIndex();
	            index.itemIndex = this._row1 <= this._row2 ? this._row1 : this._row2;
	            //if (this._col1.dataRoot.distance <= this._col2.dataRoot.distance) {
	            if (this._col1.index <= this._col2.index) {
	                index.column = this._col1;
	            }
	            else {
	                index.column = this._col2;
	            }
	            return index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellRange.prototype, "lastCell", {
	        get: function () {
	            var index = new CellIndex();
	            index.itemIndex = this._row1 >= this._row2 ? this._row1 : this._row2;
	            //if (this._col1.dataRoot.distance >= this._col2.dataRoot.distance) {
	            if (this._col1.index >= this._col2.index) {
	                index.column = this._col1;
	            }
	            else {
	                index.column = this._col2;
	            }
	            return index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellRange.prototype.contains = function (itemIndex, column) {
	        if (column) {
	            // var i = column.root.displayIndex;
	            // return (itemIndex >= this._row1) && (itemIndex <= this._row2) &&
	            // 	(i >= this._col1.root.displayIndex) && (i <= this._col2.root.displayIndex);
	            var i = column.index;
	            return (itemIndex >= this._row1) && (itemIndex <= this._row2) &&
	                (i >= this._col1.index) && (i <= this._col2.index);
	        }
	        return false;
	    };
	    CellRange.prototype.containsIndex = function (index) {
	        return index && this.contains(index.itemIndex, index.column);
	    };
	    CellRange.prototype.normalize = function () {
	        if (this._row1 > this._row2) {
	            var r = this._row1;
	            this._row1 = this._row2;
	            this._row2 = r;
	        }
	        //if (this._col1.dataRoot().distance() > this._col2.dataRoot().distance()) {
	        if (this._col1.index > this._col2.index) {
	            var c = this._col1;
	            this._col1 = this._col2;
	            this._col2 = c;
	        }
	        return this;
	    };
	    CellRange.prototype.normalizeData = function () {
	        this.normalize();
	        // var g = this._col1;
	        // if (g instanceof ColumnGroup) {
	        // 	this._col1 = ColumnGroup.getFirstDataRoot(g);
	        // }
	        // g = this._col2;
	        // if (g instanceof ColumnGroup) {
	        // 	this._col2 = ColumnGroup.getLastDataRoot(g);
	        // }
	        return this;
	    };
	    CellRange.prototype.intersectsWith = function (other) {
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    CellRange.NULL = new CellRange();
	    CellRange.$_TEMP = new CellRange();
	    return CellRange;
	}(Base_1.Base));
	exports.CellRange = CellRange;
	});

	unwrapExports(CellIndex_1);
	var CellIndex_2 = CellIndex_1.CellIndex;
	var CellIndex_3 = CellIndex_1.CellRange;

	var Types = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Types.ts
	// 2019. 07. 05. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var ValueType;
	(function (ValueType) {
	    ValueType["TEXT"] = "text";
	    ValueType["NUMBER"] = "number";
	    ValueType["BOOLEAN"] = "boolean";
	    ValueType["DATETIME"] = "datetime";
	    ValueType["OBJECT"] = "object";
	    ValueType["CHAR"] = "char";
	    ValueType["UNUM"] = "unum";
	    ValueType["INT"] = "int";
	    ValueType["UINT"] = "uint";
	    ValueType["DATE"] = "date";
	})(ValueType = exports.ValueType || (exports.ValueType = {}));
	var SortDirection;
	(function (SortDirection) {
	    SortDirection["ASCENDING"] = "ascending";
	    SortDirection["DESCENDING"] = "descending";
	})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
	var SortCase;
	(function (SortCase) {
	    SortCase["SENSITIVE"] = "sensitive";
	    SortCase["INSENSITIVE"] = "insensitive";
	})(SortCase = exports.SortCase || (exports.SortCase = {}));
	var PagingSource;
	(function (PagingSource) {
	    PagingSource["ROWS"] = "rows";
	    PagingSource["ITEMS"] = "items";
	})(PagingSource = exports.PagingSource || (exports.PagingSource = {}));
	var SortMode;
	(function (SortMode) {
	    SortMode["AUTO"] = "auto";
	    SortMode["EXPLICIT"] = "explicit";
	})(SortMode = exports.SortMode || (exports.SortMode = {}));
	var FilterMode;
	(function (FilterMode) {
	    FilterMode["AUTO"] = "auto";
	    FilterMode["EXPLICIT"] = "explicit";
	})(FilterMode = exports.FilterMode || (exports.FilterMode = {}));
	var RowGroupAdornments;
	(function (RowGroupAdornments) {
	    RowGroupAdornments["BOTH"] = "both";
	    RowGroupAdornments["HEADER"] = "header";
	    RowGroupAdornments["FOOTER"] = "footer";
	    RowGroupAdornments["NONE"] = "none";
	    RowGroupAdornments["SUMMARY"] = "summary";
	})(RowGroupAdornments = exports.RowGroupAdornments || (exports.RowGroupAdornments = {}));
	exports.isHeaderAdornment = function (v) {
	    return v == RowGroupAdornments.BOTH || v == RowGroupAdornments.HEADER;
	};
	exports.isFooterAdornment = function (v) {
	    return v == RowGroupAdornments.BOTH || v == RowGroupAdornments.FOOTER;
	};
	exports.isFooterOnlyAdornment = function (v) {
	    return v == RowGroupAdornments.FOOTER || v == RowGroupAdornments.SUMMARY;
	};
	var ValidationLevel;
	(function (ValidationLevel) {
	    ValidationLevel["ERROR"] = "error";
	    ValidationLevel["WARNING"] = "warning";
	    ValidationLevel["INFO"] = "info";
	    ValidationLevel["IGNORE"] = "ignore";
	})(ValidationLevel = exports.ValidationLevel || (exports.ValidationLevel = {}));
	var SummaryMode;
	(function (SummaryMode) {
	    SummaryMode["NONE"] = "none";
	    SummaryMode["AGGREGATE"] = "aggregate";
	    SummaryMode["STATISTICAL"] = "statistical";
	})(SummaryMode = exports.SummaryMode || (exports.SummaryMode = {}));
	var SubTextLocation;
	(function (SubTextLocation) {
	    SubTextLocation["DEFAULT"] = "default";
	    SubTextLocation["NONE"] = "none";
	    SubTextLocation["LEFT"] = "left";
	    SubTextLocation["RIGHT"] = "right";
	    SubTextLocation["UPPER"] = "upper";
	    SubTextLocation["LOWER"] = "lower";
	    SubTextLocation["LEFT_FILL"] = "leftFill";
	    SubTextLocation["RIGHT_FILL"] = "rightFill";
	    SubTextLocation["UPPER_FILL"] = "upperFill";
	    SubTextLocation["LOWER_FILL"] = "lowerFill";
	})(SubTextLocation = exports.SubTextLocation || (exports.SubTextLocation = {}));
	var ColumnHeaderItemLocation;
	(function (ColumnHeaderItemLocation) {
	    ColumnHeaderItemLocation["NONE"] = "none";
	    ColumnHeaderItemLocation["LEFT_EDGE"] = "leftEdge";
	    ColumnHeaderItemLocation["RIGHT_EDGE"] = "rightEdge";
	    ColumnHeaderItemLocation["TOP_EDGE"] = "topEdge";
	    ColumnHeaderItemLocation["BOTTOM_EDGE"] = "bottomEdge";
	    ColumnHeaderItemLocation["LEFT"] = "left";
	    ColumnHeaderItemLocation["RIGHT"] = "right";
	    ColumnHeaderItemLocation["TOP"] = "top";
	    ColumnHeaderItemLocation["BOTTOM"] = "bottom";
	    ColumnHeaderItemLocation["CENTER"] = "center";
	})(ColumnHeaderItemLocation = exports.ColumnHeaderItemLocation || (exports.ColumnHeaderItemLocation = {}));
	var ClickBehavior;
	(function (ClickBehavior) {
	    ClickBehavior["NONE"] = "none";
	    ClickBehavior["SORT"] = "sort";
	})(ClickBehavior = exports.ClickBehavior || (exports.ClickBehavior = {}));
	var BlankState;
	(function (BlankState) {
	    BlankState["NONE"] = "none";
	    BlankState["HEAD"] = "head";
	    BlankState["BODY"] = "body";
	    BlankState["TAIL"] = "tail";
	})(BlankState = exports.BlankState || (exports.BlankState = {}));
	var GridFitStyle;
	(function (GridFitStyle) {
	    GridFitStyle["NONE"] = "none";
	    GridFitStyle["EVEN"] = "even";
	    GridFitStyle["EVEN_FILL"] = "evenFill";
	    GridFitStyle["FILL"] = "fill";
	})(GridFitStyle = exports.GridFitStyle || (exports.GridFitStyle = {}));
	var RowFocusMask;
	(function (RowFocusMask) {
	    RowFocusMask["ROW"] = "row";
	    RowFocusMask["DATA"] = "data";
	    RowFocusMask["FILL"] = "fill";
	    RowFocusMask["CELL"] = "cell";
	})(RowFocusMask = exports.RowFocusMask || (exports.RowFocusMask = {}));
	var Keys;
	(function (Keys) {
	    Keys[Keys["BACK"] = 8] = "BACK";
	    Keys[Keys["TAB"] = 9] = "TAB";
	    Keys[Keys["ENTER"] = 13] = "ENTER";
	    Keys[Keys["ESC"] = 27] = "ESC";
	    Keys[Keys["ESCAPE"] = 27] = "ESCAPE";
	    Keys[Keys["SPACE"] = 32] = "SPACE";
	    Keys[Keys["PAGEUP"] = 33] = "PAGEUP";
	    Keys[Keys["PAGEDOWN"] = 34] = "PAGEDOWN";
	    Keys[Keys["END"] = 35] = "END";
	    Keys[Keys["HOME"] = 36] = "HOME";
	    Keys[Keys["LEFT"] = 37] = "LEFT";
	    Keys[Keys["UP"] = 38] = "UP";
	    Keys[Keys["RIGHT"] = 39] = "RIGHT";
	    Keys[Keys["DOWN"] = 40] = "DOWN";
	    Keys[Keys["INSERT"] = 45] = "INSERT";
	    Keys[Keys["DELETE"] = 46] = "DELETE";
	    Keys[Keys["F2"] = 113] = "F2";
	    Keys[Keys["F3"] = 114] = "F3";
	    Keys[Keys["A"] = 65] = "A";
	    Keys[Keys["D"] = 68] = "D";
	    Keys[Keys["I"] = 73] = "I";
	    Keys[Keys["T"] = 84] = "T";
	    Keys[Keys["U"] = 85] = "U";
	    Keys[Keys["V"] = 86] = "V";
	    Keys[Keys["W"] = 87] = "W";
	    Keys[Keys["X"] = 88] = "X";
	    Keys[Keys["Y"] = 89] = "Y";
	    Keys[Keys["Z"] = 90] = "Z";
	})(Keys = exports.Keys || (exports.Keys = {}));
	var Cursor;
	(function (Cursor) {
	    Cursor["DEFAULT"] = "default";
	    Cursor["AUTO"] = "auto";
	    Cursor["POINTER"] = "pointer";
	    Cursor["WAIT"] = "wait";
	    Cursor["MOVE"] = "move";
	    Cursor["COL_RESIZE"] = "col-resize";
	    Cursor["ROW_RESIZE"] = "row-resize";
	    Cursor["CROSSHAIR"] = "crosshair";
	    Cursor["HORZ_RESIZE"] = "ew-resize";
	    Cursor["VERT_RESIZE"] = "ns-resize";
	    Cursor["NESW_RESIZE"] = "nesw-resize";
	    Cursor["NWSE_RESIZE"] = "nwse-resize";
	    Cursor["NO_DROP"] = "no-drop";
	    Cursor["NOT_ALLOWED"] = "not-allowed";
	})(Cursor = exports.Cursor || (exports.Cursor = {}));
	var TableCellType;
	(function (TableCellType) {
	    TableCellType["DATA"] = "data";
	    TableCellType["HEADER"] = "header";
	    TableCellType["FOOTER"] = "footer";
	    TableCellType["INDICATOR"] = "indicator";
	    TableCellType["STATE"] = "state";
	    TableCellType["CHECK"] = "check";
	})(TableCellType = exports.TableCellType || (exports.TableCellType = {}));
	var RowHoverType;
	(function (RowHoverType) {
	    RowHoverType["NONE"] = "none";
	    RowHoverType["ROW"] = "row";
	    RowHoverType["DATA"] = "data";
	    RowHoverType["FILL"] = "fill";
	    RowHoverType["CELL"] = "cell";
	})(RowHoverType = exports.RowHoverType || (exports.RowHoverType = {}));
	var TextInputCase;
	(function (TextInputCase) {
	    TextInputCase["NORMAL"] = "normal";
	    TextInputCase["UPPER"] = "upper";
	    TextInputCase["LOWER"] = "lower";
	    TextInputCase["DEFAULT"] = "default";
	})(TextInputCase = exports.TextInputCase || (exports.TextInputCase = {}));
	var Alignment;
	(function (Alignment) {
	    Alignment["NEAR"] = "near";
	    Alignment["CENTER"] = "center";
	    Alignment["FAR"] = "far";
	})(Alignment = exports.Alignment || (exports.Alignment = {}));
	var DefaultShowDate;
	(function (DefaultShowDate) {
	    DefaultShowDate["NORMAL"] = "normal";
	    DefaultShowDate["TODAY"] = "today";
	    DefaultShowDate["TODAY_WHEN_NULL"] = "todayWhenNull";
	})(DefaultShowDate = exports.DefaultShowDate || (exports.DefaultShowDate = {}));
	});

	unwrapExports(Types);
	var Types_1 = Types.ValueType;
	var Types_2 = Types.SortDirection;
	var Types_3 = Types.SortCase;
	var Types_4 = Types.PagingSource;
	var Types_5 = Types.SortMode;
	var Types_6 = Types.FilterMode;
	var Types_7 = Types.RowGroupAdornments;
	var Types_8 = Types.isHeaderAdornment;
	var Types_9 = Types.isFooterAdornment;
	var Types_10 = Types.isFooterOnlyAdornment;
	var Types_11 = Types.ValidationLevel;
	var Types_12 = Types.SummaryMode;
	var Types_13 = Types.SubTextLocation;
	var Types_14 = Types.ColumnHeaderItemLocation;
	var Types_15 = Types.ClickBehavior;
	var Types_16 = Types.BlankState;
	var Types_17 = Types.GridFitStyle;
	var Types_18 = Types.RowFocusMask;
	var Types_19 = Types.Keys;
	var Types_20 = Types.Cursor;
	var Types_21 = Types.TableCellType;
	var Types_22 = Types.RowHoverType;
	var Types_23 = Types.TextInputCase;
	var Types_24 = Types.Alignment;
	var Types_25 = Types.DefaultShowDate;

	var Expression = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Expression.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var ExpressionSyntaxError = /** @class */ (function (_super) {
	    __extends(ExpressionSyntaxError, _super);
	    function ExpressionSyntaxError(message, tokenPos) {
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        _this.tokenPos = tokenPos;
	        return _this;
	    }
	    return ExpressionSyntaxError;
	}(Error));
	exports.ExpressionSyntaxError = ExpressionSyntaxError;
	var ExpressionEvaluationError = /** @class */ (function (_super) {
	    __extends(ExpressionEvaluationError, _super);
	    function ExpressionEvaluationError(message) {
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        return _this;
	    }
	    return ExpressionEvaluationError;
	}(Error));
	exports.ExpressionEvaluationError = ExpressionEvaluationError;
	var TokenKind;
	(function (TokenKind) {
	    TokenKind[TokenKind["Unknown"] = 0] = "Unknown";
	    TokenKind[TokenKind["Add"] = 1] = "Add";
	    TokenKind[TokenKind["Slash"] = 2] = "Slash";
	    TokenKind[TokenKind["Star"] = 3] = "Star";
	    TokenKind[TokenKind["Minus"] = 4] = "Minus";
	    TokenKind[TokenKind["Plus"] = 5] = "Plus";
	    TokenKind[TokenKind["Identifier"] = 10] = "Identifier";
	    TokenKind[TokenKind["And"] = 11] = "And";
	    TokenKind[TokenKind["In"] = 12] = "In";
	    TokenKind[TokenKind["Not"] = 13] = "Not";
	    TokenKind[TokenKind["Div"] = 14] = "Div";
	    TokenKind[TokenKind["Mod"] = 15] = "Mod";
	    TokenKind[TokenKind["Shl"] = 16] = "Shl";
	    TokenKind[TokenKind["Shr"] = 17] = "Shr";
	    TokenKind[TokenKind["Or"] = 18] = "Or";
	    TokenKind[TokenKind["Xor"] = 19] = "Xor";
	    TokenKind[TokenKind["ToStr"] = 20] = "ToStr";
	    TokenKind[TokenKind["ToNum"] = 21] = "ToNum";
	    TokenKind[TokenKind["ToBool"] = 23] = "ToBool";
	    TokenKind[TokenKind["Length"] = 24] = "Length";
	    TokenKind[TokenKind["Is"] = 26] = "Is";
	    TokenKind[TokenKind["IsNot"] = 27] = "IsNot";
	    TokenKind[TokenKind["BraceClose"] = 30] = "BraceClose";
	    TokenKind[TokenKind["BraceOpen"] = 31] = "BraceOpen";
	    TokenKind[TokenKind["Comma"] = 32] = "Comma";
	    TokenKind[TokenKind["CRLF"] = 33] = "CRLF";
	    TokenKind[TokenKind["Null"] = 34] = "Null";
	    TokenKind[TokenKind["Defined"] = 35] = "Defined";
	    TokenKind[TokenKind["Empty"] = 36] = "Empty";
	    TokenKind[TokenKind["NaN"] = 37] = "NaN";
	    TokenKind[TokenKind["Equal"] = 40] = "Equal";
	    TokenKind[TokenKind["Greater"] = 41] = "Greater";
	    TokenKind[TokenKind["GreaterEqual"] = 42] = "GreaterEqual";
	    TokenKind[TokenKind["Lower"] = 43] = "Lower";
	    TokenKind[TokenKind["LowerEqual"] = 44] = "LowerEqual";
	    TokenKind[TokenKind["NotEqual"] = 45] = "NotEqual";
	    TokenKind[TokenKind["Like"] = 46] = "Like";
	    TokenKind[TokenKind["NotLike"] = 47] = "NotLike";
	    TokenKind[TokenKind["ILike"] = 48] = "ILike";
	    TokenKind[TokenKind["NotILike"] = 49] = "NotILike";
	    TokenKind[TokenKind["Match"] = 50] = "Match";
	    TokenKind[TokenKind["NotMatch"] = 51] = "NotMatch";
	    TokenKind[TokenKind["IMatch"] = 52] = "IMatch";
	    TokenKind[TokenKind["NotIMatch"] = 53] = "NotIMatch";
	    TokenKind[TokenKind["String"] = 60] = "String";
	    TokenKind[TokenKind["StringLiteral"] = 61] = "StringLiteral";
	    TokenKind[TokenKind["Ascii"] = 62] = "Ascii";
	    TokenKind[TokenKind["FloatLiteral"] = 63] = "FloatLiteral";
	    TokenKind[TokenKind["IntegerLiteral"] = 64] = "IntegerLiteral";
	    TokenKind[TokenKind["Point"] = 65] = "Point";
	    TokenKind[TokenKind["RoundOpen"] = 66] = "RoundOpen";
	    TokenKind[TokenKind["RoundClose"] = 67] = "RoundClose";
	    TokenKind[TokenKind["DotDot"] = 68] = "DotDot";
	    TokenKind[TokenKind["BracketOpen"] = 69] = "BracketOpen";
	    TokenKind[TokenKind["BracketClose"] = 70] = "BracketClose";
	    TokenKind[TokenKind["Space"] = 71] = "Space";
	    TokenKind[TokenKind["Symbol"] = 80] = "Symbol";
	    TokenKind[TokenKind["ToDateStr"] = 90] = "ToDateStr";
	    TokenKind[TokenKind["ToYear"] = 91] = "ToYear";
	    TokenKind[TokenKind["ToMonth"] = 92] = "ToMonth";
	    TokenKind[TokenKind["ToDay"] = 93] = "ToDay";
	    TokenKind[TokenKind["ToHour"] = 94] = "ToHour";
	    TokenKind[TokenKind["ToRoundDown"] = 95] = "ToRoundDown";
	})(TokenKind || (TokenKind = {}));
	var _pad = function (value, len, c) {
	    len = Math.max(len || 2, 1);
	    c = c || '0';
	    return new Array(len - String(value).length + 1).join(c) + value;
	};
	var $$_createTokenArray = function () {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var arr = [];
	    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
	        var arg = args_1[_a];
	        arr[arg] = true;
	    }
	    return arr;
	};
	var IS_CHECK = $$_createTokenArray(TokenKind.Is, TokenKind.IsNot);
	var IS_RELATIVE = $$_createTokenArray(TokenKind.Equal, TokenKind.NotEqual, TokenKind.Like, TokenKind.NotLike, TokenKind.ILike, TokenKind.NotILike, TokenKind.Match, TokenKind.NotMatch, TokenKind.IMatch, TokenKind.NotIMatch, TokenKind.Greater, TokenKind.GreaterEqual, TokenKind.Lower, TokenKind.LowerEqual);
	var IS_ADDITIVE = $$_createTokenArray(TokenKind.Minus, TokenKind.Plus, TokenKind.Or, TokenKind.Xor);
	var IS_MULTIPLICATIVE = $$_createTokenArray(TokenKind.And, TokenKind.Star, TokenKind.Slash, TokenKind.Div, TokenKind.Mod, TokenKind.Shl, TokenKind.Shr);
	var ExpressionLexer = /** @class */ (function () {
	    function ExpressionLexer() {
	        this.IS_IDENT = [];
	        this.IS_INTEGER = [];
	        this.IS_NUMBER = [];
	        this.IS_WHITE = [];
	        this.IS_END = [];
	        this.QUOTATION = "\"".charCodeAt(0);
	        this.SQUOTATION = "'".charCodeAt(0);
	        this.BACKSLASH = "\\".charCodeAt(0);
	        this.Keywords = {
	            "str": TokenKind.ToStr,
	            "num": TokenKind.ToNum,
	            "bool": TokenKind.ToBool,
	            "not": TokenKind.Not,
	            "len": TokenKind.Length,
	            "and": TokenKind.And,
	            "in": TokenKind.In,
	            "mod": TokenKind.Mod,
	            "or": TokenKind.Or,
	            "div": TokenKind.Div,
	            "shl": TokenKind.Shl,
	            "shr": TokenKind.Shr,
	            "xor": TokenKind.Xor,
	            "is": TokenKind.Is,
	            "like": TokenKind.Like,
	            "ilike": TokenKind.ILike,
	            "match": TokenKind.Match,
	            "imatch": TokenKind.IMatch,
	            "defined": TokenKind.Defined,
	            "null": TokenKind.Null,
	            "empty": TokenKind.Empty,
	            "nan": TokenKind.NaN,
	            "datestr": TokenKind.ToDateStr,
	            "year": TokenKind.ToYear,
	            "month": TokenKind.ToMonth,
	            "day": TokenKind.ToDay,
	            "hour": TokenKind.ToHour,
	            "rounddown": TokenKind.ToRoundDown,
	        };
	        this._procs = null;
	        this._source = null;
	        this._len = 0;
	        this._tokenId = 0;
	        this._run = 0;
	        this._runAhead = 0;
	        this._nextRun = 0;
	        this._lineNo = 0;
	        this._linePos = 0;
	        this._tokenPos = 0;
	        for (var i = 0; i < 256; i++) {
	            this.IS_IDENT[i] = (i == "_".charCodeAt(0)) ||
	                (i >= "0".charCodeAt(0) && i <= "9".charCodeAt(0)) ||
	                (i >= "a".charCodeAt(0) && i <= "z".charCodeAt(0)) ||
	                (i >= "A".charCodeAt(0) && i <= "Z".charCodeAt(0));
	            this.IS_INTEGER[i] =
	                (i >= "0".charCodeAt(0) && i <= "9".charCodeAt(0)) ||
	                    (i >= "a".charCodeAt(0) && i <= "f".charCodeAt(0)) ||
	                    (i >= "A".charCodeAt(0) && i <= "F".charCodeAt(0));
	            this.IS_NUMBER[i] =
	                (i >= "0".charCodeAt(0) && i <= "9".charCodeAt(0)) ||
	                    i == ".".charCodeAt(0) || i == "e".charCodeAt(0) || i == "E".charCodeAt(0);
	            this.IS_WHITE[i] = (i >= 1 && i <= 9) || (i == 11) || (i >= 14 && i <= 32);
	            this.IS_END[i] = (i == 0); // || (i == 10) || (i == 13); // 개행문자는 끝이 아니므로 제외
	        }
	        this.initProcs();
	    }
	    ExpressionLexer.prototype.next = function () {
	        var c = this._source.charCodeAt(this._run);
	        this._tokenPos = this._run;
	        if (c < 256) {
	            this._procs[c].call(this);
	        }
	        else {
	            this.identProc();
	        }
	    };
	    ExpressionLexer.prototype.unkownProc = function () {
	        this._tokenId = TokenKind.Unknown;
	        this._run++;
	    };
	    ExpressionLexer.prototype.symbolProc = function () {
	        this._tokenId = TokenKind.Symbol;
	        this._run++;
	    };
	    ExpressionLexer.prototype.commaProc = function () {
	        this._tokenId = TokenKind.Comma;
	        this._run++;
	    };
	    ExpressionLexer.prototype.crProc = function () {
	        this._tokenId = TokenKind.CRLF;
	        if (this._source.charCodeAt(this._run + 1) == 10) {
	            this._run += 2;
	        }
	        else {
	            this._run++;
	        }
	        this._lineNo++;
	        this._linePos = this._run;
	    };
	    ExpressionLexer.prototype.lfProc = function () {
	        this._tokenId = TokenKind.CRLF;
	        this._run++;
	        this._lineNo++;
	        this._linePos = this._run;
	    };
	    ExpressionLexer.prototype.equalProc = function () {
	        this._tokenId = TokenKind.Equal;
	        this._run++;
	    };
	    ExpressionLexer.prototype.greaterProc = function () {
	        if (this._source.charAt(this._run + 1) == "=") {
	            this._tokenId = TokenKind.GreaterEqual;
	            this._run += 2;
	        }
	        else {
	            this._tokenId = TokenKind.Greater;
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.lowerProc = function () {
	        if (this._source.charAt(this._run + 1) == "=") {
	            this._tokenId = TokenKind.LowerEqual;
	            this._run += 2;
	        }
	        else if (this._source.charAt(this._run + 1) == ">") {
	            this._tokenId = TokenKind.NotEqual;
	            this._run += 2;
	        }
	        else {
	            this._tokenId = TokenKind.Lower;
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.nextIdent = function () {
	        var i = this._run;
	        while (i < this._len && (!this.IS_IDENT[this._source.charCodeAt(i)])) {
	            i++;
	        }
	        var j = i;
	        while (i < this._len && (this.IS_IDENT[this._source.charCodeAt(i)])) {
	            i++;
	        }
	        if (i > j) {
	            this._nextRun = i;
	            return this._source.substr(j, i - j).toLowerCase();
	        }
	        else {
	            return null;
	        }
	    };
	    ExpressionLexer.prototype.identProc = function () {
	        var i = this._run;
	        while (this._run < this._len && (this.IS_IDENT[this._source.charCodeAt(this._run)] || this._source.charCodeAt(this._run) > 255)) {
	            this._run++;
	        }
	        var s = this._source.substr(i, this._run - i).toLowerCase();
	        if (this.Keywords.hasOwnProperty(s)) {
	            this._tokenId = this.Keywords[s];
	            switch (this._tokenId) {
	                case TokenKind.Not:
	                    s = this.nextIdent();
	                    if (s) {
	                        switch (s) {
	                            case "like":
	                                this._tokenId = TokenKind.NotLike;
	                                this._run = this._nextRun;
	                                break;
	                            case "ilike":
	                                this._tokenId = TokenKind.NotILike;
	                                this._run = this._nextRun;
	                                break;
	                            case "match":
	                                this._tokenId = TokenKind.NotMatch;
	                                this._run = this._nextRun;
	                                break;
	                            case "imatch":
	                                this._tokenId = TokenKind.NotIMatch;
	                                this._run = this._nextRun;
	                                break;
	                        }
	                    }
	                    break;
	                case TokenKind.Is:
	                    s = this.nextIdent();
	                    if (s == "not") {
	                        this._tokenId = TokenKind.IsNot;
	                        this._run = this._nextRun;
	                    }
	                    break;
	            }
	        }
	        else {
	            this._tokenId = TokenKind.Identifier;
	        }
	    };
	    ExpressionLexer.prototype.integerProc = function () {
	        this._tokenId = TokenKind.IntegerLiteral;
	        this._run++;
	        while (this._run < this._len && this.IS_INTEGER[this._source.charCodeAt(this._run)]) {
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.numberProc = function () {
	        this._tokenId = TokenKind.IntegerLiteral;
	        this._run++;
	        while (this._run < this._len && this.IS_NUMBER[this._source.charCodeAt(this._run)]) {
	            if (this._source.charAt(this._run) == ".") {
	                if (this._source.charAt(this._run + 1) == ".") { // dotdot에서 처리함.
	                    break;
	                }
	                this._tokenId = TokenKind.FloatLiteral;
	            }
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.minusProc = function () {
	        this._tokenId = TokenKind.Minus;
	        this._run++;
	    };
	    ExpressionLexer.prototype.plusProc = function () {
	        this._tokenId = TokenKind.Plus;
	        this._run++;
	    };
	    ExpressionLexer.prototype.pointProc = function () {
	        var s = this._source.charAt(this._run + 1);
	        if (s == ".") {
	            this._tokenId = TokenKind.DotDot;
	            this._run += 2;
	        }
	        else {
	            this._tokenId = TokenKind.Point;
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.roundOpenProc = function () {
	        this._tokenId = TokenKind.RoundOpen;
	        this._run++;
	    };
	    ExpressionLexer.prototype.roundCloseProc = function () {
	        this._tokenId = TokenKind.RoundClose;
	        this._run++;
	    };
	    ExpressionLexer.prototype.slashProc = function () {
	        this._tokenId = TokenKind.Slash;
	        this._run++;
	    };
	    ExpressionLexer.prototype.spaceProc = function () {
	        this._tokenId = TokenKind.Space;
	        this._run++;
	        while (this._run < this._len && this.IS_WHITE[this._source.charCodeAt(this._run)]) {
	            this._run++;
	        }
	    };
	    ExpressionLexer.prototype.bracketOpenProc = function () {
	        this._tokenId = TokenKind.BracketOpen;
	        this._run++;
	    };
	    ExpressionLexer.prototype.bracketCloseProc = function () {
	        this._tokenId = TokenKind.BracketClose;
	        this._run++;
	    };
	    ExpressionLexer.prototype.starProc = function () {
	        this._tokenId = TokenKind.Star;
	        this._run++;
	    };
	    ExpressionLexer.prototype.modProc = function () {
	        this._tokenId = TokenKind.Mod;
	        this._run++;
	    };
	    ExpressionLexer.prototype.stringProc = function () {
	        this._tokenId = TokenKind.StringLiteral;
	        do {
	            var c = this._source.charCodeAt(this._run);
	            if (this.IS_END[c]) {
	                throw new ExpressionSyntaxError("Untermintated string", c);
	            }
	            if (c == this.BACKSLASH) {
	                this._run++;
	            }
	            this._run++;
	        } while (this._run < this._len && this._source.charCodeAt(this._run) != this.QUOTATION);
	        this._run++;
	    };
	    ExpressionLexer.prototype.smallStringProc = function () {
	        this._tokenId = TokenKind.StringLiteral;
	        do {
	            var c = this._source.charCodeAt(this._run);
	            if (this.IS_END[c]) {
	                throw new ExpressionSyntaxError("Untermintated string", c);
	            }
	            if (c == this.BACKSLASH) {
	                this._run++;
	            }
	            this._run++;
	        } while (this._run < this._len && this._source.charCodeAt(this._run) != this.SQUOTATION);
	        this._run++;
	    };
	    ExpressionLexer.prototype.initProcs = function () {
	        this._procs = [];
	        for (var i = 1; i <= 255; i++) {
	            this._procs[i] = this.symbolProc;
	        }
	        for (var i = 1; i <= 32; i++) {
	            this._procs[i] = this.spaceProc;
	        }
	        this._procs[10] = this.lfProc;
	        this._procs[13] = this.crProc;
	        this._procs["$".charCodeAt(0)] = this.integerProc;
	        this._procs[this.QUOTATION] = this.stringProc;
	        this._procs[this.SQUOTATION] = this.smallStringProc;
	        for (var i = 0; i <= 9; i++) {
	            this._procs["0".charCodeAt(0) + i] = this.numberProc;
	        }
	        for (var i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
	            this._procs[i] = this.identProc;
	        }
	        for (var i = "a".charCodeAt(0); i <= "z".charCodeAt(0); i++) {
	            this._procs[i] = this.identProc;
	        }
	        this._procs["_".charCodeAt(0)] = this.identProc;
	        this._procs["(".charCodeAt(0)] = this.roundOpenProc;
	        this._procs[")".charCodeAt(0)] = this.roundCloseProc;
	        this._procs["*".charCodeAt(0)] = this.starProc;
	        this._procs["+".charCodeAt(0)] = this.plusProc;
	        this._procs[",".charCodeAt(0)] = this.commaProc;
	        this._procs["-".charCodeAt(0)] = this.minusProc;
	        this._procs[".".charCodeAt(0)] = this.pointProc;
	        this._procs["/".charCodeAt(0)] = this.slashProc;
	        this._procs["%".charCodeAt(0)] = this.modProc;
	        this._procs["<".charCodeAt(0)] = this.lowerProc;
	        this._procs["=".charCodeAt(0)] = this.equalProc;
	        this._procs[">".charCodeAt(0)] = this.greaterProc;
	        this._procs["[".charCodeAt(0)] = this.bracketOpenProc;
	        this._procs["]".charCodeAt(0)] = this.bracketCloseProc;
	    };
	    Object.defineProperty(ExpressionLexer.prototype, "tokenId", {
	        get: function () {
	            return this._tokenId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExpressionLexer.prototype, "tokenLoc", {
	        get: function () {
	            return { x: this._tokenPos - this._linePos, y: this._lineNo };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExpressionLexer.prototype, "tokenLen", {
	        get: function () {
	            return this._run - this._tokenPos;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExpressionLexer.prototype, "token", {
	        get: function () {
	            return this._source.substr(this._tokenPos, this.tokenLen);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExpressionLexer.prototype, "isSpace", {
	        get: function () {
	            return this._tokenId == TokenKind.Space;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ExpressionLexer.prototype.init = function (source) {
	        this._source = source;
	        this._len = source.length;
	        this._lineNo = 0;
	        this._linePos = 0;
	        this._tokenPos = 0;
	        this._runAhead = this._run = 0;
	        this._tokenId = 0;
	    };
	    ExpressionLexer.prototype.charAhread = function () {
	        this._runAhead = this._run;
	        while (this._runAhead < this._len && this._source.charCodeAt(this._runAhead) > 0 && this._source.charCodeAt(this._runAhead) <= 32) {
	            this._runAhead++;
	        }
	        return this._source.charCodeAt(this._runAhead);
	    };
	    ExpressionLexer.prototype.nextId = function (tokenId) {
	        do {
	            this.next();
	        } while (this._run < this._len && this._tokenId != tokenId);
	    };
	    ExpressionLexer.prototype.nextNoSpace = function () {
	        if (this._run < this._len) {
	            do {
	                this.next();
	            } while (this._run < this._len && this.isSpace);
	        }
	    };
	    ExpressionLexer.prototype.isFirstInLine = function () {
	        if (this._tokenPos == 0) {
	            return true;
	        }
	        var c;
	        var runBack = this._tokenPos;
	        runBack--;
	        while (runBack > 0 && this.IS_WHITE[this._source.charCodeAt(runBack)]) {
	            runBack--;
	        }
	        if (runBack == 0) {
	            return true;
	        }
	        c = this._source.charCodeAt(runBack);
	        if (c == 10 || c == 13) {
	            return true;
	        }
	        return false;
	    };
	    return ExpressionLexer;
	}());
	var ExpressionRuntime = /** @class */ (function (_super) {
	    __extends(ExpressionRuntime, _super);
	    function ExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    ExpressionRuntime.prototype.isIdentifier = function (token) {
	        throw new Error("Token is not a valid Identifier: " + token);
	    };
	    ExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        throw new Error("Invalid identifier key: " + idKey);
	    };
	    ExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        throw new Error("Invalid identifier indexer: " + idKey);
	    };
	    ExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capital) {
	        throw new Error("Invalid identifier indexer: " + idKey);
	    };
	    return ExpressionRuntime;
	}(Base_1.Base));
	exports.ExpressionRuntime = ExpressionRuntime;
	var ExpressionNode = /** @class */ (function () {
	    function ExpressionNode() {
	    }
	    Object.defineProperty(ExpressionNode.prototype, "value", {
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExpressionNode.prototype, "asLiteral", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ExpressionNode.prototype.prepareValue = function () {
	    };
	    ExpressionNode.prototype.getLiteral = function () {
	        return undefined;
	    };
	    ExpressionNode.prototype.isIdentifier = function (value) {
	        return false;
	    };
	    ExpressionNode.prototype.toString = function () {
	        return String(this);
	    };
	    return ExpressionNode;
	}());
	exports.ExpressionNode = ExpressionNode;
	var LiteralNode = /** @class */ (function (_super) {
	    __extends(LiteralNode, _super);
	    function LiteralNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return LiteralNode;
	}(ExpressionNode));
	var EmptyExpressionNode = /** @class */ (function (_super) {
	    __extends(EmptyExpressionNode, _super);
	    function EmptyExpressionNode() {
	        return _super.call(this) || this;
	    }
	    EmptyExpressionNode.prototype.evaluate = function (runtime) {
	        return undefined;
	    };
	    EmptyExpressionNode.prototype.toString = function () {
	        return "";
	    };
	    EmptyExpressionNode.Default = new EmptyExpressionNode();
	    return EmptyExpressionNode;
	}(ExpressionNode));
	var FunctionExpressionNode = /** @class */ (function (_super) {
	    __extends(FunctionExpressionNode, _super);
	    function FunctionExpressionNode(func) {
	        var _this = _super.call(this) || this;
	        _this._func = func;
	        return _this;
	    }
	    FunctionExpressionNode.prototype.evaluate = function (runtime) {
	        /*
	        if (this._funcProc && typeof this._funcProc === "function") {
	            var grid = runtime._grid;
	            var cell = runtime._cell;
	            !cell && runtime._target instanceof DataCellElement && (cell = runtime._target);
	            !grid && runtime._target instanceof DataCellElement && (grid = runtime._target.grid());
	            var index = cell && cell._index && cell._index.proxy();
	            if (!index) {
	                if (runtime instanceof DataRowExpressionRuntime) {
	                    index = {dataRow:runtime._item._dataRow, itemIndex:runtime._item._index}
	                } else {
	                    index = {}; //
	                }
	            }
	            if (cell instanceof FooterCell) {
	                index["footerIndex"] = cell._footerIndex;
	            }
	            var handler = grid && grid.getHandler();
	            var value = cell && ( cell.value() != null ? cell.value() : cell.displayText ? cell.displayText() : cell.value());
	            try {
	                return this._funcProc(handler, index, value);
	            } catch (e) {
	                return null;	//
	            }
	        }
	        */
	    };
	    return FunctionExpressionNode;
	}(ExpressionNode));
	var ExpressionNodeImpl = /** @class */ (function (_super) {
	    __extends(ExpressionNodeImpl, _super);
	    function ExpressionNodeImpl() {
	        var _this = _super.call(this) || this;
	        _this._operator = TokenKind.Unknown;
	        return _this;
	    }
	    ExpressionNodeImpl.prototype.evaluate = function (runtime) {
	        if (this._literal) {
	            return this._literal.value;
	        }
	        else if (this._rightExpr) {
	            var v1 = this._leftExpr.evaluate(runtime);
	            var v2 = this._rightExpr.evaluate(runtime);
	            switch (this._operator) {
	                case TokenKind.Equal:
	                    return v1 == v2;
	                case TokenKind.NotEqual:
	                    return v1 != v2;
	                case TokenKind.Greater:
	                    return v1 > v2;
	                case TokenKind.GreaterEqual:
	                    return v1 >= v2;
	                case TokenKind.Lower:
	                    return v1 < v2;
	                case TokenKind.LowerEqual:
	                    return v1 <= v2;
	                /*
	                * case TokenKind.Is: case TokenKind.IsNot:
	                */
	                case TokenKind.Like:
	                    return this.calcLike(v1, v2, false);
	                case TokenKind.NotLike:
	                    return !this.calcLike(v1, v2, false);
	                case TokenKind.ILike:
	                    return this.calcLike(v1, v2, true);
	                case TokenKind.NotILike:
	                    return !this.calcLike(v1, v2, true);
	                case TokenKind.Match:
	                    return this.calcMatch(v1, v2, false);
	                case TokenKind.NotMatch:
	                    return !this.calcMatch(v1, v2, false);
	                case TokenKind.IMatch:
	                    return this.calcMatch(v1, v2, true);
	                case TokenKind.NotIMatch:
	                    return !this.calcMatch(v1, v2, true);
	                default:
	                    throw new ExpressionEvaluationError("Unknown operator: " + this._operator);
	            }
	        }
	        else {
	            return this._leftExpr.evaluate(runtime);
	        }
	    };
	    ExpressionNodeImpl.prototype.toString = function () {
	        var s = "";
	        if (this._literal) {
	            s = this._literal.toString();
	        }
	        else if (this._rightExpr) {
	            var s1 = this._leftExpr.toString();
	            var s2 = this._rightExpr.toString();
	            var op;
	            switch (this._operator) {
	                case TokenKind.Equal:
	                    op = "=";
	                    break;
	                case TokenKind.NotEqual:
	                    op = "<>";
	                    break;
	                case TokenKind.Greater:
	                    op = ">";
	                    break;
	                case TokenKind.GreaterEqual:
	                    op = ">=";
	                    break;
	                case TokenKind.Lower:
	                    op = "<";
	                    break;
	                case TokenKind.LowerEqual:
	                    op = "<=";
	                    break;
	                case TokenKind.Like:
	                    op = "like";
	                    break;
	                case TokenKind.NotLike:
	                    op = "not like";
	                    break;
	                case TokenKind.ILike:
	                    op = "ilike";
	                    break;
	                case TokenKind.NotILike:
	                    op = "not ilike";
	                    break;
	                case TokenKind.Match:
	                    op = "match";
	                    break;
	                case TokenKind.NotMatch:
	                    op = "not match";
	                    break;
	                case TokenKind.IMatch:
	                    op = "imatch";
	                    break;
	                case TokenKind.NotIMatch:
	                    op = "not imatch";
	                    break;
	                case TokenKind.Comma:
	                    op = ",";
	                    break;
	                default:
	                    op = "<<ERROR>>";
	                    break;
	            }
	            s = "(" + s1 + " " + op + " " + s2 + ")";
	        }
	        else {
	            s = this._leftExpr.toString();
	        }
	        return s;
	    };
	    ExpressionNodeImpl.prototype.isIdentifier = function (value) {
	        return this._leftExpr && !this._rightExpr && this._leftExpr.isIdentifier(value);
	    };
	    ExpressionNodeImpl.prototype.prepareValue = function () {
	        this._leftExpr.prepareValue();
	        if (this._rightExpr == null) {
	            this._literal = this._leftExpr.getLiteral();
	        }
	        else {
	            this._rightExpr.prepareValue();
	        }
	    };
	    ExpressionNodeImpl.prototype.getLiteral = function () {
	        return this._literal;
	    };
	    ExpressionNodeImpl.prototype.calcLike = function (v1, v2, ignoreCase) {
	        var s1 = String(v1);
	        var s2 = String(v2);
	        if (s1 && s2) {
	            if (ignoreCase) {
	                s1 = s1.toLowerCase();
	                s2 = s2.toLowerCase();
	            }
	            var len = s2.length;
	            if (len > 1) {
	                var first = s2.charAt(0) == "%";
	                var last = s2.charAt(len - 1) == "%";
	                if (first && last) {
	                    s2 = s2.substr(1, len - 2);
	                    return s1.indexOf(s2, 0) >= 0;
	                }
	                else if (first) {
	                    s2 = s2.substr(1, len - 1);
	                    return s1.lastIndexOf(s2) == s1.length - s2.length;
	                }
	                else if (last) {
	                    s2 = s2.substr(0, len - 1);
	                    return s1.indexOf(s2, 0) == 0;
	                }
	                else {
	                    return s1 == s2;
	                }
	            }
	            else if (s2 == "%") {
	                return false;
	            }
	            else {
	                return s1 == s2;
	            }
	        }
	        return false;
	    };
	    ExpressionNodeImpl.prototype.calcMatch = function (v1, v2, ignoreCase) {
	        var exp = new RegExp(v2, "m" + (ignoreCase ? "i" : ""));
	        return exp.test(v1);
	    };
	    return ExpressionNodeImpl;
	}(ExpressionNode));
	var CheckableNode = /** @class */ (function (_super) {
	    __extends(CheckableNode, _super);
	    function CheckableNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(CheckableNode.prototype, "value", {
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckableNode.prototype, "asLiteral", {
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CheckableNode.prototype.evaluate = function (runtime) {
	        return undefined;
	    };
	    return CheckableNode;
	}(ExpressionNode));
	var DefinedNode = /** @class */ (function (_super) {
	    __extends(DefinedNode, _super);
	    function DefinedNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DefinedNode.prototype.toString = function () {
	        return "defined";
	    };
	    return DefinedNode;
	}(CheckableNode));
	var EmptyNode = /** @class */ (function (_super) {
	    __extends(EmptyNode, _super);
	    function EmptyNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyNode.prototype.toString = function () {
	        return "empty";
	    };
	    return EmptyNode;
	}(CheckableNode));
	var NullNode = /** @class */ (function (_super) {
	    __extends(NullNode, _super);
	    function NullNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(NullNode.prototype, "value", {
	        get: function () {
	            return NaN;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NullNode.prototype.toString = function () {
	        return "null";
	    };
	    return NullNode;
	}(CheckableNode));
	var NanNode = /** @class */ (function (_super) {
	    __extends(NanNode, _super);
	    function NanNode() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NanNode.prototype.toString = function () {
	        return "NaN";
	    };
	    return NanNode;
	}(CheckableNode));
	var CheckNode = /** @class */ (function (_super) {
	    __extends(CheckNode, _super);
	    function CheckNode(leftExpr, op, literal) {
	        var _this = _super.call(this) || this;
	        _this._leftExpr = leftExpr;
	        _this._operator = op;
	        _this._isNot = op == TokenKind.IsNot;
	        _this._value = -1;
	        if (literal instanceof DefinedNode) {
	            _this._value = CheckNode.DEFINED;
	        }
	        else if (literal instanceof NullNode) {
	            _this._value = CheckNode.NULL;
	        }
	        else if (literal instanceof EmptyNode) {
	            _this._value = CheckNode.EMPTY;
	        }
	        else if (literal instanceof NanNode) {
	            _this._value = CheckNode.NAN;
	        }
	        return _this;
	    }
	    CheckNode.prototype.prepareValue = function () {
	        this._leftExpr.prepareValue();
	        this._literal = this._leftExpr.getLiteral();
	    };
	    CheckNode.prototype.getLiteral = function () {
	        return null;
	    };
	    CheckNode.prototype.evaluate = function (runtime) {
	        var v = this._literal ? this._literal.value : this._leftExpr.evaluate(runtime);
	        var r;
	        switch (this._value) {
	            case CheckNode.DEFINED:
	                r = (v !== undefined);
	                break;
	            case CheckNode.NULL:
	                r = (v === undefined || v === null);
	                break;
	            case CheckNode.EMPTY:
	                r = (v === undefined || v === null || String(v).length == 0);
	                break;
	            case CheckNode.NAN:
	                r = (v === null || isNaN(v));
	                break;
	            default:
	                return undefined;
	        }
	        return this._isNot ? !r : r;
	    };
	    CheckNode.prototype.toString = function () {
	        var s = "<<ERROR>>";
	        switch (this._value) {
	            case CheckNode.DEFINED:
	                s = "defined";
	                break;
	            case CheckNode.NULL:
	                s = "null";
	                break;
	            case CheckNode.EMPTY:
	                s = "empty";
	                break;
	            case CheckNode.NAN:
	                s = "NaN";
	                break;
	        }
	        return "(" + ((this._isNot ? "is not " : "is ") + s) + ")";
	    };
	    CheckNode.DEFINED = 0;
	    CheckNode.NULL = 1;
	    CheckNode.EMPTY = 2;
	    CheckNode.NAN = 3;
	    return CheckNode;
	}(ExpressionNodeImpl));
	var FloatLiteralNode = /** @class */ (function (_super) {
	    __extends(FloatLiteralNode, _super);
	    function FloatLiteralNode(literal) {
	        var _this = _super.call(this) || this;
	        _this._value = Number(literal);
	        return _this;
	    }
	    Object.defineProperty(FloatLiteralNode.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FloatLiteralNode.prototype, "asLiteral", {
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FloatLiteralNode.prototype.evaluate = function (runtime) {
	        return this._value;
	    };
	    FloatLiteralNode.prototype.toString = function () {
	        return String(this._value);
	    };
	    return FloatLiteralNode;
	}(LiteralNode));
	var IntegerLiteralNode = /** @class */ (function (_super) {
	    __extends(IntegerLiteralNode, _super);
	    function IntegerLiteralNode(literal) {
	        var _this = _super.call(this) || this;
	        _this._value = typeof literal == 'string' ? parseInt(literal) : Math.floor(literal);
	        return _this;
	    }
	    Object.defineProperty(IntegerLiteralNode.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IntegerLiteralNode.prototype, "asLiteral", {
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    IntegerLiteralNode.prototype.evaluate = function (runtime) {
	        return this._value;
	    };
	    IntegerLiteralNode.prototype.toString = function () {
	        return String(this._value);
	    };
	    return IntegerLiteralNode;
	}(LiteralNode));
	var StringLiteralNode = /** @class */ (function (_super) {
	    __extends(StringLiteralNode, _super);
	    function StringLiteralNode(literal) {
	        var _this = _super.call(this) || this;
	        _this._value = literal.substr(1, literal.length - 2);
	        var val = "";
	        var run = 0;
	        var isEscape = false;
	        while (run < _this._value.length) {
	            if (_this._value[run] == "\\" && !isEscape) {
	                isEscape = true;
	                run++;
	                continue;
	            }
	            isEscape = false;
	            val += _this._value[run++];
	        }
	        _this._value = val;
	        return _this;
	    }
	    Object.defineProperty(StringLiteralNode.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StringLiteralNode.prototype, "asLiteral", {
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StringLiteralNode.prototype.evaluate = function (runtime) {
	        return this._value;
	    };
	    StringLiteralNode.prototype.toString = function () {
	        return "'" + this._value + "'";
	    };
	    return StringLiteralNode;
	}(LiteralNode));
	var IdentifierNode = /** @class */ (function (_super) {
	    __extends(IdentifierNode, _super);
	    function IdentifierNode(literal) {
	        var _this = _super.call(this) || this;
	        _this._idKey = -651212;
	        _this._literal = literal;
	        return _this;
	    }
	    Object.defineProperty(IdentifierNode.prototype, "identifier", {
	        get: function () {
	            return this._literal;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    IdentifierNode.prototype.evaluate = function (runtime) {
	        if (this._idKey == -651212) {
	            this._idKey = runtime.isIdentifier(this._literal);
	        }
	        return runtime.evaluateIdentifier(this._idKey);
	    };
	    IdentifierNode.prototype.toString = function () {
	        return this._literal;
	    };
	    return IdentifierNode;
	}(ExpressionNode));
	var IndexerNode = /** @class */ (function (_super) {
	    __extends(IndexerNode, _super);
	    function IndexerNode(ident, expression, captial) {
	        var _this = _super.call(this) || this;
	        _this._idKey = -1490313;
	        _this._intIndex = NaN;
	        _this._strIndex = null;
	        _this._ident = ident;
	        _this._indexer = expression;
	        _this._capital = captial;
	        return _this;
	    }
	    IndexerNode.prototype.prepareValue = function () {
	        var lit = this._indexer.asLiteral;
	        if (!lit) {
	            if (this._indexer instanceof ExpressionNodeImpl) {
	                this._indexer.prepareValue();
	                lit = this._indexer.getLiteral();
	            }
	        }
	        if (lit) {
	            var v = lit.value;
	            if (typeof v === "string") {
	                this._strIndex = v;
	            }
	            else {
	                this._intIndex = parseInt(v);
	            }
	            if (this._capital && this._strIndex) {
	                this._strIndex = this._strIndex.toUpperCase();
	            }
	        }
	    };
	    IndexerNode.prototype.getLiteral = function () {
	        return null;
	    };
	    IndexerNode.prototype.evaluate = function (runtime) {
	        if (this._idKey == -1490313) {
	            this._idKey = runtime.isIdentifier(this._ident);
	        }
	        if (this._strIndex) {
	            return runtime.evaluateIndexerS(this._idKey, this._strIndex, this._capital);
	        }
	        else if (!isNaN(this._intIndex)) {
	            return runtime.evaluateIndexerI(this._idKey, this._intIndex);
	        }
	        else {
	            var index = this._indexer.evaluate(runtime);
	            if (typeof index === "string") {
	                return runtime.evaluateIndexerS(this._idKey, index, this._capital);
	            }
	            else {
	                return runtime.evaluateIndexerI(this._idKey, index);
	            }
	        }
	    };
	    IndexerNode.prototype.toString = function () {
	        var s = this._ident + "[" + this._indexer.toString() + "]";
	        return s;
	    };
	    return IndexerNode;
	}(ExpressionNodeImpl));
	var UnaryNode = /** @class */ (function (_super) {
	    __extends(UnaryNode, _super);
	    function UnaryNode(factor) {
	        var _this = _super.call(this) || this;
	        _this._factor = factor;
	        return _this;
	    }
	    UnaryNode.prototype.prepareValue = function () {
	        this._literal = this._factor.asLiteral;
	        if (!this._literal && this._factor instanceof ExpressionNode) {
	            this._factor.prepareValue();
	            this._literal = this._factor.getLiteral();
	        }
	    };
	    UnaryNode.prototype.getLiteral = function () {
	        return null;
	    };
	    return UnaryNode;
	}(ExpressionNode));
	var LenNode = /** @class */ (function (_super) {
	    __extends(LenNode, _super);
	    function LenNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    LenNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v ? v.length : 0;
	    };
	    LenNode.prototype.toString = function () {
	        return "(len " + this._factor + ")";
	    };
	    return LenNode;
	}(UnaryNode));
	var MinusNode = /** @class */ (function (_super) {
	    __extends(MinusNode, _super);
	    function MinusNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    MinusNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return -v;
	    };
	    MinusNode.prototype.toString = function () {
	        return "-" + this._factor;
	    };
	    return MinusNode;
	}(UnaryNode));
	var PlusNode = /** @class */ (function (_super) {
	    __extends(PlusNode, _super);
	    function PlusNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    PlusNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v;
	    };
	    PlusNode.prototype.toString = function () {
	        return "+" + this._factor;
	    };
	    return PlusNode;
	}(UnaryNode));
	var NotNode = /** @class */ (function (_super) {
	    __extends(NotNode, _super);
	    function NotNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    NotNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return !v;
	    };
	    NotNode.prototype.toString = function () {
	        return "(not " + this._factor + ")";
	    };
	    return NotNode;
	}(UnaryNode));
	var ToBoolNode = /** @class */ (function (_super) {
	    __extends(ToBoolNode, _super);
	    function ToBoolNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToBoolNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return Boolean(v);
	    };
	    ToBoolNode.prototype.toString = function () {
	        return "(bool " + this._factor + ")";
	    };
	    return ToBoolNode;
	}(UnaryNode));
	var ToNumberNode = /** @class */ (function (_super) {
	    __extends(ToNumberNode, _super);
	    function ToNumberNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToNumberNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return Number(v);
	    };
	    ToNumberNode.prototype.toString = function () {
	        return "(num " + this._factor + ")";
	    };
	    return ToNumberNode;
	}(UnaryNode));
	var ToStringNode = /** @class */ (function (_super) {
	    __extends(ToStringNode, _super);
	    function ToStringNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToStringNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return String(v);
	    };
	    ToStringNode.prototype.toString = function () {
	        return "(str " + this._factor + ")";
	    };
	    return ToStringNode;
	}(UnaryNode));
	var ToDateStringNode = /** @class */ (function (_super) {
	    __extends(ToDateStringNode, _super);
	    function ToDateStringNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToDateStringNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        if (v instanceof Date) {
	            v = _pad(v.getFullYear(), 4) +
	                _pad((v.getMonth() + 1), 2) +
	                _pad(v.getDate(), 2) +
	                _pad(v.getHours(), 2) +
	                _pad(v.getMinutes(), 2) +
	                _pad(v.getSeconds(), 2) +
	                _pad(v.getMilliseconds(), 3);
	        }
	        return String(v);
	    };
	    ToDateStringNode.prototype.toString = function () {
	        return "(datestr " + this._factor + ")";
	    };
	    return ToDateStringNode;
	}(UnaryNode));
	var ToYearNode = /** @class */ (function (_super) {
	    __extends(ToYearNode, _super);
	    function ToYearNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToYearNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v instanceof Date ? v.getFullYear() : null;
	    };
	    ToYearNode.prototype.toString = function () {
	        return "(year " + this._factor + ")";
	    };
	    return ToYearNode;
	}(UnaryNode));
	var ToMonthNode = /** @class */ (function (_super) {
	    __extends(ToMonthNode, _super);
	    function ToMonthNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToMonthNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v instanceof Date ? v.getMonth() + 1 : null;
	    };
	    ToMonthNode.prototype.toString = function () {
	        return "(month " + this._factor + ")";
	    };
	    return ToMonthNode;
	}(UnaryNode));
	var ToDayNode = /** @class */ (function (_super) {
	    __extends(ToDayNode, _super);
	    function ToDayNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToDayNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v instanceof Date ? v.getDate() : null;
	    };
	    ToDayNode.prototype.toString = function () {
	        return "(day " + this._factor + ")";
	    };
	    return ToDayNode;
	}(UnaryNode));
	var ToHourNode = /** @class */ (function (_super) {
	    __extends(ToHourNode, _super);
	    function ToHourNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToHourNode.prototype.evaluate = function (runtime) {
	        var v = this._literal instanceof LiteralNode ? this._literal.value : this._factor.evaluate(runtime);
	        return v instanceof Date ? v.getHours() : null;
	    };
	    ToHourNode.prototype.toString = function () {
	        return "(hour " + this._factor + ")";
	    };
	    return ToHourNode;
	}(UnaryNode));
	var ToRoundDownNode = /** @class */ (function (_super) {
	    __extends(ToRoundDownNode, _super);
	    function ToRoundDownNode(factor) {
	        return _super.call(this, factor) || this;
	    }
	    ToRoundDownNode.prototype.evaluate = function (runtime) {
	        var factor = this._factor;
	        var literal = factor.getLiteral();
	        if (factor.getLiteral()) {
	            return literal.value;
	        }
	        else if (factor["_rightExpr"]) {
	            var v1 = factor["_leftExpr"].evaluate(runtime);
	            var v2 = factor["_rightExpr"].evaluate(runtime);
	            switch (factor["_operator"]) {
	                case TokenKind.Comma:
	                    var v3 = Math.pow(10, v2);
	                    return Math.floor(v1 * v3) / v3;
	                    break;
	                default:
	                    throw new ExpressionEvaluationError("Unknown operator: " + factor["_operator"]);
	            }
	        }
	        else {
	            return factor["_leftExpr"].evaluate(runtime);
	        }
	    };
	    ToRoundDownNode.prototype.toString = function () {
	        return "(rounddown " + this._factor + ")";
	    };
	    return ToRoundDownNode;
	}(UnaryNode));
	var TermNode = /** @class */ (function (_super) {
	    __extends(TermNode, _super);
	    function TermNode() {
	        var _this = _super.call(this) || this;
	        _this._factors = [];
	        _this._operators = [];
	        _this._literal = null;
	        return _this;
	    }
	    TermNode.prototype.addFactor = function (factor) {
	        this._factors.push(factor);
	    };
	    TermNode.prototype.addOperator = function (tokenId) {
	        this._operators.push(tokenId);
	    };
	    TermNode.prototype.isIdentifier = function (value) {
	        return this._factors.length == 1 && this._factors[0] instanceof IdentifierNode &&
	            this._factors[0].identifier == value;
	    };
	    TermNode.prototype.prepareValue = function () {
	        var i, cnt, factor;
	        for (i = 0, cnt = this._factors.length; i < cnt; i++) {
	            this._factors[i].prepareValue();
	        }
	        if (this._operators.length == 0) {
	            factor = this._factors[0];
	            this._literal = factor.asLiteral;
	            if (!this._literal) {
	                this._literal = factor.getLiteral();
	            }
	        }
	    };
	    TermNode.prototype.getLiteral = function () {
	        return this._literal;
	    };
	    TermNode.prototype.evaluate = function (runtime) {
	        if (this._literal) {
	            return this._literal.value;
	        }
	        var len = this._factors.length;
	        var v1 = this._factors[0].evaluate(runtime);
	        for (var i = 1; i < len; i++) {
	            var v2 = this._factors[i].evaluate(runtime);
	            switch (this._operators[i - 1]) {
	                case TokenKind.And:
	                    v1 = v1 && v2;
	                    break;
	                case TokenKind.Star:
	                    v1 = v1 * v2;
	                    break;
	                case TokenKind.Slash:
	                    v1 = v1 / v2;
	                    break;
	                case TokenKind.Div:
	                    v1 = Math.floor(Math.floor(v1) / Math.floor(v2));
	                    break;
	                case TokenKind.Mod:
	                    v1 = v1 % v2;
	                    break;
	                case TokenKind.Shl:
	                    v1 = v1 << v2;
	                    break;
	                case TokenKind.Shr:
	                    v1 = v1 >> v2;
	                    break;
	            }
	        }
	        return v1;
	    };
	    TermNode.prototype.toString = function () {
	        var s = "";
	        if (this._literal) {
	            s = this._literal.toString();
	        }
	        else if (this._factors.length == 1) {
	            s = this._factors[0].toString();
	        }
	        else {
	            var i;
	            var len = this._factors.length;
	            s = "(" + this._factors[0].toString();
	            for (i = 1; i < len; i++) {
	                switch (this._operators[i - 1]) {
	                    case TokenKind.And:
	                        s += " and ";
	                        break;
	                    case TokenKind.Star:
	                        s += " * ";
	                        break;
	                    case TokenKind.Slash:
	                        s += " / ";
	                        break;
	                    case TokenKind.Div:
	                        s += " / ";
	                        break;
	                    case TokenKind.Mod:
	                        s += " mod ";
	                        break;
	                    case TokenKind.Shl:
	                        s += " shl ";
	                        break;
	                    case TokenKind.Shr:
	                        s += " shr ";
	                        break;
	                }
	                s += this._factors[i].toString();
	            }
	            s += ")";
	        }
	        return s;
	    };
	    return TermNode;
	}(ExpressionNode));
	var SimpleExpressioNode = /** @class */ (function (_super) {
	    __extends(SimpleExpressioNode, _super);
	    function SimpleExpressioNode() {
	        var _this = _super.call(this) || this;
	        _this._terms = [];
	        _this._operators = [];
	        _this._literal = null;
	        return _this;
	    }
	    SimpleExpressioNode.prototype.addTerm = function (term) {
	        this._terms.push(term);
	    };
	    SimpleExpressioNode.prototype.addOperator = function (tokenId) {
	        this._operators.push(tokenId);
	    };
	    SimpleExpressioNode.prototype.isIdentifier = function (value) {
	        return this._terms.length == 1 && this._terms[0].isIdentifier(value);
	    };
	    SimpleExpressioNode.prototype.prepareValue = function () {
	        for (var i = 0, cnt = this._terms.length; i < cnt; i++) {
	            this._terms[i].prepareValue();
	        }
	        if (this._operators.length == 0) {
	            this._literal = this._terms[0].getLiteral();
	        }
	    };
	    SimpleExpressioNode.prototype.getLiteral = function () {
	        return this._literal;
	    };
	    SimpleExpressioNode.prototype.evaluate = function (runtime) {
	        if (this._literal) {
	            return this._literal.value;
	        }
	        var len = this._terms.length;
	        var v1 = this._terms[0].evaluate(runtime);
	        for (var i = 1; i < len; i++) {
	            var v2 = this._terms[i].evaluate(runtime);
	            switch (this._operators[i - 1]) {
	                case TokenKind.Minus:
	                    v1 = v1 - v2;
	                    break;
	                case TokenKind.Plus:
	                    v1 = v1 + v2;
	                    break;
	                case TokenKind.Or:
	                    v1 = v1 || v2;
	                    break;
	                case TokenKind.Xor:
	                    v1 = v1 ^ v2;
	                    break;
	            }
	        }
	        return v1;
	    };
	    SimpleExpressioNode.prototype.toString = function () {
	        var s = "";
	        if (this._literal) {
	            s = this._literal.toString();
	        }
	        else if (this._terms.length == 1) {
	            s = this._terms[0].toString();
	        }
	        else {
	            var i;
	            var len = this._terms.length;
	            s = "(" + this._terms[0].toString();
	            for (i = 1; i < len; i++) {
	                switch (this._operators[i - 1]) {
	                    case TokenKind.Minus:
	                        s += " - ";
	                        break;
	                    case TokenKind.Plus:
	                        s += " + ";
	                        break;
	                    case TokenKind.Or:
	                        s += " or ";
	                        break;
	                    case TokenKind.Xor:
	                        s += " xor ";
	                        break;
	                    default:
	                        s += " <<ERROR>> ";
	                }
	                s += this._terms[i].toString();
	            }
	            s += ")";
	        }
	        return s;
	    };
	    return SimpleExpressioNode;
	}(ExpressionNode));
	var ExpressionParser = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function ExpressionParser() {
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._node = null;
	        this._capitalIndexers = null;
	        this._lexer = new ExpressionLexer();
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ExpressionParser.prototype.syntaxError = function (message, pos) {
	        throw new ExpressionSyntaxError(message, pos);
	    };
	    ExpressionParser.prototype.expected = function (tokenId) {
	        if (tokenId != this._lexer.tokenId) {
	            throw new ExpressionSyntaxError("Token is not a expected kind [" + tokenId + "]: " + this._lexer.tokenId, this._lexer.tokenLoc);
	        }
	        this.nextToken();
	    };
	    ExpressionParser.prototype.nextToken = function () {
	        this._lexer.nextNoSpace();
	    };
	    ExpressionParser.prototype.doExpression = function () {
	        var expr = null;
	        var left = this.doSimpleExpression();
	        var op;
	        if (IS_CHECK[op = this._lexer.tokenId]) {
	            this.nextToken();
	            var right = this.doSimpleExpression();
	            right.prepareValue();
	            var check = right.getLiteral();
	            if (check instanceof CheckableNode) {
	                expr = new CheckNode(left, op, check);
	            }
	            else {
	                throw new ExpressionSyntaxError("is operator's operand must be defined, null or empty: " + this._lexer.tokenId, null);
	            }
	        }
	        else {
	            expr = new ExpressionNodeImpl();
	            expr["_leftExpr"] = left;
	            if (IS_RELATIVE[this._lexer.tokenId]) {
	                expr["_operator"] = this._lexer.tokenId;
	                this.nextToken();
	                expr["_rightExpr"] = this.doSimpleExpression();
	            }
	            else if (this._lexer.tokenId == TokenKind.Comma) {
	                expr["_operator"] = this._lexer.tokenId;
	                this.nextToken();
	                expr["_rightExpr"] = this.doSimpleExpression();
	            }
	        }
	        return expr;
	    };
	    ExpressionParser.prototype.doSimpleExpression = function () {
	        var expr = new SimpleExpressioNode();
	        expr.addTerm(this.doTerm());
	        while (IS_ADDITIVE[this._lexer.tokenId]) {
	            expr.addOperator(this._lexer.tokenId);
	            this.nextToken();
	            expr.addTerm(this.doTerm());
	        }
	        return expr;
	    };
	    ExpressionParser.prototype.doTerm = function () {
	        var term = new TermNode();
	        term.addFactor(this.doFactor());
	        while (IS_MULTIPLICATIVE[this._lexer.tokenId]) {
	            term.addOperator(this._lexer.tokenId);
	            this.nextToken();
	            term.addFactor(this.doFactor());
	        }
	        return term;
	    };
	    ExpressionParser.prototype.doFactor = function () {
	        var tokenId = this._lexer.tokenId;
	        switch (tokenId) {
	            case TokenKind.StringLiteral:
	                return this.doCharString();
	            case TokenKind.RoundOpen:
	                return this.doRoundOpen();
	            case TokenKind.Identifier:
	                return this.doIdentifier();
	            case TokenKind.IntegerLiteral:
	                return this.doInteger();
	            case TokenKind.FloatLiteral:
	                return this.doNumber();
	            case TokenKind.Minus:
	                return this.doMinus();
	            case TokenKind.Plus:
	                return this.doPlus();
	            case TokenKind.Not:
	                return this.doNot();
	            case TokenKind.Defined:
	                return this.doDefined();
	            case TokenKind.Null:
	                return this.doNull();
	            case TokenKind.Empty:
	                return this.doEmpty();
	            case TokenKind.NaN:
	                return this.doNaN();
	            case TokenKind.ToBool:
	                return this.doToBool();
	            case TokenKind.ToNum:
	                return this.doToNumber();
	            case TokenKind.ToStr:
	                return this.doToString();
	            case TokenKind.Length:
	                return this.doLength();
	            // case TokenKind.LengthBin:
	            // 	return this.doLengthBin();
	            case TokenKind.ToDateStr:
	                return this.doToDateString();
	            case TokenKind.ToYear:
	                return this.doToYear();
	            case TokenKind.ToMonth:
	                return this.doToMonth();
	            case TokenKind.ToDay:
	                return this.doToDay();
	            case TokenKind.ToHour:
	                return this.doToHour();
	            case TokenKind.ToRoundDown:
	                return this.doRoundDown();
	        }
	        throw new ExpressionSyntaxError("Unkown token: " + tokenId, this._lexer.tokenLoc);
	    };
	    ExpressionParser.prototype.doCharString = function () {
	        var literal = this._lexer.token;
	        this.nextToken();
	        return new StringLiteralNode(literal);
	    };
	    ExpressionParser.prototype.doRoundOpen = function () {
	        this.nextToken();
	        var node = this.doExpression();
	        this.expected(TokenKind.RoundClose);
	        return node;
	    };
	    ExpressionParser.prototype.doIdentifier = function () {
	        var literal = this._lexer.token;
	        this.nextToken();
	        if (this._lexer.tokenId == TokenKind.BracketOpen) {
	            this.nextToken();
	            var node = this.doExpression();
	            this.expected(TokenKind.BracketClose);
	            return new IndexerNode(literal, node, this._capitalIndexers.indexOf(literal) >= 0);
	        }
	        else {
	            return new IdentifierNode(literal);
	        }
	    };
	    ExpressionParser.prototype.doNumber = function () {
	        var literal = this._lexer.token;
	        this.nextToken();
	        return new FloatLiteralNode(literal);
	    };
	    ExpressionParser.prototype.doInteger = function () {
	        var literal = this._lexer.token;
	        this.nextToken();
	        return new IntegerLiteralNode(literal);
	    };
	    ExpressionParser.prototype.doMinus = function () {
	        this.nextToken();
	        return new MinusNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doPlus = function () {
	        this.nextToken();
	        return new PlusNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doNot = function () {
	        this.nextToken();
	        return new NotNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doDefined = function () {
	        this.nextToken();
	        return new DefinedNode();
	    };
	    ExpressionParser.prototype.doNull = function () {
	        this.nextToken();
	        return new NullNode();
	    };
	    ExpressionParser.prototype.doEmpty = function () {
	        this.nextToken();
	        return new EmptyNode();
	    };
	    ExpressionParser.prototype.doNaN = function () {
	        this.nextToken();
	        return new NanNode();
	    };
	    ExpressionParser.prototype.doToBool = function () {
	        this.nextToken();
	        return new ToBoolNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToNumber = function () {
	        this.nextToken();
	        return new ToNumberNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToString = function () {
	        this.nextToken();
	        return new ToStringNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doLength = function () {
	        this.nextToken();
	        return new LenNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToDateString = function () {
	        this.nextToken();
	        return new ToDateStringNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToYear = function () {
	        this.nextToken();
	        return new ToYearNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToMonth = function () {
	        this.nextToken();
	        return new ToMonthNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToDay = function () {
	        this.nextToken();
	        return new ToDayNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doToHour = function () {
	        this.nextToken();
	        return new ToHourNode(this.doFactor());
	    };
	    ExpressionParser.prototype.doRoundDown = function () {
	        this.nextToken();
	        return new ToRoundDownNode(this.doFactor());
	    };
	    ExpressionParser.prototype.parse = function (source, capitalIndexers) {
	        if (source) {
	            this._capitalIndexers = capitalIndexers || [];
	            this._lexer.init(source);
	            this.nextToken();
	            var expr = this.doExpression();
	            if (expr) {
	                expr.prepareValue();
	            }
	            return expr;
	        }
	        return null;
	    };
	    ExpressionParser.prototype.evaluate = function (source, runtime, capitalIndexers) {
	        var expr = this.parse(source, capitalIndexers);
	        return expr.evaluate(runtime);
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ExpressionParser.Default = new ExpressionParser();
	    return ExpressionParser;
	}());
	exports.ExpressionParser = ExpressionParser;
	});

	unwrapExports(Expression);
	var Expression_1 = Expression.ExpressionSyntaxError;
	var Expression_2 = Expression.ExpressionEvaluationError;
	var Expression_3 = Expression.ExpressionRuntime;
	var Expression_4 = Expression.ExpressionNode;
	var Expression_5 = Expression.ExpressionParser;

	var RowState_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowState.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var RowState;
	(function (RowState) {
	    RowState["NONE"] = "none";
	    RowState["CREATED"] = "created";
	    RowState["UPDATED"] = "updated";
	    RowState["DELETED"] = "deleted";
	    RowState["CREATE_AND_DELETED"] = "createAndDeleted";
	})(RowState = exports.RowState || (exports.RowState = {}));
	exports.isDeletedState = function (value) {
	    return value == RowState.DELETED || value == RowState.CREATE_AND_DELETED;
	};
	});

	unwrapExports(RowState_1);
	var RowState_2 = RowState_1.RowState;
	var RowState_3 = RowState_1.isDeletedState;

	var FieldSummary_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// FieldSummary.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var FieldSummary = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FieldSummary(field) {
	        this.field = field;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        this.count = 0;
	        this.sum = NaN;
	        this.max = NaN;
	        this.min = NaN;
	        this.avg = NaN;
	        this.vars = NaN;
	        this.varsp = NaN;
	        this.dataCount = 0;
	        this.dataAvg = NaN;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    FieldSummary.prototype.clear = function () {
	        this.count = 0;
	        this.sum = this.max = this.min = this.avg = this.vars = this.varsp = NaN;
	    };
	    return FieldSummary;
	}());
	exports.FieldSummary = FieldSummary;
	});

	unwrapExports(FieldSummary_1);
	var FieldSummary_2 = FieldSummary_1.FieldSummary;

	var BooleanConverter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// BooleanConverter.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var BooleanConverter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function BooleanConverter(format) {
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        this._format = "";
	        this.format = format;
	    }
	    Object.defineProperty(BooleanConverter.prototype, "format", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        set: function (value) {
	            if (value != this._format) {
	                this._format = value;
	                this.parse(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    BooleanConverter.prototype.toBool = function (value) {
	        if (this._values && value) {
	            var s = this._sensitive ? value : value.toLowerCase();
	            if (s in this._values) {
	                return this._values[s];
	            }
	        }
	        return false;
	    };
	    BooleanConverter.prototype.toBoolEx = function (value) {
	        var s = this._sensitive ? value : value.toLowerCase();
	        if (this._values) {
	            if (s in this._values) {
	                return this._values[s];
	            }
	        }
	        return s ? Boolean(s) : undefined;
	    };
	    BooleanConverter.prototype.toBoolStrict = function (value) {
	        if (this._values && value) {
	            var s = this._sensitive ? value : value.toLowerCase();
	            if (s in this._values) {
	                return this._values[s];
	            }
	        }
	        return undefined;
	    };
	    BooleanConverter.prototype.toText = function (value) {
	        return value ? this._trueText : this._falseText;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    BooleanConverter.prototype.parse = function (fmt) {
	        if (fmt) {
	            var s, i, arr = fmt.split(/[;\:]/), falses, trues, sensitive = true;
	            s = arr[0];
	            falses = s ? s.split(",") : null;
	            if (arr.length > 1) {
	                s = arr[1];
	                trues = s ? s.split(",") : null;
	            }
	            if (arr.length > 2) {
	                s = arr[2].trim();
	                if (s == "0")
	                    sensitive = false;
	            }
	            this._values = {};
	            this._sensitive = sensitive;
	            for (i = 0; i < falses.length; i++) {
	                s = falses[i];
	                this._values[sensitive ? s : s.toLowerCase()] = false;
	            }
	            for (i = 0; i < trues.length; i++) {
	                s = trues[i];
	                this._values[sensitive ? s : s.toLowerCase()] = true;
	            }
	            this._trueText = trues && trues.length > 0 ? trues[0] : "true";
	            this._falseText = falses && falses.length > 0 ? falses[0] : "false";
	        }
	        else {
	            this._values = {};
	            this._values["true"] = true;
	            this._values["false"] = false;
	            this._trueText = "true";
	            this._falseText = "false";
	        }
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    BooleanConverter.Default = new BooleanConverter("false,f,0:true,t,1:0");
	    return BooleanConverter;
	}());
	exports.BooleanConverter = BooleanConverter;
	});

	unwrapExports(BooleanConverter_1);
	var BooleanConverter_2 = BooleanConverter_1.BooleanConverter;

	var DateTimeParser_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DateTimeParser.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var DateTimeParser = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DateTimeParser(format) {
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        this._format = null;
	        this._baseYear = 2000;
	        this._patterns = [];
	        this._amText = "AM";
	        this._pmText = "PM";
	        format && (this.format = format);
	    }
	    Object.defineProperty(DateTimeParser.prototype, "format", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        set: function (value) {
	            if (value != this._format) {
	                if (!value) {
	                    throw new Error("Invalid empty date format");
	                }
	                this._format = value;
	                this.parseFormat(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeParser.prototype, "baseYear", {
	        /** baseYear */
	        get: function () {
	            return this._baseYear;
	        },
	        set: function (value) {
	            if (value != this._baseYear) {
	                this._baseYear = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeParser.prototype, "amText", {
	        /** amText */
	        get: function () {
	            return this._amText;
	        },
	        set: function (value) {
	            if (value != this._amText) {
	                this._amText = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeParser.prototype, "pmText", {
	        /** pmText */
	        get: function () {
	            return this._pmText;
	        },
	        set: function (value) {
	            if (value != this._pmText) {
	                this._pmText = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DateTimeParser.prototype.parse = function (str) {
	        try {
	            var y = 0;
	            var m = 1;
	            var d = 1;
	            var h = 0;
	            var n = 0;
	            var s = 0;
	            var S = 0;
	            var am = 0;
	            var pm = 0;
	            var len = this._patterns.length;
	            var p = 0;
	            var strlen = str.length;
	            for (var i = 0; i < len && p < strlen; i++) {
	                var pattern = this._patterns[i];
	                var c = pattern.c;
	                var l = pattern.len;
	                switch (c) {
	                    case "y":
	                        y = parseInt(str.substr(p, l));
	                        break;
	                    case "M":
	                        m = parseInt(str.substr(p, l));
	                        break;
	                    case "d":
	                        d = parseInt(str.substr(p, l));
	                        break;
	                    case "a":
	                        if (this._amText && str.indexOf(this._amText, p) == p) {
	                            am = 12;
	                            l = this._amText.length;
	                        }
	                        else if (this._pmText && str.indexOf(this._pmText, p) == p) {
	                            pm = 12;
	                            l = this._pmText.length;
	                        }
	                        else {
	                            return null;
	                        }
	                        break;
	                    case "H":
	                        h = parseInt(str.substr(p, l));
	                        break;
	                    case "h":
	                        h = parseInt(str.substr(p, l));
	                        break;
	                    case "m":
	                        n = parseInt(str.substr(p, l));
	                        break;
	                    case "s":
	                        s = parseInt(str.substr(p, l));
	                        break;
	                    case "S":
	                        S = parseInt(str.substr(p, l));
	                        break;
	                    case ".":
	                    case "/":
	                    case "-":
	                    case ":":
	                    case " ":
	                        /*
	                        if (strict) {
	                            if (str.charAt(p) != c) {
	                                return null;
	                            }
	                        } else*/ if (DateTimeParser.DATE_SEPARATORS.indexOf(str.charAt(p)) < 0) {
	                            return null;
	                        }
	                        break;
	                    default:
	                        return null;
	                }
	                p += l;
	            }
	            if (y < 100) {
	                y += this._baseYear;
	            }
	            if (am > 0) {
	                if (h == 12) {
	                    h = 0;
	                }
	            }
	            else if (pm > 0 && h < 12) {
	                h += 12;
	            }
	            return new Date(y, m - 1, d, h, n, s, S);
	        }
	        catch (err) {
	            return null;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DateTimeParser.prototype.parseFormat = function (format) {
	        var s = format;
	        var len = s.length;
	        var i = 0;
	        var p;
	        var c;
	        var l;
	        this._patterns = [];
	        while (i < len) {
	            p = i;
	            c = s.charAt(i);
	            if (Utils_1.Utils.isWhiteSpace(c)) {
	                i++;
	                while (i < len && Utils_1.Utils.isWhiteSpace(s.charAt(i))) {
	                    i++;
	                }
	                this._patterns.push({ c: " ", p: p, len: i - p });
	            }
	            else {
	                l = 0;
	                switch (c) {
	                    case "y":
	                        l = this.getPattern(s, i, c);
	                        if (l != 4 && l != 2)
	                            this.throwInvalidFormat(s);
	                        break;
	                    case "M":
	                    case "d":
	                    case "H":
	                    case "h":
	                    case "m":
	                    case "s":
	                        l = this.getPattern(s, i, c);
	                        if (l != 2)
	                            this.throwInvalidFormat(s);
	                        break;
	                    case "S":
	                        l = this.getPattern(s, i, c);
	                        if (l != 3)
	                            this.throwInvalidFormat(s);
	                        break;
	                    case "a":
	                    case ".":
	                    case "/":
	                    case "-":
	                    case ":":
	                        l = this.getPattern(s, i, c);
	                        if (l != 1)
	                            this.throwInvalidFormat(s);
	                        break;
	                    default:
	                        this.throwInvalidFormat(s);
	                }
	                if (l > 0) {
	                    this._patterns.push({ c: c, p: i, len: l });
	                    i += l;
	                }
	            }
	        }
	    };
	    DateTimeParser.prototype.throwInvalidFormat = function (format) {
	        throw new Error("Invalid date format: " + format);
	    };
	    DateTimeParser.prototype.throwInvalidValue = function (value) {
	        throw new Error("Invalid date format: " + value);
	    };
	    DateTimeParser.prototype.getPattern = function (str, i, c) {
	        var len = 1;
	        while (++i < str.length && str.charAt(i) == c) {
	            len++;
	        }
	        return len;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DateTimeParser.DATE_SEPARATORS = "./-: ";
	    return DateTimeParser;
	}());
	exports.DateTimeParser = DateTimeParser;
	});

	unwrapExports(DateTimeParser_1);
	var DateTimeParser_2 = DateTimeParser_1.DateTimeParser;

	var ISODateTimeParser_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ISODateTimeParser.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var ISODateTimeParser = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function ISODateTimeParser() {
	    }
	    ISODateTimeParser.parse = function (str, check) {
	        var finalDate = null;
	        try {
	            var t = str.indexOf("T");
	            var dateStr = str.substring(0, t);
	            var timeStr = str.substring(t + 1);
	            var arr = dateStr.split("-");
	            var len = arr.length;
	            var year = parseInt(arr[0]);
	            var month = len > 1 ? parseInt(arr[1]) : 1;
	            var date = len > 2 ? parseInt(arr[2]) : 1;
	            var multiplier;
	            var offsetHours;
	            var offsetMinutes;
	            var offsetStr;
	            if (timeStr.indexOf("Z") != -1) {
	                multiplier = 1;
	                offsetHours = 0;
	                offsetMinutes = 0;
	                timeStr = timeStr.replace("Z", "");
	            }
	            else if (timeStr.indexOf("+") != -1) {
	                multiplier = 1;
	                offsetStr = timeStr.substring(timeStr.indexOf("+") + 1, timeStr.length);
	                offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
	                offsetMinutes = Number(offsetStr.substring(offsetStr.indexOf(":") + 1, offsetStr.length));
	                timeStr = timeStr.substring(0, timeStr.indexOf("+"));
	            }
	            else if (timeStr.indexOf("-") != -1) {
	                multiplier = -1;
	                offsetStr = timeStr.substring(timeStr.indexOf("-") + 1, timeStr.length);
	                offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
	                offsetMinutes = Number(offsetStr.substring(offsetStr.indexOf(":") + 1, offsetStr.length));
	                timeStr = timeStr.substring(0, timeStr.indexOf("-"));
	            }
	            else {
	                multiplier = 0;
	            }
	            var timeArr = timeStr.split(":");
	            len = timeArr ? timeArr.length : 0;
	            var hour = len > 0 ? parseInt(timeArr[0]) : 0;
	            var minutes = len > 1 ? parseInt(timeArr[1]) : 0;
	            var secondsArr = (len > 2) ? String(timeArr[2]).split(".") : null;
	            var seconds = (secondsArr && secondsArr.length > 0) ? parseInt(secondsArr[0]) : 0;
	            var milliseconds = (secondsArr && secondsArr.length > 1) ? 1000 * parseFloat("0." + secondsArr[1]) : 0;
	            var utc = Date.UTC(year, month - 1, date, hour, minutes, seconds, milliseconds);
	            var offset = multiplier ? (((offsetHours * 3600000) + (offsetMinutes * 60000)) * multiplier) : ISODateTimeParser._zoneOffset;
	            finalDate = new Date(utc - offset);
	            if (check && isNaN(finalDate.getTime())) {
	                throw "Invalidate date text: " + str;
	            }
	        }
	        catch (e) {
	            if (check) {
	                var eStr = "Invalid date Text: " + str;
	                eStr += "\nError: " + e.toString();
	                throw eStr;
	            }
	        }
	        return finalDate;
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ISODateTimeParser._zoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
	    return ISODateTimeParser;
	}());
	exports.ISODateTimeParser = ISODateTimeParser;
	});

	unwrapExports(ISODateTimeParser_1);
	var ISODateTimeParser_2 = ISODateTimeParser_1.ISODateTimeParser;

	var DateTimeReader_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DateTimeReader.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });


	var DateTimeReader = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DateTimeReader(format) {
	        this._type = 0;
	        this._parser = new DateTimeParser_1.DateTimeParser(null);
	        this.format = format;
	    }
	    DateTimeReader.initialize = function () {
	        DateTimeReader.Default.amText = "AM";
	        DateTimeReader.Default.pmText = "PM";
	        DateTimeReader.Default.baseYear = 2000;
	    };
	    Object.defineProperty(DateTimeReader.prototype, "format", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        set: function (value) {
	            if (value != this._format) {
	                this._format = value;
	                this.parse(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeReader.prototype, "amText", {
	        /** amText */
	        get: function () {
	            return this._parser.amText;
	        },
	        set: function (value) {
	            this._parser.amText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeReader.prototype, "pmText", {
	        /** pmText */
	        get: function () {
	            return this._parser.pmText;
	        },
	        set: function (value) {
	            this._parser.pmText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeReader.prototype, "baseYear", {
	        /** baseYear */
	        get: function () {
	            return this._parser.baseYear;
	        },
	        set: function (value) {
	            this._parser.baseYear = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DateTimeReader.prototype.toDate = function (value) {
	        if (!value) {
	            return null;
	        }
	        var d = null;
	        switch (this._type) {
	            case 0:
	                d = this._parser.parse(value /*, strict*/);
	                break;
	            case 1:
	                d = ISODateTimeParser_1.ISODateTimeParser.parse(value, false);
	                break;
	            case 2:
	                var v = parseInt(value);
	                d = new Date(v);
	                break;
	            case 3:
	            default:
	                d = new Date(value);
	                break;
	        }
	        return d;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DateTimeReader.prototype.parse = function (fmt) {
	        if (fmt) {
	            var s = fmt.toLowerCase();
	            this._type = Math.max(0, DateTimeReader.Formats.indexOf(s));
	            if (this._type == 0) {
	                this._parser.format = fmt;
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DateTimeReader.Formats = ["custom", "iso", "timestamp", "platform"];
	    DateTimeReader.Default = new DateTimeReader("yyyy/MM/dd HH:mm:ss");
	    return DateTimeReader;
	}());
	exports.DateTimeReader = DateTimeReader;
	DateTimeReader.initialize();
	});

	unwrapExports(DateTimeReader_1);
	var DateTimeReader_2 = DateTimeReader_1.DateTimeReader;

	var DataField_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataField.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var DataField = /** @class */ (function (_super) {
	    __extends(DataField, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DataField(fieldName, dataType, length) {
	        if (dataType === void 0) { dataType = Types.ValueType.TEXT; }
	        if (length === void 0) { length = 0; }
	        var _this = _super.call(this) || this;
	        _this._index = -1;
	        _this._dataType = Types.ValueType.TEXT;
	        _this._subType = null;
	        _this._runType = Types.ValueType.TEXT;
	        _this._length = 0;
	        _this._subTypeEnabled = true;
	        _this._required = false;
	        _this._updatable = true;
	        _this._ranged = false;
	        _this._runSet = null;
	        _this._typeLock = false;
	        _this._calculated = false;
	        _this._objectKey = null;
	        _this._objectCallback = null;
	        fieldName && (_this.fieldName = fieldName);
	        if (dataType != null)
	            _this._dataType = dataType;
	        _this._length = length;
	        return _this;
	    }
	    Object.defineProperty(DataField.prototype, "hash", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** hash */
	        get: function () {
	            return this._fieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "index", {
	        /** index */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "fieldName", {
	        /** fieldName */
	        get: function () {
	            return this._fieldName;
	        },
	        set: function (value) {
	            value = value && value.trim();
	            if (!value) {
	                throw new Error("Field name must be exists.");
	            }
	            if (value != this._orgFieldName) {
	                this._orgFieldName = value;
	                this._orgAttrName = "@" + value;
	                this._fieldName = value.toUpperCase();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "orgFieldName", {
	        /** orgFieldName */
	        get: function () {
	            return this._orgFieldName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "orgAttrName", {
	        /** orgAttrName */
	        get: function () {
	            return this._orgAttrName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "dataType", {
	        /** dataType */
	        get: function () {
	            return this._dataType;
	        },
	        set: function (value) {
	            if (value != this._dataType) {
	                this._dataType = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "runType", {
	        /** runType */
	        get: function () {
	            return this._runType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "subType", {
	        /** subType */
	        get: function () {
	            return this._subType;
	        },
	        set: function (value) {
	            value = value || null;
	            if (value != this._subType) {
	                this._subType = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "subTypeEnabled", {
	        /** subTypeEnabled */
	        get: function () {
	            return this._subTypeEnabled;
	        },
	        set: function (value) {
	            if (value != this._subTypeEnabled) {
	                this._subTypeEnabled = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "baseField", {
	        /** baseField */
	        get: function () {
	            return this._baseField;
	        },
	        set: function (value) {
	            if (value != this._orgBaseField) {
	                this._orgBaseField = value;
	                this._baseField = value && value.toUpperCase();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "length", {
	        /** length */
	        get: function () {
	            return this._length;
	        },
	        set: function (value) {
	            value = value || 0;
	            if (value != this._length) {
	                this._length = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "set", {
	        /** set */
	        get: function () {
	            return this._set;
	        },
	        set: function (value) {
	            if (value !== this._set) {
	                this._set = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "minimum", {
	        /** minimum */
	        get: function () {
	            return this._minimum;
	        },
	        set: function (value) {
	            if (value != this._minimum) {
	                this._minimum = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "maximum", {
	        /** maximum */
	        get: function () {
	            return this._maximum;
	        },
	        set: function (value) {
	            if (value != this._maximum) {
	                this._maximum = value;
	                this.resetTypes();
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "required", {
	        /** required */
	        get: function () {
	            return this._required;
	        },
	        set: function (value) {
	            if (value != this._required) {
	                this._required = value;
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "header", {
	        /** header */
	        get: function () {
	            return this._header;
	        },
	        set: function (value) {
	            if (value != this._header) {
	                this._header = value;
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "defaultValue", {
	        /** defaultValue */
	        get: function () {
	            return this._defaultValue;
	        },
	        set: function (value) {
	            if (value != this._defaultValue) {
	                this._defaultValue = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "nullValue", {
	        /** nullValue */
	        get: function () {
	            return this._nullValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "booleanForamt", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "booleanFormat", {
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                if (value) {
	                    this._boolParser = new BooleanConverter_1.BooleanConverter(value);
	                }
	                else {
	                    this._boolParser = null;
	                }
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "datetimeFormat", {
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                if (value) {
	                    this._dateParser = new DateTimeReader_1.DateTimeReader(value);
	                    this._dateParser.amText = this._amText;
	                    this._dateParser.pmText = this._pmText;
	                    this._dateParser.baseYear = this._baseYear;
	                }
	                else {
	                    this._dateParser = null;
	                }
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "amText", {
	        /** amText */
	        get: function () {
	            return this._amText;
	        },
	        set: function (value) {
	            if (value != this._amText) {
	                this._amText = value;
	                if (this._dateParser) {
	                    this._dateParser.amText = value;
	                }
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "pmText", {
	        /** pmText */
	        get: function () {
	            return this._pmText;
	        },
	        set: function (value) {
	            if (value != this._pmText) {
	                this._pmText = value;
	                if (this._dateParser) {
	                    this._dateParser.pmText = value;
	                }
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "baseYear", {
	        /** baseYear */
	        get: function () {
	            return this._baseYear;
	        },
	        set: function (value) {
	            if (value != this._baseYear) {
	                this._baseYear = value;
	                if (this._dateParser) {
	                    this._dateParser.baseYear = value;
	                }
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "valueExpression", {
	        /** valueExpression */
	        get: function () {
	            return this._valueExpression;
	        },
	        set: function (value) {
	            if (value != this._valueExpression) {
	                this._valueExpression = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "valueCallback", {
	        /** valueCallback */
	        get: function () {
	            return this._valueCallback;
	        },
	        set: function (value) {
	            if (value != this._valueCallback) {
	                this._valueCallback = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "calculated", {
	        /** calulcated */
	        get: function () {
	            return !!this._valueExpression || !!this._valueCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataField.prototype, "updatable", {
	        /** updatable */
	        get: function () {
	            //return this._updatable;
	            return (this._valueExpression || this._valueCallback) ? false : this._updatable;
	        },
	        set: function (value) {
	            if (value != this._updatable) {
	                this._updatable = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataField.prototype.isEmpty = function (value) {
	        var v = value === undefined || value === null || value == "";
	        if (!v && this._dataType == Types.ValueType.NUMBER) {
	            v = isNaN(value);
	        }
	        return v;
	    };
	    DataField.prototype.isNull = function (value) {
	        if (value === undefined || value === null) {
	            return true;
	        }
	        switch (this._runType) {
	            case Types.ValueType.TEXT:
	            case Types.ValueType.CHAR:
	                if (value.length == 0) {
	                    return true;
	                }
	                break;
	            case Types.ValueType.NUMBER:
	            case Types.ValueType.UNUM:
	            case Types.ValueType.INT:
	            case Types.ValueType.UINT:
	                if (isNaN(value)) {
	                    return true;
	                }
	                break;
	        }
	        return false;
	    };
	    DataField.prototype.equalValues = function (v1, v2) {
	        return this._equalValues(v1, v2);
	    };
	    DataField.prototype.sameValues = function (v1, v2) {
	        return this._sameValues(v1, v2);
	    };
	    DataField.prototype.readValue = function (source) {
	        return this._readValue(source);
	    };
	    DataField.prototype.getBool = function (parser, value) {
	        if (typeof value == 'boolean') {
	            return value;
	        }
	        else {
	            var s = value;
	            return this._boolParser ? this._boolParser.toBool(s) : parser.toBool(s);
	        }
	    };
	    DataField.prototype.getDate = function (parser, value) {
	        if (value instanceof Date) {
	            return new Date(value.getTime());
	        }
	        else if (typeof value === 'number') {
	            return new Date(value);
	        }
	        else {
	            return this._dateParser ? this._dateParser.toDate(value) : parser.toDate(value);
	        }
	    };
	    DataField.prototype.clone = function () {
	        var fld = new DataField(this.fieldName, this.dataType, this.length);
	        fld._orgFieldName = this._orgFieldName;
	        fld._orgAttrName = this._orgAttrName;
	        fld._boolParser = this._boolParser;
	        fld._dateParser = this._dateParser;
	        fld._orgBaseField = this._orgBaseField;
	        fld._baseField = this._baseField;
	        fld._defaultValue = this._defaultValue;
	        fld._valueCallback = this._valueCallback;
	        fld._valueExpression = this._valueExpression;
	        return fld;
	    };
	    DataField.prototype.$_resetTypes = function (provider) {
	        this.resetTypes(provider);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataField.prototype.assignFrom = function (fld) {
	        if ("fieldName" in fld) {
	            this.fieldName = fld.fieldName;
	        }
	        if ("subType" in fld) {
	            this._subType = fld.subType;
	        }
	        if ("set" in fld) {
	            this._set = fld.set instanceof Array ? fld.set.slice() : null;
	        }
	        if ("defaultValue" in fld) {
	            this._defaultValue = fld.defaultValue;
	        }
	        if ("baseField" in fld) {
	            this.baseField = fld.baseField;
	        }
	        if ("booleanFormat" in fld) {
	            this.booleanFormat = fld.booleanFormat;
	        }
	        if ("amText" in fld) {
	            this._amText = fld.amText;
	        }
	        if ("pmText" in fld) {
	            this._pmText = fld.pmText;
	        }
	        if ("baseYear" in fld) {
	            this._baseYear = fld.baseYear;
	        }
	        if ("header" in fld) {
	            this._header = fld.header;
	        }
	        if ("datetimeFormat" in fld) {
	            this.datetimeFormat = fld.datetimeFormat;
	        }
	        if ("objectKey" in fld) {
	            this._objectKey = fld.objectKey;
	        }
	        if ("objectCallback" in fld) {
	            this._objectCallback = fld.objectCallback;
	        }
	        if ("required" in fld) {
	            this._required = fld.required;
	        }
	        if ("minimum" in fld) {
	            this._minimum = fld.minimum;
	        }
	        if ("maximum" in fld) {
	            this._maximum = fld.maximum;
	        }
	        if ("valueExpression" in fld) {
	            this.valueExpression = fld.valueExpression;
	        }
	        if ("valueCallback" in fld) {
	            this._valueCallback = fld.valueCallback;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataField.prototype.$_setIndex = function (value) {
	        this._index = value;
	    };
	    DataField.prototype.$_prepare = function (owner) {
	        this._owner = owner;
	    };
	    DataField.prototype.changed = function () {
	        if (this._owner) ;
	    };
	    DataField.prototype.resetTypes = function (provider) {
	        if (this._typeLock) {
	            return;
	        }
	        if (provider) {
	            this._ownerBoolParser = provider.boolParser;
	            this._ownerDateParser = provider.dateParser;
	        }
	        var type = this._dataType;
	        var stype = this._subType;
	        this._runType = type;
	        this._ranged = false;
	        if ((!this._owner || this._owner.subTypeEnabled) && this._subTypeEnabled) {
	            if (stype) {
	                switch (type) {
	                    case Types.ValueType.TEXT:
	                        if (stype == Types.ValueType.CHAR && this._length > 0) {
	                            type = stype;
	                        }
	                        break;
	                    case Types.ValueType.NUMBER:
	                        if (stype == Types.ValueType.UNUM || stype == Types.ValueType.INT || stype == Types.ValueType.UINT) {
	                            type = stype;
	                        }
	                        break;
	                    case Types.ValueType.DATETIME:
	                        if (stype == Types.ValueType.DATE /* || stype == GridValueType.TIME*/) {
	                            type = stype;
	                        }
	                        break;
	                }
	            }
	            this._runType = type;
	            this._runSet = null;
	            if (this._set && this._set.length) {
	                if (this._runType == Types.ValueType.DATETIME) {
	                    this._runSet = [];
	                    for (var i = 0; i < this._set.length; i++) {
	                        var d = this.getDate(this._ownerDateParser, this._set[i]);
	                        if (d) {
	                            this._runSet.push(d.getTime());
	                        }
	                    }
	                    if (this._runSet.length < 1) {
	                        this._runSet = null;
	                    }
	                }
	                else if (this._runType == Types.ValueType.DATE) {
	                    this._runSet = [];
	                    for (var i = 0; i < this._set.length; i++) {
	                        var d = this.getDate(this._ownerDateParser, this._set[i]);
	                        if (d) {
	                            var d2 = new Date(d.getDate());
	                            this._runSet.push(d2.setHours(0, 0, 0, 0));
	                        }
	                    }
	                    if (this._runSet.length < 1) {
	                        this._runSet = null;
	                    }
	                }
	                else {
	                    this._runSet = this._set;
	                }
	                this._ranged = true;
	            }
	            if (!this._ranged) {
	                switch (this._dataType) {
	                    case Types.ValueType.NUMBER:
	                        this._runMin = Number(this._minimum);
	                        this._runMax = Number(this._maximum);
	                        if (!isNaN(this._runMin) && !isNaN(this._runMax)) {
	                            this._ranged = this._runMin <= this._runMax;
	                        }
	                        else {
	                            this._ranged = !isNaN(this._runMin) || !isNaN(this._runMax);
	                        }
	                        break;
	                    case Types.ValueType.DATETIME:
	                    case Types.ValueType.DATE:
	                        this._runMin = this.getDate(this._ownerDateParser, this._minimum);
	                        this._runMax = this.getDate(this._ownerDateParser, this._maximum);
	                        if (this._runMin && this._runMax) {
	                            this._ranged = this._runMin.getTime() <= this._runMax.getTime();
	                        }
	                        else {
	                            this._ranged = this._runMin || this._runMax;
	                        }
	                        break;
	                }
	            }
	            switch (this._runType) {
	                case Types.ValueType.TEXT:
	                    this._equalValues = this.equalTextValues;
	                    this._sameValues = this.sameTextValues;
	                    this._readValue = this.readTextValue;
	                    this._nullValue = null;
	                    break;
	                case Types.ValueType.CHAR:
	                    this._equalValues = this.equalTextValues;
	                    this._sameValues = this.sameTextValues;
	                    this._readValue = this.readCharValue;
	                    this._nullValue = null;
	                    break;
	                case Types.ValueType.NUMBER:
	                    this._equalValues = this.equalNumberValues;
	                    this._sameValues = this.sameNumberValues;
	                    this._readValue = this.readNumberValue;
	                    this._nullValue = NaN;
	                    break;
	                case Types.ValueType.UNUM:
	                    this._equalValues = this.equalNumberValues;
	                    this._sameValues = this.sameNumberValues;
	                    this._readValue = this.readUnumValue;
	                    this._nullValue = NaN;
	                    break;
	                case Types.ValueType.INT:
	                    this._equalValues = this.equalNumberValues;
	                    this._sameValues = this.sameNumberValues;
	                    this._readValue = this.readIntValue;
	                    this._nullValue = NaN;
	                    break;
	                case Types.ValueType.UINT:
	                    this._equalValues = this.equalNumberValues;
	                    this._sameValues = this.sameNumberValues;
	                    this._readValue = this.readUintValue;
	                    this._nullValue = NaN;
	                    break;
	                case Types.ValueType.DATETIME:
	                    this._equalValues = this.equalDateValues;
	                    this._sameValues = this.sameDateValues;
	                    this._readValue = this.readDatetimeValue;
	                    this._nullValue = null;
	                    break;
	                case Types.ValueType.DATE:
	                    this._equalValues = this.equalDateValues;
	                    this._sameValues = this.sameDateValues;
	                    this._readValue = this.readDateValue;
	                    this._nullValue = null;
	                    break;
	                case Types.ValueType.BOOLEAN:
	                    this._equalValues = this.equalBoolValues;
	                    this._sameValues = this.sameBoolValues;
	                    this._readValue = this.readBooleanValue;
	                    this._nullValue = false;
	                    break;
	                case Types.ValueType.OBJECT:
	                    this._equalValues = this.equalObjectValues;
	                    this._sameValues = this.sameObjectValues;
	                    this._readValue = this.readObjectValues;
	                    this._nullValue = false;
	                    break;
	                default:
	                    this._equalValues = this.equalDummyValues;
	                    this._sameValues = this.sameDummyValues;
	                    this._readValue = this.readDummyValue;
	                    this._nullValue = undefined;
	                    break;
	            }
	        }
	    };
	    DataField.prototype.$_refreshFormats = function (owner) {
	        this._owner = owner;
	        if (this._dateParser) {
	            if (!this._dateParser.baseYear) {
	                this._dateParser.baseYear = owner.baseYear;
	            }
	            if (!this._dateParser.amText) {
	                this._dateParser.amText = owner.amText;
	            }
	            if (!this._dateParser.pmText) {
	                this._dateParser.pmText = owner.pmText;
	            }
	        }
	        this._ownerBoolParser = owner.boolParser;
	        this._ownerDateParser = owner.dateParser;
	    };
	    DataField.prototype.equalDummyValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.sameDummyValues = function (v1, v2) {
	        if (v1 === undefined || v1 === null) {
	            return v2 === undefined || v2 === null;
	        }
	        if (v2 === undefined || v2 === null) {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.equalTextValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.sameTextValues = function (v1, v2) {
	        if (v1 === undefined || v1 === null || v1 == "") {
	            return v2 === undefined || v2 === null || v2 == "";
	        }
	        if (v2 === undefined || v2 === null || v2 == "") {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.equalNumberValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        if (isNaN(v1)) {
	            return isNaN(v2);
	        }
	        if (isNaN(v2)) {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.sameNumberValues = function (v1, v2) {
	        if (isNaN(v1)) {
	            return isNaN(v2);
	        }
	        if (isNaN(v2)) {
	            return false;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.equalDateValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        if (!(v1 instanceof Date)) {
	            return !(v2 instanceof Date);
	        }
	        if (!(v2 instanceof Date)) {
	            return false;
	        }
	        return v1.getTime() == v2.getTime();
	    };
	    DataField.prototype.sameDateValues = function (v1, v2) {
	        if (!(v1 instanceof Date)) {
	            return !(v2 instanceof Date);
	        }
	        if (!(v2 instanceof Date)) {
	            return false;
	        }
	        return v1.getTime() == v2.getTime();
	    };
	    DataField.prototype.equalBoolValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        return Boolean(v1) == Boolean(v2);
	    };
	    DataField.prototype.sameBoolValues = function (v1, v2) {
	        if (v1 === undefined) {
	            return v2 === undefined;
	        }
	        if (v2 === undefined) {
	            return false;
	        }
	        return Boolean(v1) == Boolean(v2);
	    };
	    DataField.prototype.equalObjectValues = function (v1, v2) {
	        if (v1 === undefined || v2 === undefined) {
	            return (v1 === undefined) == (v2 === undefined);
	        }
	        return v1 === v2;
	    };
	    DataField.prototype.sameObjectValues = function (v1, v2) {
	        if (v1 == undefined || v2 == undefined) {
	            return v1 == undefined && v2 == undefined;
	        }
	        return v1 == v2;
	    };
	    DataField.prototype.readDummyValue = function (v) {
	        return v;
	    };
	    DataField.prototype.readTextValue = function (v) {
	        if (v === undefined) {
	            return v;
	        }
	        var s = (v === null) ? null : String(v);
	        if (this._ranged && this._runSet) {
	            if (this._runSet.indexOf(s) < 0) {
	                return undefined;
	            }
	        }
	        return s;
	    };
	    DataField.prototype.readCharValue = function (v) {
	        if (v === undefined) {
	            return v;
	        }
	        var s = (v === null) ? null : String(v);
	        if (s) {
	            s = s.substr(0, this._length);
	        }
	        if (this._ranged && this._runSet) {
	            if (this._runSet.indexOf(s) < 0) {
	                return undefined;
	            }
	        }
	        return s;
	    };
	    DataField.prototype.readNumberValue = function (v) {
	        if (v === undefined || v === null || v === "") {
	            return undefined;
	        }
	        var n = Number(v);
	        if (this._ranged) {
	            if (this._runSet) {
	                if (this._runSet.indexOf(n) < 0) {
	                    return undefined;
	                }
	            }
	            else {
	                if (!isNaN(this._runMin)) {
	                    n = Math.max(this._runMin, n);
	                }
	                if (!isNaN(this._runMax)) {
	                    n = Math.min(this._runMax, n);
	                }
	            }
	        }
	        return n;
	    };
	    DataField.prototype.readUnumValue = function (v) {
	        if (v === undefined || v === null || v === "") {
	            return undefined;
	        }
	        var n = Math.max(0, Number(v));
	        if (this._ranged) {
	            if (this._runSet) {
	                if (this._runSet.indexOf(n) < 0) {
	                    return undefined;
	                }
	            }
	            else {
	                if (!isNaN(this._runMin)) {
	                    n = Math.max(this._runMin, n);
	                }
	                if (!isNaN(this._runMax)) {
	                    n = Math.min(this._runMax, n);
	                }
	            }
	            n = Math.max(0, n);
	        }
	        return n;
	    };
	    DataField.prototype.readIntValue = function (v) {
	        if (v === undefined || v === null || v === "") {
	            return undefined;
	        }
	        var n = v >= 0 ? Math.floor(v) : Math.ceil(v);
	        if (this._ranged) {
	            if (this._runSet) {
	                if (this._runSet.indexOf(n) < 0) {
	                    return undefined;
	                }
	            }
	            else {
	                if (!isNaN(this._runMin)) {
	                    n = Math.max(this._runMin, n);
	                }
	                if (!isNaN(this._runMax)) {
	                    n = Math.min(this._runMax, n);
	                }
	            }
	            n = n >= 0 ? Math.floor(n) : Math.ceil(n);
	        }
	        return n;
	    };
	    DataField.prototype.readUintValue = function (v) {
	        if (v === undefined || v === null || v === "") {
	            return undefined;
	        }
	        var n = Math.max(0, Math.floor(Math.floor(v)));
	        if (this._ranged) {
	            if (this._runSet) {
	                if (this._runSet.indexOf(n) < 0) {
	                    return undefined;
	                }
	            }
	            else {
	                if (!isNaN(this._runMin)) {
	                    n = Math.max(this._runMin, n);
	                }
	                if (!isNaN(this._runMax)) {
	                    n = Math.min(this._runMax, n);
	                }
	            }
	            n = Math.max(0, Math.floor(Math.floor(n)));
	        }
	        return n;
	    };
	    DataField.prototype.readDatetimeValue = function (v) {
	        if (v === undefined) {
	            return undefined;
	        }
	        if (v === null) {
	            return this._nullValue;
	        }
	        var d = this.getDate(this._ownerDateParser, v);
	        if (d && this._ranged) {
	            if (this._runSet) {
	                var found = false;
	                for (var i = this._runSet.length; i--;) {
	                    if (d.getTime() == this._runSet[i]) {
	                        found = true;
	                        break;
	                    }
	                }
	                if (!found) {
	                    return undefined;
	                }
	            }
	            else {
	                if (this._runMin) {
	                    if (d.getTime() < this._runMin.getTime()) {
	                        d = new Date(this._runMin);
	                    }
	                }
	                if (this._runMax) {
	                    if (d.getTime() > this._runMax.getTime()) {
	                        d = new Date(this._runMax);
	                    }
	                }
	            }
	        }
	        return d;
	    };
	    DataField.prototype.readDateValue = function (v) {
	        if (v === undefined) {
	            return undefined;
	        }
	        if (v === null) {
	            return this._nullValue;
	        }
	        var d = this.getDate(this._ownerDateParser, v);
	        if (d) {
	            d.setHours(0, 0, 0, 0);
	            if (this._ranged) {
	                if (this._runSet) {
	                    var found = false;
	                    for (var i = this._runSet.length; i--;) {
	                        if (d.getTime() == this._runSet[i]) {
	                            found = true;
	                            break;
	                        }
	                    }
	                    if (!found) {
	                        return undefined;
	                    }
	                }
	                else {
	                    if (this._runMin) {
	                        if (d.getTime() < this._runMin.getTime()) {
	                            d = new Date(this._runMin);
	                        }
	                    }
	                    if (this._runMax) {
	                        if (d.getTime() > this._runMax.getTime()) {
	                            d = new Date(this._runMax);
	                        }
	                    }
	                }
	            }
	        }
	        return d;
	    };
	    DataField.prototype.readBooleanValue = function (v) {
	        if (v === undefined) {
	            return v;
	        }
	        if (v === null) {
	            return false;
	        }
	        var b = this.getBool(this._ownerBoolParser, v);
	        return b;
	    };
	    DataField.prototype.readObjectValues = function (v) {
	        if (typeof v === "string") {
	            try {
	                v = JSON.parse(v);
	            }
	            catch (e) {
	                throw new Error("Invalid Object String " + e + "\r\n" + v);
	            }
	        }
	        else if (typeof v != "object") {
	            try {
	                v = JSON.parse(v);
	            }
	            catch (e) {
	            }
	        }
	        return v;
	    };
	    DataField.prototype.$_compareObject = function (v1, v2, row1, row2) {
	        var key = this._objectKey;
	        var fn = this._objectCallback;
	        var val1 = fn ? fn(this.orgFieldName, row1, v1) : key && v1.hasOwnProperty(key) ? v1[key] : null;
	        var val2 = fn ? fn(this.orgFieldName, row2, v2) : key && v2.hasOwnProperty(key) ? v2[key] : null;
	        return val1 > val2 ? 1 : val1 < v2 ? 0 : -1;
	    };
	    DataField.prototype.$_calculateValue = function (runtime, rowId, fieldName, fields, orgFields, values) {
	        if (this._valueCallback) {
	            return this._valueCallback(rowId, fieldName, orgFields, values);
	        }
	        else if (this._valueExpression) ;
	        return undefined;
	    };
	    return DataField;
	}(Base_1.Base));
	exports.DataField = DataField;
	});

	unwrapExports(DataField_1);
	var DataField_2 = DataField_1.DataField;

	var RestoreMode_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RestoreMode.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var RestoreMode;
	(function (RestoreMode) {
	    RestoreMode["NONE"] = "none";
	    RestoreMode["EXPLICIT"] = "explicit";
	    RestoreMode["AUTO"] = "auto";
	})(RestoreMode = exports.RestoreMode || (exports.RestoreMode = {}));
	});

	unwrapExports(RestoreMode_1);
	var RestoreMode_2 = RestoreMode_1.RestoreMode;

	var CalculateExpressionRuntime_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CalculateExpressionRuntime.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var CalculateExpressionRuntime = /** @class */ (function (_super) {
	    __extends(CalculateExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CalculateExpressionRuntime() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._values = null;
	        _this._fields = null;
	        _this._fieldCount = 0;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CalculateExpressionRuntime.prototype.setValues = function (values, fields) {
	        this._values = values;
	        this._fields = fields;
	        this._fieldCount = fields ? fields.length : 0;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CalculateExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (CalculateExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return CalculateExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    CalculateExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    CalculateExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._values) {
	            if (idKey == CalculateExpressionRuntime.ID_VALUE || idKey == CalculateExpressionRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._values[index];
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    CalculateExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capital) {
	        if (idKey == CalculateExpressionRuntime.ID_VALUE || idKey == CalculateExpressionRuntime.ID_VALUES) {
	            if (this._values && this._fields) {
	                var idx = this._fields.indexOf(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._values[idx];
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    CalculateExpressionRuntime.ID_VALUE = 0;
	    CalculateExpressionRuntime.ID_VALUES = 1;
	    CalculateExpressionRuntime.IDENTS = {
	        "value": CalculateExpressionRuntime.ID_VALUE,
	        "values": CalculateExpressionRuntime.ID_VALUES
	    };
	    return CalculateExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.CalculateExpressionRuntime = CalculateExpressionRuntime;
	});

	unwrapExports(CalculateExpressionRuntime_1);
	var CalculateExpressionRuntime_2 = CalculateExpressionRuntime_1.CalculateExpressionRuntime;

	var DateTimeWriter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DateTimeWriter.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var $$_DT_DATE_TOKENS = [
	    "yy", "yyyy",
	    "M", "MM",
	    "d", "dd",
	    "a",
	    "H", "HH", "h", "hh",
	    "m", "mm",
	    "s", "ss",
	    "S", "SS", "SSS"
	];
	var $$_DT_DATE_SEPARATORS = [
	    ".", "/", "-", ":"
	];
	var U_Z = "Z".charCodeAt(0);
	var L_Z = "z".charCodeAt(0);
	var U_A = "A".charCodeAt(0);
	var L_A = "a".charCodeAt(0);
	var L_Y = "y".charCodeAt(0);
	var U_M = "M".charCodeAt(0);
	var L_M = "m".charCodeAt(0);
	var L_D = "d".charCodeAt(0);
	var U_H = "H".charCodeAt(0);
	var L_H = "h".charCodeAt(0);
	var U_S = "S".charCodeAt(0);
	var L_S = "s".charCodeAt(0);
	var pad = function (v) {
	    return (v < 10) ? "0" + v : String(v);
	};
	var pad3 = function (v) {
	    return (v < 10) ? "00" + v : (v < 100) ? "0" : String(v);
	};
	var DateTimeWriter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DateTimeWriter(format) {
	        this._baseYear = 2000;
	        this._preserveTime = false;
	        this._hasAmPm = false;
	        this.formatString = format;
	    }
	    Object.defineProperty(DateTimeWriter.prototype, "format", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeWriter.prototype, "formatString", {
	        /** formatString */
	        get: function () {
	            return this._formatString;
	        },
	        set: function (value) {
	            value = value || DateTimeWriter.DefaultFormat;
	            if (value != this._formatString) {
	                this._tokens = [];
	                this.parse(value);
	                this._formatString = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DateTimeWriter.prototype.getText = function (d) {
	        if (!this._tokens) {
	            return "";
	        }
	        var date = d instanceof Date ? d : new Date(d);
	        var tokens = this._tokens;
	        var s = "";
	        for (var i = 0, cnt = tokens.length; i < cnt; i++) {
	            var t = tokens[i];
	            var len = t.length;
	            switch (t.charCodeAt(0)) {
	                case L_Y:
	                    s += len > 2 ? date.getFullYear() : pad(date.getFullYear() % 100);
	                    break;
	                case U_M:
	                    s += len > 1 ? pad(date.getMonth() + 1) : (date.getMonth() + 1);
	                    break;
	                case L_D:
	                    s += len > 1 ? pad(date.getDate()) : date.getDate();
	                    break;
	                case U_H:
	                    s += len > 1 ? pad(date.getHours()) : date.getHours();
	                    break;
	                case L_H:
	                    if (this._hasAmPm) {
	                        var h = date.getHours();
	                        if (h == 0) {
	                            h = 12;
	                        }
	                        else if (h > 12) {
	                            h = h - 12;
	                        }
	                        s += len > 1 ? pad(h) : h;
	                    }
	                    else {
	                        s += len > 1 ? pad(date.getHours()) : date.getHours();
	                    }
	                    break;
	                case L_M:
	                    s += len > 1 ? pad(date.getMinutes()) : date.getMinutes();
	                    break;
	                case L_S:
	                    s += len > 1 ? pad(date.getSeconds()) : date.getSeconds();
	                    break;
	                case L_A:
	                case U_A:
	                    if (date.getHours() < 12) {
	                        s += this._amText;
	                    }
	                    else {
	                        s += this._pmText;
	                    }
	                    break;
	                case U_S:
	                    var v = date.getMilliseconds();
	                    if (len == 3)
	                        s += pad3(v);
	                    else if (len == 2)
	                        s += pad(v);
	                    else
	                        s += v.toString().substr(0, len);
	                    break;
	                /*
	                 case U_Y:
	                 break;
	                 case U_D:
	                 s += day of year
	                 break;
	                 */
	                default:
	                    s += t;
	            }
	        }
	        return s;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DateTimeWriter.prototype.parseDateFormatTokens = function (format) {
	        var tokens = [];
	        if (format) {
	            var str = format.trim();
	            var len = str.length;
	            var i = 0;
	            while (i < len) {
	                var tok = str.charAt(i);
	                if ($$_DT_DATE_SEPARATORS.indexOf(tok) >= 0) {
	                    tokens.push(tok);
	                    i++;
	                }
	                else {
	                    var p = i++;
	                    while (i < len && str.charAt(i) == tok) {
	                        i++;
	                    }
	                    tok = str.substring(p, i);
	                    if ($$_DT_DATE_TOKENS.indexOf(tok) < 0) {
	                        var c = tok.charCodeAt(0);
	                        if (c >= U_A && c <= U_Z || c >= L_A && c <= L_Z) {
	                            throw new Error("Invalid datetime write format: " + format);
	                        }
	                    }
	                    tokens.push(tok);
	                }
	                if (i < len && Utils_1.Utils.isWhiteSpace(tok = str.charAt(i))) {
	                    tokens.push(tok);
	                    while (i < len && Utils_1.Utils.isWhiteSpace(str.charAt(i))) {
	                        i++;
	                    }
	                }
	            }
	        }
	        return tokens;
	    };
	    DateTimeWriter.prototype.parse = function (fmt) {
	        this._amText = "AM";
	        this._pmText = "PM";
	        if (fmt) {
	            var arr = fmt.split(";");
	            this._format = arr[0] || DateTimeWriter.DefaultFormat;
	            this._tokens = this.parseDateFormatTokens(this._format);
	            this._hasAmPm = this._tokens.indexOf("a") >= 0 || this._tokens.indexOf("A") >= 0;
	            if (arr.length > 1 && arr[1]) {
	                var ampms = arr[1].split(",");
	                if (ampms.length > 0 && ampms[0]) {
	                    this._amText = ampms[0];
	                }
	                if (ampms.length > 1 && ampms[1]) {
	                    this._pmText = ampms[1];
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DateTimeWriter.DefaultFormat = "yyyy/MM/dd";
	    DateTimeWriter.Default = new DateTimeWriter(DateTimeWriter.DefaultFormat);
	    return DateTimeWriter;
	}());
	exports.DateTimeWriter = DateTimeWriter;
	});

	unwrapExports(DateTimeWriter_1);
	var DateTimeWriter_2 = DateTimeWriter_1.DateTimeWriter;

	var BooleanFormatter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// BooleanFormatter.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var BooleanFormatter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function BooleanFormatter(format) {
	        this.format = format;
	    }
	    Object.defineProperty(BooleanFormatter.prototype, "format", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        set: function (value) {
	            if (value != this._format) {
	                this._format = value;
	                this.parse();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    BooleanFormatter.prototype.formatValue = function (v) {
	        return (v === undefined) ? this._nullText : v ? this._trueText : this._falseText;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    BooleanFormatter.prototype.parse = function () {
	        this._falseText = this._trueText = null;
	        if (this._format) {
	            var arr = this._format.split(/[;\:]/);
	            this._falseText = arr[0];
	            if (arr.length > 0) {
	                this._trueText = arr[1];
	            }
	            if (arr.length > 1) {
	                this._nullText = arr[2];
	            }
	        }
	    };
	    return BooleanFormatter;
	}());
	exports.BooleanFormatter = BooleanFormatter;
	});

	unwrapExports(BooleanFormatter_1);
	var BooleanFormatter_2 = BooleanFormatter_1.BooleanFormatter;

	var DecimalFormatter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DecimalFormatter.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var DEC_SEP = ".";
	var GRP_SEP = ",";
	var decimalPlaces = function (num) {
	    var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
	    if (!match) {
	        return 0;
	    }
	    return Math.max(0, 
	    // Number of digits right of decimal point.
	    (match[1] ? match[1].length : 0)
	        // Adjust for scientific notation.
	        - (match[2] ? +match[2] : 0));
	};
	var _isRoundChar = function (c) {
	    return Utils_1.Utils.included(c, "c", "f", "C", "F", "a", "A");
	};
	var DecimalFormatter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DecimalFormatter(format) {
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._optDecimal = false;
	        this._groupPos = 0;
	        this._replacement = "$&,";
	        this._displayMinusZero = true;
	        this._minDigits = 0;
	        this._maxDigits = 0;
	        this._minInts = 0;
	        this._maxInts = 0;
	        this.parse(format);
	    }
	    Object.defineProperty(DecimalFormatter.prototype, "separator", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** separator */
	        get: function () {
	            return this._seperator;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DecimalFormatter.prototype, "groupSep", {
	        /** groupSep */
	        get: function () {
	            return this._groupSep;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DecimalFormatter.prototype, "minDigits", {
	        /** minDigits */
	        get: function () {
	            return this._minDigits;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DecimalFormatter.prototype, "maxDigits", {
	        /** maxDigits */
	        get: function () {
	            return this._maxDigits;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DecimalFormatter.prototype.parse = function (format) {
	        this._minDigits = 0;
	        this._maxDigits = 0;
	        this._minInts = 0;
	        this._maxInts = 0;
	        this._parse(format);
	    };
	    DecimalFormatter.prototype.format = function (value) {
	        var v = Number(value);
	        if (isNaN(v)) {
	            return "";
	        }
	        else {
	            var digits = this._minDigits;
	            var p = 0;
	            if (this._optDecimal) {
	                var dlen = decimalPlaces(v);
	                digits = Math.min(Math.max(dlen, this._minDigits), this._maxDigits);
	            }
	            if (digits > 0 && this._round) {
	                p = Math.pow(10, digits);
	                switch (this._round) {
	                    case "c":
	                        v = Math.ceil(p * v) / p;
	                        break;
	                    case "f":
	                        v = Math.floor(p * v) / p;
	                        break;
	                }
	            }
	            v = (this._round === "a") ? Math.abs(v) : v;
	            v = Number(v.toPrecision(15));
	            var fixed = v.toFixed(digits);
	            try {
	                !this._displayMinusZero && (p = parseFloat(fixed)) === Math.abs(parseFloat(fixed)) && p === 0 && (fixed = Math.abs(v).toFixed(digits));
	            }
	            catch (e) {
	            }
	            if (this._seperator) {
	                fixed = fixed.replace(DEC_SEP, this._seperator);
	            }
	            if (this._reg) {
	                if (digits)
	                    return fixed.replace(this._regDecimal, this._replacement);
	                else
	                    return fixed.replace(this._reg, this._replacement);
	            }
	            else {
	                return fixed;
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DecimalFormatter.prototype._parse = function (format) {
	        if (format) {
	            format = format.trim();
	        }
	        if (!format) {
	            return;
	        }
	        var seperator = DEC_SEP;
	        var groupSep = GRP_SEP;
	        if (format.indexOf(";") > -1) {
	            var fmts = format.split(";");
	            format = fmts[0];
	            if (fmts.length > 1 && fmts[1] && !_isRoundChar(fmts[1]))
	                seperator = fmts[1];
	            if (fmts.length > 2 && fmts[2] && !_isRoundChar(fmts[2]))
	                groupSep = fmts[2];
	            this._round = fmts[3] || fmts[2] || fmts[1];
	            this._round = _isRoundChar(this._round) ? this._round.toLowerCase() : this._round;
	        }
	        this._seperator = seperator == DEC_SEP ? null : seperator;
	        this._groupSep = groupSep == GRP_SEP ? null : groupSep;
	        var i;
	        var c;
	        var len = format.length;
	        var period = format.indexOf(DEC_SEP);
	        this._optDecimal = format.indexOf("#", period) > 0;
	        if (period >= 0) {
	            for (i = period + 1; i < len; i++) {
	                if (format.charAt(i) == "0") {
	                    this._minDigits++;
	                    this._maxDigits++;
	                }
	                else {
	                    break;
	                }
	            }
	            for (; i < len; i++) {
	                if (format.charAt(i) == "#") {
	                    this._maxDigits++;
	                }
	                else {
	                    break;
	                }
	            }
	            format = format.substr(0, period);
	        }
	        if (format) {
	            len = format.length;
	            if (format.charAt(len - 1) == GRP_SEP) {
	                this._groupPos = 3; // locale default
	                format = format.substr(0, len - 1);
	            }
	        }
	        if (format) {
	            len = format.length;
	            var zero = true;
	            for (i = len - 1; i >= 0; i--) {
	                c = format.charAt(i);
	                if (c == "0" && zero) {
	                    this._minInts++;
	                    this._maxInts++;
	                }
	                else if (this._groupPos == 0 && c == GRP_SEP) {
	                    this._groupPos = len - i - 1;
	                }
	                else if (c == "#") {
	                    zero = false;
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        if (this._groupPos > 0) {
	            this._replacement = "$&" + groupSep;
	            this._reg = new RegExp('\\d(?=(\\d{' + this._groupPos + '})+($|\\' + seperator + '))', 'g');
	            this._regDecimal = new RegExp('\\d(?=(\\d{' + this._groupPos + '})+\\' + seperator + ')', 'g');
	        }
	    };
	    return DecimalFormatter;
	}());
	exports.DecimalFormatter = DecimalFormatter;
	});

	unwrapExports(DecimalFormatter_1);
	var DecimalFormatter_2 = DecimalFormatter_1.DecimalFormatter;

	var DataOutputOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataOutputOptions.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var DataOutputOptions = /** @class */ (function (_super) {
	    __extends(DataOutputOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataOutputOptions(config) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._datetimeWriter = null;
	        _this._booleanFormatter = null;
	        _this._numberFormatter = null;
	        _this.assignFrom(config);
	        return _this;
	    }
	    Object.defineProperty(DataOutputOptions.prototype, "datetimeFormat", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                if (value) {
	                    this._datetimeWriter = new DateTimeWriter_1.DateTimeWriter(value);
	                }
	                else {
	                    this._datetimeWriter = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                if (value) {
	                    this._booleanFormatter = new BooleanFormatter_1.BooleanFormatter(value);
	                }
	                else {
	                    this._booleanFormatter = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "numberFormat", {
	        /** numberFormat */
	        get: function () {
	            return this._numberFormat;
	        },
	        set: function (value) {
	            if (value != this._numberFormat) {
	                this._numberFormat = value;
	                if (value) {
	                    this._numberFormatter = new DecimalFormatter_1.DecimalFormatter(value);
	                }
	                else {
	                    this._numberFormatter = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "datetimeCallback", {
	        /** datetimeCallback */
	        get: function () {
	            return this._datetimeCallback;
	        },
	        set: function (value) {
	            this._datetimeCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "booleanCallback", {
	        /** booleanCallback */
	        get: function () {
	            return this._booleanCallback;
	        },
	        set: function (value) {
	            this._booleanCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "numberCallback", {
	        /** numberCallback */
	        get: function () {
	            return this._numberCallback;
	        },
	        set: function (value) {
	            this._numberCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "nullDateText", {
	        /** nullDateText */
	        get: function () {
	            return this._nullDateText;
	        },
	        set: function (value) {
	            this._nullDateText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "nullText", {
	        /** nullText */
	        get: function () {
	            return this._nullText;
	        },
	        set: function (value) {
	            this._nullText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "nanText", {
	        /** nanText */
	        get: function () {
	            return this._nanText;
	        },
	        set: function (value) {
	            this._nanText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "datetimeWriter", {
	        get: function () {
	            return this._datetimeWriter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "booleanFormatter", {
	        get: function () {
	            return this._booleanFormatter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataOutputOptions.prototype, "numberFormatter", {
	        get: function () {
	            return this._numberFormatter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DataOutputOptions;
	}(Base_1.Base));
	exports.DataOutputOptions = DataOutputOptions;
	});

	unwrapExports(DataOutputOptions_1);
	var DataOutputOptions_2 = DataOutputOptions_1.DataOutputOptions;

	var DataSource_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataSource.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var SimpleDataComparer = /** @class */ (function () {
	    function SimpleDataComparer() {
	    }
	    SimpleDataComparer.prototype.compare = function (field, v1, v2) {
	        if (field.dataType == Types.ValueType.NUMBER) {
	            return Number(v1) - Number(v2);
	        }
	        else {
	            return v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
	        }
	    };
	    return SimpleDataComparer;
	}());
	var DataSourceError = /** @class */ (function (_super) {
	    __extends(DataSourceError, _super);
	    function DataSourceError(message) {
	        return _super.call(this, message) || this;
	    }
	    return DataSourceError;
	}(Error));
	exports.DataSourceError = DataSourceError;
	var ClientEditingError = /** @class */ (function (_super) {
	    __extends(ClientEditingError, _super);
	    function ClientEditingError() {
	        return _super.call(this, "Client is editing (call grid.commit() or grid.cancel() first)") || this;
	    }
	    return ClientEditingError;
	}(Error));
	exports.ClientEditingError = ClientEditingError;
	var DataSource = /** @class */ (function (_super) {
	    __extends(DataSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataSource() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._subTypeEnabled = true;
	        _this._insertable = true;
	        _this._updatable = true;
	        _this._deletable = true;
	        _this._softDeleting = false;
	        _this._deleteCreated = false;
	        _this._checkStates = true;
	        _this._restoreMode = RestoreMode_1.RestoreMode.NONE;
	        _this._strictRestore = false;
	        _this._booleanFormat = null;
	        _this._datetimeFormat = null;
	        _this._baseYear = 2000;
	        _this._amText = "AM";
	        _this._pmText = "PM";
	        _this._alertClientError = true;
	        _this._throwClientError = false;
	        _this._commitBeforeDataEdit = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._fields = [];
	        _this._calcFields = [];
	        _this._fieldNames = [];
	        _this._fieldMap = {};
	        _this._defComparer = new SimpleDataComparer();
	        _this._comparers = [];
	        _this._boolParser = BooleanConverter_1.BooleanConverter.Default;
	        _this._dateParser = DateTimeReader_1.DateTimeReader.Default;
	        _this._eventLock = 0;
	        _this._resetLock = 0;
	        _this._countLock = 0;
	        _this._clients = [];
	        _this._destroying = false;
	        return _this;
	    }
	    DataSource.prototype.dispose = function () {
	        this._destroying = true;
	        try {
	            this.$_internalClearFields();
	            this._fieldMap = null;
	        }
	        catch (err) {
	        }
	        this._fields = null;
	        this._calcFields = null;
	        this._fieldNames = null;
	        this._comparers = null;
	        this._clients = null;
	    };
	    Object.defineProperty(DataSource.prototype, "subTypeEnabled", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** subTypeEnabled */
	        get: function () {
	            return this._subTypeEnabled;
	        },
	        set: function (value) {
	            if (value != this._subTypeEnabled) {
	                this._subTypeEnabled = value;
	                for (var _i = 0, _a = this._fields; _i < _a.length; _i++) {
	                    var field = _a[_i];
	                    field.$_resetTypes();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "insertable", {
	        /** insertable */
	        get: function () {
	            return this._insertable;
	        },
	        set: function (value) {
	            this._insertable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "updatable", {
	        /** updatable */
	        get: function () {
	            return this._updatable;
	        },
	        set: function (value) {
	            this._updatable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "deletable", {
	        /** deletable */
	        get: function () {
	            return this._deletable;
	        },
	        set: function (value) {
	            this._deletable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "softDeleting", {
	        /** softDeleting */
	        get: function () {
	            return this._softDeleting;
	        },
	        set: function (value) {
	            this._softDeleting = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "deleteCreated", {
	        /** deleteCreated */
	        get: function () {
	            return this._deleteCreated;
	        },
	        set: function (value) {
	            this._deleteCreated = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "checkStates", {
	        /** checkStates */
	        get: function () {
	            return this._checkStates;
	        },
	        set: function (value) {
	            if (value != this._checkStates) {
	                this._checkStates = value;
	                this._doCheckStatesChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "restoreMode", {
	        /** restoreMode */
	        get: function () {
	            return this._restoreMode;
	        },
	        set: function (value) {
	            if (value != this._restoreMode) {
	                var old = this._restoreMode;
	                this._restoreMode = value;
	                this._doRestoreModeChanged(old, value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "strictRestore", {
	        /** strictRestore */
	        get: function () {
	            return this._strictRestore;
	        },
	        set: function (value) {
	            this._strictRestore = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                this._boolParser = value ? new BooleanConverter_1.BooleanConverter(value) : BooleanConverter_1.BooleanConverter.Default;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "datetimeFormat", {
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                this.$_createDateReader();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "baseYear", {
	        /** baseYear */
	        get: function () {
	            return this._baseYear;
	        },
	        set: function (value) {
	            this._baseYear = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "amText", {
	        /** amText */
	        get: function () {
	            return this._amText;
	        },
	        set: function (value) {
	            if (value != this._amText) {
	                this._amText = value;
	                this.$_createDateReader();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "pmText", {
	        /** pmText */
	        get: function () {
	            return this._pmText;
	        },
	        set: function (value) {
	            if (value != this._pmText) {
	                this._pmText = value;
	                this.$_createDateReader();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "alertClientError", {
	        /** alertClientError */
	        get: function () {
	            return this._alertClientError;
	        },
	        set: function (value) {
	            this._alertClientError = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "throwClientError", {
	        /** throwClientError */
	        get: function () {
	            return this._throwClientError;
	        },
	        set: function (value) {
	            this._throwClientError = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "commitBeforeDataEdit", {
	        /** commitBeforeDataEdit */
	        get: function () {
	            return this._commitBeforeDataEdit;
	        },
	        set: function (value) {
	            this._commitBeforeDataEdit = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "calculateRuntime", {
	        /** calculateRuntime */
	        get: function () {
	            if (!this._calculateRuntime) {
	                this._calculateRuntime = new CalculateExpressionRuntime_1.CalculateExpressionRuntime();
	            }
	            return this._calculateRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "local", {
	        /** local */
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "immediateUpdate", {
	        /** immediateUpdate */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "summarized", {
	        /** summarized */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "fieldCount", {
	        /** fieldCount */
	        get: function () {
	            return this._fields.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "boolParser", {
	        /** boolParser */
	        get: function () {
	            return this._boolParser;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "dateParser", {
	        /** dateParser */
	        get: function () {
	            return this._dateParser;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataSource.prototype, "eventLocked", {
	        /** eventLocked */
	        get: function () {
	            return this._eventLock > 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataSource.prototype.registerClient = function (client) {
	        if (client && this._clients.indexOf(client) < 0) {
	            this._clients.push(client);
	        }
	    };
	    DataSource.prototype.unregisterClient = function (client) {
	        if (client) {
	            var index = this._clients.indexOf(client);
	            index >= 0 && this._clients.splice(index, 1);
	        }
	    };
	    DataSource.prototype.cancelClients = function () {
	        for (var _i = 0, _a = this._clients; _i < _a.length; _i++) {
	            var client = _a[_i];
	            client.cancelDataEditing();
	        }
	    };
	    DataSource.prototype.commitClients = function () {
	        for (var _i = 0, _a = this._clients; _i < _a.length; _i++) {
	            var client = _a[_i];
	            client.commitDataEditing();
	        }
	    };
	    DataSource.prototype.beginUpdate = function () {
	        this._checkClientState();
	        this._eventLock++;
	    };
	    DataSource.prototype.endUpdate = function (refresh) {
	        if (refresh === void 0) { refresh = true; }
	        this._checkClientState();
	        this._eventLock = Math.max(0, this._eventLock - 1);
	        if (this._eventLock == 0) {
	            if (refresh) {
	                if (this._resetLock > 0) {
	                    this._fireReset();
	                }
	                else {
	                    this._fireRefresh();
	                }
	                if (this._countLock > 0) {
	                    this._fireRowCountChanged();
	                }
	            }
	            this._resetLock = this._countLock = 0;
	        }
	    };
	    DataSource.prototype.addField = function (source, resetFields, calculateData) {
	        if (!this._checkClientState())
	            return;
	        var field = null;
	        this.beginUpdate();
	        try {
	            field = this.$_internalAddField(source);
	            field && field.$_resetTypes(this);
	        }
	        finally {
	            resetFields && this._doFieldsReset();
	            this.endUpdate();
	        }
	        return field;
	    };
	    DataSource.prototype.clearFields = function () {
	        if (!this._checkClientState())
	            return;
	        if (this._fields.length > 0) {
	            this.$_internalClearFields();
	            this._doFieldsReset();
	        }
	    };
	    DataSource.prototype.setFields = function (fields) {
	        if (!this._checkClientState())
	            return;
	        this.beginUpdate();
	        try {
	            this.$_internalClearFields();
	            if (fields) {
	                for (var i = 0, cnt = fields.length; i < cnt; i++) {
	                    var field = this.$_internalAddField(fields[i]);
	                    if (field) {
	                        field.$_resetTypes(this);
	                    }
	                }
	            }
	        }
	        finally {
	            this.endUpdate();
	            this._doFieldsReset();
	        }
	    };
	    DataSource.prototype.getField = function (index) {
	        return this._fields[index];
	    };
	    DataSource.prototype.getFields = function () {
	        return this._fields.slice();
	    };
	    DataSource.prototype.fieldByName = function (name) {
	        if (name) {
	            var uppname = name.toUpperCase();
	            for (var _i = 0, _a = this._fields; _i < _a.length; _i++) {
	                var field = _a[_i];
	                if (field.fieldName == uppname) {
	                    return field;
	                }
	            }
	        }
	        return null;
	    };
	    DataSource.prototype.getFieldNames = function () {
	        var i, cnt = this._fields.length, names = [];
	        for (i = 0; i < cnt; i++) {
	            names.push(this._fields[i].fieldName);
	        }
	        return names;
	    };
	    DataSource.prototype.getOrgFieldNames = function () {
	        var i, cnt = this._fields.length, names = [];
	        for (i = 0; i < cnt; i++) {
	            names.push(this._fields[i].orgFieldName);
	        }
	        return names;
	    };
	    DataSource.prototype.getFieldName = function (field) {
	        this.checkFieldIndex(field);
	        return this._fields[field].fieldName;
	    };
	    DataSource.prototype.getOrgFieldName = function (field) {
	        this.checkFieldIndex(field);
	        return this._fields[field].orgFieldName;
	    };
	    DataSource.prototype.getFieldIndex = function (fieldName) {
	        if (fieldName) {
	            var s = fieldName.toUpperCase();
	            if (s in this._fieldMap) {
	                return this._fieldMap[s];
	            }
	        }
	        return -1;
	    };
	    DataSource.prototype.getFieldIndexC = function (fieldName) {
	        if (fieldName in this._fieldMap) {
	            return this._fieldMap[fieldName];
	        }
	        return -1;
	    };
	    DataSource.prototype.getBaseField = function (field) {
	        if (field >= 0 && field < this._fields.length) {
	            return this.getFieldIndex(this._fields[field].baseField);
	        }
	        else {
	            return -1;
	        }
	    };
	    // getFieldIndexOf(field: any): number {
	    // 	return typeof field == "string" ? this.getFieldIndex(field) : parseInt(field);
	    // }
	    DataSource.prototype.getValueType = function (field) {
	        return this._fields[field].dataType;
	    };
	    DataSource.prototype.getDefaultValue = function (field) {
	        return this._fields[field].defaultValue();
	    };
	    DataSource.prototype.hasData = function (row) {
	        return false;
	    };
	    DataSource.prototype.canUpdateField = function (row, field) {
	        if (field >= 0 && field < this._fields.length) {
	            var fld = this._fields[field];
	            if (!fld.updatable && row >= 0) {
	                try {
	                    var st = this.getRowState(row);
	                    return !st || st == RowState_1.RowState.CREATED || st == RowState_1.RowState.CREATE_AND_DELETED;
	                }
	                catch (err) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    DataSource.prototype.getDataComparer = function (field) {
	        if (field >= 0) {
	            var comparer = this._comparers[field];
	            if (comparer) {
	                return comparer;
	            }
	            else {
	                return null;
	            }
	        }
	        // this._defComparer.dataType = field >= 0 ? this.getValueType(field) : ValueType.TEXT;
	        // return this._defComparer;
	    };
	    DataSource.prototype.setDataComparer = function (field, comparer) {
	        if (comparer) {
	            this._comparers[field] = comparer;
	        }
	        else {
	            this._comparers[field] = undefined;
	        }
	    };
	    DataSource.prototype.canSummarize = function (field) {
	        if (field >= 0 && field < this.fieldCount) {
	            var t = this.getValueType(field);
	            if (t == Types.ValueType.BOOLEAN || t == Types.ValueType.NUMBER || Types.ValueType.DATE) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DataSource.prototype.findRow = function (fields, values) {
	        return undefined;
	    };
	    DataSource.prototype.getDistinctValues = function (field, maxCount, sortDir) {
	        if (sortDir === void 0) { sortDir = Types.SortDirection.ASCENDING; }
	        return null;
	    };
	    DataSource.prototype.exportToJson = function () {
	    };
	    DataSource.prototype.exportToCsv = function (options) {
	        //new DataProviderCsvExporter()["export"](this, options);		
	    };
	    DataSource.prototype.exportToXml = function () {
	    };
	    DataSource.prototype.canUpdateRow = function (row) {
	        return false;
	    };
	    DataSource.prototype.canAppendRow = function () {
	        return false;
	    };
	    DataSource.prototype.canInsertRow = function (row) {
	        return false;
	    };
	    DataSource.prototype.canDeleteRow = function (row) {
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataSource.prototype.getClientsBusy = function () {
	        var client = null;
	        var ret = { busy: false, cnt: 0, client: client };
	        if (this._destroying) {
	            return ret;
	        }
	        for (var i = this._clients.length; i--;) {
	            if (this._clients[i].isDataEditing()) {
	                ret.busy = true;
	                ret.cnt++;
	                ret.client = this._clients[i];
	            }
	        }
	        return ret;
	    };
	    DataSource.prototype._checkClientState = function () {
	        var busyInfo = this.getClientsBusy();
	        if (busyInfo.busy) {
	            /*
	            // 편집중인 그리드가 1개인경우 편집중인 그리드를 commit한다.
	            // 2개이상인 경우 clientError발생.//
	            if (this._commitBeforeDataEdit && busyInfo.cnt == 1) {
	                listeners = busyInfo.client._listeners;
	                var hasCommit = true;
	                for (var i=0, cnt = listeners.length; i< cnt; i++) {
	                    var isCommit = listeners[i].commit(false,true);
	                    hasCommit = hasCommit && (isCommit || (listeners[i].isEditing && !listeners[i].isEditing()));
	                }
	                if (hasCommit) return true;
	            }
	            */
	            if (this._throwClientError) {
	                throw new ClientEditingError();
	            }
	            if (this._alertClientError) {
	                Utils_1.Utils.alert(new ClientEditingError().message);
	            }
	            return false;
	        }
	        return true;
	    };
	    DataSource.prototype.checkFieldIndex = function (field) {
	        if (field < 0 || field >= this._fields.length) {
	            throw new DataSourceError("Invalid field index: " + field);
	        }
	    };
	    DataSource.prototype.$_internalClearFields = function () {
	        this._checkClientState();
	        for (var _i = 0, _a = this._fields; _i < _a.length; _i++) {
	            var field = _a[_i];
	            field.$_setIndex(-1);
	        }
	        this._fields.splice(0, this._fields.length);
	        this._calcFields.splice(0, this._calcFields.length);
	        this._fieldNames.splice(0, this._fieldNames.length);
	        this._fieldMap = {};
	    };
	    DataSource.prototype.$_internalInsertField = function (index, field) {
	        this._checkClientState();
	        var len = this._fields.length;
	        if (index < 0 || index > len) {
	            debugger;
	            throw new DataSourceError("index is out of bounds:" + index);
	        }
	        if (field) {
	            field.$_prepare(this);
	            this._fields.splice(index, 0, field);
	            this._fieldNames.splice(index, 0, field.fieldName);
	            if (field.calculated) {
	                this._calcFields.push(field);
	            }
	            field.$_setIndex(index);
	            this._fieldMap[field.fieldName] = index;
	            for (var i = index + 1; i <= len; i++) {
	                field = this._fields[i];
	                field.$_setIndex(i);
	                this._fieldMap[field.fieldName] = i;
	            }
	            return index;
	        }
	        return -1;
	    };
	    DataSource.prototype.$_addField = function (fieldName, dataType, length) {
	        if (!fieldName) {
	            throw new DataSourceError("fieldName must be exists.");
	        }
	        if (this.getFieldIndex(fieldName) >= 0) {
	            throw new DataSourceError("fieldName is already exists: " + fieldName);
	        }
	        var field = new DataField_1.DataField(fieldName, dataType, length);
	        this.$_internalInsertField(this._fields.length, field);
	        return field;
	    };
	    DataSource.prototype.$_internalAddField = function (fld) {
	        var field = null;
	        if (typeof fld === "string") {
	            field = this.$_addField(fld, Types.ValueType.TEXT, 0);
	        }
	        else if (fld instanceof DataField_1.DataField) {
	            field = fld.clone();
	            this.$_internalInsertField(this._fields.length, field);
	        }
	        else if (fld) {
	            field = this.$_addField(fld.fieldName, fld.dataType || Types.ValueType.TEXT, fld.length);
	            field.assignFrom(fld);
	        }
	        return field;
	    };
	    DataSource.prototype._internalCalculateValues = function (values, row) {
	        var fields = this._calcFields;
	        if (fields.length > 0) {
	            var rvalues = [];
	            for (var i = 0; i < values.length; i++) {
	                rvalues[i] = this.getField(i).readValue(values[i]);
	            }
	            for (var i = 0, len = fields.length; i < len; i++) {
	                var field = fields[i];
	                var fldIdx = this._fieldMap[field.fieldName];
	                values[fldIdx] = rvalues[fldIdx] = field.readValue(field.$_calculateValue(this._calculateRuntime, row, field.orgFieldName, this._fieldNames, this.getOrgFieldNames(), rvalues));
	            }
	        }
	    };
	    DataSource.prototype.refreshFieldFormats = function () {
	        for (var _i = 0, _a = this._fields; _i < _a.length; _i++) {
	            var field = _a[_i];
	            field.$_refreshFormats(this);
	        }
	    };
	    DataSource.prototype.refreshFieldFormat = function (field) {
	        field && field.$_refreshFormats(this);
	    };
	    DataSource.prototype.$_createOutputRows = function (rows, options, startIdx) {
	        if (startIdx === void 0) { startIdx = 0; }
	        var fldCount = this.fieldCount;
	        var rowCount = rows.length;
	        if (!(options instanceof DataOutputOptions_1.DataOutputOptions)) {
	            options = new DataOutputOptions_1.DataOutputOptions(options);
	        }
	        var nullDate = options.nullDateText;
	        var nullText = options.nullText;
	        var nanText = options.nanText;
	        for (var i = 0; i < fldCount; i++) {
	            var field = this.getField(i);
	            var dt = field.dataType;
	            var prop = field.orgFieldName;
	            var callback = void 0;
	            var writer = void 0;
	            if (dt == Types.ValueType.DATETIME && ((callback = options.datetimeCallback) || (writer = options.datetimeWriter) || (nullDate != null && nullDate != undefined))) {
	                if (callback) {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        row[prop] = callback(r + startIdx, prop, row[prop]);
	                    }
	                }
	                else {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        var d = row[prop];
	                        row[prop] = d ? writer ? writer.getText(row[prop]) : d : nullDate;
	                    }
	                }
	            }
	            else if (dt == Types.ValueType.BOOLEAN && ((callback = options.booleanCallback) || (writer = options.booleanFormatter))) {
	                if (callback) {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        row[prop] = callback(r + startIdx, prop, row[prop]);
	                    }
	                }
	                else {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        row[prop] = writer.formatValue(row[prop]);
	                    }
	                }
	            }
	            else if (dt == Types.ValueType.NUMBER && ((callback = options.numberCallback) || (writer = options.numberFormatter) || (nanText != null && nanText != undefined))) {
	                if (callback) {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        row[prop] = callback(r + startIdx, prop, row[prop]);
	                    }
	                }
	                else {
	                    for (var r = 0; r < rowCount; r++) {
	                        var row = rows[r];
	                        var v = row[prop];
	                        row[prop] = v == null || isNaN(v) ? nanText : writer ? writer.format(v) : v;
	                    }
	                }
	            }
	            else if (nullText != null && nullText != undefined) {
	                for (var r = 0; r < rowCount; r++) {
	                    var row = rows[r];
	                    var v_1 = row[prop];
	                    row[prop] = v_1 == null || v_1 == undefined ? nullText : v_1;
	                }
	            }
	        }
	    };
	    DataSource.prototype.$_sortRows = function (rows, field, compFunc, left, right) {
	        do {
	            var i = left;
	            var j = right;
	            var row = Math.floor((left + right) / 2);
	            var m = rows[row];
	            var r = void 0;
	            var v = void 0;
	            do {
	                while (i <= j) {
	                    r = rows[i];
	                    v = compFunc(field, m, r);
	                    if (v <= 0)
	                        break;
	                    i++;
	                }
	                while (i <= j) {
	                    r = rows[j];
	                    v = compFunc(field, m, r);
	                    if (v >= 0)
	                        break;
	                    j--;
	                }
	                if (i <= j) {
	                    if (i != j) {
	                        var t = rows[i];
	                        rows[i] = rows[j];
	                        rows[j] = t;
	                    }
	                    i++;
	                    j--;
	                }
	            } while (i <= j);
	            if (left < j) {
	                this.$_sortRows(rows, field, compFunc, left, j);
	            }
	            left = i;
	        } while (left < right);
	    };
	    DataSource.prototype.$_createDateReader = function () {
	        if (this._datetimeFormat) {
	            this._dateParser = new DateTimeReader_1.DateTimeReader(this._datetimeFormat);
	            this._dateParser.amText = this._amText;
	            this._dateParser.pmText = this._pmText;
	            this._dateParser.baseYear = this._baseYear;
	        }
	        else {
	            this._dateParser = DateTimeReader_1.DateTimeReader.Default;
	        }
	    };
	    DataSource.prototype._doCheckStatesChanged = function () {
	    };
	    DataSource.prototype._doRestoreModeChanged = function (oldMode, newMode) {
	    };
	    DataSource.prototype._doFieldsReset = function () {
	    };
	    DataSource.prototype._refreshClients = function () {
	    };
	    DataSource.prototype._fireReset = function () {
	    };
	    DataSource.prototype._fireRowCountChanged = function () {
	    };
	    DataSource.prototype._fireRefresh = function () {
	    };
	    return DataSource;
	}(EventAware_1.EventAware));
	exports.DataSource = DataSource;
	});

	unwrapExports(DataSource_1);
	var DataSource_2 = DataSource_1.DataSourceError;
	var DataSource_3 = DataSource_1.ClientEditingError;
	var DataSource_4 = DataSource_1.DataSource;

	var DataTag_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataTag.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var DataTag = /** @class */ (function (_super) {
	    __extends(DataTag, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataTag() {
	        return _super.call(this) || this;
	    }
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataTag.prototype.connect = function (ds) {
	    };
	    DataTag.prototype.disconnect = function () {
	    };
	    DataTag.prototype.clearRows = function () {
	    };
	    DataTag.prototype.setRows = function () {
	    };
	    DataTag.prototype.setRowCount = function (newCount) {
	    };
	    DataTag.prototype.insertRow = function (row) {
	    };
	    DataTag.prototype.insertRows = function (row, count) {
	    };
	    DataTag.prototype.removeRow = function (row) {
	    };
	    DataTag.prototype.removeRows = function (rows) {
	    };
	    DataTag.prototype.updateRow = function (row) {
	    };
	    DataTag.prototype.updateRows = function (row, count) {
	    };
	    DataTag.prototype.setValue = function (row, field) {
	    };
	    DataTag.prototype.moveRow = function (row, newRow) {
	    };
	    DataTag.prototype.moveRows = function (row, count, newRow) {
	    };
	    DataTag.prototype.changeStates = function (rows) {
	    };
	    return DataTag;
	}(Base_1.Base));
	exports.DataTag = DataTag;
	var DataTagCollection = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataTagCollection(owner) {
	        this._tags = [];
	        this._owner = owner;
	    }
	    DataTagCollection.prototype.dispose = function () {
	        this._owner = null;
	        this._tags = null;
	    };
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataTagCollection.prototype.add = function (tag) {
	        if (this._tags == null)
	            return;
	        if (tag && this._tags.indexOf(tag) < 0) {
	            this._tags.push(tag);
	            tag.connect(this._owner);
	        }
	    };
	    DataTagCollection.prototype.remove = function (tag) {
	        if (this._tags == null)
	            return;
	        if (tag) {
	            var idx = this._tags.indexOf(tag);
	            if (idx >= 0) {
	                this._tags.splice(idx, 1);
	                tag.disconnect();
	            }
	        }
	    };
	    DataTagCollection.prototype.clearRows = function () {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.clearRows();
	        }
	    };
	    DataTagCollection.prototype.setRows = function () {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.setRows();
	        }
	    };
	    DataTagCollection.prototype.setRowCount = function (newCount) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.setRowCount(newCount);
	        }
	    };
	    DataTagCollection.prototype.insertRow = function (row) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.insertRow(row);
	        }
	    };
	    DataTagCollection.prototype.insertRows = function (row, count) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.insertRows(row, count);
	        }
	    };
	    DataTagCollection.prototype.removeRow = function (row) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.removeRow(row);
	        }
	    };
	    DataTagCollection.prototype.removeRows = function (rows) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.removeRows(rows);
	        }
	    };
	    DataTagCollection.prototype.updateRow = function (row) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.updateRow(row);
	        }
	    };
	    DataTagCollection.prototype.updateRows = function (row, count) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.updateRows(row, count);
	        }
	    };
	    DataTagCollection.prototype.setValue = function (row, field) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.setValue(row, field);
	        }
	    };
	    DataTagCollection.prototype.moveRow = function (row, newRow) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.moveRow(row, newRow);
	        }
	    };
	    DataTagCollection.prototype.moveRows = function (row, count, newRow) {
	        if (this._tags == null)
	            return;
	        for (var _i = 0, _a = this._tags; _i < _a.length; _i++) {
	            var tag = _a[_i];
	            tag.moveRows(row, count, newRow);
	        }
	    };
	    return DataTagCollection;
	}());
	exports.DataTagCollection = DataTagCollection;
	});

	unwrapExports(DataTag_1);
	var DataTag_2 = DataTag_1.DataTag;
	var DataTag_3 = DataTag_1.DataTagCollection;

	var DataFilter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataFilter.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var DataFilter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataFilter(criteria) {
	        this._active = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._exprNode = null;
	        this.criteria = criteria;
	    }
	    Object.defineProperty(DataFilter.prototype, "criteria", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** criteria */
	        get: function () {
	            return this._criteria;
	        },
	        set: function (value) {
	            if (value != this._criteria) {
	                this._criteria = value;
	                if (value) {
	                    this._exprNode = Expression.ExpressionParser.Default.parse(value, DataFilter.CAPITAL_INDEXERS);
	                }
	                else {
	                    this._exprNode = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataFilter.prototype, "isActive", {
	        /** active */
	        get: function () {
	            return this._active;
	        },
	        set: function (value) {
	            this._active = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataFilter.prototype.select = function (runtime, row, values) {
	        if (this._exprNode) {
	            runtime.setRow(row, values);
	            return this._exprNode.evaluate(runtime);
	        }
	        else {
	            return true;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataFilter.CAPITAL_INDEXERS = ["value", "values", "len"];
	    return DataFilter;
	}());
	exports.DataFilter = DataFilter;
	var DataFilterCollection = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataFilterCollection(source, filterMode) {
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        this._filterMode = DataFilterCollection.FILTER_AND;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._or = false;
	        this.load(source);
	        if (filterMode) {
	            this._filterMode = filterMode;
	        }
	    }
	    Object.defineProperty(DataFilterCollection.prototype, "filterMode", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** filterMode */
	        get: function () {
	            return this._filterMode;
	        },
	        set: function (value) {
	            var s = value ? value.toLocaleLowerCase() : value;
	            if (s != this._filterMode) {
	                this._filterMode = s;
	                this._or = this._filterMode == DataFilterCollection.FILTER_OR;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataFilterCollection.prototype.load = function (source) {
	        if (source && !(source instanceof Array)) {
	            source = [source];
	        }
	        this._filters = [];
	        if (source instanceof Array) {
	            for (var i = 0, cnt = source.length; i < cnt; i++) {
	                var filter = null;
	                var f = source[i];
	                if (f) {
	                    if (typeof f === "string") {
	                        filter = new DataFilter(f);
	                    }
	                    else if (f.criteria) {
	                        filter = new DataFilter(f.criteria);
	                    }
	                }
	                if (filter) {
	                    this._filters.push(filter);
	                }
	            }
	        }
	    };
	    DataFilterCollection.prototype.prepare = function (runtime, ds) {
	        runtime.prepare(ds);
	    };
	    DataFilterCollection.prototype.select = function (runtime, row, values) {
	        var filters = this._filters;
	        var cnt = filters.length;
	        if (this._or) {
	            for (var i = 0; i < cnt; i++) {
	                if (filters[i].select(runtime, row, values) == true) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        else {
	            for (var i = 0; i < cnt; i++) {
	                if (filters[i].select(runtime, row, values) == false) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataFilterCollection.FILTER_AND = "and";
	    DataFilterCollection.FILTER_OR = "or";
	    return DataFilterCollection;
	}());
	exports.DataFilterCollection = DataFilterCollection;
	var DataFilterRuntime = /** @class */ (function (_super) {
	    __extends(DataFilterRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataFilterRuntime() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._ds = null;
	        _this._fieldCount = 0;
	        _this._row = -1;
	        _this._values = null;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataFilterRuntime.prototype.prepare = function (ds) {
	        this._ds = ds;
	        this._fieldCount = ds ? ds.fieldCount : 0;
	    };
	    DataFilterRuntime.prototype.setRow = function (row, values) {
	        this._row = row;
	        this._values = values;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataFilterRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (DataFilterRuntime.IDENTS.hasOwnProperty(token)) {
	            return DataFilterRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    DataFilterRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case DataFilterRuntime.ID_ROW:
	                return this._row;
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    DataFilterRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (index < 0 || index >= this._fieldCount) {
	            //if ($_debug) debugger;
	            throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	        }
	        switch (idKey) {
	            case DataFilterRuntime.ID_VALUE:
	            case DataFilterRuntime.ID_VALUES:
	                return this._values[index];
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    DataFilterRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        switch (idKey) {
	            case DataFilterRuntime.ID_VALUE:
	            case DataFilterRuntime.ID_VALUES:
	                var field = this.getField(index, capitalized);
	                return this._values[field];
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataFilterRuntime.prototype.getField = function (index, capitalized) {
	        var fld = capitalized ? this._ds.getFieldIndexC(index) : this._ds.getFieldIndex(index);
	        if (fld < 0 || fld >= this._fieldCount) {
	            //if ($_debug) debugger;
	            throw new Expression.ExpressionEvaluationError("Data field is not exits:" + index);
	        }
	        return fld;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataFilterRuntime.ID_ROW = 0;
	    DataFilterRuntime.ID_VALUE = 1;
	    DataFilterRuntime.ID_VALUES = 2;
	    DataFilterRuntime.IDENTS = {
	        row: DataFilterRuntime.ID_ROW,
	        value: DataFilterRuntime.ID_VALUE,
	        values: DataFilterRuntime.ID_VALUES
	    };
	    return DataFilterRuntime;
	}(Expression.ExpressionRuntime));
	exports.DataFilterRuntime = DataFilterRuntime;
	});

	unwrapExports(DataFilter_1);
	var DataFilter_2 = DataFilter_1.DataFilter;
	var DataFilter_3 = DataFilter_1.DataFilterCollection;
	var DataFilter_4 = DataFilter_1.DataFilterRuntime;

	var DataProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataProvider.ts
	// 2019. 07. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var DataProvider = /** @class */ (function (_super) {
	    __extends(DataProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataProvider() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._tags = new DataTag_1.DataTagCollection(_this);
	        _this._filterRuntime = new DataFilter_1.DataFilterRuntime();
	        return _this;
	    }
	    Object.defineProperty(DataProvider.prototype, "filters", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** filters */
	        get: function () {
	            return this._filters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataProvider.prototype, "filterRuntime", {
	        /** filterRuntime */
	        get: function () {
	            return this._filterRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataProvider.prototype, "deletedCount", {
	        /** deletedCount */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataProvider.prototype, "tags", {
	        /** tags */
	        get: function () {
	            return this._tags;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // members
	    //-------------------------------------------------------------------------
	    DataProvider.prototype.addTag = function (tag) {
	        this._tags.add(tag);
	    };
	    DataProvider.prototype.removeTag = function (tag) {
	        this._tags.remove(tag);
	    };
	    DataProvider.prototype.setFilters = function (filters, filterMode) {
	        if (!filters || filters instanceof DataFilter_1.DataFilterCollection) {
	            this._filters = filters;
	            if (this._filters && filterMode) {
	                this._filters.filterMode = filterMode;
	            }
	        }
	        else {
	            this._filters = new DataFilter_1.DataFilterCollection(filters, filterMode);
	        }
	    };
	    DataProvider.prototype.getRowObject = function (row) {
	        if (row < 0 || row >= this.rowCount) {
	            throw new DataSource_1.DataSourceError("row is out of range: " + row);
	        }
	        var vals = {};
	        for (var i = 0, cnt = this.fieldCount; i < cnt; i++) {
	            var fld = this.getOrgFieldName(i);
	            var v = this.getValue(row, i);
	            vals[fld] = v;
	        }
	        return vals;
	    };
	    DataProvider.prototype.objectToRow = function (values) {
	        var row = [];
	        if (values) {
	            for (var i = 0, cnt = this.fieldCount; i < cnt; i++) {
	                var fld = this.getOrgFieldName(i);
	                if (values.hasOwnProperty(fld)) {
	                    row[i] = values[fld];
	                }
	            }
	        }
	        return row;
	    };
	    DataProvider.prototype.equalValues = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var fld = this.getField(field);
	            var v1 = this.getValue(row1, field);
	            var v2 = this.getValue(row2, field);
	            return fld.equalValues(v1, v2);
	        }
	        else {
	            return true;
	        }
	    };
	    DataProvider.prototype.equalTexts = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var fld = this.getField(field);
	            var v1 = this.getValue(row1, field);
	            var v2 = this.getValue(row2, field);
	            if (v1 === undefined || v1 === null) {
	                return v2 === undefined || v2 === null;
	            }
	            if (v2 === undefined || v2 === null) {
	                return false;
	            }
	            return v1.toLowerCase() == v2.toLowerCase();
	        }
	        else {
	            return true;
	        }
	    };
	    DataProvider.prototype.sameValues = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var fld = this.getField(field);
	            var v1 = this.getValue(row1, field);
	            var v2 = this.getValue(row2, field);
	            return fld.sameValues(v1, v2);
	        }
	        else {
	            return true;
	        }
	    };
	    DataProvider.prototype.compareValues = function (field, row1, row2) {
	        return 0;
	    };
	    DataProvider.prototype.compareTexts = function (field, row1, row2) {
	        return 0;
	    };
	    DataProvider.prototype.compareNumbers = function (field, row1, row2) {
	        return 0;
	    };
	    DataProvider.prototype.compareBools = function (field, row1, row2) {
	        return 0;
	    };
	    DataProvider.prototype.compareObjects = function (field, row1, row2) {
	        return 0;
	    };
	    DataProvider.prototype.summarize = function (field, calcVars) {
	        return false;
	    };
	    DataProvider.prototype.summarizeRange = function (field, rows, calcVars) {
	        return false;
	    };
	    DataProvider.prototype.copyRows = function (sourceRow, count, targetRow, noStates) {
	    };
	    DataProvider.prototype.hideCount = function () {
	        return 0;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataProvider.prototype._doFieldsReset = function () {
	        this._fireReset();
	    };
	    DataProvider.prototype._refreshClients = function () {
	        this.fireRefreshClients();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    DataProvider.prototype.fireDisposed = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.DISPOSED);
	        }
	    };
	    DataProvider.prototype._fireReset = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.RESET);
	        }
	        else {
	            this._resetLock++;
	        }
	    };
	    DataProvider.prototype._fireRefresh = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.REFRESH);
	        }
	    };
	    DataProvider.prototype.fireRefreshClients = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.REFRESH);
	        }
	    };
	    DataProvider.prototype._fireRowCountChanged = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_COUNT_CHANGED);
	        }
	        else {
	            this._countLock++;
	        }
	    };
	    DataProvider.prototype.fireRowInserting = function (row, values) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROW_INSERTING, row, values);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowInserted = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_INSERTED, row);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowsInserted = function (row, count) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROWS_INSERTED, row, count);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowRemoving = function (row) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROW_REMOVING, row);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowRemoved = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_REMOVED, row);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowsRemoving = function (rows) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROWS_REMOVING, rows);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowsRemoved = function (rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROWS_REMOVED, rows);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowUpdating = function (row, values) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROW_UPDATING, row, values);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowUpdated = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_UPDATED, row);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowsUpdated = function (row, count) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROWS_UPDATED, row, count);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowMoving = function (row, newRow) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROW_MOVING, row, newRow);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowMoved = function (row, newRow) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_MOVED, row, newRow);
	        }
	    };
	    DataProvider.prototype.fireRowsMoving = function (row, count, newRow) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.ROWS_MOVING, row, count, newRow);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireRowsMoved = function (row, count, newRow) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROWS_MOVED, row, count, newRow);
	        }
	    };
	    DataProvider.prototype.fireValueChanging = function (row, field, value) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(DataProvider.VALUE_CHANGING, row, field, value);
	        }
	        return true;
	    };
	    DataProvider.prototype.fireValueChanged = function (row, field) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.VALUE_CHANGED, row, field);
	            this.fireEvent(DataProvider.DATA_CHANGED);
	        }
	    };
	    DataProvider.prototype.fireRowStateChanged = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.STATE_CHANGED, row);
	        }
	    };
	    DataProvider.prototype.fireRowStatesChanged = function (rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.STATES_CHANGED, rows);
	        }
	    };
	    DataProvider.prototype.fireRowStatesCleared = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.STATES_CLEARED);
	        }
	    };
	    DataProvider.prototype.fireRestoreRows = function (rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.RESTOREROWS, rows);
	        }
	    };
	    DataProvider.prototype.fireRowHided = function (rows, hide) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(DataProvider.ROW_HIDED, rows, hide);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataProvider.DISPOSED = "onDataProvderDisposed";
	    DataProvider.RESET = "onDataProviderReset";
	    DataProvider.REFRESH = "onDataProviderRefresh";
	    DataProvider.REFRESH_CLIENT = "onDataProviderRefreshClient";
	    DataProvider.ROW_COUNT_CHANGED = "onDataProviderRowCountChanged";
	    DataProvider.ROW_INSERTING = "onDataProviderRowInserting";
	    DataProvider.ROW_INSERTED = "onDataProviderRowInserted";
	    DataProvider.ROWS_INSERTED = "onDataProviderRowsInserted";
	    DataProvider.ROW_REMOVING = "onDataProviderRowRemoving";
	    DataProvider.ROW_REMOVED = "onDataProviderRowRemoved";
	    DataProvider.ROWS_REMOVING = "onDataProviderRowsRemoving";
	    DataProvider.ROWS_REMOVED = "onDataProviderRowsRemoved";
	    DataProvider.ROW_UPDATING = "onDataProviderRowUpdating";
	    DataProvider.ROW_UPDATED = "onDataProviderRowUpdated";
	    DataProvider.ROWS_UPDATED = "onDataProviderRowsUpdated";
	    DataProvider.ROW_MOVING = "onDataProviderRowMoving";
	    DataProvider.ROW_MOVED = "onDataProviderRowMoved";
	    DataProvider.ROWS_MOVING = "onDataProviderRowsMoving";
	    DataProvider.ROWS_MOVED = "onDataProviderRowsMoved";
	    DataProvider.VALUE_CHANGING = "onDataProviderValueChanging";
	    DataProvider.VALUE_CHANGED = "onDataProviderValueChanged";
	    DataProvider.DATA_CHANGED = "onDataProviderDataChanged";
	    DataProvider.STATE_CHANGED = "onDataProviderStateChanged";
	    DataProvider.STATES_CHANGED = "onDataProviderStatesChanged";
	    DataProvider.STATES_CLEARED = "onDataProviderStatesCleared";
	    DataProvider.RESTOREROWS = "onDataProviderRestoreRows";
	    DataProvider.ROW_HIDED = "onDataProviderRowHided";
	    return DataProvider;
	}(DataSource_1.DataSource));
	exports.DataProvider = DataProvider;
	});

	unwrapExports(DataProvider_1);
	var DataProvider_2 = DataProvider_1.DataProvider;

	var GridItem_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridItem.ts
	// 2019. 07. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	exports.ITEM_EXT_CHECKED = 0x00000001;
	exports.ITEM_UNCHECKABLE = 0x00000004;
	var ITEM_EXT_READONLY = 0x00000008;
	exports.ITEM_EXT_SAVEEXPAND = 0x00000010;
	exports.ITEM_EXT_FILTERED = 0x00000020;
	var $$_grid_item_id = 0;
	var PARENT = "_parent";
	var INDEX = "_index";
	var ItemState;
	(function (ItemState) {
	    ItemState["NORMAL"] = "normal";
	    ItemState["FOCUSED"] = "focused";
	    ItemState["UPDATING"] = "updating";
	    ItemState["INSERTING"] = "inserting";
	    ItemState["APPENDING"] = "appending";
	    ItemState["DUMMY"] = "dummy";
	})(ItemState = exports.ItemState || (exports.ItemState = {}));
	exports.ItemState_isEditing = function (state) {
	    return state == ItemState.UPDATING || state == ItemState.INSERTING || state == ItemState.APPENDING;
	};
	exports.ItemState_isInserting = function (state) {
	    return state == ItemState.INSERTING || state == ItemState.APPENDING;
	};
	var GridItem = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridItem() {
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._id = $$_grid_item_id;
	        this._index = -1;
	        this._extents = 0;
	    }
	    Object.defineProperty(GridItem.prototype, "id", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** id  */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "index", {
	        /** index  */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "parent", {
	        /** parent  */
	        get: function () {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "parentIndex", {
	        /** parentIndex  */
	        get: function () {
	            return this._parent ? this._parent._index : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "root", {
	        /** root  */
	        get: function () {
	            var p = this._parent;
	            while (p && p.level > 1) {
	                p = p._parent;
	            }
	            return p;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "childIndex", {
	        /** childIndex  */
	        get: function () {
	            return this._parent ? this._parent.indexOf(this) : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "level", {
	        /** level */
	        get: function () {
	            return this._parent ? this._parent.level + 1 : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "isData", {
	        /** isData */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "visible", {
	        /** isVisible */
	        get: function () {
	            return this._parent && this._index >= 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "displayLevel", {
	        /** displayLevel */
	        get: function () {
	            return this.level;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "provider", {
	        /** provider */
	        get: function () {
	            return this._parent && this._parent.provider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "dataSource", {
	        /** dataSource */
	        get: function () {
	            return this._parent && this._parent.dataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "dataRow", {
	        /** dataRow */
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "dataId", {
	        /** dataId */
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "rowState", {
	        /** rowState */
	        get: function () {
	            var row = this.dataRow;
	            if (row >= 0) {
	                var ds = this.dataSource;
	                return ds ? ds.getRowState(row) : RowState_1.RowState.NONE;
	            }
	            else {
	                return RowState_1.RowState.NONE;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "itemState", {
	        /** itemState */
	        get: function () {
	            return ItemState.NORMAL;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "checked", {
	        /** checked */
	        get: function () {
	            return (this._extents & exports.ITEM_EXT_CHECKED) != 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "checkable", {
	        /** checkable */
	        get: function () {
	            return (this._extents & exports.ITEM_UNCHECKABLE) == 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "editable", {
	        /** editable */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "readOnly", {
	        /** readOnly */
	        get: function () {
	            return (this._extents & ITEM_EXT_READONLY) != 0;
	        },
	        set: function (value) {
	            this._extents = value ? (this._extents | ITEM_EXT_READONLY) : (this._extents & ~ITEM_EXT_READONLY);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "resizable", {
	        /** resizable */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItem.prototype, "merged", {
	        /** merged */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridItem.prototype.setChecked = function (value, checkEvent) {
	        var provider = this.provider;
	        if (provider) {
	            provider.checkItem(this, value, undefined, checkEvent);
	        }
	    };
	    GridItem.prototype.setCheckable = function (value) {
	        var provider = this.provider;
	        if (provider) {
	            provider.setCheckable(this, value);
	        }
	    };
	    GridItem.prototype.getAncestor = function (level) {
	        if (level < this.level) {
	            var p = this._parent;
	            while (p.level > level) {
	                p = p._parent;
	            }
	            return p;
	        }
	        return this instanceof GroupItem ? this : null;
	    };
	    GridItem.prototype.getAncestors = function () {
	        var items = null;
	        var p = this._parent;
	        if (p) {
	            items = [];
	            do {
	                items.push(p);
	                p = p._parent;
	            } while (p);
	        }
	        return items;
	    };
	    GridItem.prototype.isDescendantOf = function (group) {
	        if (group) {
	            var p = this._parent;
	            while (p && p != group) {
	                p = p._parent;
	            }
	            return p === group;
	        }
	        return false;
	    };
	    GridItem.prototype.getData = function (field) {
	        var ds = this.dataSource;
	        return ds ? ds.getValue(this.dataRow, field) : undefined;
	        //var dataRow = this instanceof MergedGroupHeader || this instanceof GroupItemImpl ? this.firstItem().dataRow() : ( this instanceof MergedGroupFooter ? this.parent().firstItem().dataRow() : this.dataRow() );
	        //return ds ? ds.getValue(dataRow, field) : UNDEFINED;
	    };
	    GridItem.prototype.setData = function (field, value) {
	        var ds = this.dataSource;
	        if (ds) {
	            ds.setValue(this.dataRow, field, value);
	        }
	    };
	    GridItem.prototype.getRowData = function () {
	        var row = this.dataRow;
	        if (row >= 0) {
	            var ds = this.dataSource;
	            if (ds) {
	                return ds.getRow(row);
	            }
	        }
	        return null;
	    };
	    GridItem.prototype.getRowObject = function () {
	        var row = this.dataRow;
	        if (row >= 0) {
	            var ds = this.dataSource;
	            if (ds) {
	                return ds.getRowObject(row);
	            }
	        }
	        return null;
	    };
	    GridItem.prototype.canEdit = function () {
	        return false;
	    };
	    /* provider로 이동시킨다.
	    makeVisible() {
	        if (this._parent) {
	            this._parent.setExpanded(true);
	            this._parent.makeVisible();
	        }
	    }
	    */
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridItem.prototype._setIndex = function (value) {
	        this._index = value;
	    };
	    GridItem.prototype._setChecked = function (value) {
	        this._extents = value ? (this._extents | exports.ITEM_EXT_CHECKED) : (this._extents & ~exports.ITEM_EXT_CHECKED);
	    };
	    GridItem.prototype._setCheckable = function (value) {
	        this._extents = value ? (this._extents & ~exports.ITEM_UNCHECKABLE) : (this._extents | exports.ITEM_UNCHECKABLE);
	    };
	    return GridItem;
	}());
	exports.GridItem = GridItem;
	var DataItem = /** @class */ (function (_super) {
	    __extends(DataItem, _super);
	    function DataItem() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return DataItem;
	}(GridItem));
	exports.DataItem = DataItem;
	var GridRow = /** @class */ (function (_super) {
	    __extends(GridRow, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridRow(dataRow) {
	        var _this = _super.call(this) || this;
	        _this._displayLevel = -1;
	        _this._dataRow = dataRow;
	        return _this;
	    }
	    Object.defineProperty(GridRow.prototype, "dataRowId", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** dataRowId */
	        get: function () {
	            return this._dataRowId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "isData", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "dataRow", {
	        get: function () {
	            return this._dataRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "dataId", {
	        get: function () {
	            return this.dataSource.getRowId(this._dataRow);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "isLeaf", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "editable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "resizable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridRow.prototype, "displayLevel", {
	        get: function () {
	            return this._displayLevel >= 0 ? this._displayLevel : this.level;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridRow.prototype.canEdit = function () {
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridRow.prototype.$_setDisplayLevel = function (value) {
	        this._displayLevel = value;
	    };
	    return GridRow;
	}(DataItem));
	exports.GridRow = GridRow;
	var GroupItem = /** @class */ (function (_super) {
	    __extends(GroupItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupItem() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._children = [];
	        _this._expanded = false;
	        _this._descendantCount = 0;
	        _this._summaries = null;
	        _this._rows = null;
	        return _this;
	    }
	    Object.defineProperty(GroupItem.prototype, "expanded", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expanded */
	        get: function () {
	            return this._expanded;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "collapsed", {
	        /** collapsed */
	        get: function () {
	            return !this.expanded;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._children.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "children", {
	        /** children */
	        get: function () {
	            return this._children.slice();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "first", {
	        /** first */
	        get: function () {
	            return this._children.length > 0 ? this._children[0] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "last", {
	        /** last */
	        get: function () {
	            var n = this._children.length;
	            return n > 0 ? this._children[n - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "firstItem", {
	        /** firstItem */
	        get: function () {
	            if (this._children.length > 0) {
	                var item = this._children[0];
	                return (item instanceof GroupItem) ? item.firstItem : item;
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "firstDataItem", {
	        /** firstDataItem */
	        get: function () {
	            if (this._children.length > 0) {
	                for (var i = 0, cnt = this._children.length; i < cnt; i++) {
	                    if (this._children[i] instanceof GroupItem) {
	                        return this._children[i].firstDataItem;
	                    }
	                    else if (this._children[i] instanceof GridRow) {
	                        return this._children[i];
	                    }
	                }
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "lastItem", {
	        /** lastItem */
	        get: function () {
	            return this.getLastItem(false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GroupItem.prototype.getLastItem = function (checkFooter) {
	        /*
	        var cnt, item;
	        if (this._children.length > 0) {
	            cnt = this._children.length;
	            for (;cnt;cnt--) {
	                item = this._children[cnt-1];
	                if (checkFooter && !this.hasFooter && item instanceof MergedGroupFooter) {
	                    continue;
	                };
	                break;
	            }
	            // var item = this._children[this._children.length - 1];
	            return (item instanceof GroupItem) ? item.lastItem(checkFooter) : item;
	        }
	        */
	        return null;
	    };
	    Object.defineProperty(GroupItem.prototype, "lastDataItem", {
	        /** lastDataItem */
	        get: function () {
	            var n = this._children.length;
	            if (n > 0) {
	                for (; n > 0; n--) {
	                    var item = this._children[n - 1];
	                    if (item instanceof GroupItem) {
	                        return item.lastDataItem;
	                    }
	                    else if (item instanceof GridRow) {
	                        return item;
	                    }
	                }
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "descendantCount", {
	        /** descendantCount */
	        get: function () {
	            return this._descendantCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "expandable", {
	        /*
	        firstVisibleItem(isSummary): boolean {
	            var item;
	            if (isSummary) {
	                if (this._hasFooter && this.footer().isVisible) {
	                    return this.footer();
	                }
	                for (var i = 0, len = this._children.length; i < len; i++) {
	                    item = this._children[i];
	                    if (item instanceof GroupItem) {
	                        item = item.firstVisibleItem(isSummary);
	                    } else if (item.isVisible()) {
	                        return item;
	                    }
	                    if (item) {
	                        return item;
	                    }
	                }
	                return null;
	            }
	            for (var i = 0, len = this._children.length; i < len; i++) {
	                item = this._children[i];
	                if (item.isVisible()) {
	                    return item;
	                } else {
	                    if (item instanceof GroupItem) {
	                        var c = item.firstVisibleItem(isSummary);
	                        if (c) {
	                            return c;
	                        }
	                    }
	                }
	            }
	            return null;
	        }
	        */
	        /** expandable */
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItem.prototype, "collapsable", {
	        /** collapsable */
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    /* 특별한 이유가 없으면 cookie는 제거한다!
	    setExpanded(value: boolean, recursive = false, force = false): void {
	        if (value != this._expanded || force) {
	            const provider = this.provider;

	            if (value) {
	                provider.expand(this, recursive, force);
	            } else {
	                provider.collapse(this, recursive);
	            }
	        }
	    }
	    */
	    GroupItem.prototype.getItem = function (index) {
	        if (index < 0 || index >= this._children.length) {
	            throw new RangeError("index is invalid: " + index);
	        }
	        return this._children[index];
	    };
	    GroupItem.prototype.itemOfRow = function (dataRow) {
	        for (var i = this._children.length; i--;) {
	            if (this._children[i].dataRow == dataRow) {
	                return this._children[i];
	            }
	        }
	        return null;
	    };
	    GroupItem.prototype.indexOf = function (item) {
	        for (var i = this._children.length - 1; i >= 0; i--) {
	            if (this._children[i] == item) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    GroupItem.prototype.isDescendant = function (item) {
	        if (item && item !== this) {
	            var g = item["_parent"];
	            while (g && g !== this) {
	                g = g["_parent"];
	            }
	            return g === this;
	        }
	        return false;
	    };
	    GroupItem.prototype.getDescendants = function (visibleOnly) {
	        function collectItems(p, items) {
	            var cnt = p.count;
	            for (var i = 0; i < cnt; i++) {
	                var item = p.getItem(i);
	                items.push(item);
	                if (item instanceof GroupItem && (!visibleOnly || item.expanded)) {
	                    collectItems(item, items);
	                }
	            }
	        }
	        if ((!visibleOnly || this._expanded) && this._children && this._children.length > 0) {
	            var items = [];
	            collectItems(this, items);
	            return items;
	        }
	        return null;
	    };
	    GroupItem.prototype.clear = function () {
	        this._summaries = null;
	        this._children.length = 0;
	        this._descendantCount = 0;
	    };
	    GroupItem.prototype.insert = function (index, item) {
	        this._addChild(item, index);
	    };
	    GroupItem.prototype.add = function (item) {
	        this._addChild(item, -1);
	    };
	    GroupItem.prototype.addAll = function (items) {
	        this._addChildren(items);
	    };
	    GroupItem.prototype.remove = function (item) {
	        var idx = this.indexOf(item);
	        if (idx >= 0) {
	            this._children.splice(idx, 1);
	            if (item instanceof GridItem) {
	                item[PARENT] = null;
	            }
	        }
	    };
	    GroupItem.prototype.setItem = function (item, newItem) {
	        if (item && newItem && item !== newItem) {
	            var idx = this._removeChild(item);
	            this._insertChild(idx, newItem);
	            newItem[INDEX] = item.index;
	        }
	    };
	    GroupItem.prototype.setExpanded = function (value, recursive, force) {
	        if (value != this._expanded || force) {
	            if (value) {
	                this.provider.expand(this, recursive, force, 0);
	            }
	            else {
	                this.provider.collapse(this, recursive, force);
	            }
	        }
	    };
	    GroupItem.prototype.getNumber = function (field) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return summary.count;
	        }
	        else if (summary) {
	            return summary.length;
	        }
	        return this._descendantCount;
	    };
	    GroupItem.prototype.getDataCount = function (field) {
	        throw new Error("Not implemented.");
	    };
	    GroupItem.prototype.getSum = function (field) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return summary.sum;
	        }
	        else if (summary) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            var v = 0;
	            for (var i = 0; i < cnt; i++) {
	                var v2 = ds.getValue(summary[i], field);
	                if (!isNaN(v2)) {
	                    v += v2;
	                }
	            }
	            return v;
	        }
	        return NaN;
	    };
	    GroupItem.prototype.getDataSum = function (field) {
	        throw new Error("Not implemented.");
	    };
	    GroupItem.prototype.getMax = function (field) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return summary.max;
	        }
	        else if (summary) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            var v = void 0;
	            if (cnt > 1) {
	                v = NaN;
	                var i = 0;
	                do {
	                    v = ds.getValue(summary[i++], field);
	                } while (isNaN(v = v == null ? undefined : v) && i < cnt);
	                while (i < cnt) {
	                    var v2 = ds.getValue(summary[i++], field);
	                    if (!isNaN(v2 = v2 == null ? undefined : v2) && v2 > v) {
	                        v = v2;
	                    }
	                }
	                return v;
	            }
	            else if (cnt == 1) {
	                v = ds.getValue(summary[0], field);
	                return v == null ? undefined : v;
	            }
	        }
	        return NaN;
	    };
	    GroupItem.prototype.getMin = function (field) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return summary.min;
	        }
	        else if (summary) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            var v = void 0;
	            if (cnt > 1) {
	                v = NaN;
	                var i = 0;
	                do {
	                    v = ds.getValue(summary[i++], field);
	                } while (isNaN(v = v == null ? undefined : v) && i < cnt);
	                while (i < cnt) {
	                    var v2 = ds.getValue(summary[i++], field);
	                    if (!isNaN(v2 = v2 == null ? undefined : v2) && v2 < v) {
	                        v = v2;
	                    }
	                }
	                return v;
	            }
	            else if (cnt == 1) {
	                v = ds.getValue(summary[0], field);
	                return v == null ? undefined : v;
	            }
	        }
	        return NaN;
	    };
	    GroupItem.prototype.getAvg = function (field) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return summary.avg;
	        }
	        else if (summary) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            var v = void 0;
	            if (cnt > 1) {
	                v = 0;
	                for (var i = 0; i < cnt; i++) {
	                    v += ds.getValue(summary[i], field);
	                }
	                return v / cnt;
	            }
	            else if (cnt == 1) {
	                v = ds.getValue(summary[0], field);
	                return v;
	            }
	        }
	        return NaN;
	    };
	    GroupItem.prototype.getVar = function (field, n) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return n =  summary.vars;
	        }
	        else if (summary && this.provider.summaryMode == Types.SummaryMode.STATISTICAL) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            if (cnt > 1) {
	                var v = 0;
	                for (var i = 0; i < cnt; i++) {
	                    v += ds.getValue(summary[i], field);
	                }
	                var avg = v / cnt;
	                v = 0;
	                for (var i = 0; i < cnt; i++) {
	                    v += Math.pow(ds.getValue(summary[i], field) - avg, 2);
	                }
	                v = v / (cnt - n);
	                return v;
	            }
	            else if (cnt == 1) {
	                return 0;
	            }
	        }
	        return NaN;
	    };
	    GroupItem.prototype.getStdev = function (field, n) {
	        var summary = this.$_getSummary(field);
	        if (summary instanceof FieldSummary_1.FieldSummary) {
	            return n == 0 ? Math.sqrt(summary.varsp) : Math.sqrt(summary.vars);
	        }
	        else if (summary && this.provider.summaryMode == Types.SummaryMode.STATISTICAL) {
	            var ds = this.dataSource;
	            var cnt = summary.length;
	            if (cnt > 1) {
	                var v = 0;
	                for (var i = 0; i < cnt; i++) {
	                    v += ds.getValue(summary[i], field);
	                }
	                var avg = v / cnt;
	                v = 0;
	                for (var i = 0; i < cnt; i++) {
	                    v += Math.pow(ds.getValue(summary[i], field) - avg, 2);
	                }
	                v = Math.sqrt(v / (cnt - n));
	                return v;
	            }
	            else if (cnt == 1) {
	                return 0;
	            }
	        }
	        return NaN;
	    };
	    Object.defineProperty(GroupItem.prototype, "isLeaf", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GroupItem.prototype._setExpanded = function (value) {
	        this._expanded = value;
	    };
	    GroupItem.prototype._incDescendants = function (inc) {
	        if (inc === void 0) { inc = 1; }
	        this._descendantCount += inc;
	    };
	    GroupItem.prototype._insertChild = function (index, item) {
	        this._children.splice(index, 0, item);
	        if (item instanceof GridItem) {
	            item[PARENT] = this;
	        }
	    };
	    GroupItem.prototype._addChild = function (item, index) {
	        if (item && this.indexOf(item) < 0) {
	            if (index < 0) {
	                this._children.push(item);
	            }
	            else {
	                this._children.splice(index, 0, item);
	            }
	            item[PARENT] = this;
	        }
	    };
	    GroupItem.prototype._addChildren = function (items) {
	        var cnt;
	        if (items && (cnt = items.length) > 0) {
	            for (var i = 0; i < cnt; i++) {
	                var item = items[i];
	                if (item && this.indexOf(item) < 0) {
	                    item[PARENT] = this;
	                    this._children.push(item);
	                }
	            }
	        }
	    };
	    GroupItem.prototype._removeChild = function (item) {
	        var idx = this.indexOf(item);
	        if (idx >= 0) {
	            this._children.splice(idx, 1);
	            if (item instanceof GridItem) {
	                item[PARENT] = null;
	            }
	        }
	        return idx;
	    };
	    /*
	    attachItem(item: GridItem): void {
	        if (item) {
	            item[PARENT] = this;
	        }
	    }
	    
	    detachItem(item: GridItem): void {
	        if (item && item[PARENT] === this) {
	            item[PARENT] = null;
	        }
	    }
	    */
	    GroupItem.prototype._exchangeItems = function (index1, index2) {
	        if (index1 < 0 || index1 >= this._children.length) {
	            throw new RangeError("index1 is out of range: " + index1);
	        }
	        if (index2 < 0 || index2 >= this._children.length) {
	            throw new RangeError("index2 is out of range: " + index2);
	        }
	        if (index1 === index2) {
	            return;
	        }
	        var t = this._children[index1];
	        this._children[index1] = this._children[index2];
	        this._children[index2] = t;
	    };
	    GroupItem.prototype._moveChild = function (index, delta) {
	        var count = this._children.length;
	        if (index < 0 || index >= count) {
	            throw new RangeError("index is out of range: " + index);
	        }
	        var newIndex = Math.min(Math.max(index + delta, 0), count - 1);
	        var child = this._children[index];
	        if (delta < 0) {
	            for (var i = index; i > newIndex; i--)
	                this._children[i] = this._children[i - 1];
	        }
	        else {
	            for (var i = index; i < newIndex; i++)
	                this._children[i] = this._children[i + 1];
	        }
	        this._children[newIndex] = child;
	    };
	    /*
	    private _changeParent(parent: GroupItem, index: number, expand: boolean): void {
	        var old = this._parent;
	        old.remove(this);
	        parent._addChild(this, index);
	        if (expand)
	            parent.setExpanded(true);
	    }
	    */
	    GroupItem.prototype.$_collectRows = function (group, rows) {
	        var cnt = group.count;
	        for (var i = 0; i < cnt; i++) {
	            var item = group.getItem(i);
	            if (item instanceof GroupItem) {
	                this.$_collectRows(item, rows);
	            }
	            else {
	                var row = item.dataRow;
	                if (row >= 0) {
	                    rows.push(row);
	                }
	            }
	        }
	    };
	    GroupItem.prototype.$_getRows = function () {
	        var rows = [];
	        this.$_collectRows(this, rows);
	        return rows;
	    };
	    GroupItem.prototype.$_getSummary = function (field) {
	        var ds = this.dataSource;
	        if (!(ds instanceof DataProvider_1.DataProvider)) {
	            return null;
	        }
	        if (this._summaries == null) {
	            this._summaries = {};
	        }
	        var fs = this._summaries ? this._summaries[field] : null;
	        if (!fs) {
	            if (ds.canSummarize(field)) {
	                fs = this.$_summarize(field, ds);
	                if (fs) {
	                    this._summaries[field] = fs;
	                }
	            }
	        }
	        return fs;
	    };
	    GroupItem.prototype.$_summarize = function (field, ds) {
	        var THRESHOLD = 3;
	        var mode = this.provider.summaryMode;
	        if (mode != Types.SummaryMode.NONE) {
	            if (this._rows == null) {
	                this._rows = [];
	                this.$_collectRows(this, this._rows);
	            }
	            if (this._rows.length > THRESHOLD && ds.canSummarize(field)) {
	                var fs = new FieldSummary_1.FieldSummary(field);
	                ds.summarizeRange(fs, this._rows, mode == Types.SummaryMode.STATISTICAL);
	            }
	            return this._rows;
	        }
	        return null;
	    };
	    return GroupItem;
	}(GridItem));
	exports.GroupItem = GroupItem;
	var GroupItemImpl = /** @class */ (function (_super) {
	    __extends(GroupItemImpl, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupItemImpl(field) {
	        var _this = _super.call(this) || this;
	        _this._groupField = field;
	        return _this;
	    }
	    Object.defineProperty(GroupItemImpl.prototype, "groupField", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** groupField */
	        get: function () {
	            return this._groupField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupItemImpl.prototype, "footer", {
	        /** footer */
	        get: function () {
	            return this._footer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GroupItemImpl.prototype._addChild = function (item, index) {
	        _super.prototype._addChild.call(this, item, index);
	        if (item instanceof GroupFooter) {
	            this._footer = item;
	        }
	    };
	    return GroupItemImpl;
	}(GroupItem));
	exports.GroupItemImpl = GroupItemImpl;
	var GroupFooter = /** @class */ (function (_super) {
	    __extends(GroupFooter, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupFooter() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._expandable = false;
	        return _this;
	    }
	    Object.defineProperty(GroupFooter.prototype, "expandable", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expandable */
	        get: function () {
	            return this._expandable;
	        },
	        set: function (value) {
	            this._expandable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupFooter.prototype, "isLeaf", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupFooter.prototype, "displayLevel", {
	        get: function () {
	            return this._expandable ? this.level - 1 : this.level;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GroupFooter;
	}(GridItem));
	exports.GroupFooter = GroupFooter;
	});

	unwrapExports(GridItem_1);
	var GridItem_2 = GridItem_1.ITEM_EXT_CHECKED;
	var GridItem_3 = GridItem_1.ITEM_UNCHECKABLE;
	var GridItem_4 = GridItem_1.ITEM_EXT_SAVEEXPAND;
	var GridItem_5 = GridItem_1.ITEM_EXT_FILTERED;
	var GridItem_6 = GridItem_1.ItemState;
	var GridItem_7 = GridItem_1.ItemState_isEditing;
	var GridItem_8 = GridItem_1.ItemState_isInserting;
	var GridItem_9 = GridItem_1.GridItem;
	var GridItem_10 = GridItem_1.DataItem;
	var GridItem_11 = GridItem_1.GridRow;
	var GridItem_12 = GridItem_1.GroupItem;
	var GridItem_13 = GridItem_1.GroupItemImpl;
	var GridItem_14 = GridItem_1.GroupFooter;

	var Runtimes = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Runtimes.ts
	// 2019. 07. 08. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var DataRowExpressionRuntime = /** @class */ (function (_super) {
	    __extends(DataRowExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataRowExpressionRuntime() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._item = null;
	        _this._group = null;
	        _this._dataSource = null;
	        _this._fieldCount = 0;
	        return _this;
	    }
	    DataRowExpressionRuntime.prototype.dispose = function () {
	        this._item = null;
	        this._group = null;
	        this._dataSource = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DataRowExpressionRuntime.prototype, "index", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** index */
	        get: function () {
	            return this._item.index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataRowExpressionRuntime.prototype, "item", {
	        /** item */
	        get: function () {
	            return this._item;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataRowExpressionRuntime.prototype.setDataSource = function (value) {
	        this._dataSource = value;
	        this._fieldCount = value ? value.fieldCount : 0;
	    };
	    DataRowExpressionRuntime.prototype.setItem = function (item) {
	        this._item = item;
	        this._group = Utils_1.Utils.cast(item, GridItem_1.GroupItem);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataRowExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (DataRowExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return DataRowExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    DataRowExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case DataRowExpressionRuntime.ID_ROW:
	                return this._item.index;
	            case DataRowExpressionRuntime.ID_DATAROW:
	                return this._item.dataRow;
	            case DataRowExpressionRuntime.ID_CHECKED:
	                return this._item.checked;
	            case DataRowExpressionRuntime.ID_STATE:
	                switch (this._item.rowState) {
	                    case RowState_1.RowState.CREATED:
	                        return "c";
	                    case RowState_1.RowState.UPDATED:
	                        return "u";
	                    case RowState_1.RowState.DELETED:
	                        return "d";
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        return "x";
	                }
	                return undefined;
	            case DataRowExpressionRuntime.ID_COUNT:
	                return this._group ? this._group.count : 0;
	            case DataRowExpressionRuntime.ID_DCOUNT:
	                return this._group ? this._group.descendantCount : 0;
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    DataRowExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._item) {
	            if (idKey == DataRowExpressionRuntime.ID_VALUE || idKey == DataRowExpressionRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    DataRowExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == DataRowExpressionRuntime.ID_VALUE || idKey == DataRowExpressionRuntime.ID_VALUES) {
	            if (this._dataSource) {
	                var idx = capitalized ? this._dataSource.getFieldIndexC(index) : this._dataSource.getFieldIndex(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataRowExpressionRuntime.ID_ROW = 0;
	    DataRowExpressionRuntime.ID_DATAROW = 1;
	    DataRowExpressionRuntime.ID_CHECKED = 2;
	    DataRowExpressionRuntime.ID_VALUE = 3;
	    DataRowExpressionRuntime.ID_VALUES = 4;
	    DataRowExpressionRuntime.ID_STATE = 5;
	    DataRowExpressionRuntime.ID_COUNT = 6;
	    DataRowExpressionRuntime.ID_DCOUNT = 7;
	    DataRowExpressionRuntime.IDENTS = {
	        row: DataRowExpressionRuntime.ID_ROW,
	        datarow: DataRowExpressionRuntime.ID_DATAROW,
	        checked: DataRowExpressionRuntime.ID_CHECKED,
	        value: DataRowExpressionRuntime.ID_VALUE,
	        values: DataRowExpressionRuntime.ID_VALUES,
	        state: DataRowExpressionRuntime.ID_STATE,
	        count: DataRowExpressionRuntime.ID_COUNT,
	        dcount: DataRowExpressionRuntime.ID_DCOUNT,
	    };
	    return DataRowExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.DataRowExpressionRuntime = DataRowExpressionRuntime;
	var DataCellExpressionRuntime = /** @class */ (function (_super) {
	    __extends(DataCellExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataCellExpressionRuntime() {
	        var _this = _super.call(this) || this;
	        _this._fieldCount = 0;
	        return _this;
	    }
	    DataCellExpressionRuntime.prototype.dispose = function () {
	        this._cell = null;
	        this._item = null;
	        this._grid = null;
	        this._dataSource = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataCellExpressionRuntime.prototype.setDataSource = function (value) {
	        this._dataSource = value;
	        this._fieldCount = value ? value.fieldCount : 0;
	    };
	    DataCellExpressionRuntime.prototype.setCell = function (value, item) {
	        this._cell = value;
	        this._grid = value.index.grid;
	        this._item = value.index.item || item;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataCellExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (DataCellExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return DataCellExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    DataCellExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        if (this._cell.index.itemIndex < 0) {
	            var fld = this._cell.index.dataField;
	            switch (idKey) {
	                case DataCellExpressionRuntime.ID_VALUE:
	                    return this._item.getData(fld);
	                case DataCellExpressionRuntime.ID_DATA_ROW:
	                    return this._item.dataRow;
	            }
	        }
	        switch (idKey) {
	            case DataCellExpressionRuntime.ID_VALUE:
	                return this._cell.value();
	            case DataCellExpressionRuntime.ID_ROW:
	                return this._cell.index.itemIndex;
	            case DataCellExpressionRuntime.ID_DATA_ROW:
	                return this._cell.index.dataRow;
	            case DataCellExpressionRuntime.ID_INDEX:
	                return this._cell.index.column.index;
	            case DataCellExpressionRuntime.ID_FIELD:
	                return this._cell.index.dataField;
	            case DataCellExpressionRuntime.ID_CHECKED:
	                return this._item.checked;
	            case DataCellExpressionRuntime.ID_STATE:
	                switch (this._item.rowState) {
	                    case RowState_1.RowState.CREATED:
	                        return "c";
	                    case RowState_1.RowState.UPDATED:
	                        return "u";
	                    case RowState_1.RowState.DELETED:
	                        return "d";
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        return "x";
	                }
	                return undefined;
	            case DataCellExpressionRuntime.ID_TAG:
	                return this._cell.index.column.tag;
	            case DataCellExpressionRuntime.ID_BASE:
	                var idx = this._cell.index.dataColumn.baseIndex;
	                return idx >= 0 ? this._item.getData(idx) : undefined;
	            case DataCellExpressionRuntime.ID_COUNT:
	                return this._item instanceof GridItem_1.GroupItem ? this._item.count : 0;
	            case DataCellExpressionRuntime.ID_DCOUNT:
	                return this._item instanceof GridItem_1.GroupItem ? this._item.descendantCount : 0;
	            case DataCellExpressionRuntime.ID_CHANGED_CELL:
	                // update 인경우만 가능하다.
	                var index = this._cell.index;
	                var dataRow = index.dataRow;
	                var dataField = index.dataField;
	                return dataField >= 0 && this._item.rowState == RowState_1.RowState.UPDATED && this._dataSource.isDataChanged(dataRow, dataField);
	            case DataCellExpressionRuntime.ID_LOOKUP_EXISTS:
	                var column = this._cell.index.dataColumn;
	                var lookup = void 0;
	                if (lookup = column.lookupSource) {
	                    var flds = column.lookupKeyFieldIds;
	                    var cnt = flds.length;
	                    var keys = [];
	                    for (var i = 0; i < cnt; i++) {
	                        keys.push(this._item.getData(flds[i]));
	                    }
	                    return lookup.exists(keys);
	                }
	                else {
	                    return column.getLookupIndex(this._cell.value()) > -1;
	                }
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    DataCellExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._item) {
	            if (idKey == DataCellExpressionRuntime.ID_VALUE || idKey == DataCellExpressionRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    DataCellExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == DataCellExpressionRuntime.ID_VALUE || idKey == DataCellExpressionRuntime.ID_VALUES) {
	            if (this._dataSource) {
	                var idx = capitalized ? this._dataSource.getFieldIndexC(index) : this._dataSource.getFieldIndex(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataCellExpressionRuntime.ID_VALUE = 0;
	    DataCellExpressionRuntime.ID_ROW = 1;
	    DataCellExpressionRuntime.ID_DATA_ROW = 2;
	    DataCellExpressionRuntime.ID_INDEX = 3;
	    DataCellExpressionRuntime.ID_FIELD = 4;
	    DataCellExpressionRuntime.ID_CHECKED = 5;
	    DataCellExpressionRuntime.ID_STATE = 6;
	    DataCellExpressionRuntime.ID_TAG = 7;
	    DataCellExpressionRuntime.ID_BASE = 8;
	    DataCellExpressionRuntime.ID_VALUES = 9;
	    DataCellExpressionRuntime.ID_COUNT = 10;
	    DataCellExpressionRuntime.ID_DCOUNT = 11;
	    DataCellExpressionRuntime.ID_CHANGED_CELL = 12;
	    DataCellExpressionRuntime.ID_LOOKUP_EXISTS = 13;
	    DataCellExpressionRuntime.IDENTS = {
	        value: DataCellExpressionRuntime.ID_VALUE,
	        row: DataCellExpressionRuntime.ID_ROW,
	        datarow: DataCellExpressionRuntime.ID_DATA_ROW,
	        index: DataCellExpressionRuntime.ID_INDEX,
	        field: DataCellExpressionRuntime.ID_FIELD,
	        checked: DataCellExpressionRuntime.ID_CHECKED,
	        state: DataCellExpressionRuntime.ID_STATE,
	        tag: DataCellExpressionRuntime.ID_TAG,
	        base: DataCellExpressionRuntime.ID_BASE,
	        values: DataCellExpressionRuntime.ID_VALUES,
	        count: DataCellExpressionRuntime.ID_COUNT,
	        dcount: DataCellExpressionRuntime.ID_DCOUNT,
	        changedcell: DataCellExpressionRuntime.ID_CHANGED_CELL,
	        lookupexists: DataCellExpressionRuntime.ID_LOOKUP_EXISTS
	    };
	    return DataCellExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.DataCellExpressionRuntime = DataCellExpressionRuntime;
	var EqualBlankRuntime = /** @class */ (function (_super) {
	    __extends(EqualBlankRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EqualBlankRuntime() {
	        var _this = _super.call(this) || this;
	        _this._fieldCount = 0;
	        return _this;
	    }
	    EqualBlankRuntime.prototype.dispose = function () {
	        this._cell = null;
	        this._item = null;
	        this._ds = null;
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    EqualBlankRuntime.prototype.setDataArguments = function (dataSource, cell, item) {
	        this._ds = dataSource;
	        this._fieldCount = dataSource ? dataSource.fieldCount : 0;
	        this._cell = cell;
	        this._item = item;
	        this._grid = cell && cell.index.column.grid;
	    };
	    EqualBlankRuntime.prototype.setItem = function (item) {
	        this._item = item;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EqualBlankRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (EqualBlankRuntime.IDENTS.hasOwnProperty(token)) {
	            return EqualBlankRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    EqualBlankRuntime.prototype.evaluateIdentifier = function (idKey) {
	        //assert(this._cell != null, "cell is null");
	        var idx;
	        switch (idKey) {
	            case EqualBlankRuntime.ID_VALUE:
	                return this._item.getData(this._cell.index.dataField);
	            case EqualBlankRuntime.ID_BASE:
	                idx = this._cell.index.dataColumn.baseIndex;
	                return idx >= 0 ? this._item.getData(idx) : undefined;
	            case EqualBlankRuntime.ID_PREV_VALUES:
	                var col = this._cell.index.column;
	                var cols = this._grid.getDataColumns();
	                idx = cols.indexOf(col);
	                var vals = [];
	                if (cols.length < 0 || idx < 0) {
	                    return;
	                }
	                for (var i = 0, cnt = Math.min(idx, cols.length); i < cnt; i++) {
	                    vals.push(this._item.getData(cols[i].dataIndex));
	                }
	                return vals.join("`");
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    EqualBlankRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._item) {
	            if (idKey == EqualBlankRuntime.ID_VALUE || idKey == EqualBlankRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    EqualBlankRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == EqualBlankRuntime.ID_VALUE || idKey == EqualBlankRuntime.ID_VALUES) {
	            if (this._ds) {
	                var idx = capitalized ? this._ds.getFieldIndexC(index) : this._ds.getFieldIndex(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    EqualBlankRuntime.ID_VALUE = 0;
	    EqualBlankRuntime.ID_VALUES = 1;
	    EqualBlankRuntime.ID_BASE = 2;
	    EqualBlankRuntime.ID_PREV_VALUES = 3;
	    EqualBlankRuntime.IDENTS = {
	        value: EqualBlankRuntime.ID_VALUE,
	        values: EqualBlankRuntime.ID_VALUES,
	        base: EqualBlankRuntime.ID_BASE,
	        prevvalues: EqualBlankRuntime.ID_PREV_VALUES
	    };
	    return EqualBlankRuntime;
	}(Expression.ExpressionRuntime));
	exports.EqualBlankRuntime = EqualBlankRuntime;
	var RowGroupStatementRuntime = /** @class */ (function (_super) {
	    __extends(RowGroupStatementRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupStatementRuntime() {
	        return _super.call(this) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupStatementRuntime.prototype.setGrid = function (grid) {
	        this._grid = grid;
	    };
	    RowGroupStatementRuntime.prototype.setGroup = function (group) {
	        this._group = group;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupStatementRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (RowGroupStatementRuntime.IDENTS.hasOwnProperty(token)) {
	            return RowGroupStatementRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    RowGroupStatementRuntime.prototype.evaluateIdentifier = function (idKey) {
	        var g = this._group;
	        var field;
	        var column;
	        switch (idKey) {
	            case RowGroupStatementRuntime.ID_GROUP_FIELD:
	                field = g.dataSource.getField(g.groupField);
	                return field ? field.fieldName : "";
	            case RowGroupStatementRuntime.ID_FIELD_HEADER:
	                field = g.dataSource.getField(g.groupField);
	                return field ? field.header : "";
	            case RowGroupStatementRuntime.ID_GROUP_COLUMN:
	                column = this._grid ? this._grid.columnByField(g.groupField) : null;
	                return column ? column.displayText : g.dataSource.getFieldName(g.groupField);
	            case RowGroupStatementRuntime.ID_COLUMN_HEADER:
	                column = this._grid ? this._grid.columnByField(g.groupField) : null;
	                if (column) {
	                    return column.header.text || column.displayText;
	                }
	                else {
	                    return g.dataSource.getFieldName(g.groupField);
	                }
	            case RowGroupStatementRuntime.ID_COLUMN_FOOTER:
	                column = this._grid ? this._grid.columnByField(g.groupField) : null;
	                if (column) {
	                    return column.footer.groupText || column.displayText;
	                }
	                else {
	                    return g.dataSource.getFieldName(g.groupField);
	                }
	            case RowGroupStatementRuntime.ID_GROUP_VALUE:
	                var item = g.firstItem;
	                return item ? item.getData(g.groupField) : undefined;
	            case RowGroupStatementRuntime.ID_ROW_COUNT:
	                return g.descendantCount;
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    RowGroupStatementRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        switch (idKey) {
	            case RowGroupStatementRuntime.ID_SUM:
	            case RowGroupStatementRuntime.ID_MAX:
	            case RowGroupStatementRuntime.ID_MIN:
	            case RowGroupStatementRuntime.ID_AVG:
	            case RowGroupStatementRuntime.ID_DATA_COUNT:
	            case RowGroupStatementRuntime.ID_DATA_AVG:
	                if (isNaN(index) || index < 0) {
	                    return undefined;
	                }
	                else {
	                    var ret = void 0;
	                    switch (idKey) {
	                        case RowGroupStatementRuntime.ID_SUM:
	                            ret = this._group.getSum(index);
	                            break;
	                        case RowGroupStatementRuntime.ID_MAX:
	                            ret = this._group.getMax(index);
	                            break;
	                        case RowGroupStatementRuntime.ID_MIN:
	                            ret = this._group.getMin(index);
	                            break;
	                        case RowGroupStatementRuntime.ID_AVG:
	                            ret = this._group.getAvg(index);
	                            break;
	                        case RowGroupStatementRuntime.ID_DATA_COUNT:
	                            //ret = this._group.getDataCount(index);
	                            break;
	                        case RowGroupStatementRuntime.ID_DATA_AVG:
	                            //ret = this._group.getDataAvg(index);
	                            break;
	                    }
	                    return isNaN(ret) ? "" : String(ret);
	                }
	                break;
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    RowGroupStatementRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        var ds = this._group.dataSource;
	        var field = index ? (ds ? ds.getFieldIndex(index) : -1) : (this._group.groupField);
	        return this.evaluateIndexerI(idKey, field);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    RowGroupStatementRuntime.ID_GROUP_FIELD = 0;
	    RowGroupStatementRuntime.ID_FIELD_HEADER = 1;
	    RowGroupStatementRuntime.ID_GROUP_COLUMN = 2;
	    RowGroupStatementRuntime.ID_COLUMN_HEADER = 3;
	    RowGroupStatementRuntime.ID_COLUMN_FOOTER = 4;
	    RowGroupStatementRuntime.ID_GROUP_VALUE = 5;
	    RowGroupStatementRuntime.ID_ROW_COUNT = 6;
	    RowGroupStatementRuntime.ID_SUM = 7;
	    RowGroupStatementRuntime.ID_MAX = 8;
	    RowGroupStatementRuntime.ID_MIN = 9;
	    RowGroupStatementRuntime.ID_AVG = 10;
	    RowGroupStatementRuntime.ID_DATA_COUNT = 11;
	    RowGroupStatementRuntime.ID_DATA_AVG = 12;
	    RowGroupStatementRuntime.IDENTS = {
	        groupfield: RowGroupStatementRuntime.ID_GROUP_FIELD,
	        fieldheader: RowGroupStatementRuntime.ID_FIELD_HEADER,
	        groupcolumn: RowGroupStatementRuntime.ID_GROUP_COLUMN,
	        columnheader: RowGroupStatementRuntime.ID_COLUMN_HEADER,
	        columnfooter: RowGroupStatementRuntime.ID_COLUMN_FOOTER,
	        groupvalue: RowGroupStatementRuntime.ID_GROUP_VALUE,
	        rowcount: RowGroupStatementRuntime.ID_ROW_COUNT,
	        sum: RowGroupStatementRuntime.ID_SUM,
	        max: RowGroupStatementRuntime.ID_MAX,
	        min: RowGroupStatementRuntime.ID_MIN,
	        avg: RowGroupStatementRuntime.ID_AVG,
	        datacount: RowGroupStatementRuntime.ID_DATA_COUNT,
	        dataavg: RowGroupStatementRuntime.ID_DATA_AVG,
	    };
	    return RowGroupStatementRuntime;
	}(Expression.ExpressionRuntime));
	exports.RowGroupStatementRuntime = RowGroupStatementRuntime;
	});

	unwrapExports(Runtimes);
	var Runtimes_1 = Runtimes.DataRowExpressionRuntime;
	var Runtimes_2 = Runtimes.DataCellExpressionRuntime;
	var Runtimes_3 = Runtimes.EqualBlankRuntime;
	var Runtimes_4 = Runtimes.RowGroupStatementRuntime;

	var GridCell_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridCell.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var GridCell = /** @class */ (function (_super) {
	    __extends(GridCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridCell(name) {
	        var _this = _super.call(this) || this;
	        _this._index = new CellIndex_1.CellIndex();
	        _this._name = name;
	        return _this;
	    }
	    GridCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridCell.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "index", {
	        /** index */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "item", {
	        /** item */
	        get: function () {
	            return this._index.item;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "valueColumn", {
	        /** valueColumn */
	        get: function () {
	            return this._index.valueColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "dataColumn", {
	        /** dataColumn */
	        get: function () {
	            return this._index.dataColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "error", {
	        /** error */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "errorLevel", {
	        /** errorLevel */
	        get: function () {
	            return Types.ValidationLevel.IGNORE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "text", {
	        /** text */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "value", {
	        /** value  */
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "level", {
	        /** level */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridCell.prototype, "styles", {
	        /** styles */
	        get: function () {
	            return this._styles;
	        },
	        set: function (value) {
	            this._styles = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridCell.prototype.setIndex = function (value) {
	        this._index.assignFrom(value);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    GridCell.ERROR = "<<ERROR>>";
	    return GridCell;
	}(Base_1.Base));
	exports.GridCell = GridCell;
	var StyledCell = /** @class */ (function (_super) {
	    __extends(StyledCell, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function StyledCell(model, name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        _this._model = model;
	        return _this;
	    }
	    StyledCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(StyledCell.prototype, "model", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** model */
	        get: function () {
	            return this._model;
	        },
	        set: function (value) {
	            this._model = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return StyledCell;
	}(GridCell));
	exports.StyledCell = StyledCell;
	var ValueCell = /** @class */ (function (_super) {
	    __extends(ValueCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ValueCell(name) {
	        return _super.call(this, name) || this;
	    }
	    ValueCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ValueCell.prototype, "blankState", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return Types.BlankState.NONE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ValueCell.prototype.setCellStyles = function (value) {
	        this._cellStyles = value;
	        this._styles.assignFrom(value);
	    };
	    return ValueCell;
	}(GridCell));
	exports.ValueCell = ValueCell;
	var DataCell = /** @class */ (function (_super) {
	    __extends(DataCell, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataCell(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name || "dataCell") || this;
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DataCell.getText = function (item, column) {
	        var value = column.dataIndex >= 0 ? item.getData(column.dataIndex) : undefined;
	        return DataCell._getText(item, column, value);
	    };
	    DataCell._getText = function (item, column, value) {
	        var col = column;
	        var v;
	        if (col.lookupDisplay) {
	            var lookup = col.lookupSource;
	            if (lookup) {
	                var flds = col.lookupKeyFieldIds;
	                var cnt = flds.length;
	                var keys = [];
	                for (var i = 0; i < cnt; i++) {
	                    keys.push(item.getData(flds[i]));
	                }
	                v = lookup.lookup(keys, col.valueSeparator);
	                v = (v !== undefined) ? v : col.textOfInvalid != null ? col.textOfInvalid : value;
	            }
	            else {
	                var fld = col.labelFieldIndex;
	                v = (fld >= 0) ? item.getData(fld) : col.getLookupLabel(value);
	            }
	        }
	        else {
	            var exp = void 0;
	            var rep = void 0;
	            var cb = void 0;
	            v = value;
	            if (col.valueType && col.valueType == Types.ValueType.NUMBER && col.nanText != null && isNaN(v)) {
	                v = col.nanText;
	            }
	            else if (v != null && (typeof v === "string" || typeof v === "number") && (v.toString()) && (exp = col.displayRegExp) && (rep = col.displayReplace)) {
	                v = v.toString().replace(exp, rep);
	            }
	            else if (cb = col.displayCallback) {
	                var handler = col.grid.getHandler();
	                var idx = CellIndex_1.CellIndex.temp(col.grid, item.index, column);
	                v = cb(handler, idx.proxy(), v);
	            }
	            else if (v != null && typeof v === "object") {
	                v = JSON.stringify(v);
	            }
	        }
	        var s = (v === undefined || v === null) ? "" : String(v);
	        s = col.affix(s);
	        return s;
	    };
	    DataCell.equalBlankRuntime = function () {
	        if (!this._equalBlankRuntime) {
	            this._equalBlankRuntime = new Runtimes.EqualBlankRuntime();
	        }
	        return this._equalBlankRuntime;
	    };
	    DataCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataCell.prototype.getValue = function () {
	        var col = this.dataColumn;
	        var fld = col.dataIndex;
	        if (fld >= 0) {
	            return this.item.getData(fld);
	        }
	        return undefined;
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataCell.prototype.getDisplayText = function (grid) {
	        var options = grid.formatOptions;
	        var value = this.value;
	        var error = this.error;
	        var errorLevel = this.errorLevel;
	        var col = this.dataColumn;
	        var s;
	        //numberFormatter && (col._displayMinusZero != null ? this._numberFormatter.setDisplayMinusZero(!!col._displayMinusZero) : this._numberFormatter.setDisplayMinusZero(true));
	        if (col) {
	            switch (col.valueType) {
	                case Types.ValueType.TEXT:
	                    s = this.getText;
	                    break;
	                case Types.ValueType.NUMBER:
	                    var v = Number(value);
	                    var f = void 0;
	                    if (isNaN(v)) {
	                        s = col.nanText;
	                    }
	                    else if (v == 0 && col.zeroText != null) {
	                        s = col.zeroText;
	                    }
	                    else if (f = options.getNumberFormatter(col.numberFormatter)) {
	                        //col._displayMinusZero != null ? f.setDisplayMinusZero(!!col._displayMinusZero) : f.setDisplayMinusZero(true);
	                        s = f.format(v);
	                    }
	                    else {
	                        s = this.getText;
	                    }
	                    break;
	                case Types.ValueType.DATETIME:
	                    var w = void 0;
	                    /*if (this._value instanceof Date && this._datetimeFormatter) {
	                        s = this._datetimeFormatter.format(this._value);
	                    } else*/ if (value instanceof Date && (w = options.getDateWriter(col.datetimeWriter))) {
	                        s = w.getText(value);
	                    }
	                    else {
	                        s = this.getText;
	                    }
	                    break;
	                case Types.ValueType.BOOLEAN:
	                    var bf = void 0;
	                    if (bf = options.getBoolFormatter(col.boolFormatter)) {
	                        s = bf.formatValue(value);
	                    }
	                    else {
	                        s = this.getText;
	                    }
	                    break;
	                case Types.ValueType.OBJECT:
	                // var field = col.getField;
	                // var dataRow = this._index.dataRow;
	                // var key = col._objectKey;
	                // var fn = col._objectCallback;
	                // var v = this._value;
	                // var f;
	                // if (v) {
	                //     s = v = fn && typeof fn === "function" ? fn(field.orgFieldName(), dataRow, v) : key && v.hasOwnProperty(key) ? v[key]  : model.displayText();
	                //     switch (typeof v) {
	                //         case "stirng":
	                //             break;
	                //         case "number":
	                //             s = (f = this.numberFormatter) ? f.format(v) : v;
	                //             break;
	                //         case "boolean":
	                //             s = (f = this._boolFormatter) ? f.formatValue(v) : v;
	                //             break;
	                //         default:
	                //             s = v instanceof Date && (f = this.datetimeWriter()) ? f.getText(v) : v;
	                //             break;
	                //     }
	                // }
	                // break;
	                default:
	                    s = this.getText;
	                    break;
	            }
	        }
	        return s;
	    };
	    Object.defineProperty(DataCell.prototype, "value", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            // typescript에 super proeperty를 호출하는 방법이 없어서...
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataCell.prototype, "getText", {
	        get: function () {
	            var index = this.index;
	            var col = index.dataColumn;
	            var item = index.item;
	            return DataCell._getText(item, col, this.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DataCell;
	}(ValueCell));
	exports.DataCell = DataCell;
	var LiteralCell = /** @class */ (function (_super) {
	    __extends(LiteralCell, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LiteralCell(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name || "literalCell") || this;
	    }
	    LiteralCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(LiteralCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            // TODO: Fix it
	            return ""; //this.index.column.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LiteralCell.prototype, "value", {
	        get: function () {
	            // TODO: Fix it
	            return null; //this.index.column.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return LiteralCell;
	}(ValueCell));
	exports.LiteralCell = LiteralCell;
	var SeriesCell = /** @class */ (function (_super) {
	    __extends(SeriesCell, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SeriesCell(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name || "seriesCell") || this;
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    SeriesCell.getText = function (value, separator) {
	        return value ? value.join(separator != null ? separator : ",") : "";
	    };
	    SeriesCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SeriesCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SeriesCell.prototype, "value", {
	        get: function () {
	            var column = this.index.column;
	            if (column instanceof DataColumn_1.SeriesColumn) {
	                var fields = column.fields;
	                var cnt = fields ? fields.length : 0;
	                if (cnt > 0) {
	                    var item = this.item;
	                    var vals = new Array(cnt);
	                    for (var i = 0; i < cnt; i++) {
	                        if (fields[i] >= 0) {
	                            vals[i] = item.getData(fields[i]);
	                        }
	                    }
	                    return vals;
	                }
	            }
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SeriesCell;
	}(ValueCell));
	exports.SeriesCell = SeriesCell;
	});

	unwrapExports(GridCell_1);
	var GridCell_2 = GridCell_1.GridCell;
	var GridCell_3 = GridCell_1.StyledCell;
	var GridCell_4 = GridCell_1.ValueCell;
	var GridCell_5 = GridCell_1.DataCell;
	var GridCell_6 = GridCell_1.LiteralCell;
	var GridCell_7 = GridCell_1.SeriesCell;

	var GridObject_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridObject.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var GridObject = /** @class */ (function (_super) {
	    __extends(GridObject, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridObject(grid) {
	        var _this = _super.call(this) || this;
	        _this._dirty = false;
	        _this._grid = grid;
	        return _this;
	    }
	    GridObject.prototype.dispose = function () {
	        this._grid = null;
	        // for (var attr in this) {
	        // 	if (this[attr] instanceof VisualStyles || this[attr] instanceof DynamicStyleCollection) {
	        // 		this[attr] = null;
	        // 		// delete this[attr];
	        // 	}
	        // }
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridObject.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner  */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridObject.prototype, "dirty", {
	        /** dirty */
	        get: function () {
	            return this._dirty;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridObject.prototype.clean = function () {
	        if (this._dirty) {
	            this._dirty = false;
	        }
	    };
	    GridObject.prototype.invalidate = function () {
	        this._grid && this._grid.invalidate();
	    };
	    GridObject.prototype.refreshOwner = function () {
	        this._grid && this._grid.refreshView();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridObject.prototype._changed = function () {
	        this._doChanged();
	        if (!this._dirty) {
	            this._dirty = true;
	            this.refreshOwner();
	        }
	    };
	    GridObject.prototype._doChanged = function () {
	    };
	    return GridObject;
	}(EventAware_1.EventAware));
	exports.GridObject = GridObject;
	var VisualObject = /** @class */ (function (_super) {
	    __extends(VisualObject, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function VisualObject(grid, styleName) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._visible = true;
	        _this._styles = new VisualStyles_1.VisualStyles(_this, styleName);
	        return _this;
	    }
	    VisualObject.prototype.dispose = function () {
	        this._styles = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // VisualStylesOwner
	    //-------------------------------------------------------------------------
	    VisualObject.prototype.stylesChanged = function (entry) {
	        this._changed();
	    };
	    Object.defineProperty(VisualObject.prototype, "styles", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** styles */
	        get: function () {
	            return this._styles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualObject.prototype, "visible", {
	        /** visible */
	        get: function () {
	            return this._visible;
	        },
	        set: function (value) {
	            if (value != this._visible) {
	                this._visible = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    VisualObject.prototype.setStyles = function (value) {
	        this._styles.extend(value);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    VisualObject.prototype._doChanged = function () {
	        if (this._grid) {
	            this._grid["_visualObjectChanged"](this);
	        }
	    };
	    return VisualObject;
	}(GridObject));
	exports.VisualObject = VisualObject;
	var SectionObject = /** @class */ (function (_super) {
	    __extends(SectionObject, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SectionObject(grid, styleName) {
	        var _this = _super.call(this, grid, styleName) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._headText = null;
	        _this._footText = null;
	        _this._summaryText = null;
	        _this._headImageUrl = null;
	        _this._footImageUrl = null;
	        _this._summaryImageUrl = null;
	        _this._headStyles = new VisualStyles_1.VisualStyles(_this);
	        _this._footStyles = new VisualStyles_1.VisualStyles(_this);
	        _this._summaryStyles = new VisualStyles_1.VisualStyles(_this);
	        _this._headCell = _this._createHeadCell();
	        _this._footCell = new GridCell_1.StyledCell(_this);
	        _this._sumCell = new GridCell_1.StyledCell(_this);
	        _this.visible = true;
	        return _this;
	    }
	    Object.defineProperty(SectionObject.prototype, "headText", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** headText */
	        get: function () {
	            return this._headText;
	        },
	        set: function (value) {
	            if (value != this._headText) {
	                this._headText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SectionObject.prototype, "footText", {
	        /** footText */
	        get: function () {
	            return this._footText;
	        },
	        set: function (value) {
	            if (value != this._footText) {
	                this._footText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SectionObject.prototype, "summaryText", {
	        /** summaryText */
	        get: function () {
	            return this._summaryText;
	        },
	        set: function (value) {
	            if (value != this._summaryText) {
	                this._summaryText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SectionObject.prototype, "headImageUrl", {
	        /** headImageUrl */
	        get: function () {
	            return this._headImageUrl;
	        },
	        set: function (value) {
	            if (value != this._headImageUrl) {
	                this._headImageUrl = value;
	                this._headImage = value ? this._grid.getImage(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SectionObject.prototype, "footImageUrl", {
	        /** footImageUrl */
	        get: function () {
	            return this._footImageUrl;
	        },
	        set: function (value) {
	            if (value != this._footImageUrl) {
	                this._footImageUrl = value;
	                this._footImage = value ? this._grid.getImage(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SectionObject.prototype, "summaryImageUrl", {
	        /** summaryImageUrl */
	        get: function () {
	            return this._summaryImageUrl;
	        },
	        set: function (value) {
	            if (value != this._summaryImageUrl) {
	                this._summaryImageUrl = value;
	                this._summaryImage = value ? this._grid.getImage(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** headImage */
	    SectionObject.prototype.headImage = function () {
	        if (this._headImage) {
	            return this._headImage;
	        }
	        else {
	            return this._headImage = this._headImageUrl ? this._grid.getImage(this._headImageUrl) : null;
	        }
	    };
	    /** footImage */
	    SectionObject.prototype.footImage = function () {
	        if (this._footImage) {
	            return this._footImage;
	        }
	        else {
	            return this._footImage = this._footImageUrl ? this._grid.getImage(this._footImageUrl) : null;
	        }
	    };
	    /** summaryImage */
	    SectionObject.prototype.summaryImage = function () {
	        if (this._summaryImage) {
	            return this._summaryImage;
	        }
	        else {
	            return this._summaryImage = this._summaryImageUrl ? this._grid.getImage(this._summaryImageUrl) : null;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SectionObject.prototype.setHeadStyles = function (value) {
	        if (value !== this._headStyles) {
	            this._headStyles.extend(value);
	        }
	    };
	    SectionObject.prototype.setFootStyles = function (value) {
	        if (value !== this._footStyles) {
	            this._footStyles.extend(value);
	        }
	    };
	    SectionObject.prototype.setSummaryStyles = function (value) {
	        if (value !== this._summaryStyles) {
	            this._summaryStyles.extend(value);
	        }
	    };
	    SectionObject.prototype.getHeadCell = function () {
	        var cell = this._headCell;
	        cell.styles = this._headStyles;
	        return cell;
	    };
	    SectionObject.prototype.getFootCell = function () {
	        var cell = this._footCell;
	        cell.styles = this._footStyles;
	        return cell;
	    };
	    SectionObject.prototype.getSumCell = function () {
	        var cell = this._sumCell;
	        cell.styles = this._summaryStyles;
	        return cell;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    SectionObject.prototype._createHeadCell = function () {
	        return new GridCell_1.StyledCell(this);
	    };
	    return SectionObject;
	}(VisualObject));
	exports.SectionObject = SectionObject;
	});

	unwrapExports(GridObject_1);
	var GridObject_2 = GridObject_1.GridObject;
	var GridObject_3 = GridObject_1.VisualObject;
	var GridObject_4 = GridObject_1.SectionObject;

	var DynamicStyles = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DynamicStyle.ts
	// 2019. 07. 18. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var DynamicStyle = /** @class */ (function (_super) {
	    __extends(DynamicStyle, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DynamicStyle(owner) {
	        var _this = _super.call(this) || this;
	        _this._body = true;
	        _this._fixed = true;
	        _this._owner = owner;
	        return _this;
	    }
	    DynamicStyle.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DynamicStyle.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner */
	        get: function () {
	            return this._owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DynamicStyle.prototype.apply = function (runtime, target) {
	    };
	    DynamicStyle.prototype.check = function (runtime) {
	        return false;
	    };
	    return DynamicStyle;
	}(Base_1.Base));
	exports.DynamicStyle = DynamicStyle;
	var DynamicStyleCollection = /** @class */ (function (_super) {
	    __extends(DynamicStyleCollection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DynamicStyleCollection(owner) {
	        var _this = _super.call(this) || this;
	        _this._items = [];
	        _this._owner = owner;
	        return _this;
	    }
	    DynamicStyleCollection.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DynamicStyleCollection.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner */
	        get: function () {
	            return this._owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DynamicStyleCollection.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DynamicStyleCollection.prototype.setItems = function (items) {
	    };
	    DynamicStyleCollection.prototype.applyInternal = function (runtime, target) {
	    };
	    DynamicStyleCollection.prototype.checkStyle = function (runtime) {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            var style = this._items[i];
	            if (style.check(runtime)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    return DynamicStyleCollection;
	}(Base_1.Base));
	exports.DynamicStyleCollection = DynamicStyleCollection;
	});

	unwrapExports(DynamicStyles);
	var DynamicStyles_1 = DynamicStyles.DynamicStyle;
	var DynamicStyles_2 = DynamicStyles.DynamicStyleCollection;

	var ItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ItemProvider.ts
	// 2019. 07. 04. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var RootItem = /** @class */ (function (_super) {
	    __extends(RootItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RootItem(provier) {
	        var _this = _super.call(this, -1) || this;
	        _this._provider = provier;
	        return _this;
	    }
	    Object.defineProperty(RootItem.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._provider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "level", {
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "expanded", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "isLeaf", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "dataSource", {
	        get: function () {
	            return this._provider.dataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "expandable", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootItem.prototype, "collapsable", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RootItem;
	}(GridItem_1.GroupItemImpl));
	exports.RootItem = RootItem;
	var ItemProvider = /** @class */ (function (_super) {
	    __extends(ItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ItemProvider(indexing) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._hideDeleted = false;
	        _this._eventLock = 0;
	        _this._indexing = indexing;
	        _this._rootItem = _this._createRootItem();
	        return _this;
	    }
	    Object.defineProperty(ItemProvider.prototype, "hideDeleted", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** hideDeleted */
	        get: function () {
	            return this._hideDeleted;
	        },
	        set: function (value) {
	            if (value != this._hideDeleted) {
	                this._hideDeleted = value;
	                this._hideDeletedChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ItemProvider.prototype, "summaryMode", {
	        /** summaryMode */
	        get: function () {
	            return Types.SummaryMode.NONE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ItemProvider.prototype, "fixedCount", {
	        /** fixedCount */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ItemProvider.prototype, "maxItemCount", {
	        /** fixedCount */
	        get: function () {
	            return 0;
	        },
	        set: function (value) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ItemProvider.prototype.setFixed = function (count, sorting, filtering) {
	    };
	    ItemProvider.prototype.attachItem = function (item) {
	        item["_parent"] = this._rootItem;
	    };
	    ItemProvider.prototype.getItemsByIndices = function (indices) {
	        var items = [];
	        if (indices) {
	            for (var i = 0, cnt = indices.length; i < cnt; i++) {
	                var item = this.getItem(indices[i]);
	                item && items.push(item);
	            }
	        }
	        return items;
	    };
	    ItemProvider.prototype.getIndexOfRow = function (dataRow) {
	        var item = this.getItemOfRow(dataRow);
	        return item ? item.index : -1;
	    };
	    ItemProvider.prototype.getIndicesOfRows = function (dataRows) {
	        var items = [];
	        var cnt = dataRows ? dataRows.length : 0;
	        if (cnt) {
	            for (var i = 0; i < cnt; i++) {
	                var item = this.getItemOfRow(dataRows[i]);
	                items.push(item ? item.index : -1);
	            }
	        }
	        return items;
	    };
	    ItemProvider.prototype.getItemsByRows = function (dataRows, force) {
	        if (force === void 0) { force = false; }
	        var items = [];
	        var cnt = dataRows ? dataRows.length : 0;
	        for (var i = 0; i < cnt; i++) {
	            var item = this.getItemOfRow(dataRows[i], force);
	            if (item) {
	                items.push(item);
	            }
	        }
	        return items;
	    };
	    ItemProvider.prototype.exchange = function (index1, index2) {
	    };
	    ItemProvider.prototype.setCheckable = function (item, value) {
	        if (item) {
	            if (value != item.checkable) {
	                item["_setCheckable"](value);
	                this._fireCheckableChanged(item);
	            }
	        }
	    };
	    ItemProvider.prototype.checkItem = function (item, checked, exclusive, checkEvent) {
	        if (item) {
	            var prev = item.checked;
	            if (exclusive) {
	                this._clearChecked();
	                if (checked) {
	                    this._setChecked(item, true);
	                }
	                if ((checked != prev) && checkEvent) {
	                    this._fireItemChecked(item);
	                }
	                this._fireRefreshClient();
	            }
	            else if (checked != prev) {
	                this._setChecked(item, checked);
	                checkEvent ? this._fireItemChecked(item) : this._fireRefreshClient();
	            }
	            this._fireItemCheckChanged([item], checked);
	        }
	    };
	    ItemProvider.prototype.checkItems = function (items, checked, checkEvent) {
	        if (items && items.length > 0) {
	            for (var i = 0, cnt = items.length; i < cnt; i++) {
	                var item = items[i];
	                item instanceof GridItem_1.GridItem && this._setChecked(item, checked);
	            }
	            checkEvent ? this._fireItemsChecked(items, checked) : this._fireRefreshClient();
	        }
	        this._fireItemCheckChanged(items, checked);
	    };
	    ItemProvider.prototype.checkAll = function (checked, visibleOnly, checkableOnly, checkEvent, groupCheckable) {
	        var cnt = this.itemCount;
	        if (checkableOnly) {
	            for (var i = 0; i < cnt; i++) {
	                var item = this.getItem(i);
	                if (item.checkable) {
	                    this._setChecked(item, checked);
	                }
	            }
	        }
	        else {
	            for (var i = 0; i < cnt; i++) {
	                this._setChecked(this.getItem(i), checked);
	            }
	        }
	        checkEvent ? this._fireItemAllChecked(checked) : this._fireRefreshClient();
	        this._fireItemCheckChanged(null, checked);
	    };
	    ItemProvider.prototype._setCheckItem = function (item, checked) {
	        item["$_setChecked"](checked);
	    };
	    ItemProvider.prototype._clearDisplayLevels = function () {
	    };
	    ItemProvider.prototype.hasCellStyle = function () {
	        return false;
	    };
	    ItemProvider.prototype.setCellStyle = function (row, field, style) {
	    };
	    ItemProvider.prototype.setCellStyles = function (provider, rows, fieldMap) {
	    };
	    ItemProvider.prototype.clearCellStyles = function () {
	    };
	    ItemProvider.prototype.removeCellStyle = function (style) {
	    };
	    ItemProvider.prototype.checkCellStyle = function (dataRow, field) {
	        return false;
	    };
	    ItemProvider.prototype.getCellStyle = function (dataRow, field) {
	        return null;
	    };
	    ItemProvider.prototype.canUpdate = function (item, field) {
	        if (item) {
	            var row = item.dataRow;
	            var ds = this.dataSource;
	            var state = item.itemState;
	            var inserting = GridItem_1.ItemState_isInserting(state); // || state === ItemState.DUMMY;
	            return (row >= 0 || inserting) && ds && (inserting || ds.canUpdateRow(row)) && ds.canUpdateField(row, field);
	        }
	        return false;
	    };
	    ItemProvider.prototype.canAppend = function () {
	        var ds = this.dataSource;
	        return ds && ds.canAppendRow();
	    };
	    ItemProvider.prototype.canInsert = function (item) {
	        if (item) {
	            var row = item.dataRow;
	            var ds = this.dataSource;
	            return /*(row >= 0) &&*/ ds && ds.canInsertRow(row);
	        }
	        return false;
	    };
	    ItemProvider.prototype.canDelete = function (item) {
	        if (item) {
	            var row = item.dataRow;
	            var ds = this.dataSource;
	            return (row >= 0) && ds && ds.canDeleteRow(row);
	        }
	        return false;
	    };
	    ItemProvider.prototype.findItem = function (fields, values, options, startIndex, endIndex) {
	        return -1;
	    };
	    ItemProvider.prototype.getSum = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getMax = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getMin = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getAvg = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getVar = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getVarp = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getStdev = function (field) {
	        return NaN;
	    };
	    ItemProvider.prototype.getStdevp = function (field) {
	        return NaN;
	    };
	    Object.defineProperty(ItemProvider.prototype, "isIndexing", {
	        get: function () {
	            return this._indexing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ItemProvider.prototype, "rootItem", {
	        //-------------------------------------------------------------------------
	        // internal members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rootItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ItemProvider.prototype._createRootItem = function () {
	        return new RootItem(this);
	    };
	    ItemProvider.prototype._hideDeletedChanged = function () {
	    };
	    ItemProvider.prototype.$_canFire = function () {
	        return this._eventLock <= 0;
	    };
	    ItemProvider.prototype._setChecked = function (item, checked) {
	        item["_setChecked"](checked);
	    };
	    ItemProvider.prototype._clearChecked = function () {
	        for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	            this._setChecked(this.getItem(i), false);
	        }
	    };
	    ItemProvider.prototype._resetItemIndicies = function (fromIndex) {
	        if (this._indexing) {
	            for (var i = fromIndex, cnt = this.itemCount; i < cnt; i++) {
	                this.getItem(i)["_index"] = i;
	            }
	        }
	    };
	    ItemProvider.prototype._setExpanded = function (group, value) {
	        group["_setExpanded"](value);
	    };
	    ItemProvider.prototype._resetItemIndex = function (index) {
	        var item = this.getItem(index);
	        if (item) {
	            item["_index"] = index;
	        }
	    };
	    ItemProvider.prototype._incDescendents = function (group, count) {
	        group["_descendantCount"] += count;
	        if (group.parent) {
	            this._incDescendents(group.parent, count);
	        }
	    };
	    ItemProvider.prototype._copyExtents = function (source, target) {
	        if (source instanceof GridItem_1.GridItem && target instanceof GridItem_1.GridItem) ;
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    ItemProvider.prototype._fireReset = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.RESET);
	        }
	    };
	    ItemProvider.prototype._fireRefresh = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.REFRESH);
	        }
	    };
	    ItemProvider.prototype._fireRefreshClient = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.REFRESH_CLIENT);
	        }
	    };
	    ItemProvider.prototype._fireItemInserted = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEM_INSERTED, item);
	        }
	    };
	    ItemProvider.prototype._fireItemDeleted = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEM_DELETED, item);
	        }
	    };
	    ItemProvider.prototype._fireItemUpdated = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEM_UPDATED, item);
	        }
	    };
	    ItemProvider.prototype._fireCheckableChanged = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.CHECKABLE_CHANGED, item);
	        }
	    };
	    ItemProvider.prototype._fireItemChecked = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEM_CHECKED, item);
	        }
	    };
	    ItemProvider.prototype._fireItemsChecked = function (items, checked) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEMS_CHECKED, items, checked);
	        }
	    };
	    ItemProvider.prototype._fireItemAllChecked = function (checked) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ITEM_ALL_CHECKED, checked);
	        }
	    };
	    ItemProvider.prototype._fireItemCheckChanged = function (items, checked) {
	        this.fireEvent(ItemProvider.ITEMCHECK_CHANGED, items, checked);
	    };
	    ItemProvider.prototype._fireRowStateChanged = function (item) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ROW_STATE_CHANGED, item);
	        }
	    };
	    ItemProvider.prototype._fireRowStatesChanged = function (items) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ROW_STATES_CHANGED, items);
	        }
	    };
	    ItemProvider.prototype._fireRowStatesCleared = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.ROW_STATES_CLEARED);
	        }
	    };
	    ItemProvider.prototype._fireSort = function (fields, directions, cases) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.SORT, fields, directions, cases);
	        }
	    };
	    ItemProvider.prototype._fireSorted = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.SORTED);
	        }
	    };
	    ItemProvider.prototype._fireFilterAdded = function (field, criteria) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.FILTER_ADDED, field, criteria);
	        }
	    };
	    ItemProvider.prototype._fireFilterRemoved = function (field, filter) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.FILTER_REMOVED, field, filter);
	        }
	    };
	    ItemProvider.prototype._fireFilterCleared = function (field) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.FILTER_CLEARED, field);
	        }
	    };
	    ItemProvider.prototype._fireFilterAllCleared = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.FILTER_ALL_CLEARED);
	        }
	    };
	    ItemProvider.prototype._fireFiltered = function (filterCollection, filter) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(ItemProvider.FILTERED, filterCollection, filter);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ItemProvider.RESET = "onItemProviderReset";
	    ItemProvider.REFRESH = "onItemProviderRefresh";
	    ItemProvider.REFRESH_CLIENT = "onItemProviderRefreshClient";
	    ItemProvider.ITEM_INSERTED = "onItemProviderItemInserted";
	    ItemProvider.ITEM_DELETED = "onItemProviderItemDeleted";
	    ItemProvider.ITEM_UPDATED = "onItemProviderItemUpdated";
	    ItemProvider.CHECKABLE_CHANGED = "onItemProviderCheckableChanged";
	    ItemProvider.ITEM_CHECKED = "onItemProviderItemChecked";
	    ItemProvider.ITEMS_CHECKED = "onItemProviderItemsChecked";
	    ItemProvider.ITEM_ALL_CHECKED = "onItemProviderItemAllChecked";
	    ItemProvider.ROW_STATE_CHANGED = "onItemProviderRowStateChanged";
	    ItemProvider.ROW_STATES_CHANGED = "onItemProviderRowStatesChanged";
	    ItemProvider.ROW_STATES_CLEARED = "onItemProviderRowStatesCleared";
	    ItemProvider.SORT = "onItemProviderSort";
	    ItemProvider.SORTED = "onItemProviderSorted";
	    ItemProvider.FILTER_ADDED = "onItemProviderFilterAdded";
	    ItemProvider.FILTER_REMOVED = "onItemProviderFilterRemoved";
	    ItemProvider.FILTER_CLEARED = "onItemProviderFilterCleared";
	    ItemProvider.FILTER_ALL_CLEARED = "onItemProviderFilterAllCleared";
	    ItemProvider.FILTERED = "onItemProviderFiltered";
	    ItemProvider.ITEMCHECK_CHANGED = "onItemProviderItemCheckChanged";
	    return ItemProvider;
	}(EventAware_1.EventAware));
	exports.ItemProvider = ItemProvider;
	var ProxyItemProvider = /** @class */ (function (_super) {
	    __extends(ProxyItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ProxyItemProvider(source, indexing) {
	        var _this = _super.call(this, indexing) || this;
	        _this._initialize();
	        _this.source = source;
	        return _this;
	    }
	    ProxyItemProvider.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ProxyItemProvider.prototype, "source", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** source */
	        get: function () {
	            return this._source;
	        },
	        set: function (value) {
	            if (value != this._source) {
	                if (this._source) {
	                    this._source.removeListener(this);
	                }
	                this._clearItems();
	                this._source = value;
	                if (this._source) {
	                    this._populateItems();
	                    this._source.addListener(this);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyItemProvider.prototype, "dataSource", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._source && this._source.dataSource;
	        },
	        set: function (value) {
	            this._source && (this._source.dataSource = value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyItemProvider.prototype, "fixedCount", {
	        get: function () {
	            return this._source ? this._source.fixedCount : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyItemProvider.prototype, "maxItemCount", {
	        get: function () {
	            return this._source ? this._source.maxItemCount : 0;
	        },
	        set: function (value) {
	            if (this._source) {
	                this._source.maxItemCount = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProxyItemProvider.prototype.setFixed = function (count, sorting, filtering) {
	        if (this._source) {
	            this._source.setFixed(count, sorting, filtering);
	        }
	    };
	    ProxyItemProvider.prototype.getIndexOfRow = function (dataRow) {
	        return this._source ? this._source.getIndexOfRow(dataRow) : -1;
	    };
	    ProxyItemProvider.prototype.getItemOfRow = function (dataRow) {
	        return this._source ? this._source.getItemOfRow(dataRow) : null;
	    };
	    ProxyItemProvider.prototype._refreshItems = function () {
	        this._source && this._source["_refreshItems"]();
	    };
	    ProxyItemProvider.prototype._clearDisplayLevels = function () {
	        this._source && this._source._clearDisplayLevels();
	    };
	    ProxyItemProvider.prototype.setCellStyle = function (row, field, style) {
	        this._source && this._source.setCellStyle(row, field, style);
	    };
	    ProxyItemProvider.prototype.removeCellStyle = function (style) {
	        this._source && this._source.removeCellStyle(style);
	    };
	    ProxyItemProvider.prototype.clearCellStyles = function () {
	        this._source && this._source.clearCellStyles();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ProxyItemProvider.prototype._initialize = function () {
	    };
	    ProxyItemProvider.prototype._clearItems = function () {
	    };
	    ProxyItemProvider.prototype._populateItems = function () {
	        this._resetItemIndicies(0);
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    ProxyItemProvider.prototype.onItemProviderReset = function (rs) {
	        this._populateItems();
	        this._fireReset();
	    };
	    ProxyItemProvider.prototype.onItemProviderRefresh = function (rs) {
	        this._populateItems();
	        this._fireRefresh();
	    };
	    ProxyItemProvider.prototype.onItemProviderRefreshClient = function (rs) {
	        this._fireRefreshClient();
	    };
	    ProxyItemProvider.prototype.onItemProviderItemInserted = function (rs, item) {
	        this._resetItemIndicies(0);
	        this._fireItemInserted(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemDeleted = function (rs, item) {
	        this._resetItemIndicies(0);
	        this._fireItemDeleted(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemUpdated = function (rs, item) {
	        this._resetItemIndicies(0);
	        this._fireItemUpdated(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderCheckableChanged = function (rs, item) {
	        this._fireCheckableChanged(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemChecked = function (rs, item) {
	        this._fireItemChecked(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemsChecked = function (rs, items, checked) {
	        this._fireItemsChecked(items, checked);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemAllChecked = function (rs, checked) {
	        this._fireItemAllChecked(checked);
	    };
	    ProxyItemProvider.prototype.onItemProviderItemCheckChanged = function (rs, items, checked) {
	        this._fireItemCheckChanged(items, checked);
	    };
	    ProxyItemProvider.prototype.onItemProviderRowStateChanged = function (rs, item) {
	        this._fireRowStateChanged(item);
	    };
	    ProxyItemProvider.prototype.onItemProviderRowStatesChanged = function (rs, items) {
	        this._fireRowStatesChanged(items);
	    };
	    ProxyItemProvider.prototype.onItemProviderRowStatesCleared = function (rs) {
	        this._fireRowStatesCleared();
	    };
	    ProxyItemProvider.prototype.onItemProviderFilterAdded = function (rs, field, criteria) {
	    };
	    ProxyItemProvider.prototype.onItemProviderFilterRemoved = function (rs, field, filter) {
	    };
	    ProxyItemProvider.prototype.onItemProviderFilterCleared = function (rs, field) {
	    };
	    ProxyItemProvider.prototype.onItemProviderFilterAllCleared = function (rs) {
	    };
	    ProxyItemProvider.prototype.onItemProviderFiltered = function (rs) {
	    };
	    ProxyItemProvider.prototype.onItemProviderSort = function (rs, fields, directions) {
	    };
	    ProxyItemProvider.prototype.onItemProviderSorted = function (rs) {
	    };
	    return ProxyItemProvider;
	}(ItemProvider));
	exports.ProxyItemProvider = ProxyItemProvider;
	});

	unwrapExports(ItemProvider_1);
	var ItemProvider_2 = ItemProvider_1.RootItem;
	var ItemProvider_3 = ItemProvider_1.ItemProvider;
	var ItemProvider_4 = ItemProvider_1.ProxyItemProvider;

	var EditableItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// EdiatbleItemProvider.ts
	// 2019. 07. 10. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var DummyEditItem = /** @class */ (function (_super) {
	    __extends(DummyEditItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DummyEditItem(rs, target, index, dataRow, state) {
	        var _this = _super.call(this, dataRow) || this;
	        _this._started = false;
	        _this._checkDiff = false;
	        _this._strictDiff = false;
	        _this._target = target;
	        rs.attachItem(_this);
	        _this._setIndex(index);
	        _this._state = state;
	        _this.$_setDisplayLevel(target ? target.displayLevel : 0);
	        return _this;
	    }
	    Object.defineProperty(DummyEditItem.prototype, "values", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** values */
	        get: function () {
	            return undefined;
	        },
	        set: function (value) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DummyEditItem.prototype.beginEdit = function (checkDiff, strictDiff) {
	    };
	    DummyEditItem.prototype.setValue = function (field, value) {
	    };
	    Object.defineProperty(DummyEditItem.prototype, "resizable", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DummyEditItem.prototype, "itemState", {
	        get: function () {
	            return this._state;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DummyEditItem.prototype.getData = function (field) {
	        return null;
	    };
	    DummyEditItem.prototype.setData = function (field, value) {
	    };
	    DummyEditItem.prototype.getRowData = function () {
	        return null;
	    };
	    DummyEditItem.prototype.getRowObject = function () {
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DummyEditItem.prototype._clearDisplayLevels = function () {
	        // for (let i = 0, cnt = this._rows.length; i < cnt; i++) {
	        // 	this._rows[i]._displayLevel = -1;
	        // }
	    };
	    return DummyEditItem;
	}(GridItem_1.GridRow));
	exports.DummyEditItem = DummyEditItem;
	var EditItem = /** @class */ (function (_super) {
	    __extends(EditItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditItem(rs, target, index, dataRow, state) {
	        var _this = _super.call(this, dataRow) || this;
	        _this._values = [];
	        _this._started = false;
	        _this._checkDiff = false;
	        _this._strictDiff = false;
	        _this._target = target;
	        rs.attachItem(_this);
	        _this._setIndex(index);
	        _this._state = state;
	        _this.$_setDisplayLevel(target ? target.displayLevel : 0);
	        return _this;
	    }
	    Object.defineProperty(EditItem.prototype, "values", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** values */
	        get: function () {
	            return this._values.concat();
	        },
	        set: function (vals) {
	            var rs = this.provider;
	            var ds = this.dataSource;
	            var cnt = ds.fieldCount;
	            if (vals instanceof Array) {
	                cnt = Math.min(cnt, vals.length);
	                for (var i = 0; i < cnt; i++) {
	                    var fld = ds.getField(i);
	                    var oldValue = this._values[i];
	                    var newValue = fld.readValue(vals[i]);
	                    this._values[i] = newValue;
	                    if (this._started && !fld.equalValues(oldValue, newValue)) {
	                        rs["_editItemCellUpdated"](this, i, oldValue, newValue);
	                    }
	                }
	            }
	            else if (vals) {
	                for (var i = 0; i < cnt; i++) {
	                    var f = ds.getOrgFieldName(i);
	                    if (vals.hasOwnProperty(f)) {
	                        var fld = ds.getField(i);
	                        var oldValue = this._values[i];
	                        var newValue = fld.readValue(vals[f]);
	                        this._values[i] = newValue;
	                        if (this._started && !fld.equalValues(oldValue, newValue)) {
	                            rs["_editItemCellUpdated"](this, i, oldValue, newValue);
	                        }
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    EditItem.prototype.beginEdit = function (checkDiff, strictDiff) {
	        this._started = true;
	        this._checkDiff = checkDiff;
	        this._strictDiff = strictDiff;
	    };
	    EditItem.prototype.setValue = function (field, value) {
	        var ds = this.dataSource;
	        if (field < 0 && field >= ds.fieldCount) {
	            throw new DataSource_1.DataSourceError("field index is out of bounds: " + field);
	        }
	        var fld = ds.getField(field);
	        var oldValue = this._values[field];
	        value = fld.readValue(value);
	        this._values[field] = value;
	        if (this._started && !fld.equalValues(oldValue, value)) {
	            this.provider["_editItemCellUpdated"](this, field, oldValue, value);
	        }
	    };
	    Object.defineProperty(EditItem.prototype, "resizable", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditItem.prototype, "itemState", {
	        get: function () {
	            return this._state;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EditItem.prototype.getData = function (field) {
	        if (field < 0 && field >= this.dataSource.fieldCount) {
	            throw new RangeError("field index is out of bounds: " + field);
	        }
	        return this._values[field];
	    };
	    EditItem.prototype.setData = function (field, value) {
	        var ds = this.dataSource;
	        if (field < 0 && field >= ds.fieldCount) {
	            throw new RangeError("field index is out of bounds: " + field);
	        }
	        var fld = ds.getField(field);
	        var oldValue = this._values[field];
	        value = fld.readValue(value);
	        var can = !this._checkDiff;
	        if (!can) {
	            if (this._strictDiff) {
	                can = !fld.equalValues(oldValue, value);
	            }
	            else {
	                can = !fld.sameValues(oldValue, value);
	            }
	        }
	        if (can) {
	            var rs = this.provider;
	            this._values[field] = value;
	            this.provider["_editItemCellUpdated"](this, field, oldValue, value);
	            this.provider["_editItemCellEdited"](this, field);
	        }
	    };
	    EditItem.prototype.getRowData = function () {
	        return this._values.concat();
	    };
	    EditItem.prototype.getRowObject = function () {
	        var ds = this.dataSource;
	        if (ds) {
	            var row = {};
	            for (var i = 0, cnt = ds.fieldCount; i < cnt; i++) {
	                var fld = ds.getOrgFieldName(i);
	                row[fld] = this._values[i];
	            }
	            return row;
	        }
	        else {
	            return null;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EditItem.prototype._clearDisplayLevels = function () {
	        // for (let i = 0, cnt = this._rows.length; i < cnt; i++) {
	        // 	this._rows[i]._displayLevel = -1;
	        // }
	    };
	    return EditItem;
	}(GridItem_1.GridRow));
	exports.EditItem = EditItem;
	var EditableItemProvider = /** @class */ (function (_super) {
	    __extends(EditableItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditableItemProvider(source, indexing) {
	        var _this = _super.call(this, source, indexing) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._checkDiff = false;
	        _this._checkCellDiff = false;
	        _this._strictDiff = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._orgItem = null;
	        _this._editingItem = null;
	        _this._dummyEditItem = null;
	        _this._editingState = GridItem_1.ItemState.NORMAL;
	        _this._insertMode = 0;
	        _this._modified = false;
	        _this._commiting = false;
	        _this._saveDs = null;
	        if (source && (_this._saveDs = source.dataSource)) {
	            _this._saveDs.registerClient(_this);
	        }
	        return _this;
	    }
	    EditableItemProvider.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // DataSourceClient
	    //-------------------------------------------------------------------------
	    EditableItemProvider.prototype.isDataEditing = function () {
	        return;
	    };
	    EditableItemProvider.prototype.cancelDataEditing = function () {
	        if (this.isEditing()) {
	            this.fireCancelRequest();
	        }
	    };
	    EditableItemProvider.prototype.commitDataEditing = function () {
	        if (this.isEditing()) {
	            this.fireCommitRequest();
	        }
	    };
	    Object.defineProperty(EditableItemProvider.prototype, "isCheckDiff", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** checkDiff */
	        get: function () {
	            return this._checkDiff;
	        },
	        set: function (value) {
	            this._checkDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "isCheckCellDiff", {
	        /** checkCellDiff */
	        get: function () {
	            return this._checkCellDiff;
	        },
	        set: function (value) {
	            this._checkCellDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "isStrictDiff", {
	        /** strictDiff */
	        get: function () {
	            return this._strictDiff;
	        },
	        set: function (value) {
	            this._strictDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "editingItem", {
	        /** editingItem */
	        get: function () {
	            return (this._commiting || this.isEditing()) ? this._editingItem : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "isUpdating", {
	        /** updating */
	        get: function () {
	            return this._editingState == GridItem_1.ItemState.UPDATING;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "isInserting", {
	        /** inserting */
	        get: function () {
	            return this._editingState == GridItem_1.ItemState.INSERTING;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditableItemProvider.prototype, "isAppending", {
	        /** appending */
	        get: function () {
	            return this._editingState == GridItem_1.ItemState.APPENDING;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    EditableItemProvider.prototype.isEditing = function (item) {
	        return GridItem_1.ItemState_isEditing(this._editingState) && (!item || item === this._editingItem);
	    };
	    EditableItemProvider.prototype.isEdited = function (item) {
	        return GridItem_1.ItemState_isEditing(this._editingState) && (!item || item === this._editingItem) && this._modified;
	    };
	    EditableItemProvider.prototype.edit = function (item) {
	        if (this.isEditing()) {
	            return true;
	        }
	        else if (item) {
	            try {
	                this._beginUpdate(item);
	                return true;
	            }
	            catch (err) {
	                this.cancel();
	                throw err;
	            }
	        }
	        return false;
	    };
	    EditableItemProvider.prototype.editData = function (item, field, value) {
	        var ds;
	        if (item && (ds = this.dataSource) && field >= 0 && field < ds.fieldCount) {
	            if (!this.isEditing()) {
	                try {
	                    this._beginUpdate(item);
	                    return true;
	                }
	                catch (err) {
	                    this.cancel();
	                    throw err;
	                }
	            }
	            this._editingItem.setData(field, value);
	        }
	        return false;
	    };
	    EditableItemProvider.prototype.append = function (defaultValues) {
	        if (!this.isEditing()) {
	            try {
	                this._beginAppend(defaultValues);
	                return true;
	            }
	            catch (err) {
	                this.cancel();
	                throw err;
	            }
	        }
	        return false;
	    };
	    EditableItemProvider.prototype.insert = function (item, defaultValues, shift, ctrl) {
	        if (!this.isEditing()) {
	            try {
	                this._beginInsert(item, defaultValues, shift, ctrl);
	                return true;
	            }
	            catch (err) {
	                this.cancel();
	                throw err;
	            }
	        }
	        return false;
	    };
	    EditableItemProvider.prototype.cancelDummy = function () {
	        if (this._dummyEditItem) {
	            this._cancelDummyEdit();
	        }
	    };
	    EditableItemProvider.prototype.cancel = function () {
	        if (this.isEditing()) {
	            this._cancelEdit();
	        }
	    };
	    EditableItemProvider.prototype.commit = function () {
	        if (this.isEditing()) {
	            this._commiting = true;
	            try {
	                var ds = this.dataSource;
	                if (ds) {
	                    if (this._editingState == GridItem_1.ItemState.UPDATING && this.isCheckDiff) {
	                        var values = this._editingItem["values"];
	                        var cnt = values.length;
	                        var strict = this.isStrictDiff;
	                        var diff = false;
	                        for (var i = 0; i < cnt; i++) {
	                            if (strict) {
	                                if (!ds.getField(i).equalValues(this._orgItem.getData(i), values[i])) {
	                                    diff = true;
	                                    break;
	                                }
	                            }
	                            else {
	                                if (!ds.getField(i).sameValues(this._orgItem.getData(i), values[i])) {
	                                    diff = true;
	                                    break;
	                                }
	                            }
	                        }
	                        if (!diff) {
	                            this._cancelEdit();
	                            return true;
	                        }
	                    }
	                    return this._commitEdit();
	                }
	            }
	            finally {
	                this._commiting = false;
	            }
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EditableItemProvider.prototype._checkEditing = function () {
	        if (!this.isEditing()) {
	            throw new Error("itemProvider is not editing");
	        }
	    };
	    EditableItemProvider.prototype._checkNotEditing = function () {
	        if (this.isEditing()) {
	            throw new Error("itemProvider is already editing");
	        }
	    };
	    EditableItemProvider.prototype._beginUpdate = function (item) {
	        if (!item) {
	            throw new Error("item is null");
	        }
	        this._checkNotEditing();
	        this._modified = false;
	        this._editingItem = this._doBeginUpdate(item);
	        this._editingItem["beginEdit"](this.isCheckCellDiff, this.isStrictDiff);
	        if (this._editingItem) {
	            this._orgItem = item;
	            this._editingState = GridItem_1.ItemState.UPDATING;
	            this.fireUpdateStarted(this._editingItem);
	        }
	    };
	    EditableItemProvider.prototype._doBeginUpdate = function (item) {
	        return null;
	    };
	    EditableItemProvider.prototype._beginAppendDummy = function () {
	        this._dummyEditItem = this._doBeginAppendDummy();
	    };
	    EditableItemProvider.prototype._doBeginAppendDummy = function () {
	        return null;
	    };
	    EditableItemProvider.prototype._beginAppend = function (defaultValues) {
	        this._checkNotEditing();
	        this._modified = false;
	        this._editingItem = this._doBeginAppend(defaultValues);
	        this._editingItem["beginEdit"](this.isCheckCellDiff, this.isStrictDiff);
	        if (this._editingItem) {
	            this._editingState = GridItem_1.ItemState.APPENDING;
	            this.fireAppendStarted(this._editingItem);
	        }
	    };
	    EditableItemProvider.prototype._doBeginAppend = function (defaultValues) {
	        return null;
	    };
	    EditableItemProvider.prototype._beginInsert = function (item, defaultValues, shift, ctrl) {
	        if (shift === void 0) { shift = false; }
	        if (ctrl === void 0) { ctrl = false; }
	        this._checkNotEditing();
	        this._modified = false;
	        this._editingItem = this._doBeginInsert(item, defaultValues, shift, ctrl);
	        this._editingItem["beginEdit"](this.isCheckCellDiff, this.isStrictDiff);
	        if (this._editingItem) {
	            this._editingState = GridItem_1.ItemState.INSERTING;
	            this._resetItemIndicies(0); //this._editingItem.index());
	            this.fireInsertStarted(this._editingItem);
	        }
	    };
	    EditableItemProvider.prototype._doBeginInsert = function (item, defaultValues, shift, ctrl) {
	        return null;
	    };
	    EditableItemProvider.prototype._updateEditingRow = function (orgItem) {
	        return false;
	    };
	    EditableItemProvider.prototype._insertEditingRow = function (appending) {
	        return false;
	    };
	    EditableItemProvider.prototype._cancelDummyEdit = function () {
	        this._dummyEditItem = null;
	        this._doCancelDummyEdit();
	    };
	    EditableItemProvider.prototype._cancelEdit = function () {
	        this._checkEditing();
	        var saveState = this._editingState;
	        try {
	            this._editingState = GridItem_1.ItemState.NORMAL;
	            this._doCancelEdit(saveState, this._orgItem);
	        }
	        catch (err) {
	            this._editingState = saveState;
	            throw err;
	        }
	        this._modified = false;
	        this.fireCanceled();
	    };
	    EditableItemProvider.prototype._doCancelDummyEdit = function () {
	    };
	    EditableItemProvider.prototype._doCancelEdit = function (state, orgItem) {
	        if (state == GridItem_1.ItemState.INSERTING) {
	            this._resetItemIndicies(0);
	        }
	    };
	    EditableItemProvider.prototype._commitEdit = function () {
	        this._checkEditing();
	        var ds = this.dataSource;
	        if (!ds) {
	            throw new Error("data provier is null");
	        }
	        try {
	            this.fireItemCommitting(this._editingItem);
	        }
	        catch (err) {
	            alert(err.message);
	        }
	        var saveState = this._editingState;
	        var completed = false;
	        if (this.isUpdating) {
	            try {
	                this._editingState = GridItem_1.ItemState.NORMAL;
	                completed = this._doCompleteUpdate(this._orgItem);
	            }
	            catch (err) {
	                this._editingState = saveState;
	                throw err;
	            }
	        }
	        else {
	            try {
	                this._editingState = GridItem_1.ItemState.NORMAL;
	                completed = this._doCompleteInsert(saveState == GridItem_1.ItemState.APPENDING);
	            }
	            catch (err) {
	                this._editingState = saveState;
	                throw err;
	            }
	        }
	        if (completed) {
	            this._modified = false;
	            this._doCommitEdit(saveState, this._orgItem);
	            this.fireCommitted(this._editingItem);
	        }
	        else {
	            this._editingState = saveState;
	        }
	        return completed;
	    };
	    EditableItemProvider.prototype._doCommitEdit = function (state, orgItem) {
	        return false;
	    };
	    EditableItemProvider.prototype._editItemCellEdited = function (item, field) {
	        if (item && this.isEditing(item)) {
	            this._modified = true;
	            this.fireItemCellEdited(item, field);
	        }
	    };
	    EditableItemProvider.prototype._editItemCellUpdated = function (item, field, oldValue, newValue) {
	        if (this.isEditing(item)) {
	            this._modified = true;
	            this.fireItemCellUpdated(item, field, oldValue, newValue);
	        }
	    };
	    EditableItemProvider.prototype.$_editingItem = function () {
	        return this._editingItem;
	    };
	    EditableItemProvider.prototype.$_dummyItem = function () {
	        return this._dummyEditItem;
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    EditableItemProvider.prototype.fireUpdateStarted = function (item) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.UPDATE_STARTED, item);
	        }
	    };
	    EditableItemProvider.prototype.fireAppendStarted = function (item) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.APPEND_STARTED, item);
	        }
	    };
	    EditableItemProvider.prototype.fireInsertStarted = function (item) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.INSERT_STARTED, item);
	        }
	    };
	    EditableItemProvider.prototype.fireItemCellEdited = function (item, field) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.CELL_EDITED, item, field);
	        }
	    };
	    EditableItemProvider.prototype.fireItemCellUpdated = function (item, field, oldValue, newValue) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.CELL_UPDATED, item, field, oldValue, newValue);
	        }
	    };
	    EditableItemProvider.prototype.fireItemCommitting = function (item) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.COMMITTING, item);
	        }
	    };
	    EditableItemProvider.prototype.fireCommitted = function (item) {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.COMMITTED, item);
	        }
	    };
	    EditableItemProvider.prototype.fireCanceled = function () {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.CANCELED);
	        }
	    };
	    EditableItemProvider.prototype.fireCommitRequest = function () {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.COMMIT_REQUEST);
	        }
	    };
	    EditableItemProvider.prototype.fireCancelRequest = function () {
	        if (this.$_canFire()) {
	            this.fireEvent(EditableItemProvider.CANCEL_REQUEST);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    EditableItemProvider.prototype.onItemProviderReset = function (rs) {
	        _super.prototype.onItemProviderReset.call(this, rs);
	        var ds = this.dataSource;
	        if (ds != this._saveDs) {
	            this._saveDs && this._saveDs.unregisterClient(this);
	            this._saveDs = ds;
	            this._saveDs && this._saveDs.registerClient(this);
	        }
	    };
	    EditableItemProvider.prototype.onItemProviderRefresh = function (rs) {
	        _super.prototype.onItemProviderRefresh.call(this, rs);
	    };
	    EditableItemProvider.prototype.onItemProviderRefreshClient = function (rs) {
	        _super.prototype.onItemProviderRefreshClient.call(this, rs);
	    };
	    EditableItemProvider.prototype.onItemProviderItemInserted = function (rs, item) {
	        _super.prototype.onItemProviderItemInserted.call(this, rs, item);
	    };
	    EditableItemProvider.prototype.onItemProviderItemDeleted = function (rs, item) {
	        _super.prototype.onItemProviderItemDeleted.call(this, rs, item);
	    };
	    EditableItemProvider.prototype.onItemProviderItemUpdated = function (rs, item) {
	        _super.prototype.onItemProviderItemUpdated.call(this, rs, item);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    EditableItemProvider.UPDATE_STARTED = "onItemEditUpdateStarted";
	    EditableItemProvider.APPEND_STARTED = "onItemEditAppendStarted";
	    EditableItemProvider.INSERT_STARTED = "onItemEditInsertStarted";
	    EditableItemProvider.CELL_EDITED = "onItemEditCellEdited";
	    EditableItemProvider.CELL_UPDATED = "onItemEditCellUpdated";
	    EditableItemProvider.COMMITTING = "onItemEditCommitting";
	    EditableItemProvider.COMMITTED = "onItemEditCommitted";
	    EditableItemProvider.CANCELED = "onItemEditCanceled";
	    EditableItemProvider.COMMIT_REQUEST = "onItemEditCommitRequest";
	    EditableItemProvider.CANCEL_REQUEST = "onItemEditCancelRequest";
	    return EditableItemProvider;
	}(ItemProvider_1.ProxyItemProvider));
	exports.EditableItemProvider = EditableItemProvider;
	var EditableItemProviderImpl = /** @class */ (function (_super) {
	    __extends(EditableItemProviderImpl, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditableItemProviderImpl(source, indexing) {
	        var _this = _super.call(this, source, indexing) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._insertRow = -1;
	        return _this;
	    }
	    EditableItemProviderImpl.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EditableItemProviderImpl.prototype, "itemCount", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            var cnt = this.source.itemCount;
	            cnt += (this.isInserting || this.isAppending) ? 1 : 0;
	            cnt += (this.$_dummyItem()) ? 1 : 0;
	            return cnt;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EditableItemProviderImpl.prototype.getItem = function (index) {
	        var editItem = this.$_editingItem();
	        var dummyItem = this.$_dummyItem();
	        var ret;
	        if (this.isEditing() && editItem.index == index) {
	            return editItem;
	        }
	        else if (this.isInserting) {
	            if (index > editItem.index) {
	                ret = this.source.getItem(index - 1);
	            }
	            else {
	                ret = this.source.getItem(index);
	            }
	        }
	        else if (index < this.source.itemCount) {
	            ret = this.source.getItem(index);
	        }
	        if (ret) {
	            return ret;
	        }
	        else if (dummyItem && index == this.itemCount - 1) {
	            return dummyItem;
	        }
	        return null;
	    };
	    EditableItemProviderImpl.prototype.getItems = function (index, count) {
	        return this.source.getItems(index, count);
	    };
	    EditableItemProviderImpl.prototype._doBeginUpdate = function (item) {
	        return this._createEditItem(item, GridItem_1.ItemState.UPDATING, null, false, false);
	    };
	    EditableItemProviderImpl.prototype._doBeginAppendDummy = function () {
	        var item = this.$_dummyItem() || this._createDummyEditItem();
	        item["_index"] = this.itemCount - 1;
	        return item;
	    };
	    EditableItemProviderImpl.prototype._doBeginAppend = function (defaultValues) {
	        return this._createEditItem(null, GridItem_1.ItemState.APPENDING, defaultValues, false, false);
	    };
	    EditableItemProviderImpl.prototype._doBeginInsert = function (item, defaultValues, shift, ctrl) {
	        return this._createEditItem(item, GridItem_1.ItemState.INSERTING, defaultValues, shift, ctrl);
	    };
	    EditableItemProviderImpl.prototype._doCompleteUpdate = function (orgItem) {
	        var ds = this.dataSource;
	        if (ds instanceof DataProvider_1.DataProvider) {
	            var editItem = this.$_editingItem();
	            this._copyExtents(editItem, orgItem);
	            return ds.updateRow(editItem.dataRow, editItem["values"]);
	        }
	        return false;
	    };
	    EditableItemProviderImpl.prototype._doCompleteInsert = function (appending) {
	        var rslt = false;
	        var ds = this.dataSource;
	        if (ds) {
	            var editItem = this.$_editingItem();
	            var r = appending ? ds.rowCount : Math.max(0, this._insertRow);
	            var values = editItem["values"];
	            rslt = ds["insertRow"](r, values, editItem["_index2"]);
	            if (rslt) {
	                var item = this.getItemOfRow(r);
	                this._copyExtents(editItem, item);
	            }
	        }
	        return rslt;
	    };
	    // remove(item) {
	    // 	var ds = this.dataSource();
	    // 	if (item && !this.isEditing(item) && ds) {
	    // 		var r = item.dataRow();
	    // 		if (r >= 0) {
	    // 			ds.removeRow(r);
	    // 		}
	    // 	}
	    // }
	    // removeAll(items) {
	    //     if (!items || items.length == 0) {
	    //         return;
	    //     }
	    // 	var ds = this.dataSource();
	    // 	if (!ds) {
	    // 		return;
	    // 	}
	    // 	var row;
	    // 	var cnt = items.length;
	    // 	if (cnt > 1) {
	    // 		var rows = [];
	    // 		for (var i = 0; i < cnt; i++) {
	    // 			row = this.getItem(items[i]).dataRow();
	    // 			if (row >= 0) {
	    // 				rows.push(row);
	    // 			}
	    // 		}
	    // 		if (rows.length > 1) {
	    // 			ds.removeRows(rows);
	    // 		} else if (rows.length == 1) {
	    // 			ds.removeRow(rows[0]);
	    // 		}
	    // 	} else if (cnt == 1) {
	    // 		row = this.getItem(items[0]).dataRow();
	    // 		row >= 0 && ds.removeRow();
	    // 	}
	    // }
	    // revert(item) {
	    //     if (!(item instanceof GridItem)) {
	    //         item = this.getItem(item);
	    //     }
	    //     if (item) {
	    //         var ds = this.dataSource();
	    //         if (ds) {
	    //             var r = item.dataRow();
	    //             var st = ds.getRowState(r);
	    //             if (st == RowState.DELETED) {
	    //                 ds.setRowState(r, RowState.NONE);
	    //             } else if (st == RowState.CREATE_AND_DELETED) {
	    //                 ds.setRowState(r, RowState.CREATED);
	    //             }
	    //         }
	    //     }
	    // }
	    // revertAll(items) {
	    //     if (!items || items.length == 0) {
	    //         return;
	    //     }
	    //     var ds = this.dataSource();
	    //     if (!ds) {
	    //         return;
	    //     }
	    //     for (var i = items.length; i--;) {
	    //         var item = this.getItem(items[i]);
	    //         if (item) {
	    //             var r = item.dataRow();
	    //             var st = ds.getRowState(r);
	    //             if (st == RowState.DELETED) {
	    //                 ds.setRowState(r, RowState.NONE);
	    //             } else if (st == RowState.CREATE_AND_DELETED) {
	    //                 ds.setRowState(r, RowState.CREATED);
	    //             }
	    //         }
	    //     }
	    // }
	    // getRemovableRows(items) {
	    // 	if (!items || items.length == 0) {
	    // 		return null;
	    // 	}
	    // 	var rows = [];
	    // 	for (var i = 0, cnt = items.length; i < cnt; i++) {
	    // 		var row = this.getItem(items[i]).dataRow();
	    // 		row >= 0 &&	rows.push(row);
	    // 	}
	    // 	return rows;
	    // }
	    // removeRows(rows) {
	    // 	if (rows) {
	    // 		if (rows.length > 1) {
	    // 			this.dataSource.removeRows(rows);
	    // 		} else {
	    // 			this.dataSource.removeRow(rows[0]);
	    // 		}
	    // 	}
	    // }
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EditableItemProviderImpl.prototype._createDummyEditItem = function () {
	        var item = null;
	        item = new DummyEditItem(this, null, this.itemCount, -1 /*target.dataRow*/, GridItem_1.ItemState.DUMMY);
	        return item;
	    };
	    EditableItemProviderImpl.prototype._createEditItem = function (target, state, defaultValues, shift, ctrl) {
	        var ds = this.dataSource;
	        if (!ds) {
	            return null;
	        }
	        var item = null;
	        var flds = ds.fieldCount;
	        switch (state) {
	            case GridItem_1.ItemState.UPDATING:
	                item = new EditItem(this, target, target.index, target.dataRow, state);
	                for (var i = 0; i < flds; i++) {
	                    item.setValue(i, target.getData(i));
	                }
	                this._copyExtents(target, item);
	                break;
	            case GridItem_1.ItemState.INSERTING:
	            case GridItem_1.ItemState.APPENDING:
	                var provider = this["_rs"];
	                var targetIndex = state == GridItem_1.ItemState.INSERTING && target ? (shift ? target.index + 1 : target.index) : this.itemCount;
	                item = new EditItem(this, target, targetIndex, -1, state);
	                if (state == GridItem_1.ItemState.INSERTING) {
	                    var row = target.dataRow;
	                    var nextItem = target;
	                    if (row <= -1) {
	                        var visibleItems = this.source["_visibleItems"];
	                        while (nextItem = visibleItems.getNext(nextItem)) {
	                            if (nextItem instanceof GridItem_1.GridRow) {
	                                break;
	                            }
	                        }
	                        this._insertRow = nextItem ? nextItem.dataRow : ds.rowCount;
	                    }
	                    else {
	                        this._insertRow = shift ? Math.min(ds.rowCount, row + 1) : row;
	                    }
	                    if (target instanceof GridItem_1.GridRow && shift && provider) {
	                        var index2 = provider["_pubItems"].indexOf(nextItem);
	                        index2++ >= 0 && index2 <= provider._pubItems.length && (item._index2 = index2);
	                    }
	                }
	                if (defaultValues) {
	                    for (var i = 0; i < flds; i++) {
	                        if (defaultValues.length > i) {
	                            item.setValue(i, defaultValues[i]);
	                        }
	                    }
	                }
	                break;
	        }
	        return item;
	    };
	    return EditableItemProviderImpl;
	}(EditableItemProvider));
	exports.EditableItemProviderImpl = EditableItemProviderImpl;
	});

	unwrapExports(EditableItemProvider_1);
	var EditableItemProvider_2 = EditableItemProvider_1.DummyEditItem;
	var EditableItemProvider_3 = EditableItemProvider_1.EditItem;
	var EditableItemProvider_4 = EditableItemProvider_1.EditableItemProvider;
	var EditableItemProvider_5 = EditableItemProvider_1.EditableItemProviderImpl;

	var ExpressionStatement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ExpressionStatement.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExpressionStatementError = /** @class */ (function (_super) {
	    __extends(ExpressionStatementError, _super);
	    function ExpressionStatementError(message, tokenPos) {
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        _this.tokenPos = tokenPos;
	        return _this;
	    }
	    return ExpressionStatementError;
	}(Error));
	exports.ExpressionStatementError = ExpressionStatementError;
	var $$_SEP_HEAD = "${";
	var $$_SEP_TAIL = "}";
	var LiteralToken = /** @class */ (function () {
	    function LiteralToken(literal) {
	        this.literal = literal;
	    }
	    LiteralToken.prototype.evaluate = function (runtime) {
	        return this.literal;
	    };
	    return LiteralToken;
	}());
	var IdentToken = /** @class */ (function () {
	    function IdentToken(ident, idKey) {
	        if (idKey === void 0) { idKey = -1; }
	        this.ident = ident;
	        this.idKey = idKey;
	    }
	    IdentToken.prototype.evaluate = function (runtime) {
	        if (this.idKey < 0) {
	            this.idKey = runtime.isIdentifier(this.ident);
	        }
	        return runtime.evaluateIdentifier(this.idKey);
	    };
	    return IdentToken;
	}());
	var IndexerToken = /** @class */ (function () {
	    function IndexerToken(ident, idKey, capital) {
	        if (idKey === void 0) { idKey = -1; }
	        if (capital === void 0) { capital = false; }
	        this.ident = ident;
	        this.idKey = idKey;
	        this.capital = capital;
	    }
	    IndexerToken.prototype.evaluate = function (runtime) {
	        var ident = this.ident;
	        var bo = ident.indexOf("[");
	        var bc = ident.indexOf("]");
	        if (bo < bc) {
	            var s = ident.substr(0, bo).trim();
	            var strIdx = ident.substring(bo + 1, bc).replace(/'|"/g, "").trim();
	            if (this.idKey < 0) {
	                this.idKey = runtime.isIdentifier(s);
	            }
	            return runtime.evaluateIndexerS(this.idKey, strIdx, this.capital);
	        }
	    };
	    return IndexerToken;
	}());
	var ExpressionStatement = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function ExpressionStatement(source, silentError) {
	        if (silentError === void 0) { silentError = false; }
	        this._silentError = false;
	        this._tokens = [];
	        this._source = source;
	        this._silentError = silentError;
	        source && this._parse(source);
	    }
	    Object.defineProperty(ExpressionStatement.prototype, "source", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** source */
	        get: function () {
	            return this._source;
	        },
	        set: function (value) {
	            if (value != this._source) {
	                this._source = value;
	                this._parse(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ExpressionStatement.prototype.evaluate = function (runtime) {
	        try {
	            var tokens = this._tokens;
	            var s = "";
	            for (var i = 0, cnt = tokens.length; i < cnt; i++) {
	                var v = tokens[i].evaluate(runtime);
	                s += v || "";
	            }
	            return s;
	        }
	        catch (err) {
	            if (!this._silentError) {
	                throw new err;
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ExpressionStatement.prototype._parse = function (str) {
	        this._tokens = [];
	        if (!str) {
	            return;
	        }
	        var len = str.length;
	        var i = 0;
	        var token;
	        while (i < len) {
	            var p = str.indexOf($$_SEP_HEAD, i);
	            if (p >= 0) {
	                var q = str.indexOf($$_SEP_TAIL, p + 2);
	                if (q >= 0) {
	                    if (p > i) {
	                        var s_1 = str.substring(i, p);
	                        token = new LiteralToken(s_1);
	                        this._tokens.push(token);
	                    }
	                    var s = str.substring(p + 2, q).trim();
	                    if (s) {
	                        var bo = void 0;
	                        var bc = void 0;
	                        if ((bo = s.indexOf("[")) && (bc = s.indexOf("]")) && (bo < bc)) {
	                            token = new IndexerToken(s);
	                        }
	                        else {
	                            token = new IdentToken(s);
	                        }
	                        this._tokens.push(token);
	                    }
	                    i = q + 1;
	                }
	                else {
	                    p = -1;
	                }
	            }
	            if (p < 0) {
	                var s = str.substr(i, len);
	                token = new LiteralToken(s);
	                this._tokens.push(token);
	                break;
	            }
	        }
	    };
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	});

	unwrapExports(ExpressionStatement_1);
	var ExpressionStatement_2 = ExpressionStatement_1.ExpressionStatementError;
	var ExpressionStatement_3 = ExpressionStatement_1.ExpressionStatement;

	var RowGroup_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowGroup.ts
	// 2019. 07. 22. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	var RowGroupHeaderCell = /** @class */ (function (_super) {
	    __extends(RowGroupHeaderCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupHeaderCell(rowGroup) {
	        var _this = _super.call(this, "rowGroupHeaderCell") || this;
	        _this._rowGroup = rowGroup;
	        return _this;
	    }
	    RowGroupHeaderCell.prototype.dispose = function () {
	        this._rowGroup = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupHeaderCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            if (this.item instanceof GridItem_1.GroupItemImpl) {
	                return this._rowGroup.getHeaderText(this.item);
	            }
	            else {
	                return "";
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupHeaderCell.prototype, "value", {
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RowGroupHeaderCell;
	}(GridCell_1.GridCell));
	exports.RowGroupHeaderCell = RowGroupHeaderCell;
	var RowGroupFooterCell = /** @class */ (function (_super) {
	    __extends(RowGroupFooterCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupFooterCell(rowGroup) {
	        var _this = _super.call(this, "rowGroupFooterCell") || this;
	        _this._value = NaN;
	        _this._rowGroup = rowGroup;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    RowGroupFooterCell.$_getValue = function (item, column) {
	        if (column && column.dataIndex >= 0) {
	            var grid = column.grid;
	            var footer = column.footer;
	            var group = item.parent;
	            if (footer.groupExpression) {
	                var runtime = grid.rowGroupSummaryRuntime;
	                runtime.setColumn(column, column.grid.summarizer);
	                runtime.setItem(group);
	                var v = footer.evaluateGroup(runtime);
	                return v;
	                // } else if (footer._groupCallback) {
	                // 	var grid = column.grid();
	                // 	return footer._groupCallback(item._index, column.proxy(), grid && grid.getHandler(), $$_getItemProxy(group,true));
	            }
	            else if (group && column && grid.isGroupedColumn(column)) {
	                var s = grid.rowGroup.getFooterText(group);
	                return s == null ? undefined : s;
	            }
	            else {
	                return undefined;
	            }
	        }
	        else {
	            return undefined;
	        }
	    };
	    RowGroupFooterCell.getValue = function (item, column) {
	        try {
	            return RowGroupFooterCell.$_getValue(item, column);
	        }
	        catch (err) {
	            return GridCell_1.GridCell.ERROR;
	        }
	    };
	    RowGroupFooterCell.$_displayText = function (item, column, value) {
	        var s = isNaN(value) ? null : String(value);
	        if (!s) {
	            var grid = column.grid;
	            var group = Utils_1.Utils.cast(item.parent, GridItem_1.GroupItemImpl);
	            var rowGroup = grid.rowGroup;
	            var groupText = void 0;
	            if (group && column && grid.isGroupedColumn(column) && (groupText = rowGroup.getFooterText(group))) {
	                s = groupText;
	            }
	            else if (column) {
	                s = column.footer.groupText;
	            }
	        }
	        return s || "";
	    };
	    RowGroupFooterCell.prototype.dispose = function () {
	        this._rowGroup = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupFooterCell.prototype.calculate = function (item) {
	        this._value = NaN;
	        this._error = null;
	        try {
	            this._value = RowGroupFooterCell.$_getValue(this.item || item, this.index.dataColumn);
	        }
	        catch (err) {
	            this._error = err;
	            this._errorDetail = err;
	            //throwDebugError(err);
	        }
	    };
	    Object.defineProperty(RowGroupFooterCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            if (this._error) {
	                return GridCell_1.GridCell.ERROR;
	            }
	            else {
	                return RowGroupFooterCell.$_displayText(this.item, this.index.dataColumn, this._value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupFooterCell.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupFooterCell.prototype, "level", {
	        get: function () {
	            return this.index.item.level;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RowGroupFooterCell;
	}(GridCell_1.GridCell));
	exports.RowGroupFooterCell = RowGroupFooterCell;
	var RowGroupBarCell = /** @class */ (function (_super) {
	    __extends(RowGroupBarCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupBarCell() {
	        var _this = _super.call(this, "rowGroupBarCell") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._level = 0;
	        return _this;
	    }
	    Object.defineProperty(RowGroupBarCell.prototype, "level", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** level */
	        get: function () {
	            return this.item.level;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupBarCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return "";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupBarCell.prototype, "value", {
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RowGroupBarCell;
	}(GridCell_1.GridCell));
	exports.RowGroupBarCell = RowGroupBarCell;
	var RowGroup = /** @class */ (function (_super) {
	    __extends(RowGroup, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroup(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._mergeMode = false;
	        _this._sorting = true;
	        _this._levelIndent = 20;
	        _this._mergeHeaderIndenting = true;
	        _this._mergeFooterIndenting = true;
	        _this._headerStatement = "${groupField}: ${groupValue} - ${rowCount} rows";
	        _this._expandedIconUrl = "images/expanded.png";
	        _this._collapsedIconUrl = "images/collapsed.png";
	        _this._mergeExpander = true;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._headerCell = new RowGroupHeaderCell(_this);
	        _this._footerCell = new RowGroupFooterCell(_this);
	        _this._barCell = new RowGroupBarCell();
	        _this._headerExprStatement = new ExpressionStatement_1.ExpressionStatement(_this._headerStatement);
	        _this._footerExprStatement = new ExpressionStatement_1.ExpressionStatement();
	        _this._statementRuntime = new Runtimes.RowGroupStatementRuntime();
	        return _this;
	    }
	    RowGroup.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroup.prototype, "mergeMode", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** mergeMode */
	        get: function () {
	            return this._mergeMode;
	        },
	        set: function (value) {
	            if (value != this._mergeMode) {
	                this._mergeMode = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroup.prototype, "sorting", {
	        /** sorting */
	        get: function () {
	            return this._sorting;
	        },
	        set: function (value) {
	            if (value != this._sorting) {
	                this._sorting = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroup.prototype, "levelIndent", {
	        /** levelIndent */
	        get: function () {
	            return this._levelIndent;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._levelIndent) {
	                this._levelIndent = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroup.prototype, "mergeHeaderIndenting", {
	        /** mergeHeaderIndenting */
	        get: function () {
	            return this._mergeHeaderIndenting;
	        },
	        set: function (value) {
	            if (value != this._mergeHeaderIndenting) {
	                this._mergeHeaderIndenting = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroup.prototype, "mergeFooterIndenting", {
	        /** mergeFooterIndenting */
	        get: function () {
	            return this._mergeFooterIndenting;
	        },
	        set: function (value) {
	            if (value != this._mergeFooterIndenting) {
	                this._mergeFooterIndenting = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroup.prototype, "mergeExpander", {
	        /** mergeExpander */
	        get: function () {
	            return this._mergeExpander;
	        },
	        set: function (value) {
	            if (value != this._mergeExpander) {
	                this._mergeExpander = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroup.prototype.getHeaderCell = function (item) {
	        this._headerCell.setIndex(CellIndex_1.CellIndex.temp(this.owner, item.index));
	        return this._headerCell;
	    };
	    RowGroup.prototype.getFooterCell = function (index) {
	        var item = index.item;
	        var group = item.parent;
	        //const level = getLevel()
	        var column = index.valueColumn;
	        this._footerCell.setIndex(index);
	        this._footerCell.calculate(item);
	        return this._footerCell;
	    };
	    RowGroup.prototype.getBarCell = function (index) {
	        this._barCell.setIndex(index);
	        return this._barCell;
	    };
	    RowGroup.prototype.getHeaderText = function (group) {
	        // if (!this._headerStatement && this._headerCallback && typeof this._headerCallback === "function") {
	        // 	return this._headerCallback($$_getItemProxy(group, true), this._grid && this._grid.getHandler());
	        // }
	        this._statementRuntime.setGrid(this.owner);
	        this._statementRuntime.setGroup(group);
	        return this._headerExprStatement.evaluate(this._statementRuntime);
	    };
	    RowGroup.prototype.getFooterText = function (group) {
	        if (this._footerExprStatement) {
	            this._statementRuntime.setGrid(this.owner);
	            this._statementRuntime.setGroup(group);
	            return this._footerExprStatement.evaluate(this._statementRuntime);
	        }
	        else {
	            return null;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroup.prototype._doChanged = function () {
	        this.owner["$_rowGroupChanged"](this);
	    };
	    return RowGroup;
	}(GridObject_1.GridObject));
	exports.RowGroup = RowGroup;
	var MergedGroupFooter = /** @class */ (function (_super) {
	    __extends(MergedGroupFooter, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MergedGroupFooter() {
	        return _super.call(this) || this;
	    }
	    return MergedGroupFooter;
	}(GridItem_1.GroupFooter));
	exports.MergedGroupFooter = MergedGroupFooter;
	var MergedGroupHeader = /** @class */ (function (_super) {
	    __extends(MergedGroupHeader, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MergedGroupHeader(field) {
	        return _super.call(this, field) || this;
	    }
	    return MergedGroupHeader;
	}(GridItem_1.GroupItemImpl));
	exports.MergedGroupHeader = MergedGroupHeader;
	});

	unwrapExports(RowGroup_1);
	var RowGroup_2 = RowGroup_1.RowGroupHeaderCell;
	var RowGroup_3 = RowGroup_1.RowGroupFooterCell;
	var RowGroup_4 = RowGroup_1.RowGroupBarCell;
	var RowGroup_5 = RowGroup_1.RowGroup;
	var RowGroup_6 = RowGroup_1.MergedGroupFooter;
	var RowGroup_7 = RowGroup_1.MergedGroupHeader;

	var ColumnMerge = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ColumnMerge.ts
	// 2019. 07. 22. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });









	var GridMergeRule = /** @class */ (function (_super) {
	    __extends(GridMergeRule, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridMergeRule() {
	        return _super.call(this) || this;
	    }
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridMergeRule.prototype._changed = function () {
	    };
	    return GridMergeRule;
	}(Base_1.Base));
	exports.GridMergeRule = GridMergeRule;
	var RowGroupMergeRule = /** @class */ (function (_super) {
	    __extends(RowGroupMergeRule, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupMergeRule() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._level = 0;
	        _this._mergeMode = false;
	        return _this;
	    }
	    RowGroupMergeRule.getDefault = function (groupLevel, mergeMode) {
	        var rule = RowGroupMergeRule.$_default;
	        rule._level = groupLevel;
	        rule._mergeMode = mergeMode;
	        return rule;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupMergeRule.prototype.parseInit = function (rs, field, start, count, flags) {
	        var itemCount = rs.itemCount;
	        count = Math.min(itemCount - start, count);
	        if (count < 1) {
	            return;
	        }
	        if (this._mergeMode) {
	            this.$_parseMerged(rs, field, start, count, flags);
	        }
	        else {
	            this.$_parseNormal(rs, field, start, count, flags);
	        }
	    };
	    RowGroupMergeRule.prototype.parseBounds = function (rs, field, start, end, flags) {
	        var itemCount = rs.itemCount;
	        if (itemCount < 1)
	            return;
	        start = Math.max(0, start);
	        while (start >= 0 && flags[start] <= 0) {
	            var item = rs.getItem(start);
	            if (item == this.$_getAncestor(item, this._level)) {
	                break;
	            }
	            start--;
	        }
	        while (start <= end && flags[start] > 0) {
	            start++;
	        }
	        if (start <= end) {
	            if (this._mergeMode) {
	                this.$_parseMergedBounds(rs, field, start, end, flags);
	            }
	            else {
	                this.$_parseNormalBounds(rs, field, start, end, flags);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupMergeRule.prototype.$_getAncestor = function (item, level) {
	        var group = Utils_1.Utils.cast(item, GridItem_1.GroupItem);
	        if (!group) {
	            group = item.parent;
	        }
	        while (group.level > level) {
	            group = group.parent;
	        }
	        return group;
	    };
	    RowGroupMergeRule.prototype.$_parseNormal = function (rs, field, start, count, flags) {
	        var itemCount = rs.itemCount;
	        if (itemCount < 1)
	            return;
	        var item = rs.getItem(start);
	        var prev = item;
	        var p = start;
	        var i = p + 1;
	        flags[p] = p + 1;
	        while (i < itemCount) {
	            item = rs.getItem(i);
	            if (item.level != prev.level || item.constructor !== prev.constructor || item instanceof GridItem_1.GroupFooter || item instanceof GridItem_1.GroupItemImpl) {
	                p = i;
	            }
	            flags[i] = p + 1;
	            i++;
	            prev = item;
	        }
	    };
	    RowGroupMergeRule.prototype.$_parseMerged = function (rs, field, start, count, flags) {
	        var itemCount = rs.itemCount;
	        if (itemCount < 1)
	            return;
	        var item = rs.getItem(start);
	        var group = this.$_getAncestor(item, this._level);
	        var p = start;
	        var i = flags[p] = p + 1;
	        while (i < itemCount) {
	            item = rs.getItem(i);
	            var parent_1 = this.$_getAncestor(item, this._level);
	            if (parent_1 != group) {
	                if (i >= count) {
	                    break;
	                }
	                group = parent_1;
	                p = i;
	            }
	            flags[i] = p + 1;
	            i++;
	        }
	    };
	    RowGroupMergeRule.prototype.$_parseNormalBounds = function (rs, field, start, end, flags) {
	        var itemCount = rs.itemCount;
	        if (itemCount < 1)
	            return;
	        var item = rs.getItem(start);
	        var prev = item;
	        var p = start;
	        var i = p + 1;
	        flags[p] = p + 1;
	        while (i < itemCount) {
	            item = rs.getItem(i);
	            if (item.level != prev.level || item.constructor !== prev.constructor) {
	                p = i;
	            }
	            flags[i] = p + 1;
	            i++;
	            prev = item;
	        }
	    };
	    RowGroupMergeRule.prototype.$_parseMergedBounds = function (rs, field, start, end, flags) {
	        var itemCount = rs.itemCount;
	        if (itemCount < 1)
	            return;
	        var item = rs.getItem(start);
	        var group = this.$_getAncestor(item, this._level);
	        var p = start;
	        var i = p + 1;
	        flags[p] = p + 1;
	        while (i < itemCount) {
	            item = rs.getItem(i);
	            var parent_2 = this.$_getAncestor(item, this._level);
	            if (parent_2 != group) {
	                if (i > end) {
	                    break;
	                }
	                group = parent_2;
	                p = i;
	            }
	            flags[i] = p + 1;
	            i++;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    RowGroupMergeRule.INIT_COUNT = 200;
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    RowGroupMergeRule.$_default = new RowGroupMergeRule();
	    return RowGroupMergeRule;
	}(GridMergeRule));
	exports.RowGroupMergeRule = RowGroupMergeRule;
	var ColumnMergeRuntime = /** @class */ (function (_super) {
	    __extends(ColumnMergeRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnMergeRuntime() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._item = null;
	        _this._field = -1;
	        _this._ds = null;
	        _this._fieldCount = 0;
	        _this._grid = null;
	        _this._column = null;
	        return _this;
	    }
	    ColumnMergeRuntime.prototype.dispose = function () {
	        this._item = null;
	        this._ds = null;
	        this._grid = null;
	        this._column = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnMergeRuntime.prototype.setDataSource = function (value) {
	        this._ds = value;
	        this._fieldCount = value ? value.fieldCount : 0;
	    };
	    ColumnMergeRuntime.prototype.setColumn = function (column) {
	        this._column = column;
	        this._grid = column.grid;
	    };
	    ColumnMergeRuntime.prototype.setCell = function (index) {
	        this._item = index.item;
	        this._field = index.dataField;
	    };
	    ColumnMergeRuntime.prototype.setItem = function (item, field) {
	        this._item = item;
	        this._field = field;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnMergeRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (ColumnMergeRuntime.IDENTS.hasOwnProperty(token)) {
	            return ColumnMergeRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    ColumnMergeRuntime.prototype.evaluateIdentifier = function (idKey) {
	        if (this._item) {
	            switch (idKey) {
	                case ColumnMergeRuntime.ID_ROW:
	                    return this._item.index;
	                case ColumnMergeRuntime.ID_DATAROW:
	                    return this._item.dataRow;
	                case ColumnMergeRuntime.ID_CHECKED:
	                    return this._item.checked;
	                case ColumnMergeRuntime.ID_GROUP:
	                    return this._item.parent;
	                case ColumnMergeRuntime.ID_VALUE:
	                    return this._item.getData(this._field);
	                case ColumnMergeRuntime.ID_PREV_VALUES:
	                    var cols = this._grid.getDataColumns();
	                    var idx = cols.indexOf(this._column);
	                    if (cols.length < 0 || idx < 0) {
	                        return;
	                    }
	                    var vals = [];
	                    for (var i = 0, cnt = Math.min(idx, cols.length); i < cnt; i++) {
	                        vals.push(this._item.getData(cols[i].dataIndex));
	                    }
	                    return vals.join("`");
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    ColumnMergeRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._item) {
	            if (idKey == ColumnMergeRuntime.ID_VALUE || idKey == ColumnMergeRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    ColumnMergeRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == ColumnMergeRuntime.ID_VALUE || idKey == ColumnMergeRuntime.ID_VALUES) {
	            if (this._ds) {
	                var idx = capitalized ? this._ds.getFieldIndexC(index) : this._ds.getFieldIndex(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ColumnMergeRuntime.ID_ROW = 0;
	    ColumnMergeRuntime.ID_DATAROW = 1;
	    ColumnMergeRuntime.ID_CHECKED = 2;
	    ColumnMergeRuntime.ID_VALUE = 3;
	    ColumnMergeRuntime.ID_VALUES = 4;
	    ColumnMergeRuntime.ID_GROUP = 5;
	    ColumnMergeRuntime.ID_PREV_VALUES = 6;
	    ColumnMergeRuntime.IDENTS = {
	        row: ColumnMergeRuntime.ID_ROW,
	        datarow: ColumnMergeRuntime.ID_DATAROW,
	        checked: ColumnMergeRuntime.ID_CHECKED,
	        value: ColumnMergeRuntime.ID_VALUE,
	        values: ColumnMergeRuntime.ID_VALUES,
	        group: ColumnMergeRuntime.ID_GROUP,
	        prevvalues: ColumnMergeRuntime.ID_PREV_VALUES
	    };
	    return ColumnMergeRuntime;
	}(Expression.ExpressionRuntime));
	var $_NEVER_VALUE = {};
	var ColumnMergeRule = /** @class */ (function (_super) {
	    __extends(ColumnMergeRule, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnMergeRule(criteria) {
	        var _this = _super.call(this) || this;
	        _this._runtime = ColumnMergeRule.$_runtime = ColumnMergeRule.$_runtime || new ColumnMergeRuntime();
	        _this.criteria = criteria;
	        return _this;
	    }
	    ColumnMergeRule.createRule = function (source) {
	        var s = typeof (source) === "string" ? source : (source && source.criteria);
	        if (s) {
	            return new ColumnMergeRule(s);
	        }
	        return null;
	    };
	    Object.defineProperty(ColumnMergeRule.prototype, "criteria", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** criteria */
	        get: function () {
	            return this._criteria;
	        },
	        set: function (value) {
	            value = value ? value.trim() : null;
	            if (value != this._criteria) {
	                this._criteria = value;
	                this._exprNode = value ? Expression.ExpressionParser.Default.parse(value, null) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnMergeRule.prototype.parseInit = function (rs, field, start, count, flags) {
	        var header = false;
	        var itemCount = rs.itemCount;
	        var valueCount = rs.dataSource.rowCount;
	        count = Math.min(itemCount - start, count);
	        if (count < 1 || valueCount <= 0) {
	            return;
	        }
	        this._runtime.setDataSource(rs.dataSource);
	        this._runtime.setColumn(this._column);
	        var item = null;
	        var i = start;
	        while (i < itemCount) {
	            item = rs.getItem(i);
	            if (this.$_isRow(item, header)) {
	                break;
	            }
	            flags[i] = i + 1;
	            i++;
	        }
	        if (i >= itemCount) {
	            return;
	        }
	        var prev = $_NEVER_VALUE;
	        var isValue = this._exprNode.isIdentifier("value");
	        var p = start = i;
	        flags[p] = p + 1;
	        if (item.dataRow >= valueCount) {
	            return;
	        }
	        if (isValue) {
	            prev = item.getData(field);
	        }
	        else {
	            this._runtime.setItem(item, field);
	            prev = this._exprNode.evaluate(this._runtime);
	        }
	        for (var i_1 = start + 1; i_1 < itemCount; i_1++) {
	            item = rs.getItem(i_1);
	            if (this.$_isRow(item, header)) {
	                if (item.dataRow >= valueCount) {
	                    break;
	                }
	                var v = void 0;
	                if (isValue) {
	                    v = item.getData(field);
	                }
	                else {
	                    this._runtime.setItem(item, field);
	                    v = this._exprNode.evaluate(this._runtime);
	                }
	                if (v instanceof Date && prev instanceof Date ? +v != +prev : v != prev) {
	                    if (i_1 >= count) {
	                        break;
	                    }
	                    p = i_1;
	                    prev = v;
	                }
	                flags[i_1] = p + 1;
	            }
	            else {
	                if (i_1 >= count) {
	                    break;
	                }
	                prev = $_NEVER_VALUE;
	                p = i_1;
	                flags[i_1] = p + 1;
	            }
	        }
	    };
	    ColumnMergeRule.prototype.parseBounds = function (rs, field, start, end, flags) {
	        var header = false;
	        var itemCount = rs.itemCount;
	        if (itemCount < 1) {
	            return;
	        }
	        var isValue = this._exprNode.isIdentifier("value");
	        var v = $_NEVER_VALUE;
	        var p = Math.max(0, start);
	        var s = p;
	        var cont = -1;
	        this._runtime.setDataSource(rs.dataSource);
	        this._runtime.setColumn(this._column);
	        if (p > 0 && flags[p] <= 0) {
	            var item = rs.getItem(p);
	            if (this.$_isRow(item, header)) {
	                var prev = void 0;
	                if (isValue) {
	                    prev = rs.getItem(p).getData(field);
	                }
	                else {
	                    this._runtime.setItem(item, field);
	                    prev = this._exprNode.evaluate(this._runtime);
	                }
	                p--;
	                while (p >= 0) {
	                    item = rs.getItem(p);
	                    if (!this.$_isRow(item, header)) {
	                        break;
	                    }
	                    if (isValue) {
	                        v = item.getData(field);
	                    }
	                    else {
	                        this._runtime.setItem(item, field);
	                        v = this._exprNode.evaluate(this._runtime);
	                    }
	                    if (v instanceof Date && prev instanceof Date ? +v != +prev : v != prev) {
	                        break;
	                    }
	                    p--;
	                }
	                for (var i = s - 1; i > p; i--) {
	                    flags[i] = p + 2;
	                }
	                if (s - 1 > p) {
	                    cont = p + 1;
	                }
	            }
	            else {
	                flags[p] = p + 1;
	                for (var i = s - 1; i > p; i--) {
	                    flags[i] = p + 2;
	                }
	                if (s - 1 > p + 1) {
	                    cont = p + 2;
	                }
	                p--;
	                while (p >= 0 && flags[p] <= 0 && !this.$_isRow(rs.getItem(p), header)) {
	                    flags[p] = p + 1;
	                    p--;
	                }
	            }
	        }
	        p = Math.max(0, start);
	        while (p <= end && flags[p] > 0) {
	            p++;
	        }
	        while (p <= end && !this.$_isRow(rs.getItem(p), header)) {
	            flags[p] = p + 1;
	            p++;
	        }
	        if (p < end) {
	            s = p;
	            var item = rs.getItem(p);
	            var prev = void 0;
	            if (isValue) {
	                prev = item.getData(field);
	            }
	            else {
	                this._runtime.setItem(item, field);
	                prev = this._exprNode.evaluate(this._runtime);
	            }
	            p++;
	            while (p < itemCount) {
	                item = rs.getItem(p);
	                if (this.$_isRow(item, header)) {
	                    if (isValue) {
	                        v = item.getData(field);
	                    }
	                    else {
	                        this._runtime.setItem(item, field);
	                        v = this._exprNode.evaluate(this._runtime);
	                    }
	                    if (v instanceof Date && prev instanceof Date ? +v != +prev : v != prev) {
	                        var y = s;
	                        if (cont >= 0) {
	                            y = cont;
	                            cont = -1;
	                        }
	                        for (var i = s; i < p; i++) {
	                            flags[i] = y + 1;
	                        }
	                        if (p >= end) {
	                            break;
	                        }
	                        prev = v;
	                        s = p;
	                    }
	                    else {
	                        flags[p] = s + 1;
	                    }
	                    p++;
	                }
	                else {
	                    var y = s;
	                    if (cont >= 0) {
	                        y = cont;
	                        cont = -1;
	                    }
	                    for (var i = s; i < p; i++) {
	                        flags[i] = y + 1;
	                    }
	                    flags[p] = p + 1;
	                    p++;
	                    while ((p < itemCount) && !this.$_isRow(rs.getItem(p), header)) {
	                        flags[p] = p + 1;
	                        p++;
	                    }
	                    s = p;
	                    if (p >= end) {
	                        break;
	                    }
	                }
	            }
	            if (p == itemCount && v instanceof Date && prev instanceof Date ? +v == +prev : v == prev) {
	                var y = (cont >= 0) ? cont : s;
	                for (var i = s; i < p; i++) {
	                    flags[i] = y + 1;
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnMergeRule.prototype.$_isRow = function (item, header) {
	        var row = item instanceof GridItem_1.GridRow && !(item instanceof EditableItemProvider_1.DummyEditItem);
	        if (row && !header) {
	            var group = item.parent;
	            row = group.expanded || group.firstItem !== item;
	        }
	        return row;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ColumnMergeRule.INIT_COUNT = 200;
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ColumnMergeRule.$_runtime = null;
	    return ColumnMergeRule;
	}(GridMergeRule));
	exports.ColumnMergeRule = ColumnMergeRule;
	var MergedDataCell = /** @class */ (function (_super) {
	    __extends(MergedDataCell, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MergedDataCell(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name || "mergedDataCell") || this;
	    }
	    MergedDataCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    MergedDataCell.prototype.getValue = function () {
	        var index = this.index;
	        var item = index.item;
	        if (item instanceof GridItem_1.GridRow) {
	            return _super.prototype.getValue.call(this);
	        }
	        else {
	            var group = (item instanceof GridItem_1.GroupItem) ? item : item.parent;
	            item = group.firstItem;
	            return item.getData(index.dataField);
	        }
	    };
	    return MergedDataCell;
	}(GridCell_1.DataCell));
	exports.MergedDataCell = MergedDataCell;
	var GridMergeRoom = /** @class */ (function (_super) {
	    __extends(GridMergeRoom, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridMergeRoom() {
	        return _super.call(this) || this;
	    }
	    Object.defineProperty(GridMergeRoom.prototype, "head", {
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridMergeRoom.prototype, "tail", {
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GridMergeRoom;
	}(Base_1.Base));
	exports.GridMergeRoom = GridMergeRoom;
	var ColumnMergeRoom = /** @class */ (function (_super) {
	    __extends(ColumnMergeRoom, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnMergeRoom(range) {
	        var _this = _super.call(this) || this;
	        _this._group = null;
	        _this._column = range.c1;
	        _this._head = range.top;
	        _this._tail = range.bottom;
	        return _this;
	    }
	    ColumnMergeRoom.borrow = function (range) {
	        var room = ColumnMergeRoom.$_rooms.pop();
	        if (!room) {
	            room = new ColumnMergeRoom(range);
	        }
	        else {
	            room._head = range.top;
	            room._tail = range.bottom;
	        }
	        return room;
	    };
	    ColumnMergeRoom.returnTo = function (room) {
	        if (room) {
	            var rooms = ColumnMergeRoom.$_rooms;
	            if (rooms.indexOf(room) < 0) {
	                rooms.push(room);
	            }
	        }
	    };
	    Object.defineProperty(ColumnMergeRoom.prototype, "column", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** column */
	        get: function () {
	            return this._column;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnMergeRoom.prototype, "head", {
	        /** head */
	        get: function () {
	            return this._head;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnMergeRoom.prototype, "tail", {
	        /** tail */
	        get: function () {
	            return this._tail;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnMergeRoom.prototype, "scope", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._column;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnMergeRoom.prototype, "group", {
	        get: function () {
	            return this._group;
	        },
	        set: function (value) {
	            this._group = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ColumnMergeRoom.prototype.getHead = function (index) {
	        if (!index) {
	            index = this._column.grid.getIndex(this._head, this._column);
	        }
	        else {
	            index.set(this._head, this._column);
	        }
	        return index;
	    };
	    ColumnMergeRoom.prototype.getTail = function (index) {
	        if (!index) {
	            index = this._column.grid.getIndex(this._tail, this._column);
	        }
	        else {
	            index.set(this._tail, this._column);
	        }
	        return index;
	    };
	    ColumnMergeRoom.prototype.isHead = function (index) {
	        return (index.column == this._column) && (index.itemIndex == this._head);
	    };
	    ColumnMergeRoom.prototype.isTail = function (index) {
	        return (index.column == this._column) && (index.itemIndex == this._tail);
	    };
	    ColumnMergeRoom.prototype.contains = function (index) {
	        return (index.column == this._column) && (index.itemIndex >= this._head) && (index.itemIndex <= this._tail);
	    };
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ColumnMergeRoom.$_rooms = new Array();
	    ColumnMergeRoom.$_roomCount = 0; // for debugging only
	    return ColumnMergeRoom;
	}(GridMergeRoom));
	exports.ColumnMergeRoom = ColumnMergeRoom;
	var ColumnMergeManager = /** @class */ (function (_super) {
	    __extends(ColumnMergeManager, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnMergeManager(column) {
	        var _this = _super.call(this) || this;
	        _this._flags = null;
	        _this._rooms = new Array();
	        _this._inited = false;
	        _this._column = column;
	        return _this;
	    }
	    Object.defineProperty(ColumnMergeManager.prototype, "count", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** count */
	        get: function () {
	            return this._rooms.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnMergeManager.prototype.clear = function () {
	        this._flags = null;
	        this._rooms = [];
	        this._inited = false;
	    };
	    ColumnMergeManager.prototype.initialize = function (count) {
	        if (this._inited) {
	            return;
	        }
	        var grid = this._column.grid;
	        var rowGroup = grid.rowGroup;
	        var rs = grid.itemSource;
	        var dcolumn = this._column;
	        var level = grid.getGroupLevel(dcolumn.dataIndex);
	        var rule = grid.isGroupedColumn(dcolumn) ? RowGroupMergeRule.getDefault(level, rowGroup.mergeMode) : dcolumn["$_mergeRuleObj"]();
	        if (rule) {
	            var flags = this._flags = new Array(rs.itemCount);
	            for (var i = rs.itemCount; i--;) {
	                flags[i] = 0;
	            }
	            rule["_column"] = dcolumn;
	            rule.parseInit(rs, dcolumn.dataIndex, grid.fixedOptions.rowCount, count, flags);
	        }
	        this._inited = true;
	    };
	    ColumnMergeManager.prototype.refresh = function (first, last) {
	        if (!this._inited || !this._flags || last < first) {
	            return;
	        }
	        var rooms = this._rooms;
	        var grid = this._column.grid;
	        var fixed = grid.layoutManager.fixedItemCount;
	        var rs = grid.itemSource;
	        var dcolumn = this._column;
	        var level = grid.getGroupLevel(dcolumn.dataIndex);
	        var rule = level > 0 ? RowGroupMergeRule.getDefault(level, grid.rowGroup.mergeMode) : dcolumn["$_mergeRuleObj"]();
	        var editItemMerging = grid.displayOptions.editItemMerging;
	        var i = first;
	        this._rooms.length = 0;
	        if (rule) {
	            rule["_column"] = dcolumn;
	            rule.parseBounds(rs, dcolumn.dataIndex, first, last, this._flags);
	        }
	        while (i <= last) {
	            var range = this.$_checkMerge(rs, this._column, i, rooms.length == 0, fixed);
	            if (range) {
	                if (level < 1) { // rowGrouping이 아닐 때
	                    // colMerge일때는 header/footer는 merge하지 않는다.
	                    var item = rs.getItem(range.r2);
	                    if (item instanceof RowGroup_1.MergedGroupHeader || item instanceof RowGroup_1.MergedGroupFooter) ;
	                    else {
	                        var room = new ColumnMergeRoom(range);
	                        this._rooms.push(room);
	                    }
	                }
	                else { // rowGrouping일 때
	                    // item = items.getItem(range.top());
	                    // insert 중인 경우 range가 어떻게 나오나??
	                    var item = editItemMerging ? rs.source.getItem(range.top) : rs.getItem(range.top);
	                    if (item.level >= level) {
	                        var group = (item instanceof GridItem_1.GroupItem) ? item : item.parent;
	                        while (group.level > level) {
	                            group = group.parent;
	                        }
	                        var room = new ColumnMergeRoom(range);
	                        room.group = group;
	                        rooms.push(room);
	                    }
	                }
	                i = range.r2 + 1;
	            }
	            else {
	                i += 1;
	            }
	        }
	    };
	    ColumnMergeManager.prototype.getRooms = function () {
	        return this._rooms.slice();
	    };
	    ColumnMergeManager.prototype.scroll = function (delta) {
	    };
	    ColumnMergeManager.prototype.getRoom = function (index) {
	        var rooms = this._rooms;
	        for (var i = rooms.length - 1; i >= 0; i--) {
	            if (rooms[i].contains(index))
	                return rooms[i];
	        }
	        return null;
	    };
	    ColumnMergeManager.prototype.findRoom = function (itemIndex) {
	        var rooms = this._rooms;
	        for (var i = rooms.length - 1; i >= 0; i--) {
	            if (itemIndex >= rooms[i].head && itemIndex <= rooms[i].tail) {
	                return rooms[i];
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnMergeManager.prototype.$_checkMerge = function (rs, column, start, first, fixed) {
	        if (rs && column && start >= 0) {
	            var options = column.grid.displayOptions;
	            var editMerge = options.editItemMerging;
	            var p = start;
	            var f = this._flags[p];
	            var item = rs.getItem(p);
	            if (f <= 0 || (GridItem_1.ItemState_isEditing(item.itemState) && !editMerge)) {
	                return null;
	            }
	            if (first) {
	                while (p > fixed) {
	                    if (this._flags[p - 1] < f || GridItem_1.ItemState_isEditing(rs.getItem(p - 1).itemState)) {
	                        break;
	                    }
	                    p--;
	                }
	            }
	            var count = rs.itemCount;
	            var i = start + 1;
	            while (i < count) {
	                var editing = GridItem_1.ItemState_isEditing(rs.getItem(i).itemState);
	                if (this._flags[i] > f || this._flags[i] <= 0 || (editing && !editMerge)) {
	                    //if (this._flags[i] <= 0) debugger;
	                    if (i > p + 1) { // 적어도 아이템이 두 개 이상
	                        return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                    }
	                    else {
	                        var level = (column instanceof DataColumn_1.DataColumn) ? column.groupLevel : -1;
	                        item = rs.getItem(p);
	                        if (item instanceof RowGroup_1.MergedGroupHeader && item.collapsed) {
	                            return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                        }
	                        /*
	                        if (item instanceof MergedGroupHeader && item.level() == level && item.isCollapsed()) {
	                            return GridRange.createRange(p, column, i - 1, column);
	                        }
	                        */
	                        if (item instanceof RowGroup_1.MergedGroupFooter && item.parent.level == level &&
	                            (i == start + 1 || // 첫번째 행에 footer가 있을 때 expander를 표시할 수 있도록
	                                item.parent.collapsed)) {
	                            return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                        }
	                        if ((item instanceof RowGroup_1.MergedGroupHeader || item instanceof RowGroup_1.MergedGroupFooter) && item.parent.level > level) {
	                            return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                        }
	                        return null;
	                    }
	                }
	                i++;
	            }
	            if (i > p) {
	                if (i > p + 1) {
	                    return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                }
	                else {
	                    var level = (column instanceof DataColumn_1.DataColumn) ? column.groupLevel : -1;
	                    item = rs.getItem(p);
	                    if (item instanceof RowGroup_1.MergedGroupHeader && item.collapsed) {
	                        return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                    }
	                    /*
	                    if (item instanceof MergedGroupHeader && item.level() == level && item.isCollapsed()) {
	                        return GridRange.createRange(p, column, i - 1, column);
	                    }
	                    */
	                    if (item instanceof RowGroup_1.MergedGroupFooter && item.parent.level == level &&
	                        (i == start + 1 || item.parent.collapsed)) {
	                        return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                    }
	                    if ((item instanceof RowGroup_1.MergedGroupHeader || item instanceof RowGroup_1.MergedGroupFooter) && item.parent.level > level) {
	                        return CellIndex_1.CellRange.createRange(p, column, i - 1, column);
	                    }
	                    return null;
	                }
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ColumnMergeManager.MERGE_ROOMS = "mergeRooms";
	    return ColumnMergeManager;
	}(Base_1.Base));
	exports.ColumnMergeManager = ColumnMergeManager;
	});

	unwrapExports(ColumnMerge);
	var ColumnMerge_1 = ColumnMerge.GridMergeRule;
	var ColumnMerge_2 = ColumnMerge.RowGroupMergeRule;
	var ColumnMerge_3 = ColumnMerge.ColumnMergeRule;
	var ColumnMerge_4 = ColumnMerge.MergedDataCell;
	var ColumnMerge_5 = ColumnMerge.GridMergeRoom;
	var ColumnMerge_6 = ColumnMerge.ColumnMergeRoom;
	var ColumnMerge_7 = ColumnMerge.ColumnMergeManager;

	var GridColumn_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridColumn.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });











	var ColumnSummary = /** @class */ (function (_super) {
	    __extends(ColumnSummary, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnSummary(column) {
	        var _this = _super.call(this, null, "columnSummaryStyles") || this;
	        _this._column = column;
	        _this._groupStyles = new VisualStyles_1.VisualStyles(_this, "columnRowGroupSummaryStyles");
	        _this._dynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        _this._groupDynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        return _this;
	    }
	    ColumnSummary.prototype.dispose = function () {
	        this._column = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ColumnSummary.prototype, "capitalIndexers", {
	        //-------------------------------------------------------------------------
	        // DynamicStyleOwner
	        //-------------------------------------------------------------------------
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "groupStyles", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** groupStyles */
	        get: function () {
	            return this._groupStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "expression", {
	        /** expression */
	        get: function () {
	            return this._expression;
	        },
	        set: function (value) {
	            if (value) {
	                value = value.trim();
	            }
	            if (value != this._expression) {
	                this._expression = value;
	                if (value) {
	                    this._exprNode = Expression.ExpressionParser.Default.parse(value);
	                }
	                else {
	                    this._exprNode = undefined;
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "groupText", {
	        /** groupText */
	        get: function () {
	            return this._groupText;
	        },
	        set: function (value) {
	            if (value != this._groupText) {
	                this._groupText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "groupExpression", {
	        /** groupExpression */
	        get: function () {
	            return this._groupExpression;
	        },
	        set: function (value) {
	            if (value) {
	                value = value.trim();
	            }
	            if (value != this._groupExpression) {
	                this._groupExpression = value;
	                if (value) {
	                    this._groupExprNode = Expression.ExpressionParser.Default.parse(value);
	                }
	                else {
	                    this._groupExprNode = undefined;
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "dynamicStyles", {
	        /** dynamicStyles */
	        get: function () {
	            return this._dynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "groupDynamicStyles", {
	        /** groupDynamicStyles */
	        get: function () {
	            return this._groupDynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSummary.prototype, "column", {
	        /** column */
	        get: function () {
	            return this._column;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnSummary.prototype.setGroupStyles = function (value) {
	        if (value !== this._groupStyles) {
	            this._groupStyles.extend(value);
	        }
	    };
	    ColumnSummary.prototype.evaluate = function (runtime, index) {
	        if (this._exprNode) {
	            if (this._exprNode instanceof Array) {
	                if (index !== undefined && this._exprNode[index]) {
	                    return this._exprNode[index].evaluate(runtime);
	                }
	                else {
	                    return;
	                }
	            }
	            else {
	                return this._exprNode.evaluate(runtime);
	            }
	        }
	        else {
	            return;
	        }
	    };
	    ColumnSummary.prototype.evaluateGroup = function (runtime) {
	        return this._groupExprNode && this._groupExprNode.evaluate(runtime);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnSummary.prototype._doChanged = function () {
	    };
	    return ColumnSummary;
	}(GridObject_1.VisualObject));
	exports.ColumnSummary = ColumnSummary;
	var ColumnHeaderSummary = /** @class */ (function (_super) {
	    __extends(ColumnHeaderSummary, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnHeaderSummary(columnHeader) {
	        return _super.call(this, columnHeader.column) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnHeaderSummary.prototype._doChanged = function () {
	        this.column["_headerSummaryChanged"]();
	    };
	    return ColumnHeaderSummary;
	}(ColumnSummary));
	exports.ColumnHeaderSummary = ColumnHeaderSummary;
	var ColumnHeader = /** @class */ (function (_super) {
	    __extends(ColumnHeader, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnHeader(column) {
	        var _this = _super.call(this, null) || this;
	        _this._imageIndex = -1;
	        _this._checkLocation = Types.ColumnHeaderItemLocation.NONE;
	        _this._imageLocation = Types.ColumnHeaderItemLocation.NONE;
	        _this._clickBehavior = Types.ClickBehavior.NONE;
	        _this._showTooltip = true;
	        _this._fixedHeight = 0;
	        _this._column = column;
	        _this._summary = new ColumnHeaderSummary(_this);
	        return _this;
	    }
	    ColumnHeader.prototype.dispose = function () {
	        this._column = null;
	        this._summary = null;
	        this._styles = null;
	        this._subStyles = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ColumnHeader.prototype, "summary", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** summary */
	        get: function () {
	            return this._summary;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "styles", {
	        /** styles */
	        get: function () {
	            return this._styles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "subStyles", {
	        /** subStyles */
	        get: function () {
	            return this._subStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "subText", {
	        /** subText */
	        get: function () {
	            return this._subText;
	        },
	        set: function (value) {
	            if (value != this._subText) {
	                this._subText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "subTextGap", {
	        /** subTextGap */
	        get: function () {
	            return this._subTextGap;
	        },
	        set: function (value) {
	            if (value != this._subTextGap) {
	                this._subTextGap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "itemOffset", {
	        /** itemOffset */
	        get: function () {
	            return this._itemOffset;
	        },
	        set: function (value) {
	            if (value != this._itemOffset) {
	                this._itemOffset = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "itemGap", {
	        /** itemGap */
	        get: function () {
	            return this._itemGap;
	        },
	        set: function (value) {
	            if (value != this._itemGap) {
	                this._itemGap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "column", {
	        /** column */
	        get: function () {
	            return this._column;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "subTextLocation", {
	        /** subTextLocation */
	        get: function () {
	            return this._subTextLocation;
	        },
	        set: function (value) {
	            if (value != this._subTextLocation) {
	                this._subTextLocation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "imageIndex", {
	        /** imageIndex */
	        get: function () {
	            return this._imageIndex;
	        },
	        set: function (value) {
	            if (value != this._imageIndex) {
	                this._imageIndex = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "imageUrl", {
	        /** imageUrl */
	        get: function () {
	            return this._imageUrl;
	        },
	        set: function (value) {
	            if (value != this._imageUrl) {
	                this._imageUrl = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "checkLocation", {
	        /** checkLocation */
	        get: function () {
	            return this._checkLocation;
	        },
	        set: function (value) {
	            if (value != this._checkLocation) {
	                this._checkLocation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "imageLocation", {
	        /** imageLocation */
	        get: function () {
	            return this._imageLocation;
	        },
	        set: function (value) {
	            if (value != this._imageLocation) {
	                this._imageLocation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "clickBehavior", {
	        /** clickBehavior */
	        get: function () {
	            return this._clickBehavior;
	        },
	        set: function (value) {
	            if (value != this._clickBehavior) {
	                this._clickBehavior = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "showTooltip", {
	        /** showTooltip */
	        get: function () {
	            return this._showTooltip;
	        },
	        set: function (value) {
	            if (value != this._showTooltip) {
	                this._showTooltip = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "tooltip", {
	        /** tooltip */
	        get: function () {
	            return this._tooltip;
	        },
	        set: function (value) {
	            if (value != this._tooltip) {
	                this._tooltip = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "fixedHeight", {
	        /** fixedHeight */
	        get: function () {
	            return this._fixedHeight;
	        },
	        set: function (value) {
	            if (value != this._fixedHeight) {
	                this._fixedHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnHeader.prototype, "displayText", {
	        /** displayText */
	        get: function () {
	            var s = this._text;
	            if (!s && this._column instanceof DataColumn_1.DataColumn) {
	                var fld = this._column.getField();
	                if (fld) {
	                    s = fld.header || fld.orgFieldName;
	                }
	                else {
	                    s = this._column.fieldName;
	                }
	            }
	            if (!s) {
	                s = this._column.name;
	            }
	            return s;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnHeader.prototype.setSummary = function (source) {
	        if (source != this._summary) {
	            this._summary.assignFrom(source);
	            this._changed();
	        }
	    };
	    ColumnHeader.prototype.setStyles = function (value) {
	        if (value !== this._styles) {
	            this._styles.extend(value);
	        }
	    };
	    ColumnHeader.prototype.setSubStyles = function (value) {
	        if (value !== this._subStyles) {
	            this._subStyles.extend(value);
	        }
	    };
	    ColumnHeader.prototype.setPopupMenu = function (value) {
	        // if (value != this._popupMenu) {
	        // 	if (typeof value === "string") {
	        // 		this._popupMenu = null;
	        // 		this._popupMenuName = value;
	        // 	} else if (Array.isArray(value) || _isObject(value)) {
	        // 		this._popupMenu = value;
	        // 		this._popupMenuName = null;
	        // 	} else {
	        // 		this._popupMenu = null;
	        // 		this._popupMenuName = null;
	        // 	}
	        // 	this.changed();
	        // 	this._popupMenuChanged = true;
	        // }
	    };
	    ColumnHeader.prototype.resetPopupMenu = function (popupMenuManager) {
	        // var menu;
	        // if ((menu = this._popupMenu) && !this._popupMenuName) {
	        // 	this._popupMenuName = "$$_columnHeader_popup"+ $$_autoInc++ +"menu";
	        // 	menu = Array.isArray(menu) ? menu : [menu];
	        // 	popupMenuManager.addMenu(this._popupMenuName, menu, true);
	        // }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnHeader.prototype._doChanged = function () {
	        if (this._column) {
	            this._column["_headerChanged"]();
	        }
	    };
	    return ColumnHeader;
	}(GridObject_1.GridObject));
	exports.ColumnHeader = ColumnHeader;
	var ColumnFooter = /** @class */ (function (_super) {
	    __extends(ColumnFooter, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnFooter(column) {
	        return _super.call(this, column) || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnFooter.prototype._doChanged = function () {
	        this.column["_footerChanged"]();
	    };
	    return ColumnFooter;
	}(ColumnSummary));
	exports.ColumnFooter = ColumnFooter;
	var GridColumn = /** @class */ (function (_super) {
	    __extends(GridColumn, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridColumn(config) {
	        var _this = _super.call(this) || this;
	        _this._visible = true;
	        _this._width = 100;
	        _this._checked = false;
	        _this._dirty = false;
	        _this._index = -1;
	        _this._displayIndex = -1; // bodyView 내에서 컬럼의 td index.
	        _this._states = {};
	        _this._header = new ColumnHeader(_this);
	        _this._footer = new ColumnFooter(_this);
	        _this._styles = new VisualStyles_1.VisualStyles(_this, "columnStyles");
	        config && _this.assignFrom(config);
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    GridColumn.compareLoc = function (col1, col2) {
	        if (col1 == null || col2 == null) {
	            return 0;
	        }
	        if (col1 == null) {
	            return -1;
	        }
	        if (col2 == null) {
	            return 1;
	        }
	        // const idx1 = col1.root.displayIndex;
	        // const idx2 = col2.root.displayIndex;
	        var idx1 = col1.index;
	        var idx2 = col2.index;
	        // if (idx1 == idx2) {
	        // 	if (col1.group() == col2.group()) {
	        // 		idx1 = col1.displayIndex();
	        // 		idx2 = col2.displayIndex();
	        // 	} else {
	        // 		idx1 = col1.dataRoot().displayIndex();
	        // 		idx2 = col2.dataRoot().displayIndex();
	        // 	}
	        // }
	        return idx1 - idx2;
	    };
	    GridColumn.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // VisualStylesOwner
	    //-------------------------------------------------------------------------
	    GridColumn.prototype.stylesChanged = function (styleProp) {
	        this._changed();
	    };
	    Object.defineProperty(GridColumn.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            if (value != this._name) {
	                this._name = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "visible", {
	        /** visible */
	        get: function () {
	            return this._visible;
	        },
	        set: function (value) {
	            if (value != this._visible) {
	                this._visible = value;
	                var grid = this.grid;
	                grid && grid["_columnVisibleChanged"](this);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "width", {
	        /** width */
	        get: function () {
	            return this._width;
	        },
	        set: function (value) {
	            value = Math.max(0, value); // 이렇게 하면 value가 string일 때 number로 변경된다.
	            // type을 number로 지정했다고 실행 시간에 자동을 형변환 해주지 않는다.
	            if (value != this._width) {
	                this._width = value;
	                this._changed();
	                //this._invalidateSize();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "checked", {
	        /** checked */
	        get: function () {
	            return this._checked;
	        },
	        set: function (value) {
	            if (value != this._checked) {
	                this._checked = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "styles", {
	        /** styles */
	        get: function () {
	            return this._styles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "header", {
	        /** header */
	        get: function () {
	            return this._header;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "footer", {
	        /** footer */
	        get: function () {
	            return this._footer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "grid", {
	        /** grid */
	        get: function () {
	            return this.$_grid || (this.$_owner ? this.$_owner.owner : null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "tag", {
	        /** tag */
	        get: function () {
	            return this._tag;
	        },
	        set: function (value) {
	            this._tag = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "index", {
	        /** index */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "displayIndex", {
	        /** displayIndex */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "distance", {
	        /** distance */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "displayText", {
	        /** displayText */
	        get: function () {
	            return this._name || this._header.text || ("col_" + this._index);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridColumn.prototype, "dataRoot", {
	        /** dataRoot */
	        get: function () {
	            return this; // this._dataRoot;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridColumn.prototype.isWritable = function () {
	        return false;
	    };
	    GridColumn.prototype.setStyles = function (value) {
	        if (value != this._styles) {
	            this._styles.extend(value);
	            this._changed();
	        }
	    };
	    GridColumn.prototype.prepareLayout = function (grid) {
	    };
	    GridColumn.prototype.stateFor = function (state) {
	        return this._states[state];
	    };
	    GridColumn.prototype.setState = function (state, value) {
	        this._states[state] = value;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridColumn.prototype.assignFrom = function (source) {
	        _super.prototype.assignFrom.call(this, source);
	        this._header.assignFrom(source.header);
	        this._footer.assignFrom(source.footer);
	    };
	    GridColumn.prototype.toString = function () {
	        return this.displayText;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridColumn.prototype._changed = function () {
	        if (!this._dirty) {
	            this._dirty = true;
	            var grid = this.grid;
	            grid && grid.invalidateColumn(this);
	        }
	    };
	    GridColumn.prototype.$_setIndex = function (value) {
	        this._index = value;
	    };
	    GridColumn.prototype._headerChanged = function () {
	    };
	    GridColumn.prototype._headerSummaryChanged = function () {
	    };
	    GridColumn.prototype._footerChanged = function () {
	    };
	    GridColumn.prototype._resetIndices = function (grid) {
	    };
	    return GridColumn;
	}(Base_1.Base));
	exports.GridColumn = GridColumn;
	var ValueColumn = /** @class */ (function (_super) {
	    __extends(ValueColumn, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ValueColumn(config) {
	        var _this = _super.call(this, config) || this;
	        _this._blankWhenCopy = false;
	        _this._blankWhenExport = false;
	        _this._ignoreDefaultDynamicStyles = false;
	        _this._textInputCase = Types.TextInputCase.NORMAL;
	        return _this;
	    }
	    ValueColumn.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ValueColumn.prototype, "mergeRule", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** mergeRule */
	        get: function () {
	            return this._mergeRule;
	        },
	        set: function (value) {
	            if (value != this._mergeRule) {
	                this._mergeRule = value;
	                this._mergeRuleObj = value ? ColumnMerge.ColumnMergeRule.createRule(value) : null;
	                var grid = this.grid;
	                if (grid) {
	                    grid["_columnMergeRuleChanged"](this);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "datetimeFormat", {
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                this._datetimeWriter = value ? new DateTimeWriter_1.DateTimeWriter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "numberFormat", {
	        /** numberFormat */
	        get: function () {
	            return this._numberFormat;
	        },
	        set: function (value) {
	            if (value != this._numberFormat) {
	                this._numberFormat = value;
	                this._numberFormatter = value ? new DecimalFormatter_1.DecimalFormatter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                this._boolFormatter = value ? new BooleanFormatter_1.BooleanFormatter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "prefix", {
	        /** prefix */
	        get: function () {
	            return this._prefix;
	        },
	        set: function (value) {
	            if (value != this._prefix) {
	                this._prefix = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "suffix", {
	        /** suffix */
	        get: function () {
	            return this._suffix;
	        },
	        set: function (value) {
	            if (value != this._suffix) {
	                this._suffix = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "blankWhenCopy", {
	        /** blankWhenCopy */
	        get: function () {
	            return this._blankWhenCopy;
	        },
	        set: function (value) {
	            if (value != this._blankWhenCopy) {
	                this._blankWhenCopy = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "blankWhenExport", {
	        /** blankWhenExport */
	        get: function () {
	            return this._blankWhenExport;
	        },
	        set: function (value) {
	            if (value != this._blankWhenExport) {
	                this._blankWhenExport = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "ignoreDefaultDynamicStyles", {
	        /** ignoreDefaultDynamicStyles */
	        get: function () {
	            return this._ignoreDefaultDynamicStyles;
	        },
	        set: function (value) {
	            if (value != this._ignoreDefaultDynamicStyles) {
	                this._ignoreDefaultDynamicStyles = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "textInputCase", {
	        /** textInputCase */
	        get: function () {
	            return this._textInputCase;
	        },
	        set: function (value) {
	            if (value != this._textInputCase) {
	                this._textInputCase = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "styleName", {
	        /** styleName */
	        get: function () {
	            return this._styleName;
	        },
	        set: function (value) {
	            if (value != this._styleName) {
	                this._styleName = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "styleCallback", {
	        /** styleCallback */
	        get: function () {
	            return this._styleCallback;
	        },
	        set: function (value) {
	            if (value != this._styleCallback) {
	                this._styleCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "renderer", {
	        /** renderer */
	        get: function () {
	            return this._renderer;
	        },
	        set: function (value) {
	            if (value !== this._renderer) {
	                this._renderer = value;
	                this._rendererChanged = true;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "numberFormatter", {
	        /** numberFormatter */
	        get: function () {
	            return this._numberFormatter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "datetimeWriter", {
	        /** datetimeWriter */
	        get: function () {
	            return this._datetimeWriter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "boolFormatter", {
	        /** boolFormatter */
	        get: function () {
	            return this._boolFormatter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueColumn.prototype, "rendererObj", {
	        /** renderObj */
	        get: function () {
	            if (this._rendererChanged) {
	                var grid = this.grid;
	                if (grid) {
	                    this._rendererChanged = false;
	                    this._rendererObj = grid.delegate.createRenderer(this._renderer);
	                }
	            }
	            return this._rendererObj;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ValueColumn.prototype.prepareLayout = function (grid) {
	        _super.prototype.prepareLayout.call(this, grid);
	    };
	    ValueColumn.prototype.canMerge = function () {
	        return this._mergeRuleObj != null;
	    };
	    ValueColumn.prototype.getStyleName = function (model) {
	        return (this._styleCallback && this._styleCallback(this, model)) || this._styleName;
	    };
	    ValueColumn.prototype.affix = function (s) {
	        if (this._prefix)
	            s = this._prefix + s;
	        if (this._suffix)
	            s += this._suffix;
	        return s;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ValueColumn.prototype.$_mergeRuleObj = function () {
	        return this._mergeRuleObj;
	    };
	    return ValueColumn;
	}(GridColumn));
	exports.ValueColumn = ValueColumn;
	});

	unwrapExports(GridColumn_1);
	var GridColumn_2 = GridColumn_1.ColumnSummary;
	var GridColumn_3 = GridColumn_1.ColumnHeaderSummary;
	var GridColumn_4 = GridColumn_1.ColumnHeader;
	var GridColumn_5 = GridColumn_1.ColumnFooter;
	var GridColumn_6 = GridColumn_1.GridColumn;
	var GridColumn_7 = GridColumn_1.ValueColumn;

	var DataColumn_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataColumn.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var DataColumn = /** @class */ (function (_super) {
	    __extends(DataColumn, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataColumn(config) {
	        var _this = _super.call(this, config) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._fieldIndex = -1;
	        _this._editable = true;
	        _this._readOnly = false;
	        _this._equalBlank = false;
	        _this._equalBlankExpression = null;
	        _this._lookupValues = null;
	        _this._lookupLabels = null;
	        _this._lookupDisplay = false;
	        _this._lookupSource = null;
	        _this._lookupKeyFields = null;
	        _this._lookupKeyFieldIds = null;
	        _this._mergeGrouped = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._dataIndex = -1;
	        _this._baseIndex = -1;
	        _this._valueType = Types.ValueType.TEXT;
	        _this._groupLevel = -1;
	        _this._labelFieldIndex = -1;
	        _this._dynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        return _this;
	    }
	    DataColumn.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DataColumn.prototype, "capitalIndexers", {
	        //-------------------------------------------------------------------------
	        // DynamicStyleOwner
	        //-------------------------------------------------------------------------
	        get: function () {
	            return DataColumn.CAPITAL_INDEXERS;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "fieldIndex", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** fieldIndex */
	        get: function () {
	            return this._fieldIndex;
	        },
	        set: function (value) {
	            value = Math.max(-1, value);
	            if (value != this._fieldIndex) {
	                this._fieldIndex = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "fieldName", {
	        /** fieldName */
	        get: function () {
	            return this._fieldName;
	        },
	        set: function (value) {
	            if (value != this._fieldName) {
	                this._fieldName = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "editable", {
	        /** editable */
	        get: function () {
	            return this._editable;
	        },
	        set: function (value) {
	            if (value != this._editable) {
	                this._editable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "readOnly", {
	        /** readOnly */
	        get: function () {
	            return this._readOnly;
	        },
	        set: function (value) {
	            if (value != this._readOnly) {
	                this._readOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "nanText", {
	        /** nanText */
	        get: function () {
	            return this._nanText;
	        },
	        set: function (value) {
	            if (value != this._nanText) {
	                this._nanText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "zeroText", {
	        /** zeroText */
	        get: function () {
	            return this._zeroText;
	        },
	        set: function (value) {
	            if (value != this._zeroText) {
	                this._zeroText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "defaultValue", {
	        /** defaultValue */
	        get: function () {
	            return this._defaultValue;
	        },
	        set: function (value) {
	            this._defaultValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "valueSeparator", {
	        /** valueSeparator */
	        get: function () {
	            return this._valueSeparator;
	        },
	        set: function (value) {
	            if (value != this._valueSeparator) {
	                this._valueSeparator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "equalBlank", {
	        /** equalBlank */
	        get: function () {
	            return this._equalBlank;
	        },
	        set: function (value) {
	            if (value != this._equalBlank) {
	                this._equalBlank = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "equalBlankExpression", {
	        /** equalBlankExpression */
	        get: function () {
	            return this._equalBlankExpression;
	        },
	        set: function (value) {
	            if (value != this._equalBlankExpression) {
	                this._equalBlankExpression = value;
	                this._equalBlankNode = value ? Expression.ExpressionParser.Default.parse(value, null) : undefined;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "excelFormat", {
	        /** excelFormat */
	        get: function () {
	            return this._excelFormat;
	        },
	        set: function (value) {
	            if (value != this._excelFormat) {
	                this._excelFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "excelFormulaStatement", {
	        /** excelFormulaStatement */
	        get: function () {
	            return this._excelFormulaStatement;
	        },
	        set: function (value) {
	            if (value != this._excelFormulaStatement) {
	                this._excelFormulaStatement = value;
	                if (value) {
	                    if (this._excelFormulaExprStatement) {
	                        this._excelFormulaExprStatement.source = value;
	                    }
	                    else {
	                        this._excelFormulaExprStatement = new ExpressionStatement_1.ExpressionStatement(value);
	                    }
	                }
	                else {
	                    this._excelFormulaExprStatement = null;
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "dataIndex", {
	        /** dataIndex */
	        get: function () {
	            return this._dataIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "baseIndex", {
	        /** baseIndex */
	        get: function () {
	            return this._baseIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "valueType", {
	        /** valueType */
	        get: function () {
	            return this._valueType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "groupLevel", {
	        /** groupLevel */
	        get: function () {
	            return this._groupLevel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupValues", {
	        /** lookupValues */
	        get: function () {
	            return this._lookupValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupLabels", {
	        /** lookupLabels */
	        get: function () {
	            return this._lookupLabels;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupDisplay", {
	        /** lookupDisplay */
	        get: function () {
	            return this._lookupDisplay;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupSource", {
	        /** lookupSource */
	        get: function () {
	            return this._lookupSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupKeyFields", {
	        /** lookupKeyFields */
	        get: function () {
	            return this._lookupKeyFields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "lookupKeyFieldIds", {
	        /** lookupKeyFieldIds */
	        get: function () {
	            return this._lookupKeyFieldIds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "textOfInvalid", {
	        /** textOfInvalid */
	        get: function () {
	            return this._textOfInvalid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "labelFieldIndex", {
	        /** labelFieldIndex */
	        get: function () {
	            return this._labelFieldIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "displayCallback", {
	        /** displayCallback */
	        get: function () {
	            return this._displayCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "displayRegExp", {
	        /** displayRegExp */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "displayReplace", {
	        /** displayReplace */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "dynamicStyles", {
	        /** dynamicStyles */
	        get: function () {
	            return this._dynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataColumn.prototype, "mergeGrouped", {
	        /** mergedGrouped */
	        get: function () {
	            return this._mergeGrouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DataColumn.prototype.setDynamicStyles = function (value) {
	        this._dynamicStyles.setItems(value);
	        this._changed();
	    };
	    DataColumn.prototype.getField = function () {
	        var f = this._dataIndex;
	        if (f >= 0) {
	            var ds = this.grid.dataSource;
	            if (ds) {
	                return ds.getField(f);
	            }
	        }
	        return null;
	    };
	    DataColumn.prototype.getLookupLabel = function (value) {
	        return "";
	    };
	    DataColumn.prototype.getLookupIndex = function (value) {
	        return -1;
	    };
	    DataColumn.prototype.getLookupValue = function (index) {
	        return null;
	    };
	    DataColumn.prototype.getSourceValue = function (label) {
	        return null;
	    };
	    DataColumn.prototype.getLookupIndices = function (value) {
	        return [];
	    };
	    DataColumn.prototype.getLookupValues = function (indices) {
	        return [];
	    };
	    DataColumn.prototype.getSourceValues = function (value) {
	        return [];
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataColumn.prototype._resetIndices = function (grid) {
	        this._dataIndex = -1;
	        this._baseIndex = -1;
	        //this._labelFieldIndex = -1;
	        //this._objectKey = this._objectCallback = undefined;
	        var ds = grid.dataSource;
	        if (ds) {
	            if (this._fieldName) {
	                this._dataIndex = ds.getFieldIndex(this._fieldName);
	            }
	            else {
	                this._dataIndex = this._fieldIndex;
	            }
	            if (this._dataIndex >= 0) {
	                var field = ds.getField(this._dataIndex);
	                this._baseIndex = ds.getBaseField(this._dataIndex);
	                this._valueType = ds.getValueType(this._dataIndex);
	                // this._objectKey = field._objectKey;
	                // this._objectCallback = field._objectCallback;
	            }
	            // this._labelFieldIndex = dataSource.getFieldIndex(this._labelField);
	            // this._saveFieldName = this._fieldName;
	            // this._saveLabelField = this._labelField;
	        }
	    };
	    DataColumn.prototype.isWritable = function () {
	        var w = this._editable && !this._readOnly;
	        // if (w && this.$_grid) {
	        //     w = !this.$_fixed || !this.$_rightFixed || this.$_grid.$_fixedColEditable;
	        // }
	        return w;
	    };
	    DataColumn.prototype.canMerge = function () {
	        return this._mergeGrouped || _super.prototype.canMerge.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataColumn.prototype.$_setMergeGrouped = function (value) {
	        this._mergeGrouped = value;
	    };
	    DataColumn.prototype.$_setGroupLevel = function (value) {
	        this._groupLevel = value;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DataColumn.CAPITAL_INDEXERS = ["value", "values"];
	    return DataColumn;
	}(GridColumn_1.ValueColumn));
	exports.DataColumn = DataColumn;
	var SeriesColumn = /** @class */ (function (_super) {
	    __extends(SeriesColumn, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SeriesColumn(config) {
	        var _this = _super.call(this, config) || this;
	        _this._fieldArray = _this._fieldArray || [];
	        _this._fields = _this._fields || [];
	        return _this;
	    }
	    SeriesColumn.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SeriesColumn.prototype, "fieldNames", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** fieldsNames */
	        get: function () {
	            return this._fieldNames;
	        },
	        set: function (value) {
	            if (value != this._fieldNames) {
	                this._fieldNames = value;
	                this._fieldArray = value ? value.split(",") : [];
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SeriesColumn.prototype, "fields", {
	        /** fields */
	        get: function () {
	            return this._fields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SeriesColumn.prototype._resetIndices = function (grid) {
	        this._fields = [];
	        var ds = grid.dataSource;
	        if (ds) {
	            for (var i = 0, cnt = this._fieldArray.length; i < cnt; i++) {
	                var fld = this._fieldArray[i];
	                var arr = fld.split("..");
	                if (arr.length > 1) {
	                    var first = ds.getFieldIndex(arr[0]);
	                    var last = ds.getFieldIndex(arr[1]);
	                    if (first >= 0 && last >= 0) {
	                        var f1 = Math.min(first, last);
	                        var f2 = Math.max(first, last);
	                        for (var j = f1; j <= f2; j++) {
	                            this._fields.push(j);
	                        }
	                    }
	                }
	                else {
	                    var j = ds.getFieldIndex(fld);
	                    if (j >= 0) {
	                        this._fields.push(j);
	                    }
	                }
	            }
	        }
	    };
	    return SeriesColumn;
	}(GridColumn_1.ValueColumn));
	exports.SeriesColumn = SeriesColumn;
	});

	unwrapExports(DataColumn_1);
	var DataColumn_2 = DataColumn_1.DataColumn;
	var DataColumn_3 = DataColumn_1.SeriesColumn;

	var ColumnLayout_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ColumnLayout.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var GridColumnLayout = /** @class */ (function (_super) {
	    __extends(GridColumnLayout, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridColumnLayout() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._visibles = [];
	        return _this;
	    }
	    Object.defineProperty(GridColumnLayout.prototype, "visibleCount", {
	        get: function () {
	            return this._visibles.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridColumnLayout.prototype.getVisible = function (index) {
	        return this._visibles[index];
	    };
	    GridColumnLayout.prototype.prepareLayout = function (grid) {
	        for (var i = 0, cnt = this.count; i < cnt; i++) {
	            var column = this.getColumn(i);
	            column.prepareLayout(grid);
	        }
	    };
	    GridColumnLayout.prototype.columnByName = function (name) {
	        if (name) {
	            for (var i = 0, cnt = this.count; i < cnt; i++) {
	                var column = this.getColumn(i);
	                if (column.name == name) {
	                    return column;
	                }
	            }
	        }
	        return null;
	    };
	    GridColumnLayout.prototype.columnByField = function (field) {
	        if (field >= 0) {
	            for (var i = 0, cnt = this.count; i < cnt; i++) {
	                var column = this.getColumn(i);
	                if (column instanceof DataColumn_1.DataColumn && column.dataIndex == field) {
	                    return column;
	                }
	            }
	        }
	        return null;
	    };
	    GridColumnLayout.prototype.clearMergeGrouped = function () {
	        for (var i = 0, cnt = this.count; i < cnt; i++) {
	            var column = this.getColumn(i);
	            if (column instanceof DataColumn_1.DataColumn) {
	                column["$_setMergeGrouped"](false);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridColumnLayout.prototype._columnsChanged = function (column) {
	        this._resetVisibles();
	    };
	    GridColumnLayout.prototype._resetVisibles = function () {
	        var items = this._visibles = [];
	        for (var i = 0, cnt = this.count; i < cnt; i++) {
	            var column = this.getColumn(i);
	            if (column.visible) {
	                this._visibles.push(column);
	            }
	        }
	    };
	    return GridColumnLayout;
	}(EventAware_1.EventAware));
	exports.GridColumnLayout = GridColumnLayout;
	var DefaultColumnLayout = /** @class */ (function (_super) {
	    __extends(DefaultColumnLayout, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DefaultColumnLayout(columns) {
	        var _this = _super.call(this) || this;
	        _this._columns = columns;
	        return _this;
	    }
	    DefaultColumnLayout.prototype.dispose = function () {
	        this._columns = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DefaultColumnLayout.prototype.invalidateColumns = function () {
	    };
	    Object.defineProperty(DefaultColumnLayout.prototype, "count", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._columns.count;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultColumnLayout.prototype.getColumn = function (index) {
	        return this._columns.getColumn(index);
	    };
	    DefaultColumnLayout.prototype.getDataColumns = function (visibleOnly) {
	        var columns = [];
	        for (var i = 0, cnt = this.visibleCount; i < cnt; i++) {
	            var column = this.getVisible(i);
	            if (column instanceof DataColumn_1.DataColumn) {
	                columns.push(column);
	            }
	        }
	        return columns;
	    };
	    DefaultColumnLayout.prototype.getHorzColumns = function (start, count) {
	        if (start === undefined) {
	            start = 0;
	        }
	        if (count === undefined) {
	            count = this.visibleCount;
	        }
	        var columns = [];
	        for (var i = start, cnt = start + count; i < cnt; i++) {
	            columns.push(this.getVisible(i));
	        }
	        return columns;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DefaultColumnLayout.prototype.getFirstColumn = function () {
	        return this._columns.getColumn(0);
	    };
	    DefaultColumnLayout.prototype.collectColumns = function (columnsOnly, visibleOnly, ordered) {
	        // TODO: 구현할 것!
	        return this._columns.columns;
	    };
	    DefaultColumnLayout.prototype.collectDataColumns = function (c1, c2) {
	        // TODO: 구현할 것!
	        return this._columns.columns;
	    };
	    DefaultColumnLayout.prototype._columnsChanged = function (column) {
	        _super.prototype._columnsChanged.call(this, column);
	    };
	    return DefaultColumnLayout;
	}(GridColumnLayout));
	exports.DefaultColumnLayout = DefaultColumnLayout;
	var ColumnLayout = /** @class */ (function (_super) {
	    __extends(ColumnLayout, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnLayout() {
	        return _super.call(this) || this;
	    }
	    ColumnLayout.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    return ColumnLayout;
	}(EventAware_1.EventAware));
	exports.ColumnLayout = ColumnLayout;
	});

	unwrapExports(ColumnLayout_1);
	var ColumnLayout_2 = ColumnLayout_1.GridColumnLayout;
	var ColumnLayout_3 = ColumnLayout_1.DefaultColumnLayout;
	var ColumnLayout_4 = ColumnLayout_1.ColumnLayout;

	var SummaryRuntimes = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// SummaryExpressionRuntime.ts
	// 2019. 08. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var SummaryExpressionRuntime = /** @class */ (function (_super) {
	    __extends(SummaryExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SummaryExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    SummaryExpressionRuntime.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SummaryExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (SummaryExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return SummaryExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    SummaryExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case SummaryExpressionRuntime.ID_COUNT:
	                return this._getCount();
	            case SummaryExpressionRuntime.ID_SUM:
	                return this._getSum();
	            case SummaryExpressionRuntime.ID_MAX:
	                return this._getMax();
	            case SummaryExpressionRuntime.ID_MIN:
	                return this._getMin();
	            case SummaryExpressionRuntime.ID_AVG:
	                return this._getAvg();
	            case SummaryExpressionRuntime.ID_VAR:
	                return this._getVar();
	            case SummaryExpressionRuntime.ID_VARP:
	                return this._getVarp();
	            case SummaryExpressionRuntime.ID_STDEV:
	                return this._getStdev();
	            case SummaryExpressionRuntime.ID_STDEVP:
	                return this._getStdevp();
	            case SummaryExpressionRuntime.ID_DCOUNT:
	                return this._getDataCount();
	            case SummaryExpressionRuntime.ID_DSUM:
	                return this._getDataSum();
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    SummaryExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    SummaryExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    SummaryExpressionRuntime.ID_COUNT = 0;
	    SummaryExpressionRuntime.ID_SUM = 1;
	    SummaryExpressionRuntime.ID_MAX = 2;
	    SummaryExpressionRuntime.ID_MIN = 3;
	    SummaryExpressionRuntime.ID_AVG = 4;
	    SummaryExpressionRuntime.ID_VAR = 5;
	    SummaryExpressionRuntime.ID_VARP = 6;
	    SummaryExpressionRuntime.ID_STDEV = 7;
	    SummaryExpressionRuntime.ID_STDEVP = 8;
	    SummaryExpressionRuntime.ID_DCOUNT = 9;
	    SummaryExpressionRuntime.ID_DSUM = 10;
	    SummaryExpressionRuntime.IDENTS = {
	        count: SummaryExpressionRuntime.ID_COUNT,
	        sum: SummaryExpressionRuntime.ID_SUM,
	        max: SummaryExpressionRuntime.ID_MAX,
	        min: SummaryExpressionRuntime.ID_MIN,
	        avg: SummaryExpressionRuntime.ID_AVG,
	        "var": SummaryExpressionRuntime.ID_VAR,
	        varp: SummaryExpressionRuntime.ID_VARP,
	        stdev: SummaryExpressionRuntime.ID_STDEV,
	        stdevp: SummaryExpressionRuntime.ID_STDEVP,
	        dcount: SummaryExpressionRuntime.ID_DCOUNT,
	        dsum: SummaryExpressionRuntime.ID_DSUM
	    };
	    return SummaryExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.SummaryExpressionRuntime = SummaryExpressionRuntime;
	var ColumnSummaryRuntime = /** @class */ (function (_super) {
	    __extends(ColumnSummaryRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnSummaryRuntime() {
	        return _super.call(this) || this;
	    }
	    ColumnSummaryRuntime.prototype.dispose = function () {
	        this._grid = null;
	        this._ds = null;
	        this._column = null;
	        this._summarizer = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnSummaryRuntime.prototype.setColumn = function (column, summarizer) {
	        this._column = column;
	        this._grid = column.grid;
	        this._ds = this._grid.dataSource;
	        this._fieldCount = this._ds.fieldCount;
	        this._summarizer = summarizer;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnSummaryRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (SummaryExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return SummaryExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    ColumnSummaryRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._summarizer) {
	            if (index < 0 || index >= this._fieldCount) {
	                throw new Expression.ExpressionEvaluationError("Data field index out of bounds: " + index);
	            }
	            switch (idKey) {
	                case SummaryExpressionRuntime.ID_SUM:
	                    return this._summarizer.getSum(index);
	                case SummaryExpressionRuntime.ID_COUNT:
	                    return this._summarizer.getCount(index);
	                case SummaryExpressionRuntime.ID_MAX:
	                    return this._summarizer.getMax(index);
	                case SummaryExpressionRuntime.ID_MIN:
	                    return this._summarizer.getMin(index);
	                case SummaryExpressionRuntime.ID_AVG:
	                    return this._summarizer.getAvg(index);
	                case SummaryExpressionRuntime.ID_VAR:
	                    return this._summarizer.getVar(index);
	                case SummaryExpressionRuntime.ID_VARP:
	                    return this._summarizer.getVarp(index);
	                case SummaryExpressionRuntime.ID_STDEV:
	                    return this._summarizer.getStdev(index);
	                case SummaryExpressionRuntime.ID_STDEVP:
	                    return this._summarizer.getStdevp(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            switch (idKey) {
	                case SummaryExpressionRuntime.ID_SUM:
	                case SummaryExpressionRuntime.ID_COUNT:
	                    return 0;
	                case SummaryExpressionRuntime.ID_MAX:
	                case SummaryExpressionRuntime.ID_MIN:
	                case SummaryExpressionRuntime.ID_AVG:
	                case SummaryExpressionRuntime.ID_VAR:
	                case SummaryExpressionRuntime.ID_VARP:
	                case SummaryExpressionRuntime.ID_STDEV:
	                case SummaryExpressionRuntime.ID_STDEVP:
	                    return NaN;
	            }
	            return undefined;
	        }
	    };
	    ColumnSummaryRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (this._summarizer && this._ds) {
	            var idx = capitalized ? this._ds.getFieldIndexC(index) : this._ds.getFieldIndex(index);
	            if (idx < 0 || idx >= this._fieldCount) {
	                throw new Expression.ExpressionEvaluationError("Data field index out of bounds: " + idx);
	            }
	            switch (idKey) {
	                case SummaryExpressionRuntime.ID_SUM:
	                    return this._summarizer.getSum(idx);
	                case SummaryExpressionRuntime.ID_COUNT:
	                    return this._summarizer.getCount(idx);
	                case SummaryExpressionRuntime.ID_MAX:
	                    return this._summarizer.getMax(idx);
	                case SummaryExpressionRuntime.ID_MIN:
	                    return this._summarizer.getMin(idx);
	                case SummaryExpressionRuntime.ID_AVG:
	                    return this._summarizer.getAvg(idx);
	                case SummaryExpressionRuntime.ID_VAR:
	                    return this._summarizer.getVar(idx);
	                case SummaryExpressionRuntime.ID_VARP:
	                    return this._summarizer.getVarp(idx);
	                case SummaryExpressionRuntime.ID_STDEV:
	                    return this._summarizer.getStdev(idx);
	                case SummaryExpressionRuntime.ID_STDEVP:
	                    return this._summarizer.getStdevp(idx);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            switch (idKey) {
	                case SummaryExpressionRuntime.ID_SUM:
	                case SummaryExpressionRuntime.ID_COUNT:
	                    return 0;
	                case SummaryExpressionRuntime.ID_MAX:
	                case SummaryExpressionRuntime.ID_MIN:
	                case SummaryExpressionRuntime.ID_AVG:
	                case SummaryExpressionRuntime.ID_VAR:
	                case SummaryExpressionRuntime.ID_VARP:
	                case SummaryExpressionRuntime.ID_STDEV:
	                case SummaryExpressionRuntime.ID_STDEVP:
	                    return NaN;
	            }
	            return undefined;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnSummaryRuntime.prototype._getCount = function () {
	        return this._summarizer ? this._summarizer.getCount(this._column.dataIndex) : 0;
	    };
	    ColumnSummaryRuntime.prototype._getSum = function () {
	        return this._summarizer ? this._summarizer.getSum(this._column.dataIndex) : 0;
	    };
	    ColumnSummaryRuntime.prototype._getMax = function () {
	        return this._summarizer ? this._summarizer.getMax(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getMin = function () {
	        return this._summarizer ? this._summarizer.getMin(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getAvg = function () {
	        return this._summarizer ? this._summarizer.getAvg(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getVar = function () {
	        return this._summarizer ? this._summarizer.getVar(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getVarp = function () {
	        return this._summarizer ? this._summarizer.getVarp(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getStdev = function () {
	        return this._summarizer ? this._summarizer.getStdev(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getStdevp = function () {
	        return this._summarizer ? this._summarizer.getStdevp(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getDataCount = function () {
	        return this._summarizer ? this._summarizer.getDataCount(this._column.dataIndex) : NaN;
	    };
	    ColumnSummaryRuntime.prototype._getDataSum = function () {
	        return this._summarizer ? this._summarizer.getDataSum(this._column.dataIndex) : NaN;
	    };
	    return ColumnSummaryRuntime;
	}(SummaryExpressionRuntime));
	exports.ColumnSummaryRuntime = ColumnSummaryRuntime;
	var RowGroupSummaryRuntime = /** @class */ (function (_super) {
	    __extends(RowGroupSummaryRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupSummaryRuntime() {
	        return _super.call(this) || this;
	    }
	    RowGroupSummaryRuntime.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupSummaryRuntime.prototype, "item", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** item */
	        get: function () {
	            return this._item;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupSummaryRuntime.prototype.setItem = function (value) {
	        this._item = value;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupSummaryRuntime.prototype._getCount = function () {
	        return this._item.getNumber(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getSum = function () {
	        return this._item.getSum(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getMax = function () {
	        return this._item.getMax(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getMin = function () {
	        return this._item.getMin(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getAvg = function () {
	        return this._item.getAvg(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getVar = function () {
	        return this._item.getVar(this._column.dataIndex, 1);
	    };
	    RowGroupSummaryRuntime.prototype._getVarp = function () {
	        return this._item.getVar(this._column.dataIndex, 0);
	    };
	    RowGroupSummaryRuntime.prototype._getStdev = function () {
	        return this._item.getStdev(this._column.dataIndex, 1);
	    };
	    RowGroupSummaryRuntime.prototype._getStdevp = function () {
	        return this._item.getStdev(this._column.dataIndex, 0);
	    };
	    RowGroupSummaryRuntime.prototype._getDataCount = function () {
	        return this._item.getDataCount(this._column.dataIndex);
	    };
	    RowGroupSummaryRuntime.prototype._getDataSum = function () {
	        return this._item.getDataSum(this._column.dataIndex);
	    };
	    return RowGroupSummaryRuntime;
	}(ColumnSummaryRuntime));
	exports.RowGroupSummaryRuntime = RowGroupSummaryRuntime;
	});

	unwrapExports(SummaryRuntimes);
	var SummaryRuntimes_1 = SummaryRuntimes.SummaryExpressionRuntime;
	var SummaryRuntimes_2 = SummaryRuntimes.ColumnSummaryRuntime;
	var SummaryRuntimes_3 = SummaryRuntimes.RowGroupSummaryRuntime;

	var ColumnCollection_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ColumnCollection.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var ColumnCollection = /** @class */ (function (_super) {
	    __extends(ColumnCollection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnCollection(owner) {
	        var _this = _super.call(this) || this;
	        _this._columns = [];
	        _this._owner = owner;
	        return _this;
	    }
	    ColumnCollection.prototype.dispose = function () {
	        this._columns = null;
	        this._owner = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ColumnCollection.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner */
	        get: function () {
	            return this._owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnCollection.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._columns.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnCollection.prototype, "columns", {
	        /** columns */
	        get: function () {
	            return this._columns.slice();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnCollection.prototype.getColumn = function (index) {
	        return this._columns[index];
	    };
	    ColumnCollection.prototype.setColumns = function (columns) {
	        var items = this._columns;
	        items.length = 0;
	        if (columns) {
	            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
	                var col = columns_1[_i];
	                var column = this._addColumn(col);
	                if (!column) {
	                    throw new Error("column is undefined");
	                }
	                column["$_owner"] = this;
	            }
	        }
	    };
	    ColumnCollection.prototype.resetIndices = function () {
	        if (this._owner) {
	            for (var i = 0, cnt = this._columns.length; i < cnt; i++) {
	                var col = this._columns[i];
	                col["$_setIndex"](i);
	                col["_resetIndices"](this._owner);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnCollection.prototype._addColumn = function (column, index) {
	        if (index === void 0) { index = -1; }
	        var items = this._columns;
	        if (column && !(column instanceof GridColumn_1.GridColumn)) {
	            column = GridBase_1.GridBase.createColumn(column);
	        }
	        if (column instanceof GridColumn_1.GridColumn) {
	            if (items.indexOf(column) >= 0) {
	                throw new Error("column is already contained");
	            }
	            //column._setParent(this._owner);
	            if (index < 0) {
	                items.push(column);
	            }
	            else {
	                items.splice(index, 0, column);
	            }
	            return column;
	        }
	        return null;
	    };
	    return ColumnCollection;
	}(Base_1.Base));
	exports.ColumnCollection = ColumnCollection;
	});

	unwrapExports(ColumnCollection_1);
	var ColumnCollection_2 = ColumnCollection_1.ColumnCollection;

	var GridPanel_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridPanel.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var GridPanel = /** @class */ (function (_super) {
	    __extends(GridPanel, _super);
	    //private _realHeight = 0;
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridPanel(grid) {
	        var _this = _super.call(this, grid, "panelStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._minHeight = 20;
	        _this._height = 0;
	        _this.visible = true;
	        return _this;
	    }
	    GridPanel.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridPanel.prototype, "minHeight", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** minHeight */
	        get: function () {
	            return this._minHeight;
	        },
	        set: function (value) {
	            if (value != this._minHeight) {
	                this._minHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridPanel.prototype, "height", {
	        /** height */
	        get: function () {
	            return this._height;
	        },
	        set: function (value) {
	            if (value != this._height) {
	                this._height = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GridPanel;
	}(GridObject_1.VisualObject));
	exports.GridPanel = GridPanel;
	});

	unwrapExports(GridPanel_1);
	var GridPanel_2 = GridPanel_1.GridPanel;

	var GridFooter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridFooter.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var FooterExpressionRuntime = /** @class */ (function (_super) {
	    __extends(FooterExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FooterExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    FooterExpressionRuntime.prototype.dispose = function () {
	        this._cell = null;
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    FooterExpressionRuntime.prototype.setCell = function (cell) {
	        this._cell = cell;
	        this._grid = cell.index && cell.index.grid;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FooterExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (FooterExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return FooterExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    FooterExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case FooterExpressionRuntime.ID_VALUE:
	                return this._cell.value;
	            case FooterExpressionRuntime.ID_FIELD:
	                return this._cell.index.dataField;
	            case FooterExpressionRuntime.ID_LEVEL:
	                return this._cell.level;
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    FooterExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        return undefined;
	    };
	    FooterExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        return undefined;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    FooterExpressionRuntime.ID_VALUE = 0;
	    FooterExpressionRuntime.ID_FIELD = 1;
	    FooterExpressionRuntime.ID_LEVEL = 2;
	    FooterExpressionRuntime.IDENTS = {
	        value: FooterExpressionRuntime.ID_VALUE,
	        field: FooterExpressionRuntime.ID_FIELD,
	        level: FooterExpressionRuntime.ID_LEVEL
	    };
	    return FooterExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.FooterExpressionRuntime = FooterExpressionRuntime;
	var FooterCell = /** @class */ (function (_super) {
	    __extends(FooterCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FooterCell() {
	        var _this = _super.call(this, "footerCell") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._footerIndex = 0;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._value = NaN;
	        _this._error = null;
	        _this._errorDetail = null;
	        return _this;
	    }
	    FooterCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(FooterCell.prototype, "footerIndex", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** footerIndex */
	        get: function () {
	            return this._footerIndex;
	        },
	        set: function (value) {
	            if (value != this._footerIndex) {
	                this._footerIndex = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FooterCell.prototype, "level", {
	        /** level */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FooterCell.prototype, "error", {
	        /** error */
	        get: function () {
	            return this._error;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FooterCell.prototype, "errorDetail", {
	        /** errorDetail */
	        get: function () {
	            return this._errorDetail;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    FooterCell.prototype.calculate = function () {
	        var column = this.index.dataColumn;
	        var grid = column ? column.grid : null;
	        this._value = NaN;
	        this._error = null;
	        if (grid && column.dataIndex >= 0) {
	            var footer = column.footer;
	            if (grid.summaryMode != Types.SummaryMode.NONE && footer.expression && grid.rowCount > 0) {
	                try {
	                    var runtime = grid.columnSummaryRuntime;
	                    runtime.setColumn(column, grid.summarizer);
	                    this._value = footer.evaluate(runtime, this._footerIndex);
	                }
	                catch (err) {
	                    this._error = err;
	                    this._errorDetail = err;
	                    //throwDebugError(err);
	                }
	            } /*else if (footer._callback) {
	                this._value = footer._callback(column.proxy(), this._footerIndex, grid.getHandler());
	            }*/
	        }
	    };
	    Object.defineProperty(FooterCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            if (this._error) {
	                return GridCell_1.GridCell.ERROR;
	            }
	            else {
	                var index = this._footerIndex;
	                var s = isNaN(this._value) ? null : String(this._value);
	                var column = void 0;
	                if (!s && (column = this.index.valueColumn)) {
	                    s = column.footer.text;
	                    // if (s instanceof Array) {
	                    // 	if (index >= 0 && s[index]) {
	                    // 		s = s[index];
	                    // 	} else {
	                    // 		s = null;
	                    // 	}
	                    // }
	                }
	                return s;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FooterCell.prototype, "value", {
	        /** value */
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return FooterCell;
	}(GridCell_1.GridCell));
	exports.FooterCell = FooterCell;
	var GridFooter = /** @class */ (function (_super) {
	    __extends(GridFooter, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridFooter(grid) {
	        var _this = _super.call(this, grid, "footerStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._minHeight = 23;
	        _this._height = 0;
	        _this._resizable = false;
	        _this._headText = "Σ";
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        //private _groupStyles: VisualStyles;
	        _this._cell = new FooterCell();
	        _this._runtime = new FooterExpressionRuntime();
	        //this._groupStyles = new VisualStyles(this);
	        _this._runStyles = new VisualStyles_1.VisualStyles(_this, "runFooterStyles", null, false);
	        _this.visible = true;
	        return _this;
	    }
	    GridFooter.prototype.dispose = function () {
	        //this._groupStyles = null;
	        this._runStyles = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridFooter.prototype, "minHeight", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** minHeight */
	        get: function () {
	            return this._minHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._minHeight) {
	                this._minHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridFooter.prototype, "height", {
	        /** height */
	        get: function () {
	            return this._height;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._height) {
	                this._height = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridFooter.prototype, "resizable", {
	        /** resizable */
	        get: function () {
	            return this._resizable;
	        },
	        set: function (value) {
	            if (value != this._resizable) {
	                this._resizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridFooter.prototype, "headText", {
	        /** headText */
	        get: function () {
	            return this._headText;
	        },
	        set: function (value) {
	            if (value != this._headText) {
	                this._headText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridFooter.prototype.getCell = function (index, footerIndex) {
	        if (footerIndex === void 0) { footerIndex = 0; }
	        var cell = this._cell;
	        var column = index.column;
	        cell.setIndex(index);
	        if (footerIndex === undefined) {
	            cell.footerIndex = 0;
	        }
	        else {
	            cell.footerIndex = footerIndex;
	        }
	        cell.calculate();
	        if (column) {
	            var footer = column.footer;
	            var fStyles = footer.styles; // footer.getFooterStyles(footerIndex);
	            /*if (footerIndex != null && this._eachStyles && this._eachStyles[footerIndex]) {
	                fStyles.setParent(this._eachStyles[footerIndex], false);
	            } else*/ {
	                fStyles.setParent(this.styles, false);
	            }
	            var d = footer.dynamicStyles; // footer.getFooterDynamicStyles(footerIndex);
	            if (d && d.count > 0) {
	                var r = this._runStyles;
	                r.clearValues();
	                r.setParent(fStyles);
	                this._runtime.setCell(cell);
	                d.applyInternal(this._runtime, r);
	                cell.styles = r;
	            }
	            else {
	                cell.styles = fStyles;
	            }
	        }
	        return cell;
	    };
	    return GridFooter;
	}(GridObject_1.VisualObject));
	exports.GridFooter = GridFooter;
	});

	unwrapExports(GridFooter_1);
	var GridFooter_2 = GridFooter_1.FooterExpressionRuntime;
	var GridFooter_3 = GridFooter_1.FooterCell;
	var GridFooter_4 = GridFooter_1.GridFooter;

	var GridHeader_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridHeader.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var HeaderSummaryCell = /** @class */ (function (_super) {
	    __extends(HeaderSummaryCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HeaderSummaryCell() {
	        var _this = _super.call(this, "headerSummaryCell") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._value = NaN;
	        _this._error = null;
	        _this._errorDetail = null;
	        return _this;
	    }
	    HeaderSummaryCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(HeaderSummaryCell.prototype, "errorDetail", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._errorDetail;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    HeaderSummaryCell.prototype.calculate = function () {
	        var column = this.index.dataColumn;
	        var grid = column ? column.grid : null;
	        this._value = NaN;
	        this._error = null;
	        if (grid && column.dataIndex >= 0) {
	            var summary = column.header.summary;
	            if (grid.summaryMode != Types.SummaryMode.NONE && summary.expression && grid.rowCount > 0) {
	                try {
	                    var runtime = grid.columnSummaryRuntime;
	                    runtime.setColumn(column, grid.summarizer);
	                    this._value = summary.evaluate(runtime);
	                }
	                catch (err) {
	                    this._error = err;
	                    this._errorDetail = err;
	                    //throwDebugError(err);
	                }
	            } /*else if (summary._callback) {
	                this._value = summary._callback(column.proxy(), grid.getHandler());
	            }*/
	        }
	    };
	    Object.defineProperty(HeaderSummaryCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            if (this._error) {
	                return GridCell_1.GridCell.ERROR;
	            }
	            else {
	                var s = isNaN(this._value) ? null : String(this._value);
	                var column = void 0;
	                if (!s && (column = this.index.valueColumn)) {
	                    s = column.header.summary.text;
	                }
	                return s;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummaryCell.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummaryCell.prototype, "level", {
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummaryCell.prototype, "error", {
	        get: function () {
	            return this._error;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return HeaderSummaryCell;
	}(GridCell_1.GridCell));
	var HeaderSummary = /** @class */ (function (_super) {
	    __extends(HeaderSummary, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HeaderSummary(header) {
	        var _this = _super.call(this, header.owner, "headerSummaryStyles") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._title = null;
	        _this._minHeight = 23;
	        _this._height = 0;
	        _this._resizable = false;
	        _this._header = header;
	        _this._groupStyles = new VisualStyles_1.VisualStyles(_this);
	        _this._headStyles = new VisualStyles_1.VisualStyles(_this);
	        _this._cell = new HeaderSummaryCell();
	        _this._headCell = new GridCell_1.StyledCell(_this);
	        _this._runtime = new GridFooter_1.FooterExpressionRuntime();
	        _this._runStyles = new VisualStyles_1.VisualStyles(_this, "runFooterStyles");
	        _this.visible = false;
	        return _this;
	    }
	    HeaderSummary.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(HeaderSummary.prototype, "title", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** title */
	        get: function () {
	            return this._title;
	        },
	        set: function (value) {
	            if (value != this._title) {
	                this._title = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "groupStyles", {
	        /** groupStyles */
	        get: function () {
	            return this._groupStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "headStyles", {
	        /** headStyles */
	        get: function () {
	            return this._headStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "minHeight", {
	        /** minHeight */
	        get: function () {
	            return this._minHeight;
	        },
	        set: function (value) {
	            if (value != this._minHeight) {
	                this._minHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "height", {
	        /** height */
	        get: function () {
	            return this._height;
	        },
	        set: function (value) {
	            if (value != this._height) {
	                this._height = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "resizable", {
	        /** resizable */
	        get: function () {
	            return this._resizable;
	        },
	        set: function (value) {
	            if (value != this._resizable) {
	                this._resizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderSummary.prototype, "header", {
	        /** header */
	        get: function () {
	            return this._header;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    HeaderSummary.prototype.getCell = function (index) {
	        var cell = this._cell;
	        var column = index.column;
	        cell.setIndex(index);
	        cell.calculate();
	        var summary = column.header.summary;
	        var d = summary.dynamicStyles;
	        if (d && d.count > 0) {
	            var r = this._runStyles;
	            r.clearValues();
	            r.setParent(summary.styles);
	            this._runtime.setCell(cell);
	            //d.applyInternal(this._runtime, r);
	            cell.styles = r;
	        }
	        else {
	            cell.styles = summary.styles;
	        }
	        return cell;
	    };
	    HeaderSummary.prototype.getHeadCell = function () {
	        var cell = this._headCell;
	        cell.styles = this._headStyles;
	        return cell;
	    };
	    return HeaderSummary;
	}(GridObject_1.VisualObject));
	exports.HeaderSummary = HeaderSummary;
	var HeaderCell = /** @class */ (function (_super) {
	    __extends(HeaderCell, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HeaderCell() {
	        var _this = _super.call(this, "headerCell") || this;
	        _this._subTextGap = 1;
	        _this._subLocation = Types.SubTextLocation.LOWER;
	        _this._itemOffset = 2;
	        _this._itemGap = 2;
	        _this._imageIndex = -1;
	        _this._checkLocation = Types.ColumnHeaderItemLocation.NONE;
	        _this._imageLocation = Types.ColumnHeaderItemLocation.NONE;
	        _this._checked = false;
	        _this._showTooltip = true;
	        return _this;
	    }
	    HeaderCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(HeaderCell.prototype, "subStyles", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** subStyles */
	        get: function () {
	            return this._subStyles;
	        },
	        set: function (value) {
	            this._subStyles = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            this._text = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "subText", {
	        /** subText */
	        get: function () {
	            return this._subText;
	        },
	        set: function (value) {
	            this._subText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "subTextGap", {
	        /** subTextGap */
	        get: function () {
	            return this._subTextGap;
	        },
	        set: function (value) {
	            this._subTextGap = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "subLocation", {
	        /** subLocation */
	        get: function () {
	            return this._subLocation;
	        },
	        set: function (value) {
	            this._subLocation = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "itemOffset", {
	        /** itemOffset */
	        get: function () {
	            return this._itemOffset;
	        },
	        set: function (value) {
	            this._itemOffset = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "itemGap", {
	        /** itemGap */
	        get: function () {
	            return this._itemGap;
	        },
	        set: function (value) {
	            this._itemGap = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "imageList", {
	        /** imageList */
	        get: function () {
	            return this._imageList;
	        },
	        set: function (value) {
	            this._imageList = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "imageIndex", {
	        /** imageIndex */
	        get: function () {
	            return this._imageIndex;
	        },
	        set: function (value) {
	            this._imageIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "imageUrl", {
	        /** imageUrl */
	        get: function () {
	            return this._imageUrl;
	        },
	        set: function (value) {
	            this._imageUrl = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "checkLocation", {
	        /** checkLocation */
	        get: function () {
	            return this._checkLocation;
	        },
	        set: function (value) {
	            this._checkLocation = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "imageLocation", {
	        /** imageLocation */
	        get: function () {
	            return this._imageLocation;
	        },
	        set: function (value) {
	            this._imageLocation = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "checked", {
	        /** checked */
	        get: function () {
	            return this._checked;
	        },
	        set: function (value) {
	            this._checked = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "showTooltip", {
	        /** showTooltip */
	        get: function () {
	            return this._showTooltip;
	        },
	        set: function (value) {
	            this._showTooltip = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCell.prototype, "tooltip", {
	        /** tooltip */
	        get: function () {
	            return this._tooltip;
	        },
	        set: function (value) {
	            this._tooltip = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return HeaderCell;
	}(GridCell_1.GridCell));
	exports.HeaderCell = HeaderCell;
	var GridHeader = /** @class */ (function (_super) {
	    __extends(GridHeader, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridHeader(grid) {
	        var _this = _super.call(this, grid, "headerStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._minHeight = 23;
	        _this._height = 0;
	        _this._resizable = false;
	        _this._sortable = true;
	        _this._filterable = true;
	        _this._subTextLocation = Types.SubTextLocation.LOWER;
	        _this._subTextGap = 1;
	        _this._itemOffset = 2;
	        _this._itemGap = 2;
	        _this._showSelection = false;
	        _this._showTooltip = false;
	        _this._cell = new HeaderCell();
	        _this._summary = new HeaderSummary(_this);
	        _this._groupStyles = new VisualStyles_1.VisualStyles(_this, "headerGroupStyles");
	        _this._subStyles = new VisualStyles_1.VisualStyles(_this, "headerSubSytles");
	        _this.visible = true;
	        return _this;
	    }
	    GridHeader.prototype.dispose = function () {
	        this._summary = null;
	        this._groupStyles = null;
	        this._subStyles = null;
	        this._cell = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridHeader.prototype, "summary", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** summary */
	        get: function () {
	            return this._summary;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "groupStyles", {
	        /** groupStyles */
	        get: function () {
	            return this._groupStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "subStyles", {
	        /** subStyles */
	        get: function () {
	            return this._subStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "minHeight", {
	        /** minHeight */
	        get: function () {
	            return this._minHeight;
	        },
	        set: function (value) {
	            if (value != this._minHeight) {
	                this._minHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "height", {
	        /** height */
	        get: function () {
	            return this._height;
	        },
	        set: function (value) {
	            if (value != this._height) {
	                this._height = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "resizable", {
	        /** resizable */
	        get: function () {
	            return this._resizable;
	        },
	        set: function (value) {
	            if (value != this._resizable) {
	                this._resizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "sortable", {
	        /** sortable */
	        get: function () {
	            return this._sortable;
	        },
	        set: function (value) {
	            if (value != this._sortable) {
	                this._sortable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "filterable", {
	        /** filterable */
	        get: function () {
	            return this._filterable;
	        },
	        set: function (value) {
	            if (value != this._filterable) {
	                this._filterable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "subTextLocation", {
	        /** subTextLocation */
	        get: function () {
	            return this._subTextLocation;
	        },
	        set: function (value) {
	            value = value || Types.SubTextLocation.LOWER;
	            if (value != this._subTextLocation) {
	                this._subTextLocation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "subTextGap", {
	        /** subTextGap */
	        get: function () {
	            return this._subTextGap;
	        },
	        set: function (value) {
	            if (value != this._subTextGap) {
	                this._subTextGap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "itemOffset", {
	        /** itemOffset */
	        get: function () {
	            return this._itemOffset;
	        },
	        set: function (value) {
	            if (value != this._itemOffset) {
	                this._itemOffset = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "itemGap", {
	        /** itemGap */
	        get: function () {
	            return this._itemGap;
	        },
	        set: function (value) {
	            if (value != this._itemGap) {
	                this._itemGap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "imageList", {
	        /** imageList */
	        get: function () {
	            return this._imageList;
	        },
	        set: function (value) {
	            if (value != this._imageList) {
	                this._imageList = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "showTooltip", {
	        /** showTooltip */
	        get: function () {
	            return this._showTooltip;
	        },
	        set: function (value) {
	            if (value != this._showTooltip) {
	                this._showTooltip = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeader.prototype, "showSelection", {
	        /**
	         * showSelection.
	         * true면 data 선택 영역에 맞춰 관련된 셀들에 선택 상태를 표시한다.
	         */
	        get: function () {
	            return this._showSelection;
	        },
	        set: function (value) {
	            if (value != this._showSelection) {
	                this._showSelection = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridHeader.prototype.setSummary = function (value) {
	        if (value !== this._summary) {
	            this._summary.assignFrom(value);
	        }
	    };
	    GridHeader.prototype.setGroupStyles = function (value) {
	        if (value !== this._groupStyles) {
	            this._groupStyles.extend(value);
	        }
	    };
	    GridHeader.prototype.setSubStyles = function (value) {
	        if (value !== this._subStyles) {
	            this._subStyles.extend(value);
	        }
	    };
	    GridHeader.prototype.getCell = function (index) {
	        var cell = this._cell;
	        var column = index.column;
	        if (column) {
	            var header = column.header;
	            var v = void 0;
	            cell.setIndex(index);
	            cell.styles = header.styles;
	            cell.subStyles = header.subStyles;
	            cell.text = header.displayText;
	            cell.subText = header.subText;
	            cell.subLocation = !(v = header.subTextLocation) ? this._subTextLocation : v;
	            cell.subTextGap = (v = header.subTextGap) === undefined ? this._subTextGap : v;
	            cell.itemOffset = (v = header.itemOffset) === undefined ? this._itemOffset : v;
	            cell.itemGap = (v = header.itemGap) === undefined ? this._itemGap : v;
	            cell.imageList = this._imageList;
	            cell.imageIndex = header.imageIndex;
	            cell.imageUrl = header.imageUrl;
	            cell.checkLocation = header.checkLocation;
	            cell.imageLocation = header.imageLocation;
	            cell.checked = column.checked;
	            cell.showTooltip = header.showTooltip;
	            cell.tooltip = header.tooltip;
	        }
	        return cell;
	    };
	    // getGroupingCell(column): HeaderCell  {
	    // 	var cell = this._cell;
	    //     var header = column.header();
	    //     var v;
	    // 	cell.setIndex(this._grid.getIndex(-1, column));
	    // 	cell.setStyles(this._grid.rowGroup().panelStyles());
	    //     cell.setSubStyles(header.subStyles());
	    //     cell.setText(header.displayText());
	    //     cell.setSubText(header.subText());
	    //     cell.setSubLocation(!(v = header.subTextLocation()) ? this._subTextLocation : v);
	    //     cell.setSubTextGap((v = header.subTextGap()) === undefined ? this._subTextGap : v);
	    //     cell.setItemOffset((v = header.itemOffset()) === undefined ? this._itemOffset : v);
	    //     cell.setItemGap((v = header.itemGap()) === undefined ? this._itemGap : v);
	    //     cell.setImageList(this._imageList);
	    //     cell.setImageIndex(header.imageIndex());
	    //     cell.setImageUrl(header.imageUrl());
	    //     cell.setCheckLocation(header.checkLocation());
	    //     cell.setImageLocation(header.imageLocation());
	    //     cell.setChecked(column.isChecked());
	    // 	cell.setShowTooltip(header.isShowTooltip());
	    // 	cell.setTooltip(header.tooltip());
	    // 	return cell;
	    // }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridHeader.prototype.clean = function () {
	        _super.prototype.clean.call(this);
	        this._summary.clean();
	    };
	    return GridHeader;
	}(GridObject_1.VisualObject));
	exports.GridHeader = GridHeader;
	});

	unwrapExports(GridHeader_1);
	var GridHeader_2 = GridHeader_1.HeaderSummary;
	var GridHeader_3 = GridHeader_1.HeaderCell;
	var GridHeader_4 = GridHeader_1.GridHeader;

	var RowIndicator_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowIndicator.ts
	// 2019. 07. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var IndicatorValue;
	(function (IndicatorValue) {
	    IndicatorValue["NONE"] = "none";
	    IndicatorValue["INDEX"] = "index";
	    IndicatorValue["ROW"] = "row";
	})(IndicatorValue = exports.IndicatorValue || (exports.IndicatorValue = {}));
	var StateMark;
	(function (StateMark) {
	    StateMark["DEFAULT"] = "default";
	    StateMark["TEXT"] = "text";
	    StateMark["NONE"] = "none";
	    StateMark["IMAGE"] = "image";
	})(StateMark = exports.StateMark || (exports.StateMark = {}));
	var RowIndicatorCell = /** @class */ (function (_super) {
	    __extends(RowIndicatorCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowIndicatorCell(indicator) {
	        var _this = _super.call(this, "indicatorCell") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._itemState = GridItem_1.ItemState.NORMAL;
	        _this._indicator = indicator;
	        return _this;
	    }
	    RowIndicatorCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowIndicatorCell.prototype, "indicator", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** indicator */
	        get: function () {
	            return this._indicator;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicatorCell.prototype, "itemState", {
	        /** itemState */
	        get: function () {
	            return this._itemState;
	        },
	        set: function (value) {
	            if (value != this._itemState) {
	                this._itemState = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicatorCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            var indicator = this._indicator;
	            var index = this.index;
	            var item = index.item;
	            var s = "";
	            var r;
	            if (item && item.itemState == GridItem_1.ItemState.NORMAL) {
	                switch (indicator.displayValue) {
	                    case IndicatorValue.INDEX:
	                        r = indicator.owner.getIndicatorIndex(item);
	                        if (r >= 0) {
	                            r += indicator.indexOffset;
	                            if (!indicator.zeroBase) {
	                                r++;
	                            }
	                            s = String(r);
	                        }
	                        break;
	                    case IndicatorValue.ROW:
	                        r = index.dataRow;
	                        if (r >= 0) {
	                            r += indicator.rowOffset;
	                            if (!indicator.zeroBase) {
	                                r++;
	                            }
	                            s = String(r);
	                        }
	                        break;
	                }
	            }
	            return s;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicatorCell.prototype, "value", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RowIndicatorCell;
	}(GridCell_1.GridCell));
	exports.RowIndicatorCell = RowIndicatorCell;
	var RowIndicator = /** @class */ (function (_super) {
	    __extends(RowIndicator, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowIndicator(grid) {
	        var _this = _super.call(this, grid, "indicatorStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._displayValue = IndicatorValue.INDEX;
	        _this._zeroBase = false;
	        _this._indexOffset = 0;
	        _this._rowOffset = 0;
	        _this._minWidth = 40;
	        _this._maxWidth = 0;
	        _this._width = 0;
	        _this._selectable = true;
	        _this._mark = StateMark.DEFAULT;
	        _this._showFocus = true;
	        _this._showSelection = false;
	        _this._stateImages = {};
	        _this._cell = new RowIndicatorCell(_this);
	        _this.headText = "No.";
	        return _this;
	    }
	    RowIndicator.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowIndicator.prototype, "displayValue", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** displayValue */
	        get: function () {
	            return this._displayValue;
	        },
	        set: function (value) {
	            if (value != this._displayValue) {
	                this._displayValue = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "zeroBase", {
	        /** zeroBase */
	        get: function () {
	            return this._zeroBase;
	        },
	        set: function (value) {
	            if (value != this._zeroBase) {
	                this._zeroBase = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "indexOffset", {
	        /** indexOffset */
	        get: function () {
	            return this._indexOffset;
	        },
	        set: function (value) {
	            if (value != this._indexOffset) {
	                this._indexOffset = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "rowOffset", {
	        /** rowOffset */
	        get: function () {
	            return this._rowOffset;
	        },
	        set: function (value) {
	            if (value != this._rowOffset) {
	                this._rowOffset = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "minWidth", {
	        /** minWidth */
	        get: function () {
	            return this._minWidth;
	        },
	        set: function (value) {
	            if (value != this._minWidth) {
	                this._minWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "maxWidth", {
	        /** maxWidth */
	        get: function () {
	            return this._maxWidth;
	        },
	        set: function (value) {
	            if (value != this._maxWidth) {
	                this._maxWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "width", {
	        /** width */
	        get: function () {
	            return this._width;
	        },
	        set: function (value) {
	            if (value != this._width) {
	                this._width = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "selectable", {
	        /** selectable */
	        get: function () {
	            return this._selectable;
	        },
	        set: function (value) {
	            if (value != this._selectable) {
	                this._selectable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "mark", {
	        /** mark */
	        get: function () {
	            return this._mark;
	        },
	        set: function (value) {
	            if (value != this._mark) {
	                this._mark = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "stateImages", {
	        /** stateImages */
	        get: function () {
	            return this._stateImages;
	        },
	        set: function (value) {
	            if (value != this._stateImages) {
	                for (var state in value) {
	                    this._stateImages[state] = value[state];
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "showFocus", {
	        /**
	         * showFocus.
	         * true면 foucsed 행에 해당하는 셀을 "rg-rowindicator-focus" 스타일로 표시한다.
	         */
	        get: function () {
	            return this._showFocus;
	        },
	        set: function (value) {
	            if (value != this._showFocus) {
	                this._showFocus = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowIndicator.prototype, "showSelection", {
	        /**
	         * showSelection.
	         * true면 data 선택 영역에 맞춰 관련된 셀들을 "rg-rowindicator-select" 스타일로 표시한다.
	         */
	        get: function () {
	            return this._showSelection;
	        },
	        set: function (value) {
	            if (value != this._showSelection) {
	                this._showSelection = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowIndicator.prototype.getCell = function (index) {
	        var cell = this._cell;
	        cell.setIndex(index);
	        cell.styles = this.styles;
	        var item = index.item;
	        if (item) {
	            var state = index.item.itemState;
	            if (state == GridItem_1.ItemState.NORMAL && this._grid.focusedIndex.itemIndex == index.itemIndex) {
	                state = GridItem_1.ItemState.FOCUSED;
	            }
	            cell.itemState = state;
	        }
	        return cell;
	    };
	    return RowIndicator;
	}(GridObject_1.SectionObject));
	exports.RowIndicator = RowIndicator;
	});

	unwrapExports(RowIndicator_1);
	var RowIndicator_2 = RowIndicator_1.IndicatorValue;
	var RowIndicator_3 = RowIndicator_1.StateMark;
	var RowIndicator_4 = RowIndicator_1.RowIndicatorCell;
	var RowIndicator_5 = RowIndicator_1.RowIndicator;

	var StateBar_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowIndicator.ts
	// 2019. 07. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var StateBarCell = /** @class */ (function (_super) {
	    __extends(StateBarCell, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function StateBarCell() {
	        return _super.call(this, "stateBarCell") || this;
	    }
	    StateBarCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(StateBarCell.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            switch (this.item.rowState) {
	                case RowState_1.RowState.CREATED:
	                    return "C";
	                case RowState_1.RowState.UPDATED:
	                    return "U";
	                case RowState_1.RowState.DELETED:
	                    return "D";
	                case RowState_1.RowState.CREATE_AND_DELETED:
	                    return "CD";
	                default:
	                    return "";
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StateBarCell.prototype, "value", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return StateBarCell;
	}(GridCell_1.GridCell));
	exports.StateBarCell = StateBarCell;
	var StateBar = /** @class */ (function (_super) {
	    __extends(StateBar, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function StateBar(grid) {
	        var _this = _super.call(this, grid, "stateBarStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._width = 20;
	        _this._mark = RowIndicator_1.StateMark.DEFAULT;
	        _this._stateTexts = {};
	        _this._stateStyles = {};
	        _this._stateImages = {};
	        _this._stateTexts[RowState_1.RowState.CREATED] = "C";
	        _this._stateTexts[RowState_1.RowState.UPDATED] = "U";
	        _this._stateTexts[RowState_1.RowState.DELETED] = "D";
	        _this._stateTexts[RowState_1.RowState.CREATE_AND_DELETED] = "X";
	        _this._stateStyles[RowState_1.RowState.CREATED] = null;
	        _this._stateStyles[RowState_1.RowState.UPDATED] = null;
	        _this._stateStyles[RowState_1.RowState.DELETED] = null;
	        _this._stateStyles[RowState_1.RowState.CREATE_AND_DELETED] = null;
	        _this._cell = new StateBarCell();
	        return _this;
	    }
	    StateBar.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(StateBar.prototype, "width", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** width */
	        get: function () {
	            return this._width;
	        },
	        set: function (value) {
	            if (value != this._width) {
	                this._width = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StateBar.prototype, "mark", {
	        /** mark */
	        get: function () {
	            return this._mark;
	        },
	        set: function (value) {
	            if (value != this._mark) {
	                this._mark = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StateBar.prototype, "stateTexts", {
	        /** stateTexts */
	        get: function () {
	            return this._stateTexts;
	        },
	        set: function (value) {
	            if (value != this._stateTexts) {
	                for (var state in value) {
	                    if (this._stateTexts.hasOwnProperty(state)) {
	                        this._stateTexts[state] = value[state];
	                    }
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StateBar.prototype, "stateStyles", {
	        /** stateStyles */
	        get: function () {
	            return this._stateStyles;
	        },
	        set: function (value) {
	            if (value != this._stateStyles) {
	                for (var state in value) {
	                    if (this._stateStyles.hasOwnProperty(state)) {
	                        if (value[state]) {
	                            var st = this._stateStyles[state] || new VisualStyles_1.VisualStyles(this);
	                            st.copy(this.styles);
	                            st.extend(value[state], false);
	                            this._stateStyles[state] = st;
	                        }
	                        else {
	                            this._stateStyles[state] = null;
	                        }
	                    }
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StateBar.prototype, "stateImages", {
	        /** stateImages */
	        get: function () {
	            return this._stateImages;
	        },
	        set: function (value) {
	            if (value != this._stateImages) {
	                for (var state in value) {
	                    this._stateImages[state] = value[state];
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    StateBar.prototype.getCell = function (index) {
	        var cell = this._cell;
	        cell.setIndex(index);
	        cell.styles = this.styles;
	        return cell;
	    };
	    return StateBar;
	}(GridObject_1.SectionObject));
	exports.StateBar = StateBar;
	});

	unwrapExports(StateBar_1);
	var StateBar_2 = StateBar_1.StateBarCell;
	var StateBar_3 = StateBar_1.StateBar;

	var CheckBar_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CheckBar.ts
	// 2019. 07. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });






	var CheckBarExpressionRuntime = /** @class */ (function (_super) {
	    __extends(CheckBarExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckBarExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    CheckBarExpressionRuntime.prototype.dispose = function () {
	        this._cell = null;
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CheckBarExpressionRuntime.prototype.setCell = function (cell) {
	        this._cell = cell;
	        this._grid = cell.index && cell.index.grid;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CheckBarExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (CheckBarExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return CheckBarExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    CheckBarExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case CheckBarExpressionRuntime.ID_VALUE:
	                return this._cell.item.checked;
	            case CheckBarExpressionRuntime.ID_CHECKED:
	                return this._cell.item.checked;
	            case CheckBarExpressionRuntime.ID_CHECKABLE:
	                return this._cell.item.checkable;
	            case CheckBarExpressionRuntime.ID_ROW:
	                return this._cell.item.index;
	            case CheckBarExpressionRuntime.ID_DATA_ROW:
	                return this._cell.item.dataRow;
	            case CheckBarExpressionRuntime.ID_STATE:
	                switch (this._cell.item.rowState) {
	                    case RowState_1.RowState.CREATED:
	                        return "c";
	                    case RowState_1.RowState.UPDATED:
	                        return "u";
	                    case RowState_1.RowState.DELETED:
	                        return "d";
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        return "x";
	                }
	                return undefined;
	        }
	        //if ($_debug) debugger;
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    CheckBarExpressionRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._cell) {
	            var item = this._cell.item;
	            var ds = item && item.dataSource;
	            var fieldCount = ds.fieldCount;
	            if (idKey == CheckBarExpressionRuntime.ID_VALUE || idKey == CheckBarExpressionRuntime.ID_VALUES) {
	                if (index < 0 || index >= fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    CheckBarExpressionRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == CheckBarExpressionRuntime.ID_VALUE || idKey == CheckBarExpressionRuntime.ID_VALUES) {
	            var item = this._cell.item;
	            var ds = item && item.dataSource;
	            var fieldCount = ds.fieldCount;
	            if (ds) {
	                var idx = capitalized ? ds.getFieldIndexC(index) : ds.getFieldIndex(index);
	                if (idx < 0 || idx >= fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    CheckBarExpressionRuntime.ID_VALUE = 0;
	    CheckBarExpressionRuntime.ID_VALUES = 1;
	    CheckBarExpressionRuntime.ID_CHECKED = 2;
	    CheckBarExpressionRuntime.ID_CHECKABLE = 3;
	    CheckBarExpressionRuntime.ID_ROW = 4;
	    CheckBarExpressionRuntime.ID_DATA_ROW = 5;
	    CheckBarExpressionRuntime.ID_STATE = 6;
	    CheckBarExpressionRuntime.IDENTS = {
	        value: CheckBarExpressionRuntime.ID_VALUE,
	        values: CheckBarExpressionRuntime.ID_VALUES,
	        checked: CheckBarExpressionRuntime.ID_CHECKED,
	        checkable: CheckBarExpressionRuntime.ID_CHECKABLE,
	        row: CheckBarExpressionRuntime.ID_ROW,
	        datarow: CheckBarExpressionRuntime.ID_DATA_ROW,
	        state: CheckBarExpressionRuntime.ID_STATE
	    };
	    return CheckBarExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.CheckBarExpressionRuntime = CheckBarExpressionRuntime;
	var CheckBarCell = /** @class */ (function (_super) {
	    __extends(CheckBarCell, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckBarCell() {
	        return _super.call(this, "checkBarCell") || this;
	    }
	    CheckBarCell.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CheckBarCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return String(this.index.dataRow);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBarCell.prototype, "value", {
	        get: function () {
	            return this.item.checked;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CheckBarCell;
	}(GridCell_1.GridCell));
	exports.CheckBarCell = CheckBarCell;
	var CheckBar = /** @class */ (function (_super) {
	    __extends(CheckBar, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckBar(grid) {
	        var _this = _super.call(this, grid, "checkBarStyles") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._width = 20;
	        _this._exclusive = false;
	        _this._showAll = true;
	        _this._showGroup = true;
	        _this._visibleOnly = false;
	        _this._checkableOnly = true;
	        _this._checkableExpression = null;
	        _this._headCheckImageUrl = null;
	        _this._headUnCheckImageUrl = null;
	        _this._checkImageUrl = null;
	        _this._unCheckImageUrl = null;
	        _this._drawCheckBox = true;
	        _this._radioImageUrl = null;
	        _this._syncHeadCheck = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cell = new CheckBarCell();
	        _this._runtime = new CheckBarExpressionRuntime();
	        _this._allChecked = false;
	        _this._runStyles = new VisualStyles_1.VisualStyles(_this, "runCheckBarStyles", null, false);
	        _this._dynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        return _this;
	    }
	    CheckBar.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CheckBar.prototype, "capitalIndexers", {
	        //-------------------------------------------------------------------------
	        // DynamicStyleOwner
	        //-------------------------------------------------------------------------
	        get: function () {
	            return ["value", "values"];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "width", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** width */
	        get: function () {
	            return this._width;
	        },
	        set: function (value) {
	            if (value != this._width) {
	                this._width = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "exclusive", {
	        /** exclusive */
	        get: function () {
	            return this._exclusive;
	        },
	        set: function (value) {
	            if (value != this._exclusive) {
	                this._exclusive = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "showAll", {
	        /** showAll */
	        get: function () {
	            return this._showAll;
	        },
	        set: function (value) {
	            if (value != this._showAll) {
	                this._showAll = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "showGroup", {
	        /** showGroup */
	        get: function () {
	            return this._showGroup;
	        },
	        set: function (value) {
	            if (value != this._showGroup) {
	                this._showGroup = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "visibleOnly", {
	        /** visibleOnly */
	        get: function () {
	            return this._visibleOnly;
	        },
	        set: function (value) {
	            if (value != this._visibleOnly) {
	                this._visibleOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "checkableOnly", {
	        /** checkableOnly */
	        get: function () {
	            return this._checkableOnly;
	        },
	        set: function (value) {
	            if (value != this._checkableOnly) {
	                this._checkableOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "checkableExpression", {
	        /** checkableExpression */
	        get: function () {
	            return this._checkableExpression;
	        },
	        set: function (value) {
	            if (value != this._checkableExpression) {
	                this._checkableExpression = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "dynamicStyles", {
	        /** dynamicStyles */
	        get: function () {
	            return this._dynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "headCheckImageUrl", {
	        /** headCheckImageUrl */
	        get: function () {
	            return this._headCheckImageUrl;
	        },
	        set: function (value) {
	            if (value != this._headCheckImageUrl) {
	                this._headCheckImageUrl = value;
	                value && this._grid.getImage(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "headUnCheckImageUrl", {
	        /** headUnCheckImageUrl */
	        get: function () {
	            return this._headUnCheckImageUrl;
	        },
	        set: function (value) {
	            if (value != this._headUnCheckImageUrl) {
	                this._headUnCheckImageUrl = value;
	                value && this._grid.getImage(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "checkImageUrl", {
	        /** checkImageUrl */
	        get: function () {
	            return this._checkImageUrl;
	        },
	        set: function (value) {
	            if (value != this._checkImageUrl) {
	                this._checkImageUrl = value;
	                value && this._grid.getImage(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "unCheckImageUrl", {
	        /** unCheckImageUrl */
	        get: function () {
	            return this._unCheckImageUrl;
	        },
	        set: function (value) {
	            if (value != this._unCheckImageUrl) {
	                this._unCheckImageUrl = value;
	                value && this._grid.getImage(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "drawCheckBox", {
	        /** drawCheckBox */
	        get: function () {
	            return this._drawCheckBox;
	        },
	        set: function (value) {
	            if (value != this._drawCheckBox) {
	                this._drawCheckBox = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "radioImageUrl", {
	        /** radioImageUrl */
	        get: function () {
	            return this._radioImageUrl;
	        },
	        set: function (value) {
	            if (value != this._radioImageUrl) {
	                this._radioImageUrl = value;
	                value && this._grid.getImage(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBar.prototype, "syncHeadCheck", {
	        /** syncHeadCheck */
	        get: function () {
	            return this._syncHeadCheck;
	        },
	        set: function (value) {
	            if (value != this._syncHeadCheck) {
	                this._syncHeadCheck = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CheckBar.prototype.setDynamicStyles = function (value) {
	        this._dynamicStyles.setItems(value);
	        this._changed();
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CheckBar.prototype.getCell = function (index) {
	        var cell = this._cell;
	        cell.setIndex(index);
	        var d = this.dynamicStyles;
	        if (d && d.count > 0) {
	            var r = this._runStyles;
	            r.clearValues();
	            r.setParent(this.styles);
	            this._runtime.setCell(cell);
	            d.applyInternal(this._runtime, r);
	            cell.styles = r;
	        }
	        else {
	            cell.styles = this.styles;
	        }
	        return cell;
	    };
	    return CheckBar;
	}(GridObject_1.SectionObject));
	exports.CheckBar = CheckBar;
	});

	unwrapExports(CheckBar_1);
	var CheckBar_2 = CheckBar_1.CheckBarExpressionRuntime;
	var CheckBar_3 = CheckBar_1.CheckBarCell;
	var CheckBar_4 = CheckBar_1.CheckBar;

	var GridBody_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridBody.ts
	// 2019. 07. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	var $$_gridbody_capital_indexers = ["value", "values"];
	var GridBody = /** @class */ (function (_super) {
	    __extends(GridBody, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridBody(grid) {
	        var _this = _super.call(this, grid, "gridBodyStyles") || this;
	        _this._hasCellStyles = false;
	        _this._rowStylesFirst = false;
	        _this._fixedIgnoreDynamic = false;
	        _this._fixedIgnoreColumn = false;
	        _this._rowStylesOwner = {
	            capitalIndexers: ["value", "values"]
	        };
	        _this._cellStylesOwner = {
	            capitalIndexers: ["value", "values"]
	        };
	        _this._styleTargets = {
	            body: true, fixed: false
	        };
	        _this._cellStyles = new VisualStyles_1.VisualStyles(_this, "", null, false);
	        _this._runtimeStyles = new VisualStyles_1.VisualStyles(_this, "", null, false);
	        _this._runtimeStyles2 = new VisualStyles_1.VisualStyles(null, "", null, false);
	        _this._emptyStyles = new VisualStyles_1.VisualStyles(_this, "emptyStyles", null, false);
	        _this._rowHoverStyles = new VisualStyles_1.VisualStyles(_this, "rowHoverStyles", { border: null }, false);
	        _this._rowFocusStyles = new VisualStyles_1.VisualStyles(_this, "rowFocusStyles", { border: null }, false);
	        _this._dynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        _this._cellDynamicStyles = new DynamicStyles.DynamicStyleCollection(_this);
	        //this._groupCell = new GroupCell();
	        _this._dataCell = new GridCell_1.DataCell();
	        _this._literalCell = new GridCell_1.LiteralCell();
	        _this._seriesCell = new GridCell_1.SeriesCell();
	        _this._mergedCell = new ColumnMerge.MergedDataCell();
	        _this._rowRuntime = new Runtimes.DataRowExpressionRuntime();
	        _this._cellRuntime = new Runtimes.DataCellExpressionRuntime();
	        _this._runBodyStyles = new VisualStyles_1.VisualStyles(_this, "runBodyStyles", null, false);
	        return _this;
	    }
	    GridBody.prototype.dispose = function () {
	        this._cellStyles = null;
	        this._runtimeStyles = null;
	        this._runtimeStyles2 = null;
	        this._emptyStyles = null;
	        this._rowHoverStyles = null;
	        this._rowFocusStyles = null;
	        this._dynamicStyles = null;
	        this._cellDynamicStyles = null;
	        //this._groupCell = null;
	        this._dataCell = null;
	        this._literalCell = null;
	        this._seriesCell = null;
	        this._mergedCell = null;
	        this._rowRuntime = null;
	        this._cellRuntime = null;
	        this._runBodyStyles = null;
	        this._styleTargets = null;
	        this._rowStylesOwner = null;
	        this._cellStylesOwner = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridBody.prototype, "capitalIndexers", {
	        //-------------------------------------------------------------------------
	        // DynamicStyleOwner
	        //-------------------------------------------------------------------------
	        get: function () {
	            return $$_gridbody_capital_indexers;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "emptyStyles", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** emptyStyles */
	        get: function () {
	            return this._emptyStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "rowHoverStyles", {
	        /** rowHoverStyles */
	        get: function () {
	            return this._rowHoverStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "rowFocusStyles", {
	        /** rowFocusStyles */
	        get: function () {
	            return this._rowFocusStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "dynamicStyles", {
	        /** dynamicStyles */
	        get: function () {
	            return this._dynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "cellDynamicStyles", {
	        /** cellDynamicStyles */
	        get: function () {
	            return this._cellDynamicStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "rowStylesFirst", {
	        /** rowStylesFirst */
	        get: function () {
	            return this._rowStylesFirst;
	        },
	        set: function (value) {
	            if (value != this._rowStylesFirst) {
	                this._rowStylesFirst = value;
	                this.refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "rowRuntime", {
	        /** rowRuntime */
	        get: function () {
	            return this._rowRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "cellRunTime", {
	        /** cellRunTime */
	        get: function () {
	            return this._cellRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "cellStyleCallback", {
	        /** cellStyleCallback */
	        get: function () {
	            return this._cellStyleCallback;
	        },
	        set: function (value) {
	            if (value !== this._cellStyleCallback) {
	                this._cellStyleCallback = value;
	                this.refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBody.prototype, "rowStyleCallback", {
	        /** rowStyleCallback */
	        get: function () {
	            return this._rowStyleCallback;
	        },
	        set: function (value) {
	            if (value !== this._rowStyleCallback) {
	                this._rowStyleCallback = value;
	                this.refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridBody.prototype.setEmptyStyles = function (value) {
	        if (value != this._emptyStyles) {
	            this._emptyStyles.extend(value);
	            this.refreshOwner();
	        }
	    };
	    GridBody.prototype.setRowHoverStyles = function (value) {
	        if (value != this._rowHoverStyles) {
	            this._rowHoverStyles.extend(value);
	            this.refreshOwner();
	        }
	    };
	    GridBody.prototype.setRowFocusStyles = function (value) {
	        if (value != this._rowFocusStyles) {
	            this._rowFocusStyles.extend(value);
	            this.refreshOwner();
	        }
	    };
	    GridBody.prototype.setDynamicStyles = function (value) {
	        this._dynamicStyles.setItems(value);
	        this.refreshOwner();
	    };
	    GridBody.prototype.setCellDynamicStyles = function (value) {
	        this._cellDynamicStyles.setItems(value);
	        this.refreshOwner();
	    };
	    GridBody.prototype.setRowStylesFirst = function (value) {
	        if (value != this._rowStylesFirst) {
	            this._rowStylesFirst = value;
	            this.refreshOwner();
	        }
	    };
	    GridBody.prototype.checkDynamicStyle = function (index, item) {
	        if (index.colFixed && this._fixedIgnoreDynamic) {
	            return false;
	        }
	        if (index.itemIndex < 0 && !item) {
	            return false;
	        }
	        item = item ? item : index.item;
	        this._rowRuntime.setItem(item);
	        if (this._dynamicStyles.checkStyle(this._rowRuntime)) {
	            return true;
	        }
	        var column = index.column;
	        var dataColumn = index.dataColumn;
	        if (dataColumn && !dataColumn.ignoreDefaultDynamicStyles) {
	            //const cell = column instanceof SeriesColumn ? this._seriesCell : column instanceof LiteralCell ? this._literalCell : column instanceof ColumnGroup ? this._groupCell : this._dataCell;
	            var cell = column instanceof DataColumn_1.SeriesColumn ? this._seriesCell : column instanceof GridCell_1.LiteralCell ? this._literalCell : this._dataCell;
	            cell.setIndex(index);
	            this._cellRuntime.setCell(cell, item);
	            if (this.cellDynamicStyles.checkStyle(this._cellRuntime)) {
	                return true;
	            }
	            if (dataColumn.dynamicStyles.checkStyle(this._cellRuntime)) {
	                return true;
	            }
	            if (this._hasCellStyles && this._rs.checkCellStyle(item.dataRow, dataColumn.dataIndex)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    GridBody.prototype.getCell = function (index, merged, item) {
	        var column = index.column;
	        var dataColumn = index.dataColumn;
	        var fixed = index.colFixed;
	        var cell;
	        if (merged) {
	            cell = this._mergedCell;
	        }
	        else if (column instanceof DataColumn_1.DataColumn) {
	            cell = this._dataCell;
	        }
	        else if (column instanceof DataColumn_1.SeriesColumn) {
	            cell = this._seriesCell;
	        }
	        else if (column instanceof GridCell_1.LiteralCell) {
	            cell = this._literalCell;
	            // } else if (column instanceof ColumnGroup) {
	            // 	cell = this._groupCell;
	        }
	        else {
	            cell = this._dataCell;
	        }
	        // var cell = merged ? this._mergedCell : column instanceof SeriesColumn ? this._seriesCell : column instanceof LiteralCell ? this._literalCell : column instanceof ColumnGroup ? this._groupCell : this._dataCell;
	        var runBodyStyles = this._rowStylesFirst ? this._runBodyStyles : null;
	        var colStyles = this._cellStyles;
	        cell.setIndex(index);
	        var runStyles = this._runtimeStyles2;
	        runStyles.clearValues();
	        if (!this._fixedIgnoreColumn || !fixed) {
	            runStyles.assignFrom(column.styles);
	        }
	        if (runBodyStyles) {
	            runStyles.setParent(runBodyStyles, false);
	        }
	        else {
	            runStyles.setParent(fixed ? this._fixedStyles : this._bodyStyles, false);
	        }
	        colStyles.clearValues();
	        colStyles.setParent(runStyles, false);
	        if (this._ds) { // && cell !== this._groupCell) {
	            item = item ? item : index.item;
	            var dynRow = void 0;
	            var dynCell = void 0;
	            var dynCol = void 0;
	            var dynRowCount = 0;
	            var dynCellCount = 0;
	            var dynColCount = 0;
	            if (fixed && this._fixedIgnoreDynamic) {
	                dynRowCount = dynCellCount = dynColCount = 0;
	            }
	            else {
	                dynRow = this._dynamicStyles;
	                dynCell = this._cellDynamicStyles;
	                dynRowCount = dynRow.count;
	                if (dataColumn) {
	                    dynCellCount = dataColumn.ignoreDefaultDynamicStyles ? 0 : dynCell.count;
	                    dynCol = dataColumn.dynamicStyles;
	                    dynColCount = dynCol.count;
	                }
	                else {
	                    dynCellCount = 0; // column.ignoreDefaultDynamicStyles ? 0 : dynCell.count;
	                    dynColCount = 0;
	                }
	            }
	            if (runBodyStyles) {
	                this._styleTargets.body = !fixed;
	                this._styleTargets.fixed = fixed;
	                if (dynRowCount > 0) {
	                    runBodyStyles.clearValues();
	                    runBodyStyles.setParent(fixed ? this._fixedStyles : this._bodyStyles, false);
	                    this._rowRuntime.setItem(item);
	                    dynRow.applyInternal(this._rowRuntime, runBodyStyles); //, this._styleTargets);
	                }
	                if (dynCellCount > 0 || dynColCount > 0) {
	                    runStyles = this._runtimeStyles;
	                    runStyles.clearValues();
	                    runStyles.setParent(colStyles, false);
	                    if (dynCellCount > 0) {
	                        this._cellRuntime.setCell(cell, item);
	                        dynCell.applyInternal(this._cellRuntime, runStyles); //, this._styleTargets);
	                    }
	                    if (dynColCount > 0) {
	                        this._cellRuntime.setCell(cell, item);
	                        dynCol.applyInternal(this._cellRuntime, runStyles); //, this._styleTargets);
	                    }
	                    cell.styles = runStyles;
	                }
	                else {
	                    cell.styles = colStyles;
	                }
	            }
	            else if (item.dataRow && item.dataRow >= -1 && (dynRowCount > 0 || dynCellCount > 0 || dynColCount > 0)) { // item.dataRow check
	                // } else if (dynRowCount > 0 || dynCellCount > 0 || dynColCount > 0) { 
	                runStyles = this._runtimeStyles;
	                runStyles.clearValues();
	                runStyles["_parent"] = colStyles;
	                if (dynRowCount > 0) {
	                    this._rowRuntime.setItem(item);
	                    dynRow.applyInternal(this._rowRuntime, runStyles);
	                }
	                if (dynCellCount > 0) {
	                    this._cellRuntime.setCell(cell, item);
	                    dynCell.applyInternal(this._cellRuntime, runStyles);
	                }
	                if (dynColCount > 0) {
	                    this._cellRuntime.setCell(cell, item);
	                    dynCol.applyInternal(this._cellRuntime, runStyles);
	                }
	                cell.styles = runStyles;
	            }
	            else {
	                cell.styles = colStyles;
	            }
	            if (dataColumn && this._hasCellStyles) {
	                var cs = this._rs.getCellStyle(item.dataRow, dataColumn.dataIndex);
	                cell.setCellStyles(cs);
	            }
	            else {
	                cell.setCellStyles(null);
	            }
	        }
	        else {
	            cell.styles = colStyles;
	        }
	        //cell.styles["_sysDefault"] = fixed ? this._fixedStyles["_sysDefault"] : this._bodyStyles["_sysDefault"];
	        return cell;
	    };
	    GridBody.prototype.getCellSimple = function (index, merged) {
	        var col = index.column;
	        //var cell = merged ? this._mergedCell : col instanceof SeriesColumn ? this._seriesCell : col instanceof LiteralCell ? this._literalCell : col instanceof ColumnGroup ? this._groupCell : this._dataCell;
	        var cell = merged ? this._mergedCell : col instanceof DataColumn_1.SeriesColumn ? this._seriesCell : col instanceof GridCell_1.LiteralCell ? this._literalCell : this._dataCell;
	        cell.setIndex(index);
	        return cell;
	    };
	    GridBody.prototype.addDynamicStyle = function (criteria, styles) {
	    };
	    GridBody.prototype.getCellStyle = function (model) {
	        var cb = this._cellStyleCallback;
	        var style = cb && cb(this._grid, model);
	        if (!style) {
	            style = model.dataColumn.getStyleName(model);
	        }
	        return style || GridBody.CELL_STYLE;
	    };
	    GridBody.prototype.getRowStyle = function (item) {
	        var cb = this._rowStyleCallback;
	        if (cb) {
	            return cb(this._grid, item) || GridBody.ROW_STYLE;
	        }
	        return GridBody.ROW_STYLE;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridBody.prototype._prepareUpdate = function () {
	        var grid = this._grid = this.owner;
	        this._rs = grid.itemSource;
	        this._fixedStyles = grid.fixedOptions.styles;
	        this._fixedIgnoreDynamic = grid.fixedOptions.ignoreDynamicStyles;
	        this._fixedIgnoreColumn = grid.fixedOptions.ignoreColumnStyles;
	        this._bodyStyles = this.styles;
	        this._hasCellStyles = this._rs.hasCellStyle();
	        this._ds = grid.dataSource;
	        this._rowRuntime.setDataSource(this._ds);
	        this._cellRuntime.setDataSource(this._ds);
	        var proto = DynamicStyles.DynamicStyleCollection.prototype;
	        //proto.applyInternal = this._grid.userMode ? proto.applyInternalUserMode : proto.applyInternalNormal;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    GridBody.CELL_STYLE = "rg-data-cell";
	    GridBody.ROW_STYLE = "rg-data-row";
	    return GridBody;
	}(GridObject_1.VisualObject));
	exports.GridBody = GridBody;
	});

	unwrapExports(GridBody_1);
	var GridBody_2 = GridBody_1.GridBody;

	var GridOptions = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridOptions.ts
	// 2019. 07. 22. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var GridBaseOptions = /** @class */ (function (_super) {
	    __extends(GridBaseOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridBaseOptions(grid) {
	        var _this = _super.call(this) || this;
	        _this._grid = grid;
	        return _this;
	    }
	    GridBaseOptions.prototype.dispose = function () {
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // VisualStylesOwner
	    //-------------------------------------------------------------------------
	    GridBaseOptions.prototype.stylesChanged = function (styleProp) {
	        this._refreshOwner();
	    };
	    Object.defineProperty(GridBaseOptions.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridBaseOptions.prototype._changed = function () {
	        this._grid && this._grid.optionsChanged(this);
	    };
	    GridBaseOptions.prototype._invalidateOwner = function () {
	        this._grid && this._grid.invalidate();
	    };
	    GridBaseOptions.prototype._layoutOwner = function () {
	        this._grid && this._grid.invalidateLayout();
	    };
	    GridBaseOptions.prototype._refreshOwner = function () {
	        this._grid && this._grid.refreshView();
	    };
	    GridBaseOptions.prototype._invalidateEditor = function () {
	        //this._grid && this._grid.editController().invalidateEditor();
	        //this._grid && this._grid.editController().reprepareEditor(this._grid.focusedIndex());
	    };
	    return GridBaseOptions;
	}(Base_1.Base));
	exports.GridBaseOptions = GridBaseOptions;
	});

	unwrapExports(GridOptions);
	var GridOptions_1 = GridOptions.GridBaseOptions;

	var FixedOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// FixedOptions.ts
	// 2019. 07. 22. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var FixedOptions = /** @class */ (function (_super) {
	    __extends(FixedOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FixedOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._colCount = 0;
	        _this._rightCount = 0;
	        _this._rowCount = 0;
	        _this._rightFixed = true;
	        _this._exceptFromFiltering = true;
	        _this._exceptFromSorting = true;
	        _this._editable = true;
	        _this._rowEditable = true;
	        _this._resizable = false;
	        _this._rowResizable = false;
	        _this._movable = false;
	        _this._colBarWidth = 3;
	        _this._rightBarWidth = 3;
	        _this._rowBarHeight = 3;
	        _this._ignoreColumnStyles = false;
	        _this._ignoreDynamicStyles = false;
	        _this._styles = new VisualStyles_1.VisualStyles(_this, "fixedBody");
	        _this._rowBarStyles = new VisualStyles_1.VisualStyles(_this, "fixedRowBar");
	        _this._colBarStyles = new VisualStyles_1.VisualStyles(_this, "fixedColumnBar");
	        return _this;
	    }
	    FixedOptions.prototype.dispose = function () {
	        this._styles = null;
	        this._rowBarStyles = null;
	        this._colBarStyles = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(FixedOptions.prototype, "colCount", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** colCount */
	        get: function () {
	            return this._colCount;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._colCount) {
	                this._colCount = value;
	                var grid = this.grid;
	                if (grid) {
	                    // grid["$_rowGroupFooterMergeChanged"]();
	                    // grid["$_footerMergeChanged"]();
	                    // grid["$_headerSummaryMergeChanged"]();
	                    this._refreshOwner();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rightCount", {
	        /** rightCount */
	        get: function () {
	            return this._rightCount;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._rightCount) {
	                this._rightCount = value;
	                var grid = this.grid;
	                if (grid) {
	                    // grid["$_rowGroupFooterMergeChanged"]();
	                    // grid["$_footerMergeChanged"]();
	                    // grid["$_headerSummaryMergeChanged"]();
	                    this._refreshOwner();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rowCount", {
	        /** rowCount */
	        get: function () {
	            return this._rowCount;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._rowCount) {
	                this._rowCount = value;
	                this.$_resetItemSource();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rightFixed", {
	        /** rightFixed */
	        get: function () {
	            return this._rightFixed;
	        },
	        set: function (value) {
	            if (value != this._rightFixed) {
	                this._rightFixed = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "exceptFromFiltering", {
	        /** exceptFromFiltering */
	        get: function () {
	            return this._exceptFromFiltering;
	        },
	        set: function (value) {
	            if (value != this._exceptFromFiltering) {
	                this._exceptFromFiltering = value;
	                this.$_resetItemSource();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "exceptFromSorting", {
	        /** exceptFromSorting */
	        get: function () {
	            return this._exceptFromSorting;
	        },
	        set: function (value) {
	            if (value != this._exceptFromSorting) {
	                this._exceptFromSorting = value;
	                this.$_resetItemSource();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "editable", {
	        /** editable */
	        get: function () {
	            return this._editable;
	        },
	        set: function (value) {
	            if (value != this._editable) {
	                this._editable = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rowEditable", {
	        /** rowEditable */
	        get: function () {
	            return this._rowEditable;
	        },
	        set: function (value) {
	            if (value != this._rowEditable) {
	                this._rowEditable = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "styles", {
	        /** styles */
	        get: function () {
	            return this._styles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "ignoreColumnStyles", {
	        /** ignoreColumnStyles */
	        get: function () {
	            return this._ignoreColumnStyles;
	        },
	        set: function (value) {
	            if (value != this._ignoreColumnStyles) {
	                this._ignoreColumnStyles = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "ignoreDynamicStyles", {
	        /** ignoreDynamicStyles */
	        get: function () {
	            return this._ignoreDynamicStyles;
	        },
	        set: function (value) {
	            if (value != this._ignoreDynamicStyles) {
	                this._ignoreDynamicStyles = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "colBarWidth", {
	        /** colBarWidth */
	        get: function () {
	            return this._colBarWidth;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._colBarWidth) {
	                this._colBarWidth = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rightBarWidth", {
	        /** rightBarWidth */
	        get: function () {
	            return this._rightBarWidth;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._rightBarWidth) {
	                this._rightBarWidth = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FixedOptions.prototype, "rowBarHeight", {
	        /** rowBarHeight */
	        get: function () {
	            return this._rowBarHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._rowBarHeight) {
	                this._rowBarHeight = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    FixedOptions.prototype.$_resetItemSource = function () {
	        var grid = this.grid;
	        var rs;
	        if (grid && (rs = grid.itemSource)) {
	            rs.setFixed(this._rowCount, !this._exceptFromSorting, !this._exceptFromFiltering);
	        }
	    };
	    return FixedOptions;
	}(GridOptions.GridBaseOptions));
	exports.FixedOptions = FixedOptions;
	});

	unwrapExports(FixedOptions_1);
	var FixedOptions_2 = FixedOptions_1.FixedOptions;

	var Color_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Color.ts
	// 2019. 07. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var $_hex = Utils_1.Utils.hex;
	var Color = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function Color(value, strict) {
	        if (value === void 0) { value = null; }
	        if (strict === void 0) { strict = false; }
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._r = 0;
	        this._g = 0;
	        this._b = 0;
	        this._a = 0;
	        if (typeof value === "string") {
	            Color._parse(value, this, strict, false); // true);
	        }
	        else if (value instanceof Color) {
	            this._r = value._r;
	            this._g = value._g;
	            this._b = value._b;
	            this._a = value._a;
	        }
	        else if (!isNaN(value)) {
	            this._a = (value >>> 24) / 255.0;
	            this._r = (value & 0x00ff0000) >> 16;
	            this._g = (value & 0x0000ff00) >> 8;
	            this._b = value & 0x000000ff;
	        }
	        else {
	            this._r = this._g = this._b = 0;
	            this._a = strict ? NaN : 1;
	        }
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //static readonly _ERROR = new Color(null, true);
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    Color.createFrom = function (s, strict) {
	        if (strict === void 0) { strict = false; }
	        var colorObj = Color._parse(s, $_tempColor, strict, false);
	        if (colorObj) {
	            return (colorObj instanceof Color) ? colorObj : $_tempColor.clone();
	        }
	        else {
	            return null;
	        }
	    };
	    Color.getColorStringArray = function (value) {
	        return value.trim().toLowerCase().split(/\s+|(rgba\(.*\))|(rgb\(.*\))|(pal\(.*\))/).filter(Boolean);
	    };
	    Color.getColorCsvArray = function (value) {
	        return value.trim().toLowerCase().split(/\s*,\s*|\s+|(rgba\(.*\))|(rgb\(.*\))|(pal\(.*\))/).filter(Boolean);
	    };
	    Color._parse = function (s, color, strict, throwError) {
	        if (s) {
	            var len = s.length;
	            s = s.trim().toLowerCase();
	            if (s.charAt(0) == "#") {
	                s = s.substr(1);
	                len--;
	                if (len >= 6 && len <= 8) {
	                    color._b = Utils_1.Utils.toInt(s.substr(len - 2, 2), 16);
	                    color._g = Utils_1.Utils.toInt(s.substr(len - 4, 2), 16);
	                    color._r = Utils_1.Utils.toInt(s.substr(len - 6, 2), 16);
	                    color._a = (len == 6) ? (strict ? NaN : 1) : (Utils_1.Utils.toInt(s.substr(0, len - 6), 16) / 255.0);
	                }
	                else if (len == 3) {
	                    color._r = Utils_1.Utils.toInt(s.charAt(0) + s.charAt(0), 16);
	                    color._g = Utils_1.Utils.toInt(s.charAt(1) + s.charAt(1), 16);
	                    color._b = Utils_1.Utils.toInt(s.charAt(2) + s.charAt(2), 16);
	                    color._a = strict ? NaN : 1;
	                }
	                else if (throwError) {
	                    throw "Invalid color value text: " + s;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (s.indexOf("rgba(") == 0 && s.charAt(len - 1) == ")") {
	                s = s.substring(5, len - 1);
	                var v = s.split(",");
	                color._r = Utils_1.Utils.toInt(v[0]);
	                color._g = Utils_1.Utils.toInt(v[1]);
	                color._b = Utils_1.Utils.toInt(v[2]);
	                color._a = Utils_1.Utils.toFloat(v[3]);
	            }
	            else if (s.indexOf("rgb(") == 0 && s.charAt(len - 1) == ")") {
	                s = s.substring(4, len - 1);
	                var v = s.split(",");
	                color._r = Utils_1.Utils.toInt(v[0]);
	                color._g = Utils_1.Utils.toInt(v[1]);
	                color._b = Utils_1.Utils.toInt(v[2]);
	                color._a = strict ? NaN : 1;
	            }
	            else if (strict && exports.StrictColors.hasOwnProperty(s)) {
	                var v = exports.StrictColors[s];
	                color._r = v._r;
	                color._g = v._g;
	                color._b = v._b;
	                color._a = v._a;
	                return v;
	            }
	            else if (!strict && exports.Colors.hasOwnProperty(s)) {
	                var v = exports.Colors[s];
	                color._r = v._r;
	                color._g = v._g;
	                color._b = v._b;
	                color._a = v._a;
	                return v;
	            }
	            else {
	                // const palItem = ColorPaletteItem.createFrom(s, false);
	                // if (palItem) {
	                //     return palItem;
	                // }
	                if (throwError) {
	                    throw new Error("Invalid color text: " + s);
	                }
	                return false;
	            }
	            return true;
	        }
	        return false;
	    };
	    Color.areEqual = function (c1, c2) {
	        return c1 && c2 && c1._r == c2._r && c1._g == c2._g && c1._b == c2._b && c1._a == c2._a;
	    };
	    Color.prototype.dispose = function () {
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Color.prototype.clone = function () {
	        return new Color(this);
	    };
	    Color.prototype.copy = function (source, alpha) {
	        if (source === void 0) { source = null; }
	        if (alpha === void 0) { alpha = 1; }
	        if (source) {
	            this._r = source._r;
	            this._g = source._g;
	            this._b = source._b;
	            this._a = isNaN(source._a) ? alpha : source._a;
	        }
	        else {
	            this._a = alpha;
	        }
	        return this;
	    };
	    Color.prototype.value = function () {
	        return "rgba(" + this._r + "," + this._g + "," + this._b + "," + this._a + ")";
	    };
	    Color.prototype.valueWithBrightness = function (brightness) {
	        var r = this._r;
	        var g = this._g;
	        var b = this._b;
	        var bright = Number(brightness);
	        if (!isNaN(bright) && bright != 1) {
	            r = Math.floor(Math.max(0, Math.min(0xff, r * bright)));
	            g = Math.floor(Math.max(0, Math.min(0xff, g * bright)));
	            b = Math.floor(Math.max(0, Math.min(0xff, b * bright)));
	            if (r == 0xff && this._r < 0xff) {
	                r = Math.floor((0xff + this._r) / 2);
	            }
	            if (g == 0xff && this._g < 0xff) {
	                g = Math.floor((0xff + this._g) / 2);
	            }
	            if (b == 0xff && this._b < 0xff) {
	                b = Math.floor((0xff + this._b) / 2);
	            }
	        }
	        return "rgba(" + r + "," + g + "," + b + "," + this._a + ")";
	    };
	    Color.prototype.argb = function () {
	        return (Math.floor(this._a * 255) << 24) | (this._r << 16) | (this._g << 8) | this._b;
	    };
	    Color.prototype.rgb = function () {
	        return (this._r << 16) | (this._g << 8) | this._b;
	    };
	    Color.prototype.extractAlpha = function () {
	        var alpha = this._a;
	        this._a = NaN;
	        return alpha;
	    };
	    Color.prototype.toHex = function () {
	        return "" + $_hex(Math.floor(this._a * 255)) + $_hex(this._r) + $_hex(this._g) + $_hex(this._b);
	    };
	    Color.prototype.toColorHex = function () {
	        return "" + $_hex(this._r) + $_hex(this._g) + $_hex(this._b);
	    };
	    Color.prototype.toString = function () {
	        return "#" + $_hex(Math.floor(this._a * 255)) + $_hex(this._r) + $_hex(this._g) + $_hex(this._b);
	    };
	    Color.prototype.toColorString = function () {
	        return "#" + $_hex(this._r) + $_hex(this._g) + $_hex(this._b);
	    };
	    return Color;
	}());
	exports.Color = Color;
	var $_tempColor = new Color();
	var $_tempColors = [new Color(), new Color()];
	exports.Colors = {
	    transparent: new Color("#00000000"),
	    aqua: new Color("#00ffff"),
	    black: new Color("#000000"),
	    blue: new Color("#0000ff"),
	    fuchsia: new Color("#ff00ff"),
	    gray: new Color("#808080"),
	    green: new Color("#008000"),
	    lime: new Color("#00ff00"),
	    maroon: new Color("#800000"),
	    navy: new Color("#000080"),
	    olive: new Color("#808000"),
	    orange: new Color("#ffa500"),
	    purple: new Color("#800080"),
	    red: new Color("#ff0000"),
	    silver: new Color("#c0c0c0"),
	    teal: new Color("#008080"),
	    white: new Color("#ffffff"),
	    yellow: new Color("#ffff00"),
	    dimGray: new Color("#696969"),
	    dimgray: new Color("#696969"),
	    ltGray: new Color("#d3d3d3"),
	    ltgray: new Color("#d3d3d3")
	};
	exports.StrictColors = {
	    transparent: new Color("#00000000"),
	    aqua: new Color("#ff00ffff", true),
	    black: new Color("#ff000000", true),
	    blue: new Color("#ff0000ff", true),
	    fuchsia: new Color("#ffff00ff", true),
	    gray: new Color("#ff808080", true),
	    green: new Color("#ff008000", true),
	    lime: new Color("#ff00ff00", true),
	    maroon: new Color("#ff800000", true),
	    navy: new Color("#ff000080", true),
	    olive: new Color("#ff808000", true),
	    orange: new Color("#ffffa500", true),
	    purple: new Color("#ff800080", true),
	    red: new Color("#ffff0000", true),
	    silver: new Color("#ffc0c0c0", true),
	    teal: new Color("#ff008080", true),
	    white: new Color("#ffffffff", true),
	    yellow: new Color("#ffffff00", true),
	    dimGray: new Color("#ff696969", true),
	    dimgray: new Color("#ff696969", true),
	    ltGray: new Color("#ffd3d3d3", true),
	    ltgray: new Color("#ffd3d3d3", true)
	};
	/*
	export class Colors {
	    static readonly transparent = new Color("#00000000");
	    static readonly aqua = new Color("#00ffff");
	    static readonly black = new Color("#000000");
	    static readonly blue = new Color("#0000ff");
	    static readonly fuchsia = new Color("#ff00ff");
	    static readonly gray = new Color("#808080");
	    static readonly green = new Color("#008000");
	    static readonly lime = new Color("#00ff00");
	    static readonly maroon = new Color("#800000");
	    static readonly navy = new Color("#000080");
	    static readonly olive = new Color("#808000");
	    static readonly orange = new Color("#ffa500");
	    static readonly purple = new Color("#800080");
	    static readonly red = new Color("#ff0000");
	    static readonly silver = new Color("#c0c0c0");
	    static readonly teal = new Color("#008080");
	    static readonly white = new Color("#ffffff");
	    static readonly yellow = new Color("#ffff00");
	    static readonly dimGray = new Color("#696969");
	    static readonly dimgray = new Color("#696969");
	    static readonly ltgray = new Color("#d3d3d3");
	    static readonly ltGray = new Color("#d3d3d3");
	};


	export class StrictColors {
	    static readonly transparent = new Color("#00000000", true);
	    static readonly aqua = new Color("#FF00ffff", true);
	    static readonly black = new Color("#FF000000", true);
	    static readonly blue = new Color("#FF0000ff", true);
	    static readonly fuchsia = new Color("#FFff00ff", true);
	    static readonly gray = new Color("#FF808080", true);
	    static readonly green = new Color("#FF008000", true);
	    static readonly lime = new Color("#FF00ff00", true);
	    static readonly maroon = new Color("#FF800000", true);
	    static readonly navy = new Color("#FF000080", true);
	    static readonly olive = new Color("#FF808000", true);
	    static readonly orange = new Color("#FFffa500", true);
	    static readonly purple = new Color("#FF800080", true);
	    static readonly red = new Color("#FFff0000", true);
	    static readonly silver = new Color("#FFc0c0c0", true);
	    static readonly teal = new Color("#FF008080", true);
	    static readonly white = new Color("#FFffffff", true);
	    static readonly yellow = new Color("#FFffff00", true);
	    static readonly dimGray = new Color("#FF696969", true);
	    static readonly dimgray = new Color("#FF696969", true);
	    static readonly ltgray = new Color("#FFd3d3d3", true);
	    static readonly ltGray = new Color("#FFd3d3d3", true);
	};
	*/
	var ColorPaletteItem = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColorPaletteItem(paletteName, index) {
	        if (index === void 0) { index = -1; }
	        this._index = -1;
	        this._paletteName = paletteName;
	        this._index = index;
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ColorPaletteItem.createFrom = function (source, convert) {
	        if (convert === void 0) { convert = false; }
	        var s = convert ? source.trim().toLowerCase() : source;
	        if (s.indexOf("pal(") == 0 && s.charAt(s.length - 1) == ")") {
	            s = s.substring(4, s.length - 1);
	            if (s.indexOf(",") >= 1) {
	                var arr = s.split(",");
	                if (arr.length > 1) {
	                    return new ColorPaletteItem(arr[0], parseInt(arr[1]));
	                }
	                else {
	                    return new ColorPaletteItem(arr[0]);
	                }
	            }
	            else {
	                return new ColorPaletteItem(s);
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColorPaletteItem.prototype.clone = function () {
	        var item = new ColorPaletteItem(this._paletteName, this._index);
	        item._palette = this._palette;
	        return item;
	    };
	    ColorPaletteItem.prototype.getColor = function () {
	        var index = this.getIndex();
	        return index >= 0 ? this._palette.getColor(index) : exports.Colors.transparent;
	    };
	    ColorPaletteItem.prototype.getIndex = function () {
	        var pal = this._palette;
	        if (!pal) {
	            this._palette = pal = ColorPalette.getPalette(this._paletteName);
	        }
	        if (pal) {
	            if (this._index < 0 || this._index >= pal.count) {
	                this._index = pal.next();
	            }
	            return this._index;
	        }
	        else {
	            return -1;
	        }
	    };
	    return ColorPaletteItem;
	}());
	exports.ColorPaletteItem = ColorPaletteItem;
	var ColorPalette = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColorPalette(source) {
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        this._colors = [];
	        this._next = 0;
	        this._parse(source);
	    }
	    ColorPalette.register = function (name, palette) {
	        if (name && palette) {
	            ColorPalette._palettes[name] = palette;
	        }
	    };
	    ColorPalette.loadPalettes = function (source) {
	        if (source) {
	            var pals = Utils_1.Utils.toArray(source);
	            if (pals) {
	                for (var i = 0; i < pals.length; i++) {
	                    var name_1 = pals[i].name;
	                    var colors = pals[i].colors;
	                    if (name_1 && colors) {
	                        var palette = new ColorPalette(colors);
	                        ColorPalette.register(name_1, palette);
	                    }
	                }
	            }
	        }
	    };
	    ColorPalette.getPalette = function (name) {
	        if (ColorPalette._palettes.hasOwnProperty(name)) {
	            return ColorPalette._palettes[name];
	        }
	        return ColorPalette._palettes["default"];
	    };
	    Object.defineProperty(ColorPalette.prototype, "count", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._colors.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorPalette.prototype, "colors", {
	        get: function () {
	            return this._colors.slice();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColorPalette.prototype.next = function () {
	        var index = this._next;
	        this._next = (this._next + 1) % this._colors.length;
	        return index;
	    };
	    ColorPalette.prototype.getColor = function (index) {
	        return this._colors[index];
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColorPalette.prototype._parse = function (source, strict) {
	        this._colors = [];
	        if (source) {
	            var colors = source;
	            if (!(colors instanceof Array)) {
	                colors = String(source).split(",");
	            }
	            for (var i = 0, cnt = colors.length; i < cnt; i++) {
	                var color = Color.createFrom(colors[i], true);
	                this._colors.push(color);
	            }
	        }
	        if (this._colors.length < 1) {
	            this._colors.push(Color.createFrom("#00000000"));
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ColorPalette._palettes = {
	        "default": new ColorPalette("#eeeeee")
	    };
	    return ColorPalette;
	}());
	exports.ColorPalette = ColorPalette;
	});

	unwrapExports(Color_1);
	var Color_2 = Color_1.Color;
	var Color_3 = Color_1.Colors;
	var Color_4 = Color_1.StrictColors;
	var Color_5 = Color_1.ColorPaletteItem;
	var Color_6 = Color_1.ColorPalette;

	var Stroke = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Fill.ts
	// 2019. 07. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var SolidPen = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function SolidPen(color, width, dash) {
	        if (width === void 0) { width = 1; }
	        if (dash === void 0) { dash = null; }
	        this._color = color instanceof Color_1.Color ? color : new Color_1.Color(color);
	        this._width = Math.max(0, Math.floor(width));
	        if (dash)
	            this._dash = dash;
	    }
	    Object.defineProperty(SolidPen.prototype, "color", {
	        //-------------------------------------------------------------------------
	        // Stroke
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    SolidPen.WHITE = new SolidPen(Color_1.Colors.white);
	    SolidPen.BLACK = new SolidPen(Color_1.Colors.black);
	    SolidPen.GRAY = new SolidPen(Color_1.Colors.gray);
	    SolidPen.DKGRAY = new SolidPen(Color_1.Colors.dimGray);
	    SolidPen.LTGRAY = new SolidPen(Color_1.Colors.ltGray);
	    SolidPen.RED = new SolidPen(Color_1.Colors.red);
	    SolidPen.GREEN = new SolidPen(Color_1.Colors.green);
	    SolidPen.BLUE = new SolidPen(Color_1.Colors.blue);
	    SolidPen.FOCUS = new SolidPen(Color_1.Colors.gray, 1, [1, 1]);
	    return SolidPen;
	}());
	exports.SolidPen = SolidPen;
	});

	unwrapExports(Stroke);
	var Stroke_1 = Stroke.SolidPen;

	var Fill = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Fill.ts
	// 2019. 07. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var SolidBrush = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function SolidBrush(color) {
	        this._color = color instanceof Color_1.Color ? color : new Color_1.Color(color);
	    }
	    Object.defineProperty(SolidBrush.prototype, "color", {
	        //-------------------------------------------------------------------------
	        // Fill
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SolidBrush.prototype.toCss = function () {
	        return this._color.toColorString();
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    SolidBrush.WHITE = new SolidBrush(Color_1.Colors.white);
	    SolidBrush.BLACK = new SolidBrush(Color_1.Colors.black);
	    SolidBrush.GRAY = new SolidBrush(Color_1.Colors.gray);
	    SolidBrush.DKGRAY = new SolidBrush(Color_1.Colors.dimGray);
	    SolidBrush.LTGRAY = new SolidBrush(Color_1.Colors.ltGray);
	    SolidBrush.RED = new SolidBrush(Color_1.Colors.red);
	    SolidBrush.YELLOW = new SolidBrush(Color_1.Colors.yellow);
	    SolidBrush.GREEN = new SolidBrush(Color_1.Colors.green);
	    SolidBrush.BLUE = new SolidBrush(Color_1.Colors.blue);
	    SolidBrush.NULL = new SolidBrush(0);
	    return SolidBrush;
	}());
	exports.SolidBrush = SolidBrush;
	});

	unwrapExports(Fill);
	var Fill_1 = Fill.SolidBrush;

	var Point_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Point.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var Point = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function Point(x, y) {
	        if (x === void 0) { x = 0; }
	        if (y === void 0) { y = 0; }
	        this.x = x;
	        this.y = y;
	    }
	    Point.empty = function () {
	        return new Point();
	    };
	    Point.create = function (x, y) {
	        if (x === void 0) { x = 0; }
	        if (y === void 0) { y = 0; }
	        return new Point(x, y);
	    };
	    Object.defineProperty(Point.prototype, "isEmpty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** isEmpty */
	        get: function () {
	            return this.x === 0 || this.y === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Point.prototype.clone = function () {
	        return new Point(this.x, this.y);
	    };
	    Point.prototype.equals = function (sz) {
	        return sz === this
	            || sz && this.x === sz.x && this.y === sz.y;
	    };
	    Point.prototype.setEmpty = function () {
	        this.x = this.y = 0;
	        return this;
	    };
	    Point.prototype.set = function (x, y) {
	        this.x = x;
	        this.y = y;
	        return this;
	    };
	    Point.prototype.round = function () {
	        var pt = this.clone();
	        pt.x >>>= 0;
	        pt.y >>>= 0;
	        return pt;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    Point.prototype.toString = function () {
	        return "{x: " + this.x + ", y: " + this.y + "}";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    Point.EMPTY = new Point();
	    return Point;
	}());
	exports.Point = Point;
	});

	unwrapExports(Point_1);
	var Point_2 = Point_1.Point;

	var VisualElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// VisualElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var VisualElement = /** @class */ (function (_super) {
	    __extends(VisualElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function VisualElement(name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._x = 0;
	        _this._y = 0;
	        _this._width = 0;
	        _this._height = 0;
	        _this._visible = true;
	        _this._mouseEnabled = true;
	        _this._elements = null;
	        _this._dirty = true;
	        _this._hovered = false;
	        _this._name = name;
	        var dom = _this._dom = _this._createDom();
	        dom && _this._initDom(dom);
	        return _this;
	    }
	    VisualElement.prototype.dispose = function () {
	        this._removeEventListeners(this._dom);
	        this._dom = null;
	        if (this._elements) {
	            for (var _i = 0, _a = this._elements; _i < _a.length; _i++) {
	                var child = _a[_i];
	                child.dispose();
	            }
	        }
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(VisualElement.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "container", {
	        /** container */
	        get: function () {
	            return this._parent && this._parent.container;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "parent", {
	        /** parent */
	        get: function () {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "childCount", {
	        /** childCount */
	        get: function () {
	            return this._elements ? this._elements.length : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "isSingleton", {
	        /** isSingleton */
	        get: function () {
	            return this._parent && this._parent.childCount == 1 && this._parent._elements[0] === this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "x", {
	        /** x */
	        get: function () {
	            return this._x;
	        },
	        set: function (value) {
	            if (value != this._x) {
	                this._x = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "y", {
	        /** y */
	        get: function () {
	            return this._y;
	        },
	        set: function (value) {
	            if (value != this._y) {
	                this._y = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "width", {
	        /** width */
	        get: function () {
	            return this._width;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._width) {
	                this._width = value;
	                this.sizeChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "height", {
	        /** height */
	        get: function () {
	            return this._height;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._height) {
	                this._height = value;
	                this.sizeChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "right", {
	        /** right */
	        get: function () {
	            return this._x + this._width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "bottom", {
	        /** bottom */
	        get: function () {
	            return this._y + this._height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "position", {
	        /** position */
	        get: function () {
	            return new Point_1.Point(this._x, this._y);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "bounds", {
	        /** bounds */
	        get: function () {
	            return new Rectangle_1.Rectangle(this._x, this._y, this._width, this._height);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "clientRect", {
	        /** clientRect */
	        get: function () {
	            return new Rectangle_1.Rectangle(0, 0, this._width, this._height);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "visible", {
	        /** visible */
	        get: function () {
	            return this._visible;
	        },
	        set: function (value) {
	            if (value != this._visible) {
	                this._visible = value;
	                if (this._dom) {
	                    this._dom.style.display = this._visible ? this._getCssDisplay() : "none";
	                }
	                this.invalidate(true);
	                this._visibleChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "mouseEnabled", {
	        /** mouseEnabled */
	        get: function () {
	            return this._mouseEnabled;
	        },
	        set: function (value) {
	            this._mouseEnabled = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "hovered", {
	        /** hovered */
	        get: function () {
	            return this._hovered;
	        },
	        set: function (value) {
	            if (value != this._hovered) {
	                this._hovered = value;
	                this._hoverChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "isLayer", {
	        /** isLayer */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "clickable", {
	        /** clickable */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "mouseX", {
	        /** mouseX */
	        get: function () {
	            var container = this.container;
	            if (container) {
	                var x = container["_currentX"];
	                var p = this;
	                while (p && p !== undefined) {
	                    x -= p._x;
	                    p = p._parent;
	                }
	                return x;
	            }
	            else {
	                return NaN;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "mouseY", {
	        /** mouseY */
	        get: function () {
	            var container = this.container;
	            if (container) {
	                var y = container["_currentY"];
	                var p = this;
	                while (p && p !== undefined) {
	                    y -= p._y;
	                    p = p._parent;
	                }
	                return y;
	            }
	            else {
	                return NaN;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualElement.prototype, "style", {
	        /** style */
	        get: function () {
	            return this._dom.style;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    VisualElement.prototype.canHover = function () {
	        return true;
	    };
	    VisualElement.prototype.getChildren = function () {
	        return this._elements && this._elements.concat();
	    };
	    VisualElement.prototype.getChild = function (index) {
	        return this._elements[index];
	    };
	    VisualElement.prototype.indexOf = function (element) {
	        return this._elements ? this._elements.indexOf(element) : -1;
	    };
	    VisualElement.prototype.contains = function (element) {
	        return this._elements && this._elements.indexOf(element) >= 0;
	    };
	    VisualElement.prototype.getAncestor = function (cls) {
	        var p = this._parent;
	        while (p) {
	            if (p instanceof cls) {
	                return p;
	            }
	            p = p._parent;
	        }
	        return null;
	    };
	    VisualElement.prototype.addChild = function (child) {
	        return this.insertChild(-1, child);
	    };
	    VisualElement.prototype.insertChild = function (index, child) {
	        if (child && !this.contains(child)) {
	            var elts = this._elements || [];
	            var childDom = child._dom;
	            if (index < 0 || index >= elts.length) {
	                this._dom && childDom && this._dom.appendChild(childDom);
	                elts.push(child);
	            }
	            else {
	                if (childDom) {
	                    var sib = this._elements[index]._dom;
	                    this._dom && sib && this._dom.insertBefore(childDom, sib);
	                }
	                elts.splice(index, 0, child);
	            }
	            this._elements = elts;
	            child._parent = this;
	            child.$_attached(this);
	            this.invalidate();
	            return true;
	        }
	        return false;
	    };
	    VisualElement.prototype.removeChild = function (child) {
	        if (child && this._elements) {
	            var i = this._elements.indexOf(child);
	            if (i >= 0) {
	                return this.removeChildAt(i) === child;
	            }
	        }
	        return false;
	    };
	    VisualElement.prototype.removeChildAt = function (index) {
	        if (index >= 0 && index < this.childCount) {
	            var child = this._elements[index];
	            this._elements.splice(index, 1);
	            this._dom && child._dom && this._dom.removeChild(child._dom);
	            child._parent = null;
	            child._dirty = false;
	            child.$_detached(this);
	            this.invalidate();
	            return child;
	        }
	        return null;
	    };
	    VisualElement.prototype.removeLast = function () {
	        if (this._elements && this._elements.length > 0) {
	            return this.removeChildAt(this._elements.length - 1);
	        }
	        return null;
	    };
	    VisualElement.prototype.clear = function () {
	        var elts = this._elements;
	        var cnt = elts ? elts.length : 0;
	        if (cnt > 0) {
	            for (var _i = 0, elts_1 = elts; _i < elts_1.length; _i++) {
	                var elt = elts_1[_i];
	                elt._parent = null;
	                elt.$_detached(this);
	            }
	            this._elements = [];
	            if (this._dom) {
	                while (this._dom.lastChild) {
	                    this._dom.removeChild(this._dom.lastChild);
	                }
	            }
	            this.invalidate();
	            return true;
	        }
	        return false;
	    };
	    VisualElement.prototype.hideAll = function () {
	        if (this._elements) {
	            for (var _i = 0, _a = this._elements; _i < _a.length; _i++) {
	                var elt = _a[_i];
	                elt.visible = false;
	            }
	        }
	    };
	    VisualElement.prototype.invalidate = function (force, invalidateChildren) {
	        if (force === void 0) { force = false; }
	        if (invalidateChildren === void 0) { invalidateChildren = false; }
	        if (force || !this._dirty) {
	            this._dirty = true;
	            var container = this.container;
	            if (container) {
	                container.invalidateElement(this);
	            }
	        }
	        if (invalidateChildren) {
	            if (this._elements) {
	                for (var _i = 0, _a = this._elements; _i < _a.length; _i++) {
	                    var child = _a[_i];
	                    child.invalidate(force, true);
	                }
	            }
	        }
	    };
	    VisualElement.prototype.validate = function () {
	        this._dirty = false;
	    };
	    VisualElement.prototype.invalidateLayout = function () {
	        var container = this.container;
	        if (container) {
	            container["invalidateLayout"]();
	        }
	    };
	    VisualElement.prototype.getBounds = function (r) {
	        if (r === void 0) { r = null; }
	        if (r) {
	            return r.set(this._x, this._y, this._width, this._height);
	        }
	        else {
	            return new Rectangle_1.Rectangle(this._x, this._y, this._width, this._height);
	        }
	    };
	    VisualElement.prototype.getClientRect = function (r) {
	        if (r === void 0) { r = null; }
	        if (r) {
	            return r.set(0, 0, this._width, this._height);
	        }
	        else {
	            return new Rectangle_1.Rectangle(0, 0, this._width, this._height);
	        }
	    };
	    VisualElement.prototype.containsInBounds = function (x, y) {
	        return (x >= this._x && x < this._x + this._width && y >= this._y && y < this._y + this._height);
	    };
	    VisualElement.prototype.containsInClient = function (x, y) {
	        return (x >= 0 && x < this._width && y >= 0 && y < this._height);
	    };
	    VisualElement.prototype.parentToElement = function (parent, x, y) {
	        var p = this;
	        while (p && p != parent) {
	            x -= p._x;
	            y -= p._y;
	            p = p._parent;
	        }
	        return new Point_1.Point(x, y);
	    };
	    VisualElement.prototype.translateBy = function (descendant, r) {
	        if (r === void 0) { r = null; }
	        var p = descendant;
	        if (!r) {
	            r = new Rectangle_1.Rectangle(0, 0, this._width, this._height);
	        }
	        while (p && p !== this) {
	            r.x -= p._x;
	            r.y -= p._y;
	            p = p._parent;
	        }
	        return r;
	    };
	    VisualElement.prototype.topBy = function (parent, top) {
	        var y = this._y + top;
	        var p = this._parent;
	        while (p && p !== parent) {
	            y += p._y;
	            p = p._parent;
	        }
	        return y;
	    };
	    VisualElement.prototype.boundsBy = function (parent, r) {
	        if (r === void 0) { r = null; }
	        var x = this._x;
	        var y = this._y;
	        var p = this._parent;
	        if (r) {
	            x += r.x;
	            y += r.y;
	        }
	        while (p && p !== parent) {
	            x += p._x;
	            y += p._y;
	            p = p._parent;
	        }
	        return r ? new Rectangle_1.Rectangle(x, y, r.width, r.height) : new Rectangle_1.Rectangle(x, y, this._width, this._height);
	    };
	    VisualElement.prototype.boundsByContainer = function (r) {
	        if (r === void 0) { r = null; }
	        var x = this._x;
	        var y = this._y;
	        if (r) {
	            x += r.x;
	            y += r.y;
	        }
	        var p = this._parent;
	        while (p && p._x !== undefined) {
	            x += p._x;
	            y += p._y;
	            p = p._parent;
	        }
	        return r ? new Rectangle_1.Rectangle(x, y, r.width, r.height) : new Rectangle_1.Rectangle(x, y, this._width, this._height);
	    };
	    VisualElement.prototype.boundsByScreen = function (r) {
	        if (r === void 0) { r = null; }
	        r = this.boundsByContainer(r);
	        r = this.container.toScreen(r);
	        return r;
	    };
	    VisualElement.prototype.containerToElement = function (x, y) {
	        var p = this;
	        while (p) {
	            x -= p._x;
	            y -= p._y;
	            p = p._parent;
	        }
	        return new Point_1.Point(x, y);
	    };
	    VisualElement.prototype.hitTest = function (x, y) {
	        return x >= 0 && x < this._width && y >= 0 && y < this._height;
	    };
	    VisualElement.prototype.findChildAt = function (x, y, hitTesting) {
	        var elts = this._elements;
	        var cnt = elts ? elts.length : 0;
	        if (cnt > 0) {
	            for (var i = cnt - 1; i >= 0; i--) {
	                var elt = elts[i];
	                if (elt.visible) {
	                    var cx = x - elt._x;
	                    var cy = y - elt._y;
	                    if (hitTesting || elt._mouseEnabled) {
	                        if (elt.isLayer || elt.hitTest(cx, cy)) {
	                            var child = elt.findChildAt(cx, cy, hitTesting);
	                            if (child) {
	                                return child;
	                            }
	                            if (!elt.isLayer && elt._mouseEnabled) {
	                                return elt;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        return null;
	    };
	    VisualElement.prototype.move = function (x, y) {
	        if (x != this._x || y != this._y) {
	            this._x = x;
	            this._y = y;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.resize = function (width, height) {
	        if (width != this._width || height != this._height) {
	            this._width = width;
	            this._height = height;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.setBounds = function (x, y, width, height) {
	        if (x != this._x || y != this._y || width != this._width || height != this._height) {
	            this._x = x;
	            this._y = y;
	            this._width = width;
	            this._height = height;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.setBoundsI = function (x, y, width, height) {
	        x >>= 0;
	        y >>= 0;
	        width >>= 0;
	        height >>= 0;
	        if (x != this._x || y != this._y || width != this._width || height != this._height) {
	            this._x = x;
	            this._y = y;
	            this._width = width;
	            this._height = height;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.setRect = function (r) {
	        if (r.x != this._x || r.y != this._y || r.width != this._width || r.height != this._height) {
	            this._x = r.x;
	            this._y = r.y;
	            this._width = r.width;
	            this._height = r.height;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.setRectI = function (r) {
	        var x = r.x >> 0;
	        var y = r.y >> 0;
	        var width = r.width >> 0;
	        var height = r.height >> 0;
	        if (x != this._x || y != this._y || width != this._width || height != this._height) {
	            this._x = x;
	            this._y = y;
	            this._width = width;
	            this._height = height;
	            this.invalidate();
	        }
	    };
	    VisualElement.prototype.draw = function () {
	        if (this._dirty && this._dom) {
	            this._beforeDraw(this._dom);
	            this._doDraw(this._dom);
	            this._dirty = false;
	        }
	    };
	    VisualElement.prototype.resetSize = function () {
	        this._dom && this._setSizeStyle(this._dom.style);
	    };
	    VisualElement.prototype.getHtml = function () {
	        return this._dom && this._dom.outerHTML;
	    };
	    VisualElement.prototype.setImportantStyle = function (style, value) {
	        this._dom.style.setProperty(style, value, "important");
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    VisualElement.prototype._createDom = function () {
	        return document.createElement("div");
	    };
	    VisualElement.prototype._initDom = function (dom) {
	        var css = dom.style;
	        // css["-webkit-print-color-adjust"] = "exact"; // for chrome printing
	        css.position = "absolute";
	        css.boxSizing = "border-box";
	        // css.padding = "0px";
	        // css.margin = "0px";
	        this._addEventListeners(dom);
	    };
	    VisualElement.prototype._addEventListeners = function (dom) {
	    };
	    VisualElement.prototype._removeEventListeners = function (dom) {
	    };
	    VisualElement.prototype.$_attached = function (parent) {
	        this._doAttached(parent);
	    };
	    VisualElement.prototype._doAttached = function (parent) {
	    };
	    VisualElement.prototype.$_detached = function (parent) {
	        this._doDetached(parent);
	    };
	    VisualElement.prototype._doDetached = function (parent) {
	    };
	    VisualElement.prototype._setSizeStyle = function (css) {
	        css.width = this._width + "px";
	        css.height = this._height + "px";
	    };
	    VisualElement.prototype._getCssDisplay = function () {
	        return "block";
	    };
	    VisualElement.prototype._beforeDraw = function (dom) {
	        var css = dom.style;
	        var sel = this._getCssSelector();
	        if (sel) {
	            dom.className = sel;
	        }
	        else {
	            delete dom.className;
	        }
	        css.left = this._x + "px";
	        css.top = this._y + "px";
	        this._setSizeStyle(css);
	    };
	    VisualElement.prototype._hoverChanged = function () {
	    };
	    VisualElement.prototype._visibleChanged = function () {
	    };
	    VisualElement.prototype.sizeChanged = function () {
	        this.invalidate();
	        this._doSizeChanged();
	    };
	    VisualElement.prototype._doSizeChanged = function () {
	    };
	    return VisualElement;
	}(EventAware_1.EventAware));
	exports.VisualElement = VisualElement;
	var LayerElement = /** @class */ (function (_super) {
	    __extends(LayerElement, _super);
	    function LayerElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(LayerElement.prototype, "isLayer", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LayerElement.prototype._getCssSelector = function () {
	        return undefined;
	    };
	    LayerElement.prototype._doDraw = function (element) {
	    };
	    return LayerElement;
	}(VisualElement));
	exports.LayerElement = LayerElement;
	});

	unwrapExports(VisualElement_1);
	var VisualElement_2 = VisualElement_1.VisualElement;
	var VisualElement_3 = VisualElement_1.LayerElement;

	var Selections = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Selections.ts
	// 2019. 09. 30. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });






	var SelectionMode;
	(function (SelectionMode) {
	    SelectionMode["NONE"] = "none";
	    SelectionMode["SINGLE"] = "single";
	    SelectionMode["EXTENDED"] = "extended";
	})(SelectionMode = exports.SelectionMode || (exports.SelectionMode = {}));
	var SelectionStyle;
	(function (SelectionStyle) {
	    SelectionStyle["BLOCK"] = "block";
	    SelectionStyle["ROWS"] = "rows";
	    SelectionStyle["COLUMNS"] = "columns";
	    SelectionStyle["SINGLE_ROW"] = "singleRow";
	    SelectionStyle["SINGLE_COLUMN"] = "singleColumn";
	    SelectionStyle["SINGLE"] = "single";
	    SelectionStyle["NONE"] = "none";
	})(SelectionStyle = exports.SelectionStyle || (exports.SelectionStyle = {}));
	var SelectionDisplay;
	(function (SelectionDisplay) {
	    SelectionDisplay["CELL"] = "cell";
	    SelectionDisplay["CELL_AND_BORDER"] = "cellAndBorder";
	    SelectionDisplay["MASK"] = "mask";
	})(SelectionDisplay = exports.SelectionDisplay || (exports.SelectionDisplay = {}));
	exports.isSingleSelectionStyle = function (value) {
	    return value == SelectionStyle.SINGLE_ROW || value == SelectionStyle.SINGLE_COLUMN || value == SelectionStyle.SINGLE;
	};
	exports.isRowSelectionStyle = function (value) {
	    return value == SelectionStyle.ROWS || value == SelectionStyle.SINGLE_ROW;
	};
	exports.isColumnSelectionStyle = function (value) {
	    return value == SelectionStyle.COLUMNS || value == SelectionStyle.SINGLE_COLUMN;
	};
	var SelectionItem = /** @class */ (function (_super) {
	    __extends(SelectionItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectionItem(manager) {
	        var _this = _super.call(this) || this;
	        _this._manager = manager;
	        return _this;
	    }
	    SelectionItem.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SelectionItem.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._manager && this._manager.grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectionItem.prototype.inflate = function (dir, newIndex) {
	        switch (dir) {
	            case "left":
	                this._inflateLeft(newIndex);
	                break;
	            case "right":
	                this._inflateRight(newIndex);
	                break;
	            case "top":
	                this._inflateTop(newIndex);
	                break;
	            case "bottom":
	                this._inflateBottom(newIndex);
	                break;
	        }
	    };
	    SelectionItem.prototype._resized = function () {
	        this._manager && this._manager["_itemResized"](this);
	    };
	    return SelectionItem;
	}(Base_1.Base));
	exports.SelectionItem = SelectionItem;
	var SelectionManager = /** @class */ (function (_super) {
	    __extends(SelectionManager, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectionManager(grid) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._exclusiveMode = true;
	        _this._itemStyle = SelectionStyle.BLOCK;
	        _this._items = [];
	        _this._locked = false;
	        _this._grid = grid;
	        return _this;
	    }
	    SelectionManager.prototype.dispose = function () {
	        this._grid = null;
	        this._items = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SelectionManager.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectionManager.prototype, "exclusiveMode", {
	        /** exclusiveMode */
	        get: function () {
	            return this._exclusiveMode;
	        },
	        set: function (value) {
	            if (value != this._exclusiveMode) {
	                this._exclusiveMode = value;
	                this.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectionManager.prototype, "itemStyle", {
	        /** itemStyle */
	        get: function () {
	            return this._itemStyle;
	        },
	        set: function (value) {
	            if (value != this._itemStyle) {
	                this._itemStyle = value;
	                this.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectionManager.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectionManager.prototype, "single", {
	        /** single */
	        get: function () {
	            return this._items.length == 1 && this._items[0].single;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SelectionManager.prototype.lock = function () {
	        this._locked = true;
	    };
	    SelectionManager.prototype.unlock = function () {
	        this._locked = false;
	    };
	    SelectionManager.prototype.getItem = function (index) {
	        return this._items[index];
	    };
	    SelectionManager.prototype.add = function (start, end, style) {
	        if (this._locked) {
	            return null;
	        }
	        if (style == SelectionStyle.NONE) {
	            this.clear();
	            return null;
	        }
	        if (this._exclusiveMode && style != this._style) {
	            this.clear();
	        }
	        var item = null;
	        switch (style) {
	            case SelectionStyle.COLUMNS:
	                item = new ColumnSelection(this, start.column, end.column);
	                break;
	            case SelectionStyle.SINGLE_COLUMN:
	                item = new ColumnSelection(this, start.column, start.column);
	                break;
	            case SelectionStyle.ROWS:
	                item = new RowSelection(this, start.itemIndex, end.itemIndex);
	                break;
	            case SelectionStyle.SINGLE_ROW:
	                item = new RowSelection(this, start.itemIndex, start.itemIndex);
	                break;
	            case SelectionStyle.BLOCK:
	                item = new BlockSelection(this, start, end);
	                break;
	            case SelectionStyle.SINGLE:
	                item = new BlockSelection(this, start, start);
	                break;
	        }
	        return this._addItem(item);
	    };
	    SelectionManager.prototype.remove = function (item) {
	        if (this._locked) {
	            return;
	        }
	        var index = this._items.indexOf(item);
	        if (index >= 0) {
	            this._items.splice(index, 1);
	            this.fireEvent(SelectionManager.REMOVED, item);
	        }
	    };
	    SelectionManager.prototype.clear = function () {
	        if (this._locked) {
	            return;
	        }
	        if (this._items.length > 0) {
	            this._items.length = 0;
	            this.fireEvent(SelectionManager.CLEARED);
	        }
	    };
	    SelectionManager.prototype.containsItem = function (itemIndex) {
	        return false;
	    };
	    SelectionManager.prototype.containsColumn = function (column) {
	        return false;
	    };
	    SelectionManager.prototype.containsCell = function (index) {
	        return this.contains(index.itemIndex, index.column);
	    };
	    SelectionManager.prototype.contains = function (row, column) {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            if (this._items[i].contains(row, column))
	                return true;
	        }
	        return false;
	    };
	    SelectionManager.prototype.normalize = function () {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    SelectionManager.prototype._changed = function () {
	        this.fireEvent(SelectionManager.CHANGED);
	    };
	    SelectionManager.prototype._addItem = function (item) {
	        if (!item)
	            throw new Error("item is null");
	        if (this._items.indexOf(item) < 0) {
	            this._items.push(item);
	            this.fireEvent(SelectionManager.ADDED, item);
	        }
	        return item;
	    };
	    SelectionManager.prototype._itemResized = function (item) {
	        this.fireEvent(SelectionManager.RESIZED, item);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // event names
	    SelectionManager.CHANGED = "onSelectionChanged";
	    SelectionManager.ADDED = "onSelectionAdded";
	    SelectionManager.REMOVED = "onSelectionRemoved";
	    SelectionManager.CLEARED = "onSelectionCleared";
	    SelectionManager.RESIZED = "onSelectionResized";
	    SelectionManager.ENDED = "onSelectionEnded";
	    return SelectionManager;
	}(EventAware_1.EventAware));
	exports.SelectionManager = SelectionManager;
	var BlockSelection = /** @class */ (function (_super) {
	    __extends(BlockSelection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function BlockSelection(manager, startIndex, endIndex) {
	        var _this = _super.call(this, manager) || this;
	        _this._startIndex = startIndex.clone();
	        _this._endIndex = endIndex.clone();
	        return _this;
	    }
	    Object.defineProperty(BlockSelection.prototype, "startIndex", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** startIndex */
	        get: function () {
	            return this._startIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BlockSelection.prototype, "endIndex", {
	        /** endIndex */
	        get: function () {
	            return this._endIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BlockSelection.prototype, "style", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return SelectionStyle.BLOCK;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BlockSelection.prototype, "single", {
	        get: function () {
	            return CellIndex_1.CellIndex.areEquals(this._startIndex, this._endIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BlockSelection.prototype.getBounds = function () {
	        var grid = this.grid;
	        this._startIndex.normalize(grid);
	        this._endIndex.normalize(grid);
	        if (CellIndex_1.CellIndex.areEquals(this._startIndex, this._endIndex)) {
	            return CellIndex_1.CellRange.create(this._startIndex);
	        }
	        else {
	            var c1 = this._startIndex.column ? this._startIndex.column.dataRoot : null;
	            var c2 = this._endIndex.column ? this._endIndex.column.dataRoot : null;
	            return CellIndex_1.CellRange.createRange(this._startIndex.itemIndex, c1, this._endIndex.itemIndex, c2);
	        }
	    };
	    BlockSelection.prototype.contains = function (row, column) {
	        return this.getBounds().contains(row, column);
	    };
	    BlockSelection.prototype.resizeTo = function (newEnd) {
	        if (this.grid.isValid(newEnd) && !CellIndex_1.CellIndex.areEquals(newEnd, this._endIndex)) {
	            this._endIndex.assign(newEnd);
	            this._resized();
	        }
	    };
	    BlockSelection.prototype.intersectsWith = function (item) {
	        return this.getBounds().intersectsWith(item.getBounds());
	    };
	    BlockSelection.prototype.mergeWith = function (item) {
	    };
	    BlockSelection.prototype.getData = function (maxRows) {
	        if (maxRows === void 0) { maxRows = -1; }
	        if (maxRows == 0) {
	            return null;
	        }
	        var grid = this.grid;
	        var columns = grid.collectDataColumns(this._startIndex.column, this._endIndex.column);
	        var cnt;
	        if (!columns || (cnt = columns.length) < 1) {
	            return null;
	        }
	        var r1 = Math.min(this._startIndex.itemIndex, this._endIndex.itemIndex);
	        var r2 = Math.max(this._startIndex.itemIndex, this._endIndex.itemIndex);
	        var rows = [];
	        for (var r = r1; r <= r2; r++) {
	            var item = grid.getItem(r);
	            if (item) {
	                var row = {};
	                for (var c = 0; c < cnt; c++) {
	                    var col = columns[c];
	                    row[col.fieldName] = item.getData(col.dataIndex);
	                }
	                rows.push(row);
	                if (maxRows > 0 && rows.length == maxRows) {
	                    break;
	                }
	            }
	        }
	        return rows;
	    };
	    BlockSelection.prototype._inflateLeft = function (newLeft) {
	        if (this._startIndex.column.distance <= this._endIndex.column.distance) {
	            if (newLeft.column !== this._startIndex.column) {
	                this._startIndex.column = newLeft.column;
	                this._resized();
	            }
	        }
	        else {
	            if (newLeft.column !== this._endIndex.column) {
	                this._endIndex.column = newLeft.column;
	                this._resized();
	            }
	        }
	    };
	    BlockSelection.prototype._inflateRight = function (newRight) {
	        if (this._startIndex.column.distance > this._endIndex.column.distance) {
	            if (newRight.column !== this._startIndex.column) {
	                this._startIndex.column = newRight.column;
	                this._resized();
	            }
	        }
	        else {
	            if (newRight.column !== this._endIndex.column) {
	                this._endIndex.column = newRight.column;
	                this._resized();
	            }
	        }
	    };
	    BlockSelection.prototype._inflateTop = function (newTop) {
	        var grid = this.grid;
	        var i = Math.max(0, Math.min(grid.itemCount - 1, newTop.itemIndex));
	        if (this._startIndex.itemIndex <= this._endIndex.itemIndex) {
	            if (i !== this._startIndex.itemIndex) {
	                this._startIndex.itemIndex = i;
	                this._resized();
	            }
	        }
	        else {
	            if (i !== this._endIndex.itemIndex) {
	                this._endIndex.itemIndex = i;
	                this._resized();
	            }
	        }
	    };
	    BlockSelection.prototype._inflateBottom = function (newBottom) {
	        var grid = this.grid;
	        var i = Math.max(0, Math.min(grid.itemCount - 1, newBottom.itemIndex));
	        if (this._startIndex.itemIndex > this._endIndex.itemIndex) {
	            if (i !== this._startIndex.itemIndex) {
	                this._startIndex.itemIndex = i;
	                this._resized();
	            }
	        }
	        else {
	            if (i !== this._endIndex.itemIndex) {
	                this._endIndex.itemIndex = i;
	                this._resized();
	            }
	        }
	    };
	    BlockSelection.prototype.toString = function () {
	        return this._startIndex + " ~ " + this._endIndex;
	    };
	    return BlockSelection;
	}(SelectionItem));
	exports.BlockSelection = BlockSelection;
	var RowSelection = /** @class */ (function (_super) {
	    __extends(RowSelection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowSelection(manager, startRow, endRow) {
	        var _this = _super.call(this, manager) || this;
	        _this._startRow = startRow;
	        _this._endRow = endRow;
	        return _this;
	    }
	    Object.defineProperty(RowSelection.prototype, "startRow", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** startRow */
	        get: function () {
	            return this._startRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowSelection.prototype, "endRow", {
	        /** endRow */
	        get: function () {
	            return this._endRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowSelection.prototype, "topRow", {
	        /** topRow */
	        get: function () {
	            return Math.min(this._startRow, this._endRow);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowSelection.prototype, "bottomRow", {
	        /** bottomRow */
	        get: function () {
	            return Math.max(this._startRow, this._endRow);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowSelection.prototype, "style", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return SelectionStyle.ROWS;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowSelection.prototype, "single", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RowSelection.prototype.getBounds = function () {
	        var grid = this.grid;
	        var itemCount = grid.itemCount;
	        this._startRow = Math.max(0, Math.min(itemCount - 1, this._startRow));
	        this._endRow = Math.max(0, Math.min(itemCount - 1, this._endRow));
	        if (this._startRow <= this._endRow) {
	            return CellIndex_1.CellRange.createRange(this._startRow, grid.getVisibleColumn(0), this._endRow, grid.getVisibleColumn(grid.visibleColumnCount - 1));
	        }
	        else {
	            return CellIndex_1.CellRange.createRange(this._endRow, grid.getVisibleColumn(0), this._startRow, grid.getVisibleColumn(grid.visibleColumnCount - 1));
	        }
	    };
	    RowSelection.prototype.contains = function (row, column) {
	        return (row >= this.topRow) && (row <= this.bottomRow);
	    };
	    RowSelection.prototype.resizeTo = function (endIndex) {
	        var row = Math.max(0, endIndex.itemIndex);
	        if (row != this._endRow) {
	            this._endRow = Math.max(0, Math.min(this.grid.itemCount - 1, row));
	            this._resized();
	        }
	    };
	    RowSelection.prototype.intersectsWith = function (item) {
	        return this.getBounds().intersectsWith(item.getBounds());
	    };
	    RowSelection.prototype.mergeWith = function (item) {
	    };
	    RowSelection.prototype.getData = function (maxRows) {
	        if (maxRows === void 0) { maxRows = -1; }
	        if (maxRows == 0) {
	            return null;
	        }
	        var grid = this.grid;
	        var columns = grid.collectDataColumns(grid.getVisibleColumn(0), grid.getVisibleColumn(grid.visibleColumnCount - 1));
	        if (!columns) {
	            return null;
	        }
	        var cnt = columns.length;
	        if (cnt < 1) {
	            return null;
	        }
	        var r1 = Math.max(0, Math.min(this._startRow, this._endRow));
	        var r2 = Math.min(grid.itemCount - 1, Math.max(this._startRow, this._endRow));
	        var rows = [];
	        for (var r = r1; r <= r2; r++) {
	            var item = grid.getItem(r);
	            if (item) {
	                var row = {};
	                for (var c = 0; c < cnt; c++) {
	                    var col = columns[c];
	                    row[col.fieldName] = item.getData(col.dataIndex);
	                }
	                rows.push(row);
	                if (maxRows > 0 && rows.length == maxRows) {
	                    break;
	                }
	            }
	        }
	        return rows;
	    };
	    RowSelection.prototype._inflateLeft = function (newLeft) {
	    };
	    RowSelection.prototype._inflateRight = function (newRight) {
	    };
	    RowSelection.prototype._inflateTop = function (newTop) {
	        var i = newTop.itemIndex;
	        if (i != this.topRow) {
	            if (this._startRow <= this._endRow) {
	                this._startRow = Math.max(0, Math.min(this.grid.itemCount - 1, i));
	            }
	            else {
	                this._endRow = Math.max(0, Math.min(this.grid.itemCount - 1, i));
	            }
	            this._resized();
	        }
	    };
	    RowSelection.prototype._inflateBottom = function (newBottom) {
	        var i = newBottom.itemIndex;
	        if (i != this.bottomRow) {
	            if (this._startRow > this._endRow) {
	                this._startRow = Math.max(0, Math.min(this.grid.itemCount - 1, i));
	            }
	            else {
	                this._endRow = Math.max(0, Math.min(this.grid.itemCount - 1, i));
	            }
	            this._resized();
	        }
	    };
	    return RowSelection;
	}(SelectionItem));
	exports.RowSelection = RowSelection;
	var ColumnSelection = /** @class */ (function (_super) {
	    __extends(ColumnSelection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnSelection(manager, startColumn, endColumn) {
	        var _this = _super.call(this, manager) || this;
	        _this._startColumn = startColumn;
	        _this._endColumn = endColumn;
	        return _this;
	    }
	    Object.defineProperty(ColumnSelection.prototype, "startColumn", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** startColumn */
	        get: function () {
	            return this._startColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSelection.prototype, "endColumn", {
	        /** endColumn */
	        get: function () {
	            return this._endColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSelection.prototype, "leftColumn", {
	        /** leftColumn */
	        get: function () {
	            return this._startColumn.distance <= this._endColumn.distance ? this._startColumn : this._endColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSelection.prototype, "rightColumn", {
	        /** rightColumn */
	        get: function () {
	            return this._startColumn.distance > this._endColumn.distance ? this._startColumn : this._endColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSelection.prototype, "style", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return SelectionStyle.COLUMNS;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnSelection.prototype, "single", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ColumnSelection.prototype.getBounds = function () {
	        if (this._startColumn.distance <= this._endColumn.distance) {
	            return CellIndex_1.CellRange.createRange(0, this._startColumn, this._startColumn.grid.itemCount - 1, this._endColumn);
	        }
	        else {
	            return CellIndex_1.CellRange.createRange(0, this._endColumn, this._endColumn.grid.itemCount - 1, this._startColumn);
	        }
	    };
	    ColumnSelection.prototype.contains = function (row, column) {
	        return GridColumn_1.GridColumn.compareLoc(column, this._startColumn) >= 0 && GridColumn_1.GridColumn.compareLoc(column, this._endColumn) <= 0;
	    };
	    ColumnSelection.prototype.resizeTo = function (newEnd) {
	        if (newEnd.column !== this._endColumn) {
	            this._endColumn = newEnd.column;
	            this._resized();
	        }
	    };
	    ColumnSelection.prototype.intersectsWith = function (item) {
	        return this.getBounds().intersectsWith(item.getBounds());
	    };
	    ColumnSelection.prototype.mergeWith = function (item) {
	    };
	    ColumnSelection.prototype.getData = function (maxRows) {
	        if (maxRows === void 0) { maxRows = -1; }
	        if (maxRows == 0) {
	            return null;
	        }
	        var grid = this.grid;
	        var columns = grid.collectDataColumns(this._startColumn, this._endColumn);
	        if (!columns) {
	            return null;
	        }
	        var cnt = grid.itemCount;
	        var rows = [];
	        for (var r = 0; r < cnt; r++) {
	            var item = grid.getItem(r);
	            if (item) {
	                var row = {};
	                for (var c = 0, cols = columns.length; c < cols; c++) {
	                    row[columns[c].fieldName] = item.getData(columns[c].dataIndex);
	                }
	                rows.push(row);
	                if (maxRows > 0 && rows.length == maxRows) {
	                    break;
	                }
	            }
	        }
	        return rows;
	    };
	    ColumnSelection.prototype._inflateLeft = function (newLeft) {
	        var c = newLeft.column;
	        if (c !== this.leftColumn) {
	            if (this._startColumn.distance <= this._endColumn.distance) {
	                this._startColumn = c;
	            }
	            else {
	                this._endColumn = c;
	            }
	            this._resized();
	        }
	    };
	    ColumnSelection.prototype._inflateRight = function (newRight) {
	        var c = newRight.column;
	        if (c !== this.rightColumn) {
	            if (this._startColumn.distance > this._endColumn.distance) {
	                this._startColumn = c;
	            }
	            else {
	                this._endColumn = c;
	            }
	            this._resized();
	        }
	    };
	    ColumnSelection.prototype._inflateTop = function (newTop) {
	    };
	    ColumnSelection.prototype._inflateBottom = function (newBottom) {
	    };
	    return ColumnSelection;
	}(SelectionItem));
	exports.ColumnSelection = ColumnSelection;
	var SelectionView = /** @class */ (function (_super) {
	    __extends(SelectionView, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectionView() {
	        return _super.call(this, "selectionView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SelectionView.prototype._getCssSelector = function () {
	        return "rg-selection";
	    };
	    SelectionView.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        this.setImportantStyle("pointer-events", "none");
	    };
	    return SelectionView;
	}(VisualElement_1.LayerElement));
	exports.SelectionView = SelectionView;
	var SelectionMask = /** @class */ (function (_super) {
	    __extends(SelectionMask, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectionMask() {
	        var _this = _super.call(this, "selectionMask") || this;
	        _this._toped = false;
	        _this._bottomed = false;
	        _this._lefted = false;
	        _this._righted = false;
	        _this._view = new SelectionView();
	        _this.addChild(_this._view);
	        return _this;
	    }
	    Object.defineProperty(SelectionMask.prototype, "item", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** item  */
	        get: function () {
	            return this._item;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SelectionMask.prototype.prepare = function () {
	        this._toped = this._bottomed = this._lefted = this._righted = false;
	    };
	    SelectionMask.prototype.updateElement = function () {
	        var x = 0;
	        var y = 0;
	        var w = this.width;
	        var h = this.height;
	        if (this._lefted) {
	            x -= 10;
	            w += 10;
	        }
	        if (this._righted) {
	            w += 10;
	        }
	        if (this._toped) {
	            y -= 10;
	            h += 10;
	        }
	        if (this._bottomed) {
	            h += 10;
	        }
	        this._view.setBounds(x, y, w, h);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SelectionMask.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        this.setImportantStyle("overflow", "hidden");
	        this.setImportantStyle("pointer-events", "none");
	    };
	    return SelectionMask;
	}(VisualElement_1.LayerElement));
	exports.SelectionMask = SelectionMask;
	var SelectionLayer = /** @class */ (function (_super) {
	    __extends(SelectionLayer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectionLayer(grid) {
	        var _this = _super.call(this, "selectionLayer") || this;
	        _this._pool = [];
	        _this._views = {};
	        _this._grid = grid;
	        return _this;
	    }
	    SelectionLayer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SelectionLayer.prototype.addView = function (item) {
	        var h = item["$_hash"];
	        var view = this._views[h];
	        if (!view) {
	            view = this._pool.pop() || new SelectionMask();
	            this._views[h] = view;
	        }
	        view["_item"] = item;
	        this.addChild(view);
	        return view;
	    };
	    SelectionLayer.prototype.clearViews = function () {
	        for (var h in this._views) {
	            var v = this._views[h];
	            this.removeChild(v);
	            this._pool.push(v);
	        }
	        this._views = {};
	    };
	    SelectionLayer.prototype.layout = function () {
	        var lm = this._grid.layoutManager;
	        var sels = this._grid.selections;
	        for (var h in this._views) {
	            var view = this._views[h];
	            var item = view.item;
	            var visible = false;
	            var r = new Rectangle_1.Rectangle();
	            if (!item.single) {
	                view.prepare();
	                if (item instanceof RowSelection) {
	                    visible = this.$_getSelectionRowsRect(lm, item, view, r);
	                    view["_lefted"] = true;
	                    view["_righted"] = true;
	                }
	                else if (item instanceof ColumnSelection) {
	                    visible = this.$_getSelectionColumnsRect(lm, item, view, r);
	                    view["_toped"] = true;
	                    view["_bottomed"] = true;
	                }
	                else {
	                    visible = this.$_getSelectionRangeRect(lm, item, view, r);
	                }
	                if (visible) {
	                    // adjust bottom
	                    var y = lm.footerBounds.y;
	                    if (r.bottom > y) {
	                        view["_bottomed"] = true;
	                        r.bottom = y;
	                    }
	                }
	            }
	            view.visible = visible;
	            if (view.visible) {
	                view.setRectI(r);
	                view.updateElement(); //, mobile ? this._selectOptions.mobileStyles() : this._selectOptions.maskStyles());
	                view.invalidate();
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SelectionLayer.prototype.$_getSelectionRowsRect = function (lm, item, view, r) {
	        var grid = this._grid;
	        var range = item.getBounds();
	        var idx1 = range.r1;
	        var idx2 = range.r2;
	        var items = lm.itemCount;
	        var fixed = lm.fixedItemCount;
	        var t = grid.topIndex;
	        var r1;
	        var r2;
	        if (fixed > 0) {
	            if (idx1 >= t + fixed + items || idx2 < 0 || idx1 >= fixed && idx2 < t + fixed) {
	                return false;
	            }
	            var y = lm.fixedHeight + grid.fixedOptions.rowBarHeight;
	            if (idx1 < fixed) {
	                r1 = lm.getItemBounds(Math.max(0, idx1));
	            }
	            else {
	                r1 = lm.getItemBounds(Math.max(0, idx1 - t));
	                if (r1.y < y) {
	                    view["_toped"] = true;
	                }
	                r1.y = Math.max(r1.y, y);
	            }
	            if (idx2 < fixed) {
	                r2 = lm.getItemBounds(idx2);
	            }
	            else if (idx1 <= fixed && idx2 < fixed + t) { // fixed 영역과 body영역에 겹쳐있을 때
	                r2 = lm.getItemBounds(Math.min(fixed + t, fixed) - 1);
	            }
	            else if (idx2 >= t) {
	                r2 = lm.getItemBounds(Math.min(lm.itemCount + fixed - 1, idx2 - t));
	                r2.y = Math.max(r2.y, y);
	            }
	            else {
	                r2 = r1;
	            }
	        }
	        else if (items > 0) {
	            if (idx1 >= t + items || idx2 < t) {
	                return false;
	            }
	            var y = idx1 - t;
	            r1 = lm.getItemBounds(Math.max(0, y));
	            r2 = lm.getItemBounds(Math.min(items - 1, idx2 - t));
	            if (y < 0) {
	                view["_toped"] = true;
	            }
	        }
	        else {
	            return false;
	        }
	        r.copy(r1.union(r2));
	        r.offset(0, lm.bodyBounds.y);
	        r.right = lm.rightColCount > 0 ? lm.rightContentBounds.right : lm.bodyBounds.right;
	        return true;
	    };
	    SelectionLayer.prototype.$_getSelectionColumnsRect = function (lm, item, view, r) {
	        var grid = this._grid;
	        var range = item.getBounds();
	        var fixed = lm.fixedColCount;
	        var rfixed = lm.rightColCount;
	        var rstart = lm.rightFirstCol;
	        var c1 = range.c1.displayIndex;
	        var c2 = range.c2.displayIndex;
	        var wbar = grid.fixedOptions.colBarWidth;
	        var r1 = lm.getDataRootRect(range.c1);
	        var r2 = lm.getDataRootRect(range.c2);
	        r.x = Math.min(r1.x, r2.x);
	        r.right = Math.max(r1.right, r2.right);
	        r.y = lm.headerBounds.bottom;
	        r.height = lm.getItemRect(lm.itemCount - 1).bottom;
	        if (lm.fixedItemCount > 0) {
	            r.height += lm.fixedHeight;
	        }
	        // adjust left
	        if (c1 >= fixed) {
	            var x = lm.fixedContentBounds.right;
	            if (r.x < x) {
	                view["_lefted"] = true;
	                r.left = Math.max(r.left, x);
	            }
	        }
	        // adjust right
	        if (rfixed > 0) {
	            var c = lm.rightFirstCol;
	            if (c1 >= c) {
	                r.width = 0;
	            }
	            else if (c2 < c) {
	                r.right = Math.min(r.right, lm.rightContentBounds.x);
	                view["_righted"] = true;
	            }
	        }
	        return true;
	    };
	    SelectionLayer.prototype.$_getSelectionRangeRect = function (lm, item, view, r) {
	        var tr = new Rectangle_1.Rectangle();
	        if (!this.$_getSelectionRowsRect(lm, item, view, tr)) {
	            return false;
	        }
	        r.y = tr.y;
	        r.bottom = tr.bottom;
	        this.$_getSelectionColumnsRect(lm, item, view, tr);
	        r.x = tr.x;
	        r.right = tr.right;
	        return true;
	    };
	    return SelectionLayer;
	}(VisualElement_1.LayerElement));
	exports.SelectionLayer = SelectionLayer;
	});

	unwrapExports(Selections);
	var Selections_1 = Selections.SelectionMode;
	var Selections_2 = Selections.SelectionStyle;
	var Selections_3 = Selections.SelectionDisplay;
	var Selections_4 = Selections.isSingleSelectionStyle;
	var Selections_5 = Selections.isRowSelectionStyle;
	var Selections_6 = Selections.isColumnSelectionStyle;
	var Selections_7 = Selections.SelectionItem;
	var Selections_8 = Selections.SelectionManager;
	var Selections_9 = Selections.BlockSelection;
	var Selections_10 = Selections.RowSelection;
	var Selections_11 = Selections.ColumnSelection;
	var Selections_12 = Selections.SelectionView;
	var Selections_13 = Selections.SelectionMask;
	var Selections_14 = Selections.SelectionLayer;

	var DisplayOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DisplayOptions.ts
	// 2019. 07. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });






	var DisplayOptions = /** @class */ (function (_super) {
	    __extends(DisplayOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DisplayOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._columnResizable = true;
	        _this._columnMovable = true;
	        _this._parentChangable = false;
	        _this._defaultColumnWidth = 120;
	        _this._fitStyle = Types.GridFitStyle.NONE;
	        _this._rowResizable = false;
	        _this._eachRowResizable = false;
	        _this._rowHeight = 0;
	        _this._minRowHeight = 4;
	        _this._maxRowHeight = 0;
	        _this._hscrollBar = true;
	        _this._vscrollBar = true;
	        _this._liveScroll = true;
	        _this._horizLiveScroll = true;
	        _this._scrollDuration = 0;
	        _this._hscrollDuration = 0;
	        _this._hintDuration = 0;
	        _this._emptyShowTooltip = false;
	        _this._rowChangeDelay = 0;
	        _this._horzScrollStep = 8;
	        _this._emptyMessage = "이 곳에 표시할 메시지를 DisplayOptions.emptyMessage 속성으로 설정합니다.";
	        _this._showEmptyMessage = false;
	        _this._heightMeasurer = null;
	        _this._fitWhenResized = true;
	        _this._focusVisible = true;
	        _this._rowFocusOption = null;
	        _this._rowFocusVisible = false;
	        _this._rowFocusMask = Types.RowFocusMask.ROW;
	        _this._rowFocusBackground = null;
	        _this._wheelEnabled = true;
	        _this._wheelScrollLines = 3;
	        _this._wheelScrollHorz = 16;
	        _this._wheelAccelDelay = 0;
	        _this._wheelAccelScroll = null;
	        _this._wheelEventPropagate = true;
	        _this._rightClickable = true;
	        _this._editItemMerging = false;
	        _this._showInnerFocus = true;
	        _this._toastZIndex = 3000;
	        _this._focusBackground = null;
	        _this._focusColor = "#ff333333";
	        _this._innerFocusColor = "#ff333333";
	        _this._focusActiveColor = "#ff5292f7";
	        _this._focusBorderWidth = 2;
	        _this._useCssStyleProgress = false;
	        _this._popupDropdownCount = 0;
	        _this._drawBorderTop = true;
	        _this._drawBorderBottom = true;
	        _this._drawBorderLeft = true;
	        _this._drawBorderRight = true;
	        _this._drawLastColumnRight = true;
	        _this._cursorCallback = null;
	        _this._selectionMode = Selections.SelectionMode.SINGLE;
	        _this._selectionStyle = Selections.SelectionStyle.BLOCK;
	        _this._selectionDisplay = Selections.SelectionDisplay.CELL;
	        _this._rowHoverType = Types.RowHoverType.NONE;
	        _this._focusPen = new Stroke.SolidPen(_this._focusColor, _this._focusBorderWidth);
	        _this._innerFocusPen = new Stroke.SolidPen(_this._innerFocusColor, 1, [1, 1]);
	        _this._focusActivePen = new Stroke.SolidPen(_this._focusActiveColor, _this._focusBorderWidth);
	        _this._focusBackgroundBrush = new Fill.SolidBrush(_this._focusBackground);
	        _this._rowFocusBackgroundBrush = new Fill.SolidBrush(_this._rowFocusBackground);
	        // this._rowHoverMask = new RowHoverMask(grid);
	        // this._rowBlockMask = new RowBlockMask(grid);
	        // this._rowFocusOption = new RowFocusOption(grid);
	        _this._scrollBarStyles = new VisualStyles_1.VisualStyles(_this, "scrollBarStyles"); //,GridStyleSheet.Default && GridStyleSheet.Default.scrollBar()).addListener(this);
	        _this._scrollThumbStyles = new VisualStyles_1.VisualStyles(_this, "scrollThumbStyles"); //, GridStyleSheet.Default && GridStyleSheet.Default.scrollThumb()).addListener(this);
	        _this._scrollButtonStyles = new VisualStyles_1.VisualStyles(_this, "scrollButtonStyles"); //, GridStyleSheet.Default && GridStyleSheet.Default.scrollButton()).addListener(this);
	        return _this;
	    }
	    DisplayOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DisplayOptions.prototype, "columnResizable", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** columnResizable */
	        get: function () {
	            return this._columnResizable;
	        },
	        set: function (value) {
	            if (value != this._columnResizable) {
	                this._columnResizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "columnMovable", {
	        /** columnMovable */
	        get: function () {
	            return this._columnMovable;
	        },
	        set: function (value) {
	            if (value != this._columnMovable) {
	                this._columnMovable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "parentChangable", {
	        /** parentChangable */
	        get: function () {
	            return this._parentChangable;
	        },
	        set: function (value) {
	            if (value != this._parentChangable) {
	                this._parentChangable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "defaultColumnWidth", {
	        /** defaultColumnWidth */
	        get: function () {
	            return this._defaultColumnWidth;
	        },
	        set: function (value) {
	            if (value != this._defaultColumnWidth) {
	                this._defaultColumnWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "fitStyle", {
	        /** fitStyle */
	        get: function () {
	            return this._fitStyle;
	        },
	        set: function (value) {
	            if (value != this._fitStyle) {
	                //this._grid._columnWidthsDirty = this._grid._columnWidthsDirty || value === GridFitStyle.NONE;
	                this._fitStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowResizable", {
	        /** rowResizable */
	        get: function () {
	            return this._rowResizable;
	        },
	        set: function (value) {
	            if (value != this._rowResizable) {
	                this._rowResizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "eachRowResizable", {
	        /** eachRowResizable */
	        get: function () {
	            return this._eachRowResizable;
	        },
	        set: function (value) {
	            if (value != this._eachRowResizable) {
	                this._eachRowResizable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowHeight", {
	        /** rowHeight */
	        get: function () {
	            return this._rowHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._rowHeight) {
	                this._rowHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "minRowHeight", {
	        /** minRowHeight */
	        get: function () {
	            return this._minRowHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._minRowHeight) {
	                this._minRowHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "maxRowHeight", {
	        /** maxRowHeight */
	        get: function () {
	            return this._maxRowHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._maxRowHeight) {
	                this._maxRowHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "hscrollBar", {
	        /** hscrollBar */
	        get: function () {
	            return this._hscrollBar;
	        },
	        set: function (value) {
	            if (value != this._hscrollBar) {
	                this._hscrollBar = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "vscrollBar", {
	        /** vscrollBar */
	        get: function () {
	            return this._vscrollBar;
	        },
	        set: function (value) {
	            if (value != this._vscrollBar) {
	                this._vscrollBar = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "liveScroll", {
	        /** liveScroll */
	        get: function () {
	            return this._liveScroll;
	        },
	        set: function (value) {
	            if (value != this._liveScroll) {
	                this._liveScroll = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "horizLiveScroll", {
	        /** horizLiveScroll */
	        get: function () {
	            return this._horizLiveScroll;
	        },
	        set: function (value) {
	            if (value != this._horizLiveScroll) {
	                this._horizLiveScroll = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "scrollDuration", {
	        /** scrollDuration */
	        get: function () {
	            return this._scrollDuration;
	        },
	        set: function (value) {
	            if (value != this._scrollDuration) {
	                this._scrollDuration = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "hscrollDuration", {
	        /** hscrollDuration */
	        get: function () {
	            return this._hscrollDuration;
	        },
	        set: function (value) {
	            if (value != this._hscrollDuration) {
	                this._hscrollDuration = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "hintDuration", {
	        /** hintDuration */
	        get: function () {
	            return this._hintDuration;
	        },
	        set: function (value) {
	            if (value != this._hintDuration) {
	                this._hintDuration = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "emptyShowTooltip", {
	        /** emptyShowTooltip */
	        get: function () {
	            return this._emptyShowTooltip;
	        },
	        set: function (value) {
	            if (value != this._emptyShowTooltip) {
	                this._emptyShowTooltip = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowChangeDelay", {
	        /** rowChangeDelay */
	        get: function () {
	            return this._rowChangeDelay;
	        },
	        set: function (value) {
	            if (value != this._rowChangeDelay) {
	                this._rowChangeDelay = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "horzScrollStep", {
	        /** horzScrollStep */
	        get: function () {
	            return this._horzScrollStep;
	        },
	        set: function (value) {
	            if (value != this._horzScrollStep) {
	                this._horzScrollStep = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "emptyMessage", {
	        /** emptyMessage */
	        get: function () {
	            return this._emptyMessage;
	        },
	        set: function (value) {
	            if (value != this._emptyMessage) {
	                this._emptyMessage = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "showEmptyMessage", {
	        /** showEmptyMessage */
	        get: function () {
	            return this._showEmptyMessage;
	        },
	        set: function (value) {
	            if (value != this._showEmptyMessage) {
	                this._showEmptyMessage = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "heightMeasurer", {
	        /** heightMeasurer */
	        get: function () {
	            return this._heightMeasurer;
	        },
	        set: function (value) {
	            if (value != this._heightMeasurer) {
	                this._heightMeasurer = value;
	                // if (value == "fixed") {
	                // 	this._grid.setHeightMeasurer(FixedHeightsMeasurer.Default);
	                // } else {
	                // 	this._grid.setHeightMeasurer(null);
	                // }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "fitWhenResized", {
	        /** fitWhenResized */
	        get: function () {
	            return this._fitWhenResized;
	        },
	        set: function (value) {
	            if (value != this._fitWhenResized) {
	                this._fitWhenResized = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "focusVisible", {
	        /** focusVisible */
	        get: function () {
	            return this._focusVisible;
	        },
	        set: function (value) {
	            if (value != this._focusVisible) {
	                this._focusVisible = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowFocusOption", {
	        /** rowFocusOption */
	        get: function () {
	            return this._rowFocusOption;
	        },
	        set: function (value) {
	            if (value != this._rowFocusOption) {
	                this._rowFocusOption = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowFocusVisible", {
	        /** rowFocusVisible */
	        get: function () {
	            return this._rowFocusVisible;
	        },
	        set: function (value) {
	            if (value != this._rowFocusVisible) {
	                this._rowFocusVisible = value;
	                this._changed();
	            }
	            // this._rowFocusOption._visible = this._rowFocusVisible;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowFocusMask", {
	        /** rowFocusMask */
	        get: function () {
	            return this._rowFocusMask;
	        },
	        set: function (value) {
	            if (value != this._rowFocusMask) {
	                this._rowFocusMask = value;
	                this._changed();
	            }
	            // this._rowFocusOption._rowFocusMask = this._rowFocusMask;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowFocusBackground", {
	        /** rowFocusBackground */
	        get: function () {
	            return this._rowFocusBackground;
	        },
	        set: function (value) {
	            if (value != this._rowFocusBackground) {
	                this._rowFocusBackground = value;
	                // if (value) {
	                // 	this._rowFocusBackgroundBrush = new SolidBrush(this._rowFocusBackground);
	                // }
	                this._changed();
	            }
	            // this._rowFocusOption.styles().background(this._rowFocusBackgroundBrush);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelEnabled", {
	        /** wheelEnabled */
	        get: function () {
	            return this._wheelEnabled;
	        },
	        set: function (value) {
	            if (value != this._wheelEnabled) {
	                this._wheelEnabled = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelScrollLines", {
	        /** wheelScrollLines */
	        get: function () {
	            return this._wheelScrollLines;
	        },
	        set: function (value) {
	            if (value != this._wheelScrollLines) {
	                this._wheelScrollLines = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelScrollHorz", {
	        /** wheelScrollHorz */
	        get: function () {
	            return this._wheelScrollHorz;
	        },
	        set: function (value) {
	            if (value != this._wheelScrollHorz) {
	                this._wheelScrollHorz = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelAccelDelay", {
	        /** wheelAccelDelay */
	        get: function () {
	            return this._wheelAccelDelay;
	        },
	        set: function (value) {
	            if (value != this._wheelAccelDelay) {
	                this._wheelAccelDelay = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelAccelScroll", {
	        /** wheelAccelScroll */
	        get: function () {
	            return this._wheelAccelScroll;
	        },
	        set: function (value) {
	            if (value != this._wheelAccelScroll) {
	                this._wheelAccelScroll = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "wheelEventPropagate", {
	        /** wheelEventPropagate */
	        get: function () {
	            return this._wheelEventPropagate;
	        },
	        set: function (value) {
	            if (value != this._wheelEventPropagate) {
	                this._wheelEventPropagate = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rightClickable", {
	        /** rightClickable */
	        get: function () {
	            return this._rightClickable;
	        },
	        set: function (value) {
	            if (value != this._rightClickable) {
	                this._rightClickable = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "editItemMerging", {
	        /** editItemMerging */
	        get: function () {
	            return this._editItemMerging;
	        },
	        set: function (value) {
	            if (value != this._editItemMerging) {
	                this._editItemMerging = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "showInnerFocus", {
	        /** showInnerFocus */
	        get: function () {
	            return this._showInnerFocus;
	        },
	        set: function (value) {
	            if (value != this._showInnerFocus) {
	                this._showInnerFocus = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "toastZIndex", {
	        /** toastZIndex */
	        get: function () {
	            return this._toastZIndex;
	        },
	        set: function (value) {
	            if (value != this._toastZIndex) {
	                this._toastZIndex = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "focusBackground", {
	        /** focusBackground */
	        get: function () {
	            return this._focusBackground;
	        },
	        set: function (value) {
	            if (value != this._focusBackground) {
	                this._focusBackground = value;
	                this._focusBackgroundBrush = new Fill.SolidBrush(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "focusColor", {
	        /** focusColor */
	        get: function () {
	            return this._focusColor;
	        },
	        set: function (value) {
	            if (value != this._focusColor) {
	                this._focusColor = value;
	                this._focusPen = new Stroke.SolidPen(value, this._focusBorderWidth);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "innerFocusColor", {
	        /** innerFocusColor */
	        get: function () {
	            return this._innerFocusColor;
	        },
	        set: function (value) {
	            if (value != this._innerFocusColor) {
	                this._innerFocusColor = value;
	                this._innerFocusPen = new Stroke.SolidPen(value, 1, [1, 1]);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "focusActiveColor", {
	        /** focusActiveColor */
	        get: function () {
	            return this._focusActiveColor;
	        },
	        set: function (value) {
	            if (value != this._focusActiveColor) {
	                this._focusActiveColor = value;
	                this._focusActivePen = new Stroke.SolidPen(value, this._focusBorderWidth);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "focusBorderWidth", {
	        /** focusBorderWidth */
	        get: function () {
	            return this._focusBorderWidth;
	        },
	        set: function (value) {
	            if (value != this._focusBorderWidth) {
	                this._focusBorderWidth = value;
	                this._focusPen = new Stroke.SolidPen(this._focusColor, value);
	                this._focusActivePen = new Stroke.SolidPen(this._focusActiveColor, value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "useCssStyleProgress", {
	        /** useCssStyleProgress */
	        get: function () {
	            return this._useCssStyleProgress;
	        },
	        set: function (value) {
	            if (value != this._useCssStyleProgress) {
	                this._useCssStyleProgress = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "popupDropdownCount", {
	        /** popupDropdownCount */
	        get: function () {
	            return this._popupDropdownCount;
	        },
	        set: function (value) {
	            if (value != this._popupDropdownCount) {
	                this._popupDropdownCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "drawBorderTop", {
	        /** drawBorderTop */
	        get: function () {
	            return this._drawBorderTop;
	        },
	        set: function (value) {
	            if (value != this._drawBorderTop) {
	                this._drawBorderTop = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "drawBorderBottom", {
	        /** drawBorderBottom */
	        get: function () {
	            return this._drawBorderBottom;
	        },
	        set: function (value) {
	            if (value != this._drawBorderBottom) {
	                this._drawBorderBottom = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "drawBorderLeft", {
	        /** drawBorderLeft */
	        get: function () {
	            return this._drawBorderLeft;
	        },
	        set: function (value) {
	            if (value != this._drawBorderLeft) {
	                this._drawBorderLeft = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "drawBorderRight", {
	        /** drawBorderRight */
	        get: function () {
	            return this._drawBorderRight;
	        },
	        set: function (value) {
	            if (value != this._drawBorderRight) {
	                this._drawBorderRight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "drawLastColumnRight", {
	        /** drawLastColumnRight */
	        get: function () {
	            return this._drawLastColumnRight;
	        },
	        set: function (value) {
	            if (value != this._drawLastColumnRight) {
	                this._drawLastColumnRight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "scrollBarStyles", {
	        /** scrollBarStyles */
	        get: function () {
	            return this._scrollBarStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "scrollThumbStyles", {
	        /** scrollThumbStyles */
	        get: function () {
	            return this._scrollThumbStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "scrollButtonStyles", {
	        /** scrollButtonStyles */
	        get: function () {
	            return this._scrollButtonStyles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "cursorCallback", {
	        /** cursorCallback */
	        get: function () {
	            return this._cursorCallback;
	        },
	        set: function (value) {
	            this._cursorCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "selectionMode", {
	        /** selectionMode */
	        get: function () {
	            return this._selectionMode;
	        },
	        set: function (value) {
	            if (value != this._selectionMode) {
	                this._selectionMode = value;
	                this.grid.clearSelection();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "selectionStyle", {
	        /** selectionStyle */
	        get: function () {
	            return this._selectionStyle;
	        },
	        set: function (value) {
	            if (value != this._selectionStyle) {
	                var sels = this.grid.selections;
	                if (sels.count > 0) {
	                    var item = sels.getItem(0);
	                    var rng = item.getBounds();
	                    sels.clear();
	                }
	                this._selectionStyle = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "selectionDisplay", {
	        /** selectionDisplay */
	        get: function () {
	            return this._selectionDisplay;
	        },
	        set: function (value) {
	            if (value != this._selectionDisplay) {
	                this._selectionDisplay = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisplayOptions.prototype, "rowHoverType", {
	        /** rowHoverType */
	        get: function () {
	            return this._rowHoverType;
	        },
	        set: function (value) {
	            if (value != this._rowHoverType) {
	                this._rowHoverType = value;
	                this._refreshOwner();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DisplayOptions.prototype.setScrollBarStyles = function (value) {
	        if (value != this._scrollBarStyles) {
	            if (!value) {
	                this._scrollBarStyles.clearValues();
	            }
	            else {
	                this._scrollBarStyles.extend(value);
	            }
	        }
	        this._refreshOwner();
	    };
	    DisplayOptions.prototype.setScrollThumbStyles = function (value) {
	        if (value != this._scrollThumbStyles) {
	            if (!value) {
	                this._scrollThumbStyles.clearValues();
	            }
	            else {
	                this._scrollThumbStyles.extend(value);
	            }
	        }
	        this._refreshOwner();
	    };
	    DisplayOptions.prototype.setScrollButtonStyles = function (value) {
	        if (value != this._scrollButtonStyles) {
	            if (!value) {
	                this._scrollButtonStyles.clearValues();
	            }
	            else {
	                this._scrollButtonStyles.extend(value);
	            }
	        }
	        this._refreshOwner();
	    };
	    return DisplayOptions;
	}(GridOptions.GridBaseOptions));
	exports.DisplayOptions = DisplayOptions;
	});

	unwrapExports(DisplayOptions_1);
	var DisplayOptions_2 = DisplayOptions_1.DisplayOptions;

	var Size_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Size.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	var Size = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function Size(width, height) {
	        if (width === void 0) { width = 0; }
	        if (height === void 0) { height = 0; }
	        this.width = width;
	        this.height = height;
	    }
	    Size.empty = function () {
	        return new Size();
	    };
	    Size.create = function (w, h) {
	        if (w === void 0) { w = 0; }
	        if (h === void 0) { h = 0; }
	        return new Size(w, h);
	    };
	    Object.defineProperty(Size.prototype, "isEmpty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** isEmpty */
	        get: function () {
	            return this.width === 0 || this.height === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Size.prototype.clone = function () {
	        return new Size(this.width, this.height);
	    };
	    Size.prototype.equals = function (sz) {
	        return sz === this
	            || sz && this.width === sz.width && this.height === sz.height;
	    };
	    Size.prototype.setEmpty = function () {
	        this.width = this.height = 0;
	        return this;
	    };
	    Size.prototype.set = function (width, height) {
	        this.width = width;
	        this.height = height;
	        return this;
	    };
	    Size.prototype.round = function () {
	        var sz = this.clone();
	        sz.width >>>= 0;
	        sz.height >>>= 0;
	        return sz;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    Size.prototype.toString = function () {
	        return "{width: " + this.width + ", height: " + this.height + "}";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    Size.EMPTY = new Size();
	    return Size;
	}());
	exports.Size = Size;
	});

	unwrapExports(Size_1);
	var Size_2 = Size_1.Size;

	var GridElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var GridElement = /** @class */ (function (_super) {
	    __extends(GridElement, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridElement(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name) || this;
	    }
	    GridElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridElement.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            var p = this.parent;
	            while (p) {
	                if (p instanceof GridBase_1.GridBase) {
	                    return p;
	                }
	                p = p.parent;
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridElement.prototype.measure = function (grid, hintWidth, hintHeight) {
	        return this._doMeasure(grid, hintWidth, hintHeight);
	    };
	    GridElement.prototype.layoutContent = function (lm) {
	        this._doPrepareContent(lm);
	        this._doLayoutContent(lm);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridElement.prototype._getCssSelector = function () {
	        return ""; //GridElement.CSS;
	    };
	    GridElement.prototype._doDraw = function (element) {
	        this._doRender(element);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        return new Size_1.Size(hintWidth, hintHeight);
	    };
	    GridElement.prototype._doPrepareContent = function (lm) {
	    };
	    GridElement.prototype._doLayoutContent = function (lm) {
	    };
	    GridElement.prototype._doRender = function (dom) {
	    };
	    return GridElement;
	}(VisualElement_1.VisualElement));
	exports.GridElement = GridElement;
	var VisualObjectElement = /** @class */ (function (_super) {
	    __extends(VisualObjectElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function VisualObjectElement(model, name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        _this._model = model;
	        return _this;
	    }
	    VisualObjectElement.prototype.dispose = function () {
	        this._model = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(VisualObjectElement.prototype, "model", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** model */
	        get: function () {
	            return this._model;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return VisualObjectElement;
	}(GridElement));
	exports.VisualObjectElement = VisualObjectElement;
	});

	unwrapExports(GridElement_1);
	var GridElement_2 = GridElement_1.GridElement;
	var GridElement_3 = GridElement_1.VisualObjectElement;

	var CellElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CellElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	/**
	 * TableBasedElement의 각 셀을 대표하는 view.
	 * 별도의 dom을 생성하지 않고, table view 생성시 cellDom으로 넘겨 받는다.
	 * 추가되는 자식 view들은 cellDom의 자식들이어야 한다.
	 */
	var CellElement = /** @class */ (function (_super) {
	    __extends(CellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellElement(name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        _this._fixed = false;
	        _this._index = new CellIndex_1.CellIndex();
	        return _this;
	    }
	    CellElement.prototype.dispose = function () {
	        this._grid = null;
	        this._index = null;
	        this._cellDom = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellElement.prototype, "fixed", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** fixed */
	        get: function () {
	            return this._fixed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellElement.prototype, "index", {
	        /** index */
	        get: function () {
	            return this._index;
	        },
	        set: function (value) {
	            if (!CellIndex_1.CellIndex.areEquals(this._index, value)) {
	                this._index.assignFrom(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellElement.prototype, "item", {
	        /** item */
	        get: function () {
	            return this._index.item;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellElement.prototype.updateCell = function (grid, model, dom) {
	        this._grid = grid;
	        this.index = model.index;
	        this._cellDom = dom;
	        this._doPrepareValue(grid, model);
	        this._doUpdateContent(grid, model, this._cellDom);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CellElement.prototype._createDom = function () {
	        return null;
	    };
	    Object.defineProperty(CellElement.prototype, "valueColumn", {
	        //-------------------------------------------------------------------------
	        // internal members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._index.valueColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellElement.prototype, "dataColumn", {
	        get: function () {
	            return this._index.dataColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CellElement.prototype._changed = function () {
	        this.invalidate();
	    };
	    CellElement.prototype._doPrepareValue = function (grid, model) {
	    };
	    CellElement.prototype._doUpdateContent = function (grid, model, dom) {
	    };
	    CellElement.prototype._doLayoutContent = function (lm) {
	    };
	    return CellElement;
	}(GridElement_1.GridElement));
	exports.CellElement = CellElement;
	var ValueCellElement = /** @class */ (function (_super) {
	    __extends(ValueCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ValueCellElement(name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._focused = false;
	        return _this;
	    }
	    Object.defineProperty(ValueCellElement.prototype, "focused", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** focused */
	        get: function () {
	            return this._focused;
	        },
	        set: function (value) {
	            if (value != this._focused) {
	                this._focused = value;
	                this._focusedChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueCellElement.prototype, "numberFormatter", {
	        /** numberFormatter */
	        get: function () {
	            return this._numberFormatter;
	        },
	        set: function (value) {
	            this._numberFormatter = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueCellElement.prototype, "datetimeWriter", {
	        /** datetimeWriter */
	        get: function () {
	            return this._datetimeWriter;
	        },
	        set: function (value) {
	            this._datetimeWriter = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValueCellElement.prototype, "boolFormatter", {
	        /** boolFormatter */
	        get: function () {
	            return this._boolFormatter;
	        },
	        set: function (value) {
	            this._boolFormatter = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ValueCellElement.prototype._doPrepareValue = function (grid, model) {
	        var options = grid.formatOptions;
	        var col = this.valueColumn;
	        // TODO: 기존에는 styles에서 가져온다. 동적으로 지정할 수 있도록 해야 한다.
	        this._numberFormatter = options.getNumberFormatter(col.numberFormatter);
	        this._datetimeWriter = options.getDateWriter(col.datetimeWriter);
	        this._boolFormatter = options.getBoolFormatter(col.boolFormatter);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ValueCellElement.prototype._focusedChanged = function () {
	        this._changed();
	    };
	    ValueCellElement.prototype._doLayoutHandles = function () {
	    };
	    return ValueCellElement;
	}(CellElement));
	exports.ValueCellElement = ValueCellElement;
	var SelectableCellElement = /** @class */ (function (_super) {
	    __extends(SelectableCellElement, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectableCellElement(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name) || this;
	    }
	    return SelectableCellElement;
	}(CellElement));
	exports.SelectableCellElement = SelectableCellElement;
	});

	unwrapExports(CellElement_1);
	var CellElement_2 = CellElement_1.CellElement;
	var CellElement_3 = CellElement_1.ValueCellElement;
	var CellElement_4 = CellElement_1.SelectableCellElement;

	var TableBaseElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	/**
	 * 현재 화면에 표시되는 행들의 span 상태.
	 * fixedRow는 제외. ItemElement._visIndex로 접근해야 한다.
	 */
	var SpanGrid = /** @class */ (function (_super) {
	    __extends(SpanGrid, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SpanGrid() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._height = 0;
	        _this._width = 0;
	        _this._nextId = 0;
	        return _this;
	    }
	    Object.defineProperty(SpanGrid.prototype, "empty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._nextId <= 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SpanGrid.prototype.prepare = function (rows, cols) {
	        if (rows > this._height || cols > this._width) {
	            this._width = cols;
	            this._cells = [];
	            for (var r = 0; r < rows; r++) {
	                var cells = [];
	                this._cells.push(cells);
	                for (var c = 0; c < this._width; c++) {
	                    cells.push(SpanGrid.SINGLE);
	                }
	            }
	        }
	        else {
	            for (var r = 0; r < this._height; r++) {
	                var cells = this._cells[r];
	                for (var c = 0; c < this._width; c++) {
	                    cells[c] = SpanGrid.SINGLE;
	                }
	            }
	        }
	        this._nextId = 0;
	    };
	    SpanGrid.prototype.add = function (row, col, rowCount, colCount) {
	        var id = this._nextId++;
	        for (var r = row; r < row + rowCount; r++) {
	            var cells = this._cells[r];
	            if (cells) {
	                for (var c = col; c < col + colCount; c++) {
	                    cells[c] = id + SpanGrid.HIDDEN;
	                }
	            }
	        }
	        if (!this._cells[row])
	            debugger;
	        this._cells[row][col] = id;
	        return id;
	    };
	    /**
	     * True면 body view에서는 무시하고, merged view에서 셀을 처리한다.
	     */
	    SpanGrid.prototype.isMerged = function (row, col) {
	        return this._cells[row][col] > SpanGrid.SINGLE;
	    };
	    SpanGrid.prototype.isMergeRoot = function (row, col) {
	        return this._cells[row][col] > SpanGrid.SINGLE && this._cells[row][col] < SpanGrid.HIDDEN;
	    };
	    SpanGrid.prototype.isHidden = function (row, col) {
	        return this._cells[row][col] >= SpanGrid.HIDDEN;
	    };
	    SpanGrid.prototype.get = function (row, col) {
	        var cells = this._cells;
	        var v = cells[row][col];
	        if (v > SpanGrid.SINGLE) {
	            var nRow = 1;
	            var nCol = 1;
	            for (var r = row + 1; r < cells.length; r++) {
	                if (cells[r][col] == v) {
	                    nRow++;
	                }
	                else {
	                    break;
	                }
	            }
	            for (var c = col + 1, cells2 = cells[row]; c < cells[row].length; c++) {
	                if (cells2[c] == v) {
	                    nCol++;
	                }
	                else {
	                    break;
	                }
	            }
	            return {
	                rows: nRow,
	                cols: nCol
	            };
	        }
	        return null;
	    };
	    SpanGrid.prototype.getCellCount = function (row) {
	        var cells = this._cells[row];
	        var n = 0;
	        var p = SpanGrid.SINGLE;
	        for (var i = 0; i < this._width; i++) {
	            var v = cells[i];
	            if (v >= 0) {
	                if (v != p) {
	                    p = v;
	                    if (p < SpanGrid.HIDDEN) {
	                        n++;
	                    }
	                }
	            }
	            else {
	                n++;
	            }
	        }
	        return n;
	    };
	    SpanGrid.prototype.getColIndex = function (row, col) {
	        var cells = this._cells[row];
	        var n = -1;
	        for (var i = 0; i <= col; i++) {
	            var v = cells[i];
	            if (v < SpanGrid.HIDDEN) {
	                n++;
	            }
	        }
	        return n;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    SpanGrid.SINGLE = -1;
	    SpanGrid.HIDDEN = 0xff;
	    return SpanGrid;
	}(Base_1.Base));
	var TableBaseElement = /** @class */ (function (_super) {
	    __extends(TableBaseElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TableBaseElement(model, name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, model, name) || this;
	        _this._spanned = false;
	        return _this;
	    }
	    TableBaseElement.prototype.dispose = function () {
	        this._tbody = null;
	        this._table = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TableBaseElement.prototype, "rowCount", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** rowCount */
	        get: function () {
	            return this._tbody.childElementCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableBaseElement.prototype, "spanned", {
	        get: function () {
	            return this._spanned;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TableBaseElement.prototype.prepareSpanning = function (rows, cols) {
	        if (this._spanGrid == null) {
	            this._spanGrid = new SpanGrid();
	        }
	        this._spanGrid.prepare(rows, cols);
	    };
	    TableBaseElement.prototype.spanningPrepared = function (lm, spanned) {
	        this._spanned = spanned && this._spanGrid != null && !this._spanGrid.empty;
	    };
	    TableBaseElement.prototype.addSpan = function (row, col, rowCount, colCount) {
	        this._spanGrid.add(row, col, rowCount, colCount);
	    };
	    TableBaseElement.prototype.getSpannedColCount = function (row) {
	        return this._spanGrid.getCellCount(row);
	    };
	    TableBaseElement.prototype.getSpannedColIndex = function (row, col) {
	        return this._spanGrid.getColIndex(row, col);
	    };
	    TableBaseElement.prototype.getSpan = function (row, col) {
	        return this._spanGrid.get(row, col);
	    };
	    TableBaseElement.prototype.isMerged = function (row, col) {
	        return this._spanGrid.isMerged(row, col);
	    };
	    TableBaseElement.prototype.isMergeRoot = function (row, col) {
	        return this._spanGrid.isMergeRoot(row, col);
	    };
	    TableBaseElement.prototype.isHidden = function (row, col) {
	        return this._spanGrid.isHidden(row, col);
	    };
	    TableBaseElement.prototype.getCellRect = function (td) {
	        return new Rectangle_1.Rectangle(td.offsetLeft, td.offsetTop, td.offsetWidth, td.offsetHeight);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TableBaseElement.prototype._createDom = function () {
	        var dom = document.createElement("div");
	        var table = this._table = document.createElement("table");
	        var css = table.style;
	        css.setProperty("table-layout", "fixed", "important");
	        css.setProperty("width", "0px", "important");
	        table.className = "rg-table";
	        dom.appendChild(table);
	        this._thead = document.createElement("thead");
	        table.appendChild(this._thead);
	        this._tbody = document.createElement("tbody");
	        table.appendChild(this._tbody);
	        return dom;
	    };
	    TableBaseElement.prototype._clearSpans = function () {
	    };
	    TableBaseElement.prototype._addSpan = function (row, col, rowCount, colCount) {
	    };
	    TableBaseElement.prototype._addColSpan = function (row, col, count) {
	    };
	    TableBaseElement.prototype._addRowSpan = function (row, col, count) {
	    };
	    TableBaseElement.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        var css = dom.style;
	        css.overflow = "hidden";
	    };
	    TableBaseElement.prototype._doPrepareContent = function (lm) {
	        this._doPrepareTableExtents(lm);
	        this._doPrepareTable(lm);
	    };
	    TableBaseElement.prototype._doDraw = function (element) {
	        this._doRender(element);
	        this._doRenderTable(this._tbody);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    /**
	     * Table head 등을 생성하기 전에 컬럼 너비 등을 계산한다.
	     *   - _getColumnWidth()에서 리턴할 값을 준비한다.
	     */
	    TableBaseElement.prototype._doPrepareTableExtents = function (lm) {
	    };
	    TableBaseElement.prototype._doPrepareTable = function (lm) {
	        this._doPrepareTableHead(lm, this._thead);
	        this._doPrepareTableRows(lm, this._tbody);
	    };
	    TableBaseElement.prototype._doPrepareTableHead = function (lm, head) {
	        var row;
	        if (head.childElementCount == 0) {
	            row = document.createElement("tr");
	            head.appendChild(row);
	            row.setAttribute("aria-hidden", "true");
	            var css = row.style;
	            //css.border = "0px none !important";
	            css.setProperty("border", "0px none", "important"); // TODO: 이렇게 하지 않으면 틀어진다! WHY?
	        }
	        else {
	            row = head.lastElementChild;
	        }
	        var count = this._getColumnCount(lm, -1);
	        while (row.childElementCount < count) {
	            var th = document.createElement("th");
	            row.appendChild(th);
	        }
	        while (row.childElementCount > count) {
	            row.removeChild(row.lastChild);
	        }
	        var children = row.children;
	        for (var i = 0; i < children.length; i++) {
	            var th = children[i];
	            th.scope = "col";
	            var css = th.style;
	            css.setProperty("visibility", "hidden", "important");
	            css.setProperty("margin", "0px", "important");
	            css.setProperty("padding", "0px", "important");
	            css.setProperty("font-size", "0px", "important");
	            css.setProperty("line-height", "0px", "important");
	            css.width = this._getColumnWidth(lm, i) + "px";
	            css.height = "0px";
	        }
	    };
	    TableBaseElement.prototype._prepareTableRowCells = function (lm, index, row) {
	        var count = this._getColumnCount(lm, index);
	        while (row.childElementCount < count) {
	            var td = document.createElement("td");
	            row.appendChild(td);
	            var elt = this._prepareCellContent(td);
	            if (elt) {
	                td.appendChild(elt);
	            }
	        }
	        while (row.childElementCount > count) {
	            row.removeChild(row.lastChild);
	        }
	        return row.childElementCount;
	    };
	    TableBaseElement.prototype._doPrepareTableRow = function (lm, index, row) {
	        var count = this._prepareTableRowCells(lm, index, row);
	        var children = row.children;
	        row["$_view"] = this["$_hash"];
	        for (var i = 0, cnt = children.length; i < cnt; i++) {
	            var td = children[i];
	            var elt = td.lastElementChild;
	            this._prepareTableCell(td, index, i);
	            if (elt) {
	                elt.style.maxHeight = (lm.getItemHeight(index) - 1) + "px";
	                //elt.style.width = "100%";
	                //elt.style.height = "100%";
	                elt.style.overflow = "hidden";
	            }
	        }
	    };
	    TableBaseElement.prototype._prepareTableCell = function (td, row, col) {
	    };
	    TableBaseElement.prototype._doRenderTable = function (body) {
	        var children = body.children;
	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            this._renderRow(child, i);
	        }
	    };
	    TableBaseElement.prototype._renderRow = function (dom, row) {
	        this._doDrawRow(row, dom);
	        var children = dom.children;
	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            this._renderCell(child.lastElementChild, row, i);
	        }
	    };
	    TableBaseElement.prototype._renderCell = function (dom, row, col) {
	        this._doDrawCell(row, col, dom);
	    };
	    TableBaseElement.prototype._prepareCellContent = function (cell) {
	        return document.createElement("div");
	    };
	    TableBaseElement.prototype._doDrawRow = function (row, dom) {
	    };
	    TableBaseElement.prototype._doDrawCell = function (row, col, dom) {
	    };
	    TableBaseElement.prototype.getTableRow = function (row) {
	        return this._tbody.children[row];
	    };
	    TableBaseElement.prototype.getTableCell = function (row, col) {
	        return this._tbody.children[row].children[col];
	    };
	    TableBaseElement.prototype.getCellContent = function (row, col) {
	        return this._tbody.children[row].children[col].lastElementChild;
	    };
	    TableBaseElement.prototype.getContentAt = function (index) {
	        var grid = index.grid;
	        var lm = grid.layoutManager;
	        var fixedCount = lm.fixedItemCount;
	        var col = index.column ? index.column.index : 0;
	        var row;
	        if (fixedCount > 0) {
	            if (index.itemIndex < fixedCount) {
	                row = index.itemIndex;
	            }
	            else {
	                row = index.itemIndex - lm.topIndex + 1;
	            }
	        }
	        else {
	            row = index.itemIndex - lm.topIndex;
	        }
	        return this.getCellContent(row, col);
	    };
	    return TableBaseElement;
	}(GridElement_1.VisualObjectElement));
	exports.TableBaseElement = TableBaseElement;
	var SimpleTableElement = /** @class */ (function (_super) {
	    __extends(SimpleTableElement, _super);
	    function SimpleTableElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SimpleTableElement.prototype._doPrepareTableRows = function (lm, body) {
	        var rowCount = this._getRowCount(lm);
	        while (body.childElementCount < rowCount) {
	            var tr = document.createElement("tr");
	            body.appendChild(tr);
	        }
	        while (body.childElementCount > rowCount) {
	            body.removeChild(body.lastChild);
	        }
	        var children = body.children;
	        for (var i = 0, len = children.length; i < len; i++) {
	            var tr = children[i];
	            var css = tr.style;
	            css.height = this._getRowHeight(i) + "px";
	            this._doPrepareTableRow(lm, i, tr);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    SimpleTableElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    SimpleTableElement.prototype._getRowHeight = function (row) {
	        return 23;
	    };
	    return SimpleTableElement;
	}(TableBaseElement));
	exports.SimpleTableElement = SimpleTableElement;
	var DataTableElement = /** @class */ (function (_super) {
	    __extends(DataTableElement, _super);
	    function DataTableElement() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._trCount = 0;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataTableElement.prototype._getRowCount = function (lm) {
	        var fixedCount = lm.fixedItemCount;
	        return fixedCount + lm.itemCount + (fixedCount > 0 ? 1 : 0);
	    };
	    DataTableElement.prototype._doPrepareTableRows = function (lm, body) {
	        var fixedCount = lm.fixedItemCount;
	        var rowCount = this._trCount = this._getRowCount(lm);
	        while (body.childElementCount < rowCount) {
	            var tr = document.createElement("tr");
	            body.appendChild(tr);
	        }
	        while (body.childElementCount > rowCount) {
	            body.removeChild(body.lastChild);
	        }
	        var children = body.children;
	        var len = children.length;
	        var i = 0;
	        var d = 0;
	        if (fixedCount > 0) {
	            for (i = 0; i < fixedCount; i++) {
	                this.$_prepareRow(lm, i, children[i]);
	            }
	            var tr = children[i++];
	            this.$_prepareFixedBar(lm, i, tr);
	            d = 1;
	        }
	        for (; i < len; i++) {
	            this.$_prepareRow(lm, i - d, children[i]);
	        }
	    };
	    DataTableElement.prototype.$_prepareFixedBar = function (lm, index, tr) {
	        var cnt = this._prepareTableRowCells(lm, index, tr);
	        var h = lm.fixedBarHeight;
	        var css = tr.style;
	        if (h > 0) {
	            css.height = lm.fixedBarHeight + "px";
	        }
	        else {
	            css.display = "none";
	        }
	        //css.background = "yellow";
	        var children = tr.children;
	        for (var i = 0; i < cnt; i++) {
	            var elt = children[i].lastElementChild;
	            if (elt) {
	                elt.rowSpan = 1;
	                elt.style.maxHeight = "0px";
	                elt.style.overflow = "hidden";
	            }
	        }
	    };
	    DataTableElement.prototype.$_prepareRow = function (lm, row, tr) {
	        var css = tr.style;
	        css.height = lm.getItemHeight(row) + "px";
	        delete css.display; // fixedBar에서 설정됐을 수 있다.
	        this._doPrepareTableRow(lm, row, tr);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataTableElement.prototype._getCellContent = function (td) {
	        return td.lastElementChild;
	    };
	    DataTableElement.prototype._updateCellContent = function (grid, cell, td) {
	        this._doUpdateCellContent(grid, cell, this._getCellContent(td));
	    };
	    DataTableElement.prototype._doUpdateCellContent = function (grid, cell, dom) {
	    };
	    return DataTableElement;
	}(TableBaseElement));
	exports.DataTableElement = DataTableElement;
	});

	unwrapExports(TableBaseElement_1);
	var TableBaseElement_2 = TableBaseElement_1.TableBaseElement;
	var TableBaseElement_3 = TableBaseElement_1.SimpleTableElement;
	var TableBaseElement_4 = TableBaseElement_1.DataTableElement;

	var HeaderElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// HeaderElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var HeaderCellElement = /** @class */ (function (_super) {
	    __extends(HeaderCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HeaderCellElement() {
	        return _super.call(this, "headerCellView") || this;
	    }
	    Object.defineProperty(HeaderCellElement.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeaderCellElement.prototype, "subText", {
	        /** subText */
	        get: function () {
	            return this._subText;
	        },
	        set: function (value) {
	            if (value != this._subText) {
	                this._subText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    HeaderCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        var cell = model;
	        dom.textContent = cell.text;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    HeaderCellElement.prototype._doRender = function (dom) {
	    };
	    return HeaderCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.HeaderCellElement = HeaderCellElement;
	var HeaderElement = /** @class */ (function (_super) {
	    __extends(HeaderElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HeaderElement(model) {
	        var _this = _super.call(this, model, "headerView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = {};
	        _this._start = 0;
	        _this._end = 0;
	        return _this;
	    }
	    HeaderElement.prototype.dispose = function () {
	        for (var k in this._cells) {
	            this._cells[k] = null;
	        }
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    HeaderElement.prototype.getCellColumn = function (cell) {
	        var col = cell["$_col"];
	        return this.grid.columnByHash(col);
	    };
	    HeaderElement.prototype.refresh = function (grid) {
	        for (var i = this._start; i <= this._end; i++) {
	            var td = this.getTableCell(0, i - this._start);
	            td["$_foc"] = grid.isFocusedColumn(grid.columnByHash(td["$_col"]));
	            td.className = this._getCellSelector(td);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    HeaderElement.prototype._getCssSelector = function () {
	        return "rg-header";
	    };
	    HeaderElement.prototype._getCellSelector = function (td) {
	        return td["$_foc"] ? "rg-header-cell rg-header-focus" : "rg-header-cell";
	    };
	    HeaderElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    HeaderElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        return Size_1.Size.create(hintWidth, this.model.minHeight);
	    };
	    HeaderElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var header = this.model;
	        this.hideAll();
	        var start = this._start = this._getStartCol(lm);
	        var end = this._end = this._getEndCol(lm);
	        for (var i = start; i <= end; i++) {
	            var column = lm.getColumn(i);
	            var hash = column["$_hash"];
	            var view = this._cells[hash];
	            if (!view) {
	                view = new HeaderCellElement();
	                this._cells[column["$_hash"]] = view;
	                this.addChild(view);
	            }
	            view.visible = true;
	            var index = CellIndex_1.CellIndex.temp(grid, -1, column);
	            var model = header.getCell(index);
	            view.updateCell(grid, model, this.getCellContent(0, i - start));
	            this.getTableCell(0, i - start)["$_col"] = hash;
	            var r = lm.getColumnBounds(i);
	            r.height = this.height;
	            view.setRect(r);
	            view.layoutContent(lm);
	        }
	    };
	    HeaderElement.prototype._doRender = function (dom) {
	    };
	    HeaderElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    HeaderElement.prototype._getColumnCount = function (lm, row) {
	        return lm.columnCount - lm.fixedColCount - lm.rightColCount;
	    };
	    HeaderElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getColumnWidth(col);
	    };
	    HeaderElement.prototype._doDrawCell = function (row, col, dom) {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    HeaderElement.prototype._getStartCol = function (lm) {
	        return lm.firstCol;
	    };
	    HeaderElement.prototype._getEndCol = function (lm) {
	        return lm.lastCol;
	    };
	    return HeaderElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.HeaderElement = HeaderElement;
	var FixedHeaderElement = /** @class */ (function (_super) {
	    __extends(FixedHeaderElement, _super);
	    function FixedHeaderElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FixedHeaderElement.prototype._getStartCol = function (lm) {
	        return 0;
	    };
	    FixedHeaderElement.prototype._getEndCol = function (lm) {
	        return lm.fixedColCount - 1;
	    };
	    FixedHeaderElement.prototype._getColumnCount = function (lm, row) {
	        return lm.fixedColCount;
	    };
	    FixedHeaderElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getFixedColumnWidth(col);
	    };
	    return FixedHeaderElement;
	}(HeaderElement));
	exports.FixedHeaderElement = FixedHeaderElement;
	var RightHeaderElement = /** @class */ (function (_super) {
	    __extends(RightHeaderElement, _super);
	    function RightHeaderElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RightHeaderElement.prototype._getStartCol = function (lm) {
	        return lm.columnCount - lm.rightColCount;
	    };
	    RightHeaderElement.prototype._getEndCol = function (lm) {
	        return lm.columnCount - 1;
	    };
	    RightHeaderElement.prototype._getColumnCount = function (lm, row) {
	        return lm.rightColCount;
	    };
	    RightHeaderElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getRightColumnWidth(col);
	    };
	    return RightHeaderElement;
	}(HeaderElement));
	exports.RightHeaderElement = RightHeaderElement;
	});

	unwrapExports(HeaderElement_1);
	var HeaderElement_2 = HeaderElement_1.HeaderCellElement;
	var HeaderElement_3 = HeaderElement_1.HeaderElement;
	var HeaderElement_4 = HeaderElement_1.FixedHeaderElement;
	var HeaderElement_5 = HeaderElement_1.RightHeaderElement;

	var RowIndicatorElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowIndicatorElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var RowIndicatorCellElement = /** @class */ (function (_super) {
	    __extends(RowIndicatorCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowIndicatorCellElement() {
	        var _this = _super.call(this, "rowIndicatorCellView") || this;
	        _this._itemState = GridItem_1.ItemState.NORMAL;
	        return _this;
	    }
	    RowIndicatorCellElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    // /** text */
	    // get text(): string {
	    //     return this._text;
	    // }
	    // set text(value: string) {
	    //     if (value != this._text) {
	    //         this._text = value;
	    //         this._changed();
	    //     }
	    // }
	    // /** itemState */
	    // get itemState(): ItemState {
	    //     return this._itemState;
	    // }
	    // set itemState(value: ItemState) {
	    //     if (value != this._itemState) {
	    //         this._itemState = value;
	    //         this._changed();
	    //     }
	    // }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowIndicatorCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = model.text;
	    };
	    return RowIndicatorCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.RowIndicatorCellElement = RowIndicatorCellElement;
	var RowIndicatorElement = /** @class */ (function (_super) {
	    __extends(RowIndicatorElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowIndicatorElement(model) {
	        var _this = _super.call(this, model, "rowIndicatorView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        // private _cells: RowIndicatorCellElement[] = [];
	        _this._count = 0;
	        return _this;
	    }
	    RowIndicatorElement.prototype.dispose = function () {
	        // this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowIndicatorElement.prototype.getCellIndex = function (cell) {
	        return cell.parentElement["$_row"];
	    };
	    RowIndicatorElement.prototype.refresh = function (grid) {
	        for (var i = 0; i < this._count; i++) {
	            var td = this.getTableCell(i, 0);
	            td["$_foc"] = grid.isFocusedRow(td.parentElement["$_row"]);
	            td.className = this._getCellSelector(td);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowIndicatorElement.prototype._getCssSelector = function () {
	        return "rg-rowindicator";
	    };
	    RowIndicatorElement.prototype._getCellSelector = function (td) {
	        var focused = td["$_foc"];
	        if (focused) {
	            var item = this.grid.getItem(td.parentElement["$_row"]);
	            var state = item.itemState;
	            if (GridItem_1.ItemState_isInserting(state)) {
	                return "rg-rowindicator-cell rg-rowindicator-focus rg-rowindicator-inserting";
	            }
	            else if (state == GridItem_1.ItemState.UPDATING) {
	                return "rg-rowindicator-cell rg-rowindicator-focus rg-rowindicator-editing";
	            }
	            else {
	                return "rg-rowindicator-cell rg-rowindicator-focus";
	            }
	        }
	        else {
	            return "rg-rowindicator-cell";
	        }
	    };
	    RowIndicatorElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    RowIndicatorElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        var indicator = this.model;
	        return new Size_1.Size(indicator.minWidth, hintHeight);
	    };
	    RowIndicatorElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var indicator = this.model;
	        //const width = this.width;
	        var topIndex = lm.topIndex;
	        var itemCount = lm.itemCount;
	        var fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var count = this._count = fixedCount + itemCount;
	        var focused = grid.focusedRow;
	        // let view: RowIndicatorCellElement;
	        // while (this.childCount < count) {
	        //     if (this._cells.length > 0) {
	        //         view = this._cells.pop();
	        //     } else {
	        //         view = this._createCell();
	        //     }
	        //     this.addChild(view);
	        // }
	        // while (this.childCount > count) {
	        //     view = this.removeLast() as RowIndicatorCellElement;
	        //     view.validate();
	        //     this._cells.push(view);
	        // }
	        for (var i = 0; i < count; i++) {
	            // view = this.getChild(i) as RowIndicatorCellElement;
	            var row = (i < fixedCount) ? i : i + topIndex;
	            var index = CellIndex_1.CellIndex.temp(grid, row);
	            var cell = indicator.getCell(index);
	            // let r = lm.getItemBounds(i);
	            var tr = i < fixedCount ? i : fixed ? i + 1 : i;
	            // view.updateCell(grid, cell, this.getCellContent(tr, 0));
	            var dom = this.getTableRow(tr);
	            dom["$_row"] = row;
	            var td = dom.children[0];
	            td["$_foc"] = row == focused;
	            td.className = this._getCellSelector(td);
	            this._updateCellContent(grid, cell, td);
	            // r.x = 0;
	            // r.width = width;
	            // view.setRect(r);
	        }
	    };
	    RowIndicatorElement.prototype._doUpdateCellContent = function (grid, model, dom) {
	        dom.textContent = model.text;
	    };
	    RowIndicatorElement.prototype._doRender = function (target) {
	    };
	    RowIndicatorElement.prototype._getColumnCount = function (lm, row) {
	        return 1;
	    };
	    RowIndicatorElement.prototype._getColumnWidth = function (lm, col) {
	        return this.width;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowIndicatorElement.prototype._createCell = function () {
	        return new RowIndicatorCellElement();
	    };
	    return RowIndicatorElement;
	}(TableBaseElement_1.DataTableElement));
	exports.RowIndicatorElement = RowIndicatorElement;
	});

	unwrapExports(RowIndicatorElement_1);
	var RowIndicatorElement_2 = RowIndicatorElement_1.RowIndicatorCellElement;
	var RowIndicatorElement_3 = RowIndicatorElement_1.RowIndicatorElement;

	var Barcode_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Barcode.ts
	// 2019. 11. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var Barcode = /** @class */ (function (_super) {
	    __extends(Barcode, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Barcode() {
	        return _super.call(this) || this;
	    }
	    Barcode.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(Barcode.prototype, "value", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** value */
	        get: function () {
	            return this._value;
	        },
	        set: function (v) {
	            if (v != this._value) {
	                this._value = v;
	                try {
	                    this._error = null;
	                    this._parse(v);
	                }
	                catch (err) {
	                    this._error = err;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Barcode.prototype, "error", {
	        /** error */
	        get: function () {
	            return this._error;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Barcode.prototype.render = function (svg, r) {
	        this._doRender(svg, r);
	    };
	    return Barcode;
	}(Base_1.Base));
	var LinearBarcode = /** @class */ (function (_super) {
	    __extends(LinearBarcode, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LinearBarcode() {
	        var _this = _super.call(this) || this;
	        _this.integralBar = true;
	        _this.minBarWidth = 1;
	        _this.maxBarWidth = 0;
	        _this.barWidth = 0;
	        return _this;
	    }
	    LinearBarcode.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    LinearBarcode.prototype._doRender = function (svg, r) {
	        var len = this._getBarLength();
	        if (len < 1) {
	            return;
	        }
	        var w = this.barWidth;
	        if (w <= 0) {
	            if (this.integralBar) {
	                w = Math.floor(r.width / len);
	            }
	            else {
	                w = r.width / len;
	            }
	            w = Math.max(this.minBarWidth, w);
	            if (this.maxBarWidth > 0) {
	                w = Math.min(this.maxBarWidth, w);
	            }
	        }
	        len = w * len;
	        r.x += (r.width - len) / 2;
	        if (this.integralBar) {
	            r.x = Math.floor(r.x);
	        }
	        this._drawBars(svg, this.barStyle, r.x, r.y, w, r.height);
	    };
	    return LinearBarcode;
	}(Barcode));
	var $$_C128_BAR_WEIGHTS = [
	    0x212222, 0x222122, 0x222221, 0x121223, 0x121322, 0x131222, 0x122213, 0x122312, 0x132212, 0x221213,
	    0x221312, 0x231212, 0x112232, 0x122132, 0x122231, 0x113222, 0x123122, 0x123221, 0x223211, 0x221132,
	    0x221231, 0x213212, 0x223112, 0x312131, 0x311222, 0x321122, 0x321221, 0x312212, 0x322112, 0x322211,
	    0x212123, 0x212321, 0x232121, 0x111323, 0x131123, 0x131321, 0x112313, 0x132113, 0x132311, 0x211313,
	    0x231113, 0x231311, 0x112133, 0x112331, 0x132131, 0x113123, 0x113321, 0x133121, 0x313121, 0x211331,
	    0x231131, 0x213113, 0x213311, 0x213131, 0x311123, 0x311321, 0x331121, 0x312113, 0x312311, 0x332111,
	    0x314111, 0x221411, 0x431111, 0x111224, 0x111422, 0x121124, 0x121421, 0x141122, 0x141221, 0x112214,
	    0x112412, 0x122114, 0x122411, 0x142112, 0x142211, 0x241211, 0x221114, 0x413111, 0x241112, 0x134111,
	    0x111242, 0x121142, 0x121241, 0x114212, 0x124112, 0x124211, 0x411212, 0x421112, 0x421211, 0x212141,
	    0x214121, 0x412121, 0x111143, 0x111341, 0x131141, 0x114113, 0x114311, 0x411113, 0x411311, 0x113141,
	    0x114131, 0x311141, 0x411131, 0x211412, 0x211214, 0x211232, 0x2331112
	];
	var $$_C128_STOP_CODE = 106;
	var $$_C128_TYPE_A = 0;
	var $$_C128_TYPE_B = 1;
	var $$_C128_TYPE_C = 2;
	var $$_C128_START_CODES = [103, 104, 105];
	var Code128 = /** @class */ (function (_super) {
	    __extends(Code128, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Code128() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        _this.quietZoneWidth = 10;
	        return _this;
	    }
	    Code128.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    Code128.prototype._parse = function (value) {
	        this._weights = [];
	        var len = value ? value.length : 0;
	        if (len < 1) {
	            return;
	        }
	        var type = this.$_detectType(value);
	        if (type == $$_C128_TYPE_C && len % 2 == 1) {
	            value = "0" + value;
	            len++;
	        }
	        var c = $$_C128_START_CODES[type];
	        var w = $$_C128_BAR_WEIGHTS[c];
	        var check = c;
	        this._weights.push(w);
	        if (type == $$_C128_TYPE_C) {
	            for (var i = 0; i < len; i += 2) {
	                var s = value.substr(i, 2);
	                c = parseInt(s);
	                c = this.$_convert(type, c);
	                w = $$_C128_BAR_WEIGHTS[c];
	                this._weights.push(w);
	                check += c * (i + 1);
	            }
	        }
	        else {
	            for (var i = 0; i < len; i++) {
	                c = value.charCodeAt(i);
	                c = this.$_convert(type, c);
	                w = $$_C128_BAR_WEIGHTS[c];
	                this._weights.push(w);
	                check += c * (i + 1);
	            }
	        }
	        check = check % 103;
	        this._weights.push($$_C128_BAR_WEIGHTS[check]);
	        this._weights.push($$_C128_BAR_WEIGHTS[$$_C128_STOP_CODE]);
	    };
	    Code128.prototype._getBarLength = function () {
	        return this.quietZoneWidth + (this._weights.length - 1) * 11 + 13 + this.quietZoneWidth;
	    };
	    Code128.prototype._drawBars = function (svg, barStyle, x, y, barWidth, barHeight) {
	        var cnt = this._weights.length - 1;
	        var code;
	        for (var i = 0; i < cnt; i++) {
	            code = this._weights[i];
	        }
	        code = this._weights[cnt];
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    Code128.prototype.$_convert = function (type, char) {
	        switch (type) {
	            case $$_C128_TYPE_A:
	                if (char >= 0 && char < 32)
	                    return char + 64;
	                if (char >= 32 && char < 96)
	                    return char - 32;
	            case $$_C128_TYPE_B:
	                if (char >= 32 && char < 128)
	                    return char - 32;
	            case $$_C128_TYPE_C:
	                if (char >= 0 && char <= 99)
	                    return char;
	        }
	        throw new Error("Invalid code128 charactor: " + char);
	    };
	    Code128.prototype.$_detectType = function (value) {
	        var pattern = /^[0-9]+$/;
	        if (pattern.test(value)) {
	            return $$_C128_TYPE_C;
	        }
	        pattern = /[a-z]/;
	        if (pattern.test(value)) {
	            return $$_C128_TYPE_B;
	        }
	        return $$_C128_TYPE_A;
	    };
	    return Code128;
	}(LinearBarcode));
	exports.Code128 = Code128;
	var $$_C39_CODES = {
	    "0": "nnnwwnwnn",
	    "1": "wnnwnnnnw",
	    "2": "nnwwnnnnw",
	    "3": "wnwwnnnnn",
	    "4": "nnnwwnnnw",
	    "5": "wnnwwnnnn",
	    "6": "nnwwwnnnn",
	    "7": "nnnwnnwnw",
	    "8": "wnnwnnwnn",
	    "9": "nnwwnnwnn",
	    "A": "wnnnnwnnw",
	    "B": "nnwnnwnnw",
	    "C": "wnwnnwnnn",
	    "D": "nnnnwwnnw",
	    "E": "wnnnwwnnn",
	    "F": "nnwnwwnnn",
	    "G": "nnnnnwwnw",
	    "H": "wnnnnwwnn",
	    "I": "nnwnnwwnn",
	    "J": "nnnnwwwnn",
	    "K": "wnnnnnnww",
	    "L": "nnwnnnnww",
	    "M": "wnwnnnnwn",
	    "N": "nnnnwnnww",
	    "O": "wnnnwnnwn",
	    "P": "nnwnwnnwn",
	    "Q": "nnnnnnwww",
	    "R": "wnnnnnwwn",
	    "S": "nnwnnnwwn",
	    "T": "nnnnwnwwn",
	    "U": "wwnnnnnnw",
	    "V": "nwwnnnnnw",
	    "W": "wwwnnnnnn",
	    "X": "nwnnwnnnw",
	    "Y": "wwnnwnnnn",
	    "Z": "nwwnwnnnn",
	    "-": "nwnnnnwnw",
	    ".": "wwnnnnwnn",
	    " ": "nwwnnnwnn",
	    "$": "nwnwnwnnn",
	    "/": "nwnwnnnwn",
	    "+": "nwnnnwnwn",
	    "%": "nnnwnwnwn",
	    "*": "nwnnwnwnn"
	};
	var Code39 = /** @class */ (function (_super) {
	    __extends(Code39, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Code39() {
	        var _this = _super.call(this) || this;
	        _this._wideWidth = 3;
	        return _this;
	    }
	    Code39.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    Code39.prototype._parse = function (value) {
	        this._codes = [];
	        if (!value) {
	            return;
	        }
	        var cnt = value.length;
	        this._codes.push($$_C39_CODES["*"]);
	        for (var i = 0; i < cnt; i++) {
	            var c = value.charAt(i);
	            var code = $$_C39_CODES[c];
	            if (!code) {
	                throw new Error("Invalid Code39 character: " + c);
	            }
	            this._codes.push(code);
	        }
	        this._codes.push($$_C39_CODES["*"]);
	    };
	    Code39.prototype._getBarLength = function () {
	        var len = this._codes.length;
	        return len * (3 * this._wideWidth + 6) + (len - 1);
	    };
	    Code39.prototype._drawBars = function (svg, barStyle, x, y, barWidth, barHeight) {
	        var cnt = this._codes.length;
	        for (var i = 0; i < cnt; i++) {
	            var code = this._codes[i];
	            for (var j = 0; j < 9; j++) {
	                var b = code.charAt(j) == "n" ? 1 : this._wideWidth;
	                b *= barWidth;
	            }
	        }
	    };
	    return Code39;
	}(LinearBarcode));
	exports.Code39 = Code39;
	});

	unwrapExports(Barcode_1);
	var Barcode_2 = Barcode_1.Code128;
	var Barcode_3 = Barcode_1.Code39;

	var CellRenderers = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CellRenderers.ts
	// 2019. 10. 28. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var DataCellRenderer = /** @class */ (function (_super) {
	    __extends(DataCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataCellRenderer() {
	        return _super.call(this, null) || this;
	    }
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DataCellRenderer.getRendererStyle = function (cell) {
	        var dom = cell.firstElementChild;
	        if (dom) {
	            if (dom.classList.length > 1) {
	                return dom.classList[1];
	            }
	            return dom.className;
	        }
	        return undefined;
	    };
	    DataCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DataCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return "rg-renderer";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataCellRenderer.prototype.getText = function (grid, model) {
	        var s = model.getDisplayText(grid);
	        return s || "";
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DataCellRenderer.prototype._changed = function () {
	    };
	    DataCellRenderer.prototype._getValue = function (grid, model, fieldName) {
	        var r = model.item.dataRow;
	        if (r >= 0) {
	            var ds = grid.dataSource;
	            var f = ds.getFieldIndex(fieldName);
	            if (f >= 0) {
	                return grid.dataSource.getValue(r, f);
	            }
	        }
	        return undefined;
	    };
	    return DataCellRenderer;
	}(GridObject_1.GridObject));
	exports.DataCellRenderer = DataCellRenderer;
	var TextCellRenderer = /** @class */ (function (_super) {
	    __extends(TextCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TextCellRenderer() {
	        return _super.call(this) || this;
	    }
	    TextCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TextCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        if (needClear) {
	            Utils_1.Utils.clearChildren(dom);
	        }
	        dom.textContent = this.getText(grid, model);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    TextCellRenderer.Default = new TextCellRenderer();
	    return TextCellRenderer;
	}(DataCellRenderer));
	exports.TextCellRenderer = TextCellRenderer;
	var BarOrigin;
	(function (BarOrigin) {
	    BarOrigin["DEFAULT"] = "default";
	    BarOrigin["LEFT"] = "left";
	    BarOrigin["RIGHT"] = "right";
	    BarOrigin["TOP"] = "top";
	    BarOrigin["BOTTOM"] = "bottom";
	})(BarOrigin = exports.BarOrigin || (exports.BarOrigin = {}));
	var BarCellRenderer = /** @class */ (function (_super) {
	    __extends(BarCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function BarCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._barStyle = BarCellRenderer.BAR_STYLE;
	        _this._rightBarStyle = BarCellRenderer.BAR_RIGHT_STYLE;
	        _this._topBarStyle = BarCellRenderer.BAR_TOP_STYLE;
	        _this._bottomBarStyle = BarCellRenderer.BAR_BOTTOM_STYLE;
	        _this._minimum = 0;
	        _this._maximum = 100;
	        _this._barWidth = "80%";
	        _this._showLabel = false;
	        _this._origin = BarOrigin.LEFT;
	        _this._absoluteValue = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._percentShapeWidth = 80;
	        return _this;
	    }
	    BarCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(BarCellRenderer.prototype, "barStyle", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        /** barStyle */
	        get: function () {
	            return this._barStyle;
	        },
	        set: function (value) {
	            if (value != this._barStyle) {
	                this._barStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "rightBarStyle", {
	        /** rightBarStyle */
	        get: function () {
	            return this._rightBarStyle;
	        },
	        set: function (value) {
	            if (value != this._rightBarStyle) {
	                this._rightBarStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "topBarStyle", {
	        /** topBarStyle */
	        get: function () {
	            return this._topBarStyle;
	        },
	        set: function (value) {
	            if (value != this._topBarStyle) {
	                this._topBarStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "bottomBarStyle", {
	        /** bottomBarStyle */
	        get: function () {
	            return this._bottomBarStyle;
	        },
	        set: function (value) {
	            if (value != this._bottomBarStyle) {
	                this._bottomBarStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "minimum", {
	        /** minimum */
	        get: function () {
	            return this._minimum;
	        },
	        set: function (value) {
	            if (value != this._minimum) {
	                this._minimum = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "maximum", {
	        /** maximum */
	        get: function () {
	            return this._maximum;
	        },
	        set: function (value) {
	            if (value != this._maximum) {
	                this._maximum = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "showLabel", {
	        /** showLabel */
	        get: function () {
	            return this._showLabel;
	        },
	        set: function (value) {
	            if (value != this._showLabel) {
	                this._showLabel = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "barWidth", {
	        /** barWidth */
	        get: function () {
	            return this._barWidth;
	        },
	        set: function (value) {
	            if (value != this._barWidth) {
	                this._barWidth = value;
	                if (typeof value == "string" && value.charAt(value.length - 1) == "%") {
	                    this._percentShapeWidth = parseFloat(value.substring(0, value.length - 1));
	                }
	                else {
	                    this._percentShapeWidth = NaN;
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "origin", {
	        /** origin */
	        get: function () {
	            return this._origin;
	        },
	        set: function (value) {
	            if (value != this._origin) {
	                this._origin = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "absoluteValue", {
	        /** absoluteValue */
	        get: function () {
	            return this._absoluteValue;
	        },
	        set: function (value) {
	            if (value != this._absoluteValue) {
	                this._absoluteValue = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return BarCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BarCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var div;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            div = document.createElement("div");
	            div.style.position = "absolute";
	            dom.appendChild(div);
	            span = document.createElement("span");
	            span.style.display = "inline-block";
	            span.style.position = "relative";
	            dom.appendChild(span);
	        }
	        else {
	            div = dom.children[0];
	            span = dom.children[1];
	        }
	        if (!div)
	            debugger;
	        var width = dom.offsetWidth;
	        var height = dom.offsetHeight;
	        // bar
	        var v = this._absoluteValue ? Math.abs(model.value) : model.value;
	        var rate = Math.min(1, (v - this._minimum) / (this._maximum - this._minimum));
	        var css = div.style;
	        switch (this._origin) {
	            case BarOrigin.LEFT:
	                this.$_renderLeft(css, height, rate);
	                div.className = this.barStyle || BarCellRenderer.BAR_STYLE;
	                break;
	            case BarOrigin.RIGHT:
	                this.$_renderRight(css, height, rate);
	                div.className = this.rightBarStyle || BarCellRenderer.BAR_RIGHT_STYLE;
	                break;
	            case BarOrigin.TOP:
	                this.$_renderTop(css, width, rate);
	                div.className = this.topBarStyle || BarCellRenderer.BAR_TOP_STYLE;
	                break;
	            case BarOrigin.BOTTOM:
	                this.$_renderBottom(css, width, rate);
	                div.className = this.bottomBarStyle || BarCellRenderer.BAR_BOTTOM_STYLE;
	                break;
	            default:
	                this.$_renderLeft(css, height, rate);
	                div.className = this.barStyle || BarCellRenderer.BAR_STYLE;
	                break;
	        }
	        // text
	        span.textContent = this.getText(grid, model);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    BarCellRenderer.prototype.$_renderLeft = function (css, height, rate) {
	        css.left = "0px";
	        css.width = (rate * 100) + "%";
	        if (!isNaN(this._percentShapeWidth)) {
	            css.top = ((100 - this._percentShapeWidth) / 2) + "%";
	            css.height = this._percentShapeWidth + "%";
	        }
	        else {
	            var h = this._barWidth;
	            css.top = ((height - h) / 2) + "px";
	            css.height = h + "px";
	        }
	    };
	    BarCellRenderer.prototype.$_renderRight = function (css, height, rate) {
	        css.left = ((1 - rate) * 100) + "%";
	        css.width = (rate * 100) + "%";
	        if (!isNaN(this._percentShapeWidth)) {
	            css.top = ((100 - this._percentShapeWidth) / 2) + "%";
	            css.height = this._percentShapeWidth + "%";
	        }
	        else {
	            var h = this._barWidth;
	            css.top = ((height - h) / 2) + "px";
	            css.height = h + "px";
	        }
	    };
	    BarCellRenderer.prototype.$_renderTop = function (css, width, rate) {
	        css.top = "0px";
	        css.height = (rate * 100) + "%";
	        if (!isNaN(this._percentShapeWidth)) {
	            css.left = ((100 - this._percentShapeWidth) / 2) + "%";
	            css.width = this._percentShapeWidth + "%";
	        }
	        else {
	            var w = this._barWidth;
	            css.left = ((width - w) / 2) + "px";
	            css.width = w + "px";
	        }
	    };
	    BarCellRenderer.prototype.$_renderBottom = function (css, width, rate) {
	        css.top = ((1 - rate) * 100) + "%";
	        css.height = (rate * 100) + "%";
	        if (!isNaN(this._percentShapeWidth)) {
	            css.left = ((100 - this._percentShapeWidth) / 2) + "%";
	            css.width = this._percentShapeWidth + "%";
	        }
	        else {
	            var w = this._barWidth;
	            css.left = ((width - w) / 2) + "px";
	            css.width = w + "px";
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    BarCellRenderer.STYLE = "rg-bar-renderer";
	    BarCellRenderer.STYLE_NAME = "rg-renderer " + BarCellRenderer.STYLE;
	    BarCellRenderer.BAR_STYLE = "rg-bar-renderer-bar";
	    BarCellRenderer.BAR_RIGHT_STYLE = "rg-bar-renderer-bar-right";
	    BarCellRenderer.BAR_TOP_STYLE = "rg-bar-renderer-bar-top";
	    BarCellRenderer.BAR_BOTTOM_STYLE = "rg-bar-renderer-bar-bottom";
	    return BarCellRenderer;
	}(DataCellRenderer));
	exports.BarCellRenderer = BarCellRenderer;
	var ImageCellRenderer = /** @class */ (function (_super) {
	    __extends(ImageCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ImageCellRenderer() {
	        return _super.call(this) || this;
	    }
	    ImageCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ImageCellRenderer.prototype, "imageMap", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** imageMap */
	        get: function () {
	            return this._imageMap;
	        },
	        set: function (value) {
	            if (value !== this._imageMap) {
	                this._imageMap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "imageCallback", {
	        /** imageCallback */
	        get: function () {
	            return this._imageCallback;
	        },
	        set: function (value) {
	            if (value !== this._imageCallback) {
	                this._imageCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "imageField", {
	        /** imageField */
	        get: function () {
	            return this._imageField;
	        },
	        set: function (value) {
	            if (value != this._imageField) {
	                this._imageField = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "titleField", {
	        /** titleField */
	        get: function () {
	            return this._titleField;
	        },
	        set: function (value) {
	            if (value != this._titleField) {
	                this._titleField = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "titleCallback", {
	        /** titleCallback */
	        get: function () {
	            return this._titleCallback;
	        },
	        set: function (value) {
	            if (value !== this._titleCallback) {
	                this._titleCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "imageHeight", {
	        /** imageHeight */
	        get: function () {
	            return this._imageHeight;
	        },
	        set: function (value) {
	            if (value != this._imageHeight) {
	                this._imageHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return ImageCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ImageCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var img;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            img = document.createElement("img");
	            img.style.verticalAlign = "middle";
	            dom.appendChild(img);
	        }
	        else {
	            img = dom.firstElementChild;
	        }
	        // let width = dom.offsetWidth;
	        // let height = dom.offsetHeight;
	        var s = this.$_getImageUrl(grid, model);
	        if (s) {
	            img.src = s;
	            var alt = this.$_getTitle(grid, model);
	            if (alt) {
	                img.title = alt;
	            }
	            else {
	                delete img.title;
	            }
	            if (!isNaN(this._imageHeight)) {
	                img.style.height = this._imageHeight + "px";
	            }
	            else {
	                img.style.height = "";
	            }
	        }
	        else {
	            delete img.src;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ImageCellRenderer.prototype.$_getImageUrl = function (grid, model) {
	        var s = "";
	        var cb = this._imageCallback;
	        if (cb) {
	            s = cb.call(this, grid, model);
	        }
	        if (!s && this._imageMap) {
	            s = this._imageMap[model.value];
	        }
	        if (!s && this._imageField) {
	            s = this._getValue(grid, model, this._imageField);
	        }
	        return s || "";
	    };
	    ImageCellRenderer.prototype.$_getTitle = function (grid, model) {
	        var s = "";
	        var cb = this._titleCallback;
	        if (cb) {
	            s = cb.call(this, grid, model);
	        }
	        if (!s && this._titleField) {
	            s = this._getValue(grid, model, this._titleField);
	        }
	        return s || "";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ImageCellRenderer.STYLE = "rg-image-renderer";
	    ImageCellRenderer.STYLE_NAME = "rg-renderer " + ImageCellRenderer.STYLE;
	    return ImageCellRenderer;
	}(DataCellRenderer));
	exports.ImageCellRenderer = ImageCellRenderer;
	var IconCellRenderer = /** @class */ (function (_super) {
	    __extends(IconCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function IconCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._iconStyle = IconCellRenderer.ICON_STYLE;
	        return _this;
	    }
	    IconCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(IconCellRenderer.prototype, "iconMap", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** iconMap */
	        get: function () {
	            return this._iconMap;
	        },
	        set: function (value) {
	            if (value !== this._iconMap) {
	                this._iconMap = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IconCellRenderer.prototype, "iconCallback", {
	        /** iconCallback */
	        get: function () {
	            return this._iconCallback;
	        },
	        set: function (value) {
	            if (value !== this._iconCallback) {
	                this._iconCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IconCellRenderer.prototype, "iconField", {
	        /** iconField */
	        get: function () {
	            return this._iconField;
	        },
	        set: function (value) {
	            if (value != this._iconField) {
	                this._iconField = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IconCellRenderer.prototype, "iconHeight", {
	        /** iconHeight */
	        get: function () {
	            return this._iconHeight;
	        },
	        set: function (value) {
	            if (value != this._iconHeight) {
	                this._iconHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IconCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return IconCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    IconCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var img;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            img = document.createElement("img");
	            dom.appendChild(img);
	            span = document.createElement("span");
	            dom.appendChild(span);
	        }
	        else {
	            img = dom.children[0];
	            span = dom.children[1];
	        }
	        // let width = dom.clientWidth;
	        // let height = dom.clientHeight;
	        // icon
	        var s = this.$_getIconUrl(grid, model);
	        if (s) {
	            img.src = s;
	            if (!isNaN(this._iconHeight)) {
	                img.style.height = this._iconHeight + "px";
	            }
	            else {
	                img.style.height = "";
	            }
	        }
	        else {
	            delete img.src;
	        }
	        // text
	        span.textContent = this.getText(grid, model);
	        // align
	        img.style.display = "inline-block";
	        //img.style.position = "absolute";
	        img.style.marginRight = "4px";
	        span.style.display = "inline-block";
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    IconCellRenderer.prototype.$_getIconUrl = function (grid, model) {
	        var s = "";
	        var cb = this._iconCallback;
	        if (cb) {
	            s = cb.call(this, grid, model);
	        }
	        if (!s && this._iconMap) {
	            s = this._iconMap[model.value];
	        }
	        if (!s && this._iconField) {
	            s = this._getValue(grid, model, this._iconField);
	        }
	        return s || "";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    IconCellRenderer.STYLE = "rg-icon-renderer";
	    IconCellRenderer.STYLE_NAME = "rg-renderer " + IconCellRenderer.STYLE;
	    IconCellRenderer.ICON_STYLE = "rg-icon-renderer-icon";
	    return IconCellRenderer;
	}(DataCellRenderer));
	exports.IconCellRenderer = IconCellRenderer;
	var CheckCellRenderer = /** @class */ (function (_super) {
	    __extends(CheckCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._checkStyle = CheckCellRenderer.CHECK_STYLE;
	        _this._threeState = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._values = {};
	        return _this;
	    }
	    CheckCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CheckCellRenderer.prototype, "checkCallback", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** checkCallback */
	        get: function () {
	            return this._checkCallback;
	        },
	        set: function (value) {
	            if (value !== this._checkCallback) {
	                this._checkCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckCellRenderer.prototype, "trueValues", {
	        /** trueValues */
	        get: function () {
	            return this._trueValues;
	        },
	        set: function (value) {
	            if (value !== this._trueValues) {
	                this._trueValues = value;
	                this.$_resetValues();
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckCellRenderer.prototype, "falseValues", {
	        /** falseValues */
	        get: function () {
	            return this._falseValues;
	        },
	        set: function (value) {
	            if (value !== this._falseValues) {
	                this._falseValues = value;
	                this.$_resetValues();
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckCellRenderer.prototype, "threeState", {
	        /** threeState */
	        get: function () {
	            return this._threeState;
	        },
	        set: function (value) {
	            if (value != this._threeState) {
	                this._threeState = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return CheckCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CheckCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var check;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            check = document.createElement("input");
	            check.type = "checkbox";
	            dom.appendChild(check);
	            span = document.createElement("span");
	            dom.appendChild(span);
	        }
	        else {
	            check = dom.children[0];
	            span = dom.children[1];
	        }
	        // let width = dom.clientWidth;
	        // let height = dom.clientHeight;
	        // check
	        check.checked = this.$_getValue(grid, model);
	        // text
	        span.textContent = this.getText(grid, model);
	        // align
	        check.style.display = "inline-block";
	        //img.style.position = "absolute";
	        check.style.marginRight = "4px";
	        span.style.display = "inline-block";
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    CheckCellRenderer.prototype.$_resetValues = function () {
	        this._values = {};
	        if (this._falseValues) {
	            var vals = this._falseValues.split(",");
	            if (vals) {
	                var len = void 0;
	                this._falseValue = (len = vals.length) > 0 ? vals[0] : undefined;
	                for (var i = 0; i < len; i++) {
	                    this._values[vals[i]] = false;
	                }
	            }
	            else {
	                this._falseValue = undefined;
	            }
	        }
	        if (this._trueValues) {
	            var vals = this._trueValues.split(",");
	            if (vals) {
	                var len = void 0;
	                this._trueValue = (len = vals.length) > 0 ? vals[0] : undefined;
	                for (var i = 0; i < len; i++) {
	                    this._values[vals[i]] = true;
	                }
	            }
	            else {
	                this._trueValue = undefined;
	            }
	        }
	    };
	    CheckCellRenderer.prototype.$_getValue = function (grid, cell) {
	        var cb = this._checkCallback;
	        if (cb) {
	            return this._checkCallback(grid, cell);
	        }
	        var v = cell.value;
	        if (typeof v === "boolean") {
	            return v;
	        }
	        else {
	            var val = String(v);
	            if (this._values.hasOwnProperty(val)) {
	                return this._values[val];
	            }
	            else if (this._threeState && (v == "" || v === undefined || v === null)) {
	                return undefined;
	            }
	            else {
	                return Boolean(v);
	            }
	            return Boolean(v);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    CheckCellRenderer.STYLE = "rg-check-renderer";
	    CheckCellRenderer.STYLE_NAME = "rg-renderer " + CheckCellRenderer.STYLE;
	    CheckCellRenderer.CHECK_STYLE = "rg-check-renderer-check";
	    return CheckCellRenderer;
	}(DataCellRenderer));
	exports.CheckCellRenderer = CheckCellRenderer;
	var LinkCellRenderer = /** @class */ (function (_super) {
	    __extends(LinkCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LinkCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._linkStyle = LinkCellRenderer.LINK_STYLE;
	        return _this;
	    }
	    LinkCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(LinkCellRenderer.prototype, "baseUrl", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /**
	         * baseUrl property.
	         * "#"이면 클릭 시 grid.linkCellClickedCallback이 호출된다.
	         */
	        get: function () {
	            return this._baseUrl;
	        },
	        set: function (value) {
	            if (value != this._baseUrl) {
	                this._baseUrl = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LinkCellRenderer.prototype, "linkField", {
	        /** linkField */
	        get: function () {
	            return this._linkField;
	        },
	        set: function (value) {
	            if (value != this._linkField) {
	                this._linkField = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LinkCellRenderer.prototype, "urlCallback", {
	        /** urlCallback */
	        get: function () {
	            return this._urlCallback;
	        },
	        set: function (value) {
	            if (value !== this._urlCallback) {
	                this._urlCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LinkCellRenderer.prototype, "titleField", {
	        /** titleField */
	        get: function () {
	            return this._titleField;
	        },
	        set: function (value) {
	            if (value != this._titleField) {
	                this._titleField = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LinkCellRenderer.prototype, "titleCallback", {
	        /** titleCallback */
	        get: function () {
	            return this._titleCallback;
	        },
	        set: function (value) {
	            if (value !== this._titleCallback) {
	                this._titleCallback = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LinkCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return LinkCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LinkCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var anchor;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            anchor = document.createElement("a");
	            dom.appendChild(anchor);
	        }
	        else {
	            anchor = dom.firstElementChild;
	        }
	        anchor.textContent = this.getText(grid, model);
	        if (this._baseUrl === "#") {
	            anchor.removeAttribute("target");
	            anchor.href = "#";
	        }
	        else {
	            var url = this.$_getUrl(grid, model);
	            if (url) {
	                anchor.target = "_blank";
	                anchor.href = url;
	            }
	        }
	        var title = this.$_getTitle(grid, model);
	        if (title) {
	            anchor.title = title;
	        }
	        else {
	            delete anchor.title;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    LinkCellRenderer.prototype.$_getUrl = function (grid, cell) {
	        var s = "";
	        var cb = this._urlCallback;
	        if (cb) {
	            s = cb.call(this, grid, cell);
	        }
	        if (!s) {
	            if (this._linkField) {
	                s = this._getValue(grid, cell, this._linkField);
	            }
	            else {
	                s = cell.value;
	            }
	            if (this._baseUrl) {
	                s = this._baseUrl + s;
	            }
	        }
	        return s || "";
	    };
	    LinkCellRenderer.prototype.$_getTitle = function (grid, model) {
	        var s = "";
	        var cb = this._titleCallback;
	        if (cb) {
	            s = cb.call(this, grid, model);
	        }
	        if (!s && this._titleField) {
	            s = this._getValue(grid, model, this._titleField);
	        }
	        return s || "";
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    LinkCellRenderer.STYLE = "rg-link-renderer";
	    LinkCellRenderer.STYLE_NAME = "rg-renderer " + LinkCellRenderer.STYLE;
	    LinkCellRenderer.LINK_STYLE = "rg-link-renderer-link";
	    return LinkCellRenderer;
	}(DataCellRenderer));
	exports.LinkCellRenderer = LinkCellRenderer;
	var ShapeCellRenderer = /** @class */ (function (_super) {
	    __extends(ShapeCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ShapeCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._shapeStyle = ShapeCellRenderer.SHAPE_STYLE;
	        return _this;
	    }
	    ShapeCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ShapeCellRenderer.prototype, "shapeStyle", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        /** shapeStyle */
	        get: function () {
	            return this._shapeStyle;
	        },
	        set: function (value) {
	            if (value != this._shapeStyle) {
	                this._shapeStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ShapeCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return ShapeCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ShapeCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var div;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            div = document.createElement("div");
	            div.style.position = "absolute";
	            dom.appendChild(div);
	            span = document.createElement("span");
	            span.style.display = "inline-block";
	            span.style.position = "relative";
	            dom.appendChild(span);
	        }
	        else {
	            div = dom.children[0];
	            span = dom.children[1];
	        }
	        var width = dom.clientWidth;
	        var height = dom.clientHeight;
	        // shape
	        // text
	        span.textContent = this.getText(grid, model);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ShapeCellRenderer.STYLE = "rg-shape-renderer";
	    ShapeCellRenderer.STYLE_NAME = "rg-renderer " + ShapeCellRenderer.STYLE;
	    ShapeCellRenderer.SHAPE_STYLE = "rg-shape-renderer-shape";
	    return ShapeCellRenderer;
	}(DataCellRenderer));
	exports.ShapeCellRenderer = ShapeCellRenderer;
	var SignalBarCellRenderer = /** @class */ (function (_super) {
	    __extends(SignalBarCellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SignalBarCellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._barStyle = SignalBarCellRenderer.SHAPE_STYLE;
	        _this._barCount = 4;
	        _this._minimum = NaN;
	        _this._maximum = NaN;
	        _this._absoluteValue = false;
	        return _this;
	    }
	    SignalBarCellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SignalBarCellRenderer.prototype, "barStyle", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** barStyle */
	        get: function () {
	            return this._barStyle;
	        },
	        set: function (value) {
	            if (value != this._barStyle) {
	                this._barStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SignalBarCellRenderer.prototype, "barCount", {
	        /** barCount */
	        get: function () {
	            return this._barCount;
	        },
	        set: function (value) {
	            value = Math.max(2, value);
	            if (value != this._barCount) {
	                this._barCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SignalBarCellRenderer.prototype, "minimum", {
	        /** minimum */
	        get: function () {
	            return this._minimum;
	        },
	        set: function (value) {
	            if (value != this._minimum) {
	                this._minimum = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SignalBarCellRenderer.prototype, "maximum", {
	        /** maximum */
	        get: function () {
	            return this._maximum;
	        },
	        set: function (value) {
	            if (value != this._maximum) {
	                this._maximum = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SignalBarCellRenderer.prototype, "absoluteValue", {
	        /** absoluteValue */
	        get: function () {
	            return this._absoluteValue;
	        },
	        set: function (value) {
	            if (value != this._absoluteValue) {
	                this._absoluteValue = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SignalBarCellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return SignalBarCellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SignalBarCellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var div;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            div = document.createElement("div");
	            div.style.position = "absolute";
	            dom.appendChild(div);
	            span = document.createElement("span");
	            span.style.display = "inline-block";
	            span.style.position = "relative";
	            dom.appendChild(span);
	        }
	        else {
	            div = dom.children[0];
	            span = dom.children[1];
	        }
	        var width = dom.clientWidth;
	        var height = dom.clientHeight;
	        // shape
	        // var v = NaN;
	        // var s = cell.figureState();
	        // var isValue = s && typeof s == "string" && s.toLowerCase() == "value";
	        // var state = isValue ? (v = this.isAbsoluteValue() ? Math.abs(cell.value()) : cell.value()) : parseInt(s);
	        // var border = cell.figureBorder();
	        // var fill = cell.figureBackground();
	        // if (isValue && !isNaN(this._minimum) && !isNaN(this._maximum)) {
	        // 	state = this._barCount * (v - this._minimum) / (this._maximum - this._minimum); 
	        // }
	        // if (border || fill) {
	        // 	var i;
	        // 	var fillInactive = cell.figureInactiveBackground();
	        // 	var w = r.width - cell.paddingHorz();
	        // 	var h = r.height - cell.paddingVert();
	        // 	var x = cell.paddingLeft();
	        // 	var y = cell.paddingTop();
	        // 	var bg = 2; // bar gap
	        // 	var bw = (w - (this._barCount  + 1) * bg) / this._barCount;
	        // 	var bx = x;
	        // 	var by = y + h / 2;
	        // 	var dy = h / 2 / (this._barCount - 1);
	        // 	for (i = 0; i < this._barCount; i++) {
	        // 		fill = i < state ? fill : fillInactive;
	        // 		g.drawBounds(fill, border, bx, by, bw, h - by);
	        // 		bx += bw + bg;
	        // 		by -= dy;
	        // 	}
	        // }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    SignalBarCellRenderer.STYLE = "rg-signalbar-renderer";
	    SignalBarCellRenderer.STYLE_NAME = "rg-renderer " + SignalBarCellRenderer.STYLE;
	    SignalBarCellRenderer.SHAPE_STYLE = "rg-shape-renderer-shape";
	    return SignalBarCellRenderer;
	}(DataCellRenderer));
	exports.SignalBarCellRenderer = SignalBarCellRenderer;
	var Code39CellRenderer = /** @class */ (function (_super) {
	    __extends(Code39CellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Code39CellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._barStyle = Code39CellRenderer.SHAPE_STYLE;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._barcode = new Barcode_1.Code39();
	        return _this;
	    }
	    Code39CellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(Code39CellRenderer.prototype, "barStyle", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        /** barStyle */
	        get: function () {
	            return this._barStyle;
	        },
	        set: function (value) {
	            if (value != this._barStyle) {
	                this._barStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Code39CellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return Code39CellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Code39CellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var div;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            div = document.createElement("div");
	            div.style.position = "absolute";
	            dom.appendChild(div);
	            span = document.createElement("span");
	            span.style.display = "inline-block";
	            span.style.position = "relative";
	            dom.appendChild(span);
	        }
	        else {
	            div = dom.children[0];
	            span = dom.children[1];
	        }
	        var width = dom.clientWidth;
	        var height = dom.clientHeight;
	        // shape
	        // text
	        // var s = cell.value();
	        // if (!s) {
	        // 	return;
	        // }
	        // var fill = cell.figureBackground();
	        // if (fill) {
	        // 	this._rect.copy(r);
	        // 	var tr = cell.inflatePadding(this._rect);
	        // 	this._barcode.setValue(s.toUpperCase());
	        // 	this._barcode.setBarFill(fill);
	        // 	this._barcode.render(g, tr);
	        // }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    Code39CellRenderer.STYLE = "rg-code39-renderer";
	    Code39CellRenderer.STYLE_NAME = "rg-renderer " + Code39CellRenderer.STYLE;
	    Code39CellRenderer.SHAPE_STYLE = "rg-shape-renderer-shape";
	    return Code39CellRenderer;
	}(DataCellRenderer));
	exports.Code39CellRenderer = Code39CellRenderer;
	var Code128CellRenderer = /** @class */ (function (_super) {
	    __extends(Code128CellRenderer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Code128CellRenderer() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._barStyle = Code128CellRenderer.SHAPE_STYLE;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._barcode = new Barcode_1.Code128();
	        return _this;
	    }
	    Code128CellRenderer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(Code128CellRenderer.prototype, "barStyle", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        /** barStyle */
	        get: function () {
	            return this._barStyle;
	        },
	        set: function (value) {
	            if (value != this._barStyle) {
	                this._barStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Code128CellRenderer.prototype, "styleName", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return Code128CellRenderer.STYLE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Code128CellRenderer.prototype.renderCell = function (grid, model, dom, needClear) {
	        var div;
	        var span;
	        var cnt = dom.childElementCount;
	        if (cnt == 0 || needClear) {
	            if (cnt > 0) {
	                Utils_1.Utils.clearChildren(dom);
	            }
	            div = document.createElement("div");
	            div.style.position = "absolute";
	            dom.appendChild(div);
	            span = document.createElement("span");
	            span.style.display = "inline-block";
	            span.style.position = "relative";
	            dom.appendChild(span);
	        }
	        else {
	            div = dom.children[0];
	            span = dom.children[1];
	        }
	        var width = dom.clientWidth;
	        var height = dom.clientHeight;
	        // shape
	        // var s = cell.value();
	        // if (!s) {
	        // 	return;
	        // }
	        // var fill = cell.figureBackground();
	        // if (fill) {
	        // 	this._rect.copy(r);
	        // 	var tr = cell.inflatePadding(this._rect);
	        // 	this._barcode.setValue(s);
	        // 	this._barcode.setBarFill(fill);
	        // 	this._barcode.render(g, tr);
	        // }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    Code128CellRenderer.STYLE = "rg-code128-renderer";
	    Code128CellRenderer.STYLE_NAME = "rg-renderer " + Code128CellRenderer.STYLE;
	    Code128CellRenderer.SHAPE_STYLE = "rg-shape-renderer-shape";
	    return Code128CellRenderer;
	}(DataCellRenderer));
	exports.Code128CellRenderer = Code128CellRenderer;
	});

	unwrapExports(CellRenderers);
	var CellRenderers_1 = CellRenderers.DataCellRenderer;
	var CellRenderers_2 = CellRenderers.TextCellRenderer;
	var CellRenderers_3 = CellRenderers.BarOrigin;
	var CellRenderers_4 = CellRenderers.BarCellRenderer;
	var CellRenderers_5 = CellRenderers.ImageCellRenderer;
	var CellRenderers_6 = CellRenderers.IconCellRenderer;
	var CellRenderers_7 = CellRenderers.CheckCellRenderer;
	var CellRenderers_8 = CellRenderers.LinkCellRenderer;
	var CellRenderers_9 = CellRenderers.ShapeCellRenderer;
	var CellRenderers_10 = CellRenderers.SignalBarCellRenderer;
	var CellRenderers_11 = CellRenderers.Code39CellRenderer;
	var CellRenderers_12 = CellRenderers.Code128CellRenderer;

	var ItemElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ItemElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var DataCellElement = /** @class */ (function (_super) {
	    __extends(DataCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataCellElement(name) {
	        return _super.call(this, name || "dataCellView") || this;
	    }
	    Object.defineProperty(DataCellElement.prototype, "expanderVisible", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expanderVisible */
	        get: function () {
	            return false;
	        },
	        set: function (value) {
	            if (value != this.expanderVisible) ;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataCellElement.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DataCellElement.prototype._doPrepareValue = function (grid, model) {
	        _super.prototype._doPrepareValue.call(this, grid, model);
	        this._dataColumn = this.dataColumn;
	        this._value = model.value;
	        this._error = model.error;
	        this._errorLevel = model.errorLevel;
	        var s;
	        var col = this._dataColumn;
	        //this._numberFormatter && (col._displayMinusZero != null ? this._numberFormatter.setDisplayMinusZero(!!col._displayMinusZero) : this._numberFormatter.setDisplayMinusZero(true));
	        if (col) {
	            switch (col.valueType) {
	                case Types.ValueType.TEXT:
	                    s = model.text;
	                    break;
	                case Types.ValueType.NUMBER:
	                    var v = Number(this._value);
	                    if (isNaN(v)) {
	                        s = col.nanText;
	                    }
	                    else if (v == 0 && col.zeroText != null) {
	                        s = col.zeroText;
	                    }
	                    else if (this.numberFormatter) {
	                        s = this.numberFormatter.format(v);
	                    }
	                    else {
	                        s = model.text;
	                    }
	                    break;
	                case Types.ValueType.DATETIME:
	                    /*if (this._value instanceof Date && this._datetimeFormatter) {
	                        s = this._datetimeFormatter.format(this._value);
	                    } else*/ if (this._value instanceof Date && this.datetimeWriter) {
	                        s = this.datetimeWriter.getText(this._value);
	                    }
	                    else {
	                        s = model.text;
	                    }
	                    break;
	                case Types.ValueType.BOOLEAN:
	                    if (this.boolFormatter) {
	                        s = this.boolFormatter.formatValue(this._value);
	                    }
	                    else {
	                        s = model.text;
	                    }
	                    break;
	                case Types.ValueType.OBJECT:
	                // var field = col.getField;
	                // var dataRow = this._index.dataRow;
	                // var key = col._objectKey;
	                // var fn = col._objectCallback;
	                // var v = this._value;
	                // var f;
	                // if (v) {
	                //     s = v = fn && typeof fn === "function" ? fn(field.orgFieldName(), dataRow, v) : key && v.hasOwnProperty(key) ? v[key]  : model.displayText();
	                //     switch (typeof v) {
	                //         case "stirng":
	                //             break;
	                //         case "number":
	                //             s = (f = this.numberFormatter) ? f.format(v) : v;
	                //             break;
	                //         case "boolean":
	                //             s = (f = this._boolFormatter) ? f.formatValue(v) : v;
	                //             break;
	                //         default:
	                //             s = v instanceof Date && (f = this.datetimeWriter()) ? f.getText(v) : v;
	                //             break;
	                //     }
	                // }
	                // break;
	                default:
	                    s = model.text;
	                    break;
	            }
	        }
	        this._text = s;
	    };
	    DataCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = this._text;
	    };
	    return DataCellElement;
	}(CellElement_1.ValueCellElement));
	exports.DataCellElement = DataCellElement;
	/**
	 * dom을 생성하지 않고, table row로 대체한다.
	 */
	var ItemElement = /** @class */ (function (_super) {
	    __extends(ItemElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ItemElement(name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        _this._domIndex = -1; // table tr 위치값.
	        _this._visIndex = -1; // span grid 내의 위치값.
	        return _this;
	    }
	    ItemElement.prototype.dispose = function () {
	        this._item = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ItemElement.prototype, "itemIndex", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** itemIndex */
	        get: function () {
	            return this._item.index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ItemElement.prototype.updateItem = function (item, domIndex, visIndex) {
	        this._item = item;
	        this._domIndex = domIndex;
	        this._visIndex = visIndex;
	    };
	    ItemElement.prototype.clearContent = function (lm) {
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ItemElement.prototype._createDom = function () {
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ItemElement.prototype._changed = function () {
	        this.invalidate();
	    };
	    ItemElement.prototype._getTableRow = function (row) {
	        return this.parent["getTableRow"](this._domIndex);
	    };
	    ItemElement.prototype._getCellContent = function (col) {
	        return this.parent["getCellContent"](this._domIndex, col);
	    };
	    return ItemElement;
	}(GridElement_1.GridElement));
	exports.ItemElement = ItemElement;
	var RowElement = /** @class */ (function (_super) {
	    __extends(RowElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowElement(name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = {};
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowElement.prototype.getCellView = function (lm, column) {
	        var grid = lm.grid;
	        var tr = this._getTableRow(this._domIndex);
	        for (var i = 0, cnt = this._getEndCol(lm) - this._getStartCol(lm); i <= cnt; i++) {
	            var td = tr.children[i];
	            var col = td["$_col"];
	            if (grid.columnByHash(col) == column) {
	                return td;
	            }
	        }
	        return null;
	    };
	    RowElement.prototype._clearDataCellContent = function (dom) {
	        dom.textContent = "";
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowElement.prototype.clearContent = function (lm) {
	        var start = this._getStartCol(lm);
	        var end = this._getEndCol(lm);
	        var cnt = end - start + 1;
	        //this.$_prepareCells(lm, start, end);
	        for (var i = 0; i < cnt; i++) {
	            var dom = this._getCellContent(i);
	            this._clearDataCellContent(dom);
	        }
	    };
	    RowElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        //const fixed = lm.fixedItemCount;
	        var body = grid.body;
	        var bodyView = this.parent;
	        var spanned = bodyView.spanned;
	        var tr = this._getTableRow(this._domIndex);
	        //this.hideAll();
	        //const top = grid.topIndex;
	        var start = this._getStartCol(lm);
	        var end = this._getEndCol(lm);
	        //this.$_prepareCells(lm, start, end);
	        for (var i = start; i <= end; i++) {
	            var col = i - start;
	            var td = tr.children[col];
	            if (spanned) {
	                var row = this._visIndex;
	                if (row >= 0 && bodyView.isMerged(row, col)) {
	                    continue;
	                }
	            }
	            var column = lm.getColumn(i);
	            //let view = this._getCell(column);
	            td["$_col"] = column["$_hash"];
	            //view.visible = true;
	            var index = CellIndex_1.CellIndex.temp(grid, this._item.index, column);
	            var model = body.getCell(index, false, null);
	            //view.updateCell(grid, model, this._getCellContent(col));
	            this._updateDataCell(grid, body, model, td);
	            // const r = lm.getColumnBounds(i);
	            // r.height = this.height;
	            // view.setRect(r);
	            // view.layoutContent(lm);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowElement.prototype._getStartCol = function (lm) {
	        return lm.firstCol;
	    };
	    RowElement.prototype._getEndCol = function (lm) {
	        return lm.lastCol;
	    };
	    RowElement.prototype._getCell = function (column) {
	        return this._cells[column["$_hash"]];
	    };
	    // private $_prepareCells(lm: GridLayoutManager, start: number, end: number): void {
	    // 	for (let i = start; i <= end; i++) {
	    //         const column = lm.getColumn(i);
	    //         let view = this._getCell(column);
	    //         if (!view) {
	    //             view = new DataCellElement();
	    //             this._cells[column["$_hash"]] = view;
	    //             this.addChild(view);
	    //         }
	    //         view.visible = true;
	    //     }
	    // }
	    RowElement.prototype._getRenderer = function (grid, model) {
	        return model.valueColumn.rendererObj || CellRenderers.TextCellRenderer.Default;
	    };
	    RowElement.prototype._renderDataCell = function (grid, body, model, dom) {
	        var renderer = this._getRenderer(grid, model);
	        var oldStyle = dom.className;
	        var style = dom.className = renderer.styleName;
	        renderer.renderCell(grid, model, dom, oldStyle != style);
	    };
	    RowElement.prototype._updateDataCell = function (grid, body, model, td) {
	        td.className = body.getCellStyle(model);
	        this._renderDataCell(grid, body, model, td.lastElementChild);
	    };
	    return RowElement;
	}(ItemElement));
	exports.RowElement = RowElement;
	var FixedRowElement = /** @class */ (function (_super) {
	    __extends(FixedRowElement, _super);
	    function FixedRowElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FixedRowElement.prototype._getStartCol = function (lm) {
	        return 0;
	    };
	    FixedRowElement.prototype._getEndCol = function (lm) {
	        return lm.fixedColCount - 1;
	    };
	    return FixedRowElement;
	}(RowElement));
	exports.FixedRowElement = FixedRowElement;
	var RightRowElement = /** @class */ (function (_super) {
	    __extends(RightRowElement, _super);
	    function RightRowElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RightRowElement.prototype._getStartCol = function (lm) {
	        return lm.columnCount - lm.rightColCount;
	    };
	    RightRowElement.prototype._getEndCol = function (lm) {
	        return lm.columnCount - 1;
	    };
	    return RightRowElement;
	}(RowElement));
	exports.RightRowElement = RightRowElement;
	});

	unwrapExports(ItemElement_1);
	var ItemElement_2 = ItemElement_1.DataCellElement;
	var ItemElement_3 = ItemElement_1.ItemElement;
	var ItemElement_4 = ItemElement_1.RowElement;
	var ItemElement_5 = ItemElement_1.FixedRowElement;
	var ItemElement_6 = ItemElement_1.RightRowElement;

	var GridBodyElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridBodyElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var GridBodyElement = /** @class */ (function (_super) {
	    __extends(GridBodyElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridBodyElement(model) {
	        var _this = _super.call(this, model, "bodyView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._itemCount = 0;
	        _this._fixedCount = 0;
	        _this._itemViews = [];
	        return _this;
	    }
	    GridBodyElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridBodyElement.prototype._getCssSelector = function () {
	        return "rg-body";
	    };
	    GridBodyElement.prototype._getCellSelector = function (td) {
	        // _getDataCellSelector에서 리턴한다!
	        return "rg-body-cell";
	    };
	    GridBodyElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        var css = elt.style;
	        css.whiteSpace = "nowrap";
	        return elt;
	    };
	    GridBodyElement.prototype._clearDataCellContent = function (dom) {
	        dom.textContent = "";
	    };
	    GridBodyElement.prototype._prepareDataCellValue = function (grid, model) {
	        var options = grid.formatOptions;
	        var col = model.valueColumn;
	        // TODO: 기존에는 styles에서 가져온다. 동적으로 지정할 수 있도록 해야 한다.
	        this._numberFormatter = options.getNumberFormatter(col.numberFormatter);
	        this._datetimeWriter = options.getDateWriter(col.datetimeWriter);
	        this._boolFormatter = options.getBoolFormatter(col.boolFormatter);
	    };
	    GridBodyElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        return new Size_1.Size();
	    };
	    GridBodyElement.prototype._doLayoutContent = function (lm) {
	        var grid = this.grid;
	        var body = this.model;
	        var items = lm.getItems();
	        var itemCount = this._itemCount = items.length;
	        var fixedCount = this._fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var dy = fixed ? 1 : 0;
	        var topIndex = grid.topIndex;
	        var j;
	        while ((j = this.childCount) < itemCount) {
	            var item = items[j];
	            var view = this.$_borrowView(item);
	            this.addChild(view);
	        }
	        while ((j = this.childCount) > itemCount) {
	            this.$_removeView(j - 1);
	        }
	        this.$_setCellsDisplay(fixedCount, itemCount);
	        for (var i = 0; i < itemCount; i++) {
	            var item = items[i];
	            var view = this.getChild(i);
	            var tr = i < fixedCount ? i : i + dy;
	            var vr = i - fixedCount;
	            view.updateItem(item, tr, vr);
	            var dom = this.getTableRow(view["_domIndex"]);
	            dom.className = body.getRowStyle(item);
	            //if (item instanceof GridRow) {
	            if (item.isData) {
	                var idx = item.index;
	                idx = (idx < fixedCount) ? idx : idx - topIndex;
	                var r = lm.getItemBounds(idx); //, fixed, rfixed);
	                view.setRect(r);
	                dom["$_idx"] = idx;
	                dom["$_row"] = item.index;
	                view.layoutContent(lm);
	            }
	            else {
	                view.clearContent(lm);
	            }
	        }
	    };
	    GridBodyElement.prototype._doRender = function (dom) {
	    };
	    GridBodyElement.prototype._getColumnCount = function (lm, row) {
	        // if (this.spanned && row >= 0) {
	        //     return this.getSpannedColCount(row);
	        // } else {
	        //     return lm.columnCount - lm.fixedColCount - lm.rightColCount;
	        // }
	        return lm.columnCount - lm.fixedColCount - lm.rightColCount;
	    };
	    GridBodyElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getColumnWidth(col);
	    };
	    GridBodyElement.prototype._doDrawCell = function (row, col, dom) {
	    };
	    GridBodyElement.prototype.getCellView = function (lm, index) {
	        for (var i = 0; i < this._itemCount; i++) {
	            var fixedRows = lm.fixedItemCount;
	            var r = fixedRows > 0 && i >= fixedRows ? i + 1 : i;
	            var dom = this.getTableRow(r);
	            if (dom["$_row"] == index.itemIndex) {
	                return this.$_getCellView(lm, dom, index.column);
	            }
	        }
	        return null;
	    };
	    GridBodyElement.prototype.$_getCellView = function (lm, tr, column) {
	        var grid = lm.grid;
	        for (var i = 0, cnt = this._getEndCol(lm) - this._getStartCol(lm); i <= cnt; i++) {
	            var td = tr.children[i];
	            var col = td["$_col"];
	            if (grid.columnByHash(col) == column) {
	                return td;
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridBodyElement.prototype._getStartCol = function (lm) {
	        return lm.firstCol;
	    };
	    GridBodyElement.prototype._getEndCol = function (lm) {
	        return lm.lastCol;
	    };
	    GridBodyElement.prototype.$_removeView = function (row) {
	        var view = this.removeChildAt(row);
	        view.validate();
	        this._itemViews.push(view);
	    };
	    GridBodyElement.prototype.$_borrowView = function (item) {
	        var view = this._itemViews.pop();
	        if (!view) {
	            //view = this.grid().delegate().borrowItemView(item, this._fixed, this._rightFixed);
	            view = this.createRowElement();
	        }
	        return view;
	    };
	    GridBodyElement.prototype.createRowElement = function () {
	        return new ItemElement_1.RowElement();
	    };
	    GridBodyElement.prototype.$_setCellsDisplay = function (fixedCount, itemCount) {
	        var spanned = this.spanned;
	        var fixed = fixedCount > 0;
	        var r1 = fixed ? fixedCount + 1 : 0;
	        var r2 = itemCount - 1;
	        var rows = this["_tbody"].children;
	        for (var r = 0; r < r1; r++) {
	            var cells = rows[r].children;
	            for (var c = 0; c < cells.length; c++) {
	                var td = cells[c];
	                td.removeAttribute("colSpan");
	                td.removeAttribute("rowSpan");
	                td.style.display = "";
	            }
	        }
	        for (var r = r1; r <= r2; r++) {
	            var cells = rows[r].children;
	            for (var c = 0; c < cells.length; c++) {
	                var td = cells[c];
	                td.removeAttribute("colSpan");
	                td.removeAttribute("rowSpan");
	                if (spanned && this.isHidden(r - r1, c)) {
	                    td.style.display = "none";
	                }
	                else {
	                    td.style.display = "";
	                }
	            }
	        }
	    };
	    return GridBodyElement;
	}(TableBaseElement_1.DataTableElement));
	exports.GridBodyElement = GridBodyElement;
	var FixedBodyElement = /** @class */ (function (_super) {
	    __extends(FixedBodyElement, _super);
	    function FixedBodyElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FixedBodyElement.prototype._getCssSelector = function () {
	        return "rg-fixed-body";
	    };
	    FixedBodyElement.prototype._getStartCol = function (lm) {
	        return 0;
	    };
	    FixedBodyElement.prototype._getEndCol = function (lm) {
	        return lm.fixedColCount - 1;
	    };
	    FixedBodyElement.prototype.createRowElement = function () {
	        return new ItemElement_1.FixedRowElement();
	    };
	    FixedBodyElement.prototype._getColumnCount = function (lm, row) {
	        return lm.fixedColCount;
	    };
	    FixedBodyElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getFixedColumnWidth(col);
	    };
	    return FixedBodyElement;
	}(GridBodyElement));
	exports.FixedBodyElement = FixedBodyElement;
	var RightBodyElement = /** @class */ (function (_super) {
	    __extends(RightBodyElement, _super);
	    function RightBodyElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RightBodyElement.prototype._getCssSelector = function () {
	        return "rg-fixed-body";
	    };
	    RightBodyElement.prototype._getStartCol = function (lm) {
	        return lm.columnCount - lm.rightColCount;
	    };
	    RightBodyElement.prototype._getEndCol = function (lm) {
	        return lm.columnCount - 1;
	    };
	    RightBodyElement.prototype.createRowElement = function () {
	        return new ItemElement_1.RightRowElement();
	    };
	    RightBodyElement.prototype._getColumnCount = function (lm, row) {
	        return lm.rightColCount;
	    };
	    RightBodyElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getRightColumnWidth(col);
	    };
	    return RightBodyElement;
	}(GridBodyElement));
	exports.RightBodyElement = RightBodyElement;
	});

	unwrapExports(GridBodyElement_1);
	var GridBodyElement_2 = GridBodyElement_1.GridBodyElement;
	var GridBodyElement_3 = GridBodyElement_1.FixedBodyElement;
	var GridBodyElement_4 = GridBodyElement_1.RightBodyElement;

	var GridLayoutManager_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridLayoutManager.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var GridLayoutManager = /** @class */ (function (_super) {
	    __extends(GridLayoutManager, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridLayoutManager(grid) {
	        var _this = _super.call(this) || this;
	        _this._leftPos = 0;
	        _this._items = [];
	        _this._topIndex = 0;
	        _this._itemCount = 0;
	        _this._fixedRows = 0;
	        _this._fixedItemCount = 0;
	        _this._fullItemCount = 0;
	        _this._availableItemCount = 0;
	        _this._fixedItemPoints = [];
	        _this._itemPoints = [];
	        _this._columnCount = 0;
	        _this._fixedCols = 0;
	        _this._rightCols = 0;
	        _this._rightFixed = true;
	        _this._firstCol = 0;
	        _this._lastCol = -1;
	        _this._columnsLength = 0;
	        _this._columns = [];
	        _this._columnPoints = [];
	        _this._fixedColumnPoints = [];
	        _this._rightColumnPoints = [];
	        _this._fixedBarWidth = 0;
	        _this._rightBarWidth = 0;
	        _this._fixedBarHeight = 0;
	        _this._columnMerged = false;
	        _this._fixedColumnMerged = false;
	        _this._rightColumnMerged = false;
	        _this._fixedWidth = 0;
	        _this._rightWidth = 0;
	        _this._fixedHeight = 0;
	        _this._rowHeight = 0;
	        _this._hscrolled = false;
	        _this._vscrolled = false;
	        _this._hscrollBar = false;
	        _this._vscrollBar = false;
	        _this._scrollBarWidth = 0;
	        _this._scrollBarHeight = 0;
	        _this._scrollWidth = 0;
	        _this._compensated = 0;
	        _this._grid = grid;
	        _this._options = grid.displayOptions;
	        return _this;
	    }
	    GridLayoutManager.prototype.dispose = function () {
	        this._grid = null;
	        this._rs = null;
	        this._options = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridLayoutManager.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "vscrollBar", {
	        /** vscrollBar */
	        get: function () {
	            return this._vscrollBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "hscrollBar", {
	        /** hscrollBar */
	        get: function () {
	            return this._hscrollBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "dataBounds", {
	        /** dataBounds */
	        get: function () {
	            return this._dataBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "bodyBounds", {
	        /** bodyBounds */
	        get: function () {
	            return this._bodyBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedBodyBounds", {
	        /** fixedBodyBounds */
	        get: function () {
	            return this._fixedBodyBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "gridBounds", {
	        /**
	         * 상단 영역, 하단 영역 제외. 고정 영역까지 제외, 스크롤바드르 제외한 영역.
	         */
	        get: function () {
	            return this._gridBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "headerBounds", {
	        /** headerBounds */
	        get: function () {
	            return this._headerBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "footerBounds", {
	        /** footerBounds */
	        get: function () {
	            return this._footerBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "topContentBounds", {
	        /** topContentBounds */
	        get: function () {
	            return this._topContentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "leftContentBounds", {
	        /** leftContentBounds */
	        get: function () {
	            return this._leftContentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "sideContentBounds", {
	        /** sideContentBounds */
	        get: function () {
	            return this._sideContentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "contentBounds", {
	        /** contentBounds */
	        get: function () {
	            return this._contentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedContentBounds", {
	        /** fixedContentBounds */
	        get: function () {
	            return this._fixedContentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightContentBounds", {
	        /** rightContentBounds */
	        get: function () {
	            return this._rightContentBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "indicatorBounds", {
	        /** indicatorBounds */
	        get: function () {
	            return this._indicatorBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "headBounds", {
	        /** headBounds */
	        get: function () {
	            return this._headBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "footBounds", {
	        /** footBounds */
	        get: function () {
	            return this._footBounds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedWidth", {
	        /** fixedWidth */
	        get: function () {
	            return this._fixedWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightWidth", {
	        /** rightWidth */
	        get: function () {
	            return this._rightWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "topIndex", {
	        /** topIndex */
	        get: function () {
	            return this._topIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "itemCount", {
	        /** itemCount */
	        get: function () {
	            return this._itemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedItemCount", {
	        /** fixedItemCount */
	        get: function () {
	            return this._fixedItemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fullItemCount", {
	        /** fullItemCount */
	        get: function () {
	            return this._fullItemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "columnCount", {
	        /** columnCount */
	        get: function () {
	            return this._columnCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "leftPos", {
	        /** leftPos */
	        get: function () {
	            return this._leftPos;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "firstCol", {
	        /** firstCol */
	        get: function () {
	            return this._firstCol;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "lastCol", {
	        /** lastCol */
	        get: function () {
	            return this._lastCol;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedColCount", {
	        /** fixedColCount */
	        get: function () {
	            return this._fixedCols;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightColCount", {
	        /** rightColCount */
	        get: function () {
	            return this._rightCols;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightFirstCol", {
	        /** rightFirstCol */
	        get: function () {
	            return this._columnCount - this._rightCols;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "columnsLength", {
	        /** columnsLength */
	        get: function () {
	            return this._columnsLength;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "indicatorWidth", {
	        /** indicatorWidth */
	        get: function () {
	            return this._indicatorBounds.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "stateBarWidth", {
	        /** stateBarWidth */
	        get: function () {
	            return this._stateBarBounds.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "checkBarWidth", {
	        /** checkBarWidth */
	        get: function () {
	            return this._checkBarBounds.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "scrollWidth", {
	        /** _scrollWidth */
	        get: function () {
	            return this._scrollWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedBarWidth", {
	        /** fixedBarWidth */
	        get: function () {
	            return this._fixedBarWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightBarWidth", {
	        /** rightBarWidth */
	        get: function () {
	            return this._rightBarWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedHeight", {
	        /** fixedHeight */
	        get: function () {
	            return this._fixedHeight;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedBarHeight", {
	        /** fixedBarHeight */
	        get: function () {
	            return this._fixedBarHeight;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rowGrouped", {
	        /** rowGrouped */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "mergedRowGrouped", {
	        /** mergedRowGrouped */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rowGroupLevels", {
	        /** rowGroupLevels */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "columnMerged", {
	        /** columnMerged */
	        get: function () {
	            return this._columnMerged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "fixedColumnMerged", {
	        /** fixedColumnMerged */
	        get: function () {
	            return this._fixedColumnMerged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "rightColumnMerged", {
	        /** rightColumnMerged */
	        get: function () {
	            return this._rightColumnMerged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridLayoutManager.prototype, "clientRect", {
	        /**
	         * 스크롤바를 제외한 그리드 전체 영역.
	         */
	        get: function () {
	            return this._clientRect;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridLayoutManager.prototype.getColumn = function (index) {
	        return this._columns[index];
	    };
	    GridLayoutManager.prototype.getColumnBounds = function (index) {
	        return new Rectangle_1.Rectangle(this._columnPoints[index], 0, this._columnPoints[index + 1] - this._columnPoints[index], 0);
	    };
	    GridLayoutManager.prototype.getColumnWidth = function (index) {
	        return this._columnPoints[index + 1] - this._columnPoints[index];
	    };
	    GridLayoutManager.prototype.getFixedColumnWidth = function (index) {
	        return this._fixedColumnPoints[index + 1] - this._fixedColumnPoints[index];
	    };
	    GridLayoutManager.prototype.getRightColumnWidth = function (index) {
	        return this._rightColumnPoints[index + 1] - this._rightColumnPoints[index];
	    };
	    GridLayoutManager.prototype.getItems = function () {
	        return this._items;
	    };
	    GridLayoutManager.prototype.getItem = function (index) {
	        return this._items[index];
	    };
	    GridLayoutManager.prototype._calcRowHeight = function () {
	        var options = this.grid.displayOptions;
	        var h = 0;
	        if (options.rowHeight > 0) {
	            h = options.rowHeight;
	        }
	        // h가 0이면 기본 tr 높이 계산.
	        if (h <= 0) {
	            h = 23;
	        }
	        h = Math.max(options.minRowHeight, h);
	        if (options.maxRowHeight > 0) {
	            h = Math.min(options.maxRowHeight, h);
	        }
	        return h;
	    };
	    GridLayoutManager.prototype.measure = function (bounds, leftPos, topIndex, scrollBarWidth, scrollBarHeight) {
	        this._rs = this._grid.itemSource;
	        this._leftPos = leftPos;
	        this._topIndex = topIndex;
	        this._columnMerged = false;
	        this._fixedColumnMerged = false;
	        this._rightColumnMerged = false;
	        this._rowHeight = this._calcRowHeight();
	        if (this._focusIndex && !this._grid.isValid(this._focusIndex)) {
	            this._focusIndex.normalize(this._grid);
	        }
	        this._doMeasure(bounds, scrollBarWidth, scrollBarHeight);
	        this._prevFocused = this._focusIndex;
	        this._focusIndex = null;
	    };
	    GridLayoutManager.prototype.layout = function (bounds) {
	        this._doLayout(bounds);
	    };
	    GridLayoutManager.prototype.getItemHeight = function (row) {
	        return this._rowHeight;
	    };
	    GridLayoutManager.prototype.getItemBounds = function (row) {
	        var y;
	        var h;
	        if (this._fixedItemCount > 0 && row < this._fixedItemCount) {
	            y = this._fixedItemPoints[row];
	            h = this._fixedItemPoints[row + 1] - y;
	        }
	        else {
	            var idx = row - this._fixedItemCount;
	            y = this._itemPoints[idx];
	            h = this._itemPoints[idx + 1] - y;
	        }
	        return new Rectangle_1.Rectangle(0, y, 1000, h);
	        // if (this._fixedItemCount > 0 && row >= this._fixedItemCount) {
	        //     return new Rectangle(0, this._fixedBarHeight + row * 23, 1000, 23);
	        // } else {
	        //     return new Rectangle(0, row * 23, 1000, 23);
	        // }
	    };
	    GridLayoutManager.prototype.getItemRect = function (row, fixed) {
	        if (fixed === void 0) { fixed = false; }
	        var r = fixed ? this._fixedContentBounds : this._bodyBounds;
	        var sy = r.y;
	        var y;
	        var h;
	        if (this._fixedItemCount > 0 && row < this._fixedItemCount) {
	            y = this._fixedItemPoints[row] + sy;
	            h = this._fixedItemPoints[row + 1] - y;
	        }
	        else {
	            var idx = row - this._fixedItemCount;
	            y = this._itemPoints[idx] + sy;
	            h = this._itemPoints[idx + 1] - y;
	        }
	        return new Rectangle_1.Rectangle(0, y, 1000, h);
	    };
	    /**
	     * 사용자 수평 스크롤시 전체 layout없이 contentPane만 이동시킨다.
	     */
	    GridLayoutManager.prototype.setLeftPos = function (bounds, pos) {
	        var grid = this._grid;
	        this._leftPos = pos;
	        this.$_calcLeftPos(bounds, this._scrollBarWidth);
	        grid.contentPane.x = this._contentBounds.x = this.fixedContentBounds.right - this._leftPos;
	        this._bodyBounds.x = this._contentBounds.x;
	    };
	    GridLayoutManager.prototype.isMergedCell = function (index) {
	        var grid = this._grid;
	        if (grid.rowGroup.mergeMode) {
	            if (grid.isGroupedColumn(index.dataColumn)) {
	                return true;
	            }
	        }
	        var column = index.column;
	        if (column instanceof GridColumn_1.ValueColumn && column.canMerge()) {
	            var merges = column.stateFor(ColumnMerge.ColumnMergeManager.MERGE_ROOMS);
	            if (merges) {
	                return merges.getRoom(index) != null;
	            }
	        }
	        return false;
	    };
	    GridLayoutManager.prototype.getMergedCell = function (index) {
	        var column = index.column;
	        if (column instanceof GridColumn_1.ValueColumn && column.canMerge()) {
	            var merges = column.stateFor(ColumnMerge.ColumnMergeManager.MERGE_ROOMS);
	            if (merges) {
	                return merges.getRoom(index);
	            }
	        }
	        return null;
	    };
	    GridLayoutManager.prototype.getColumnRect = function (index) {
	        var rfixedCol = this.rightFirstCol;
	        var r;
	        if (index < this._fixedCols) {
	            var x = this._gridBounds.x;
	            var i = index;
	            r = new Rectangle_1.Rectangle(this._fixedColumnPoints[i] + x, 0, this._fixedColumnPoints[i + 1] - this._fixedColumnPoints[i], 0);
	        }
	        else if (index >= rfixedCol) {
	            var x = this._rightContentBounds.x + this._grid.fixedOptions.colBarWidth;
	            var i = index - rfixedCol;
	            r = new Rectangle_1.Rectangle(this._rightColumnPoints[i] + x, 0, this._rightColumnPoints[i + 1] - this._rightColumnPoints[i], 0);
	        }
	        else {
	            var x = this._bodyBounds.x; //this._fixedCols > 0 ? this._bodyBounds.x - this._leftPos : this._bodyBounds.x; // fixed Column이 존재하면 _bodyBounds에 _leftPos를 빼지 않는다.
	            var i = index - this._fixedCols;
	            r = new Rectangle_1.Rectangle(this._columnPoints[i] + x, 0, this._columnPoints[i + 1] - this._columnPoints[i], 0);
	        }
	        return r;
	    };
	    GridLayoutManager.prototype.getDataRootRect = function (column) {
	        var r = this.getColumnRect(column.displayIndex);
	        return r;
	    };
	    GridLayoutManager.prototype.getCellBounds = function (index) {
	        var r = this.getItemBounds(index.itemIndex - this._topIndex);
	        var rfixedCol = this.rightFirstCol;
	        var col = index.column.displayIndex;
	        if (col < this._fixedCols) {
	            r.x = this._fixedColumnPoints[col];
	            r.width = this._fixedColumnPoints[col + 1] - this._fixedColumnPoints[col];
	        }
	        else if (col >= rfixedCol) {
	            var i = col - rfixedCol;
	            r.x = this._rightColumnPoints[i];
	            r.width = this._rightColumnPoints[i + 1] - this._rightColumnPoints[i];
	        }
	        else {
	            var i = col - this._fixedCols;
	            r.x = this._columnPoints[i];
	            r.width = this._columnPoints[i + 1] - this._columnPoints[i];
	        }
	        return r;
	    };
	    GridLayoutManager.prototype.mouseToIndex = function (x, y, index) {
	        index.set(-1, null);
	        if (this._columnCount < 1) {
	            return index;
	        }
	        var grid = this.grid;
	        var h = this._headerBounds.bottom; // this._summaryBounds.bottom;
	        var r = -1;
	        if (y >= h && y < this._footerBounds.y) {
	            for (var i = 0; i < this._fixedItemCount; i++) {
	                if (y >= h + this._fixedItemPoints[i] && y < h + this._fixedItemPoints[i + 1]) {
	                    r = i;
	                    y -= h + this._fixedItemPoints[i];
	                    break;
	                }
	            }
	            if (r < 0 && this._itemCount > 0) {
	                for (var i = 0; i < this._itemCount; i++) {
	                    if (y >= h + this._itemPoints[i] && y < h + this._itemPoints[i + 1]) {
	                        r = i;
	                        y -= h + this._itemPoints[i];
	                        break;
	                    }
	                }
	                if (r >= 0) {
	                    r += grid.topItem;
	                }
	            }
	        }
	        else if (y >= this._footerBounds.y) { // footer
	            r = -2;
	        }
	        else if (y < this._headerBounds.y) { // panel
	            r = -3;
	        }
	        index.itemIndex = r;
	        var c = -1;
	        var w = this._gridBounds.x;
	        if (x >= w && x <= this._clientRect.width) {
	            x = x - w;
	            for (var i = 0; i < this._fixedCols; i++) {
	                if (x >= this._fixedColumnPoints[i] && x < this._fixedColumnPoints[i + 1]) {
	                    c = i;
	                    x -= this._fixedColumnPoints[i];
	                    break;
	                }
	            }
	            if (c < 0 && this._rightCols > 0) {
	                var rx = x - this._rightContentBounds.x + this._grid.fixedOptions.colBarWidth + w;
	                for (var i = 0; i < this._rightCols; i++) {
	                    if (rx >= this._rightColumnPoints[i] && rx < this._rightColumnPoints[i + 1]) {
	                        c = i + this.rightFirstCol;
	                        x = rx -= this._rightColumnPoints[i];
	                        break;
	                    }
	                }
	            }
	            if (c < 0) {
	                x = x - this._fixedWidth + this._leftPos;
	                for (var i = this._firstCol; i <= this._lastCol; i++) {
	                    if (x >= this._columnPoints[i - this._fixedCols] && x < this._columnPoints[i - this._fixedCols + 1]) {
	                        c = i;
	                        x -= this._columnPoints[i - this._fixedCols];
	                        break;
	                    }
	                }
	            }
	        }
	        if (c >= 0 && c < grid.visibleColumnCount) {
	            index.column = grid.getVisibleColumn(c);
	            // const root = _cast(index.column().root(), ColumnGroup);
	            // if (root) {
	            // 	index.column(root.columnAtPoint(x, y));
	            // }
	        }
	        else {
	            index.column = null;
	            index.itemIndex = -1;
	        }
	        return index;
	    };
	    GridLayoutManager.prototype.mouseToIndexEx = function (x, y, index) {
	        if (this._columnCount < 1) {
	            return index;
	        }
	        var grid = this.grid;
	        var topItem = this._topIndex + this._fixedItemCount;
	        var h = this._bodyBounds.y;
	        var r = 0;
	        if (y < h) {
	            r = -1;
	        }
	        else if (y >= this._bodyBounds.bottom && y < this._footerBounds.y) {
	            r = topItem + this._fullItemCount;
	        }
	        else if (y >= this._footerBounds.y) {
	            r = topItem + this._fullItemCount;
	        }
	        else {
	            r = -1;
	            for (var i = 0; i < this._fixedItemCount; i++) {
	                if (y >= h + this._fixedItemPoints[i] && y < h + this._fixedItemPoints[i + 1]) {
	                    r = i;
	                    break;
	                }
	            }
	            if (r < 0 && this._itemCount > 0) {
	                for (var i = 0; i < this._itemCount; i++) {
	                    if (y >= h + this._itemPoints[i] && y < h + this._itemPoints[i + 1]) {
	                        r = i;
	                        break;
	                    }
	                }
	                if (r >= 0) {
	                    r += topItem;
	                }
	            }
	        }
	        index.itemIndex = r;
	        var c = -1;
	        var w = this._gridBounds.x;
	        if (x < w) {
	            c = Math.max(0, this._firstCol - 1);
	        }
	        else if (x >= this._bodyBounds.right && x < this._clientRect.right) {
	            c = grid.visibleColumnCount - 1;
	        }
	        else if (x > this._clientRect.right) {
	            c = Math.min(grid.visibleColumnCount - 1, this._lastCol + 1);
	        }
	        else {
	            x = x - w;
	            for (var i = 0; i < this._fixedCols; i++) {
	                if (x >= this._fixedColumnPoints[i] && x < this._fixedColumnPoints[i + 1]) {
	                    c = i;
	                    break;
	                }
	            }
	            if (c < 0 && this._rightCols > 0) {
	                var rx = x - this._rightContentBounds.x + this._grid.fixedOptions.colBarWidth + w;
	                for (var i = 0; i < this._rightCols; i++) {
	                    if (rx >= this._rightColumnPoints[i] && rx < this._rightColumnPoints[i + 1]) {
	                        c = i + this.rightFirstCol;
	                        break;
	                    }
	                }
	            }
	            if (c < 0) {
	                x = x - this._fixedWidth + this._leftPos;
	                for (var i = this._firstCol; i <= this._lastCol; i++) {
	                    if (x >= this._columnPoints[i - this._fixedCols] && x < this._columnPoints[i - this._fixedCols + 1]) {
	                        c = i;
	                        break;
	                    }
	                }
	            }
	        }
	        if (c >= 0 && c < grid.visibleColumnCount) {
	            index.column = grid.getVisibleColumn(c);
	        }
	        else {
	            index.column = null;
	        }
	        return index;
	    };
	    GridLayoutManager.prototype.cellIsVisible = function (index) {
	        var i = index.itemIndex;
	        var fixed = this._fixedItemCount;
	        if (i >= fixed) {
	            if (i < this._topIndex + fixed) {
	                return false;
	            }
	            if (this._fullItemCount == 0 && i == this._topIndex + fixed) {
	                return true;
	            }
	            if (i >= this._topIndex + fixed + this._fullItemCount) {
	                return false;
	            }
	        }
	        var x;
	        var column = index.column;
	        var root = column; //.root();
	        var c = root.displayIndex;
	        fixed = this._fixedCols;
	        if (c >= fixed) {
	            x = this.getColumnBounds(c).x;
	            // while (column != root) {
	            // 	x += column.displayOffset;
	            // 	column = column.parent();
	            // }
	            if (x < this._leftPos) {
	                return false;
	            }
	            //if (x + index.column.displayWidth - this._leftPos > this._nonfixedBounds.width) {
	            if (x + index.column.width - this._leftPos > this._nonfixedBounds.width - this._scrollBarWidth) {
	                return false;
	            }
	        }
	        return true;
	    };
	    GridLayoutManager.prototype.makeCellVisible = function (index) {
	        this._focusIndex = index.clone();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridLayoutManager.prototype.$_calcFixedColumnPoints = function (grid) {
	        var options = grid.fixedOptions;
	        var cols = this._columnCount = grid.visibleColumnCount;
	        this._fixedCols = Math.min(options.colCount, cols);
	        this._rightCols = Math.min(options.rightCount, cols - this._fixedCols);
	        this._rightFixed = options.rightFixed;
	        this._columns = [];
	        this._fixedColumnPoints = [];
	        this._fixedWidth = 0;
	        if (this._fixedCols > 0) {
	            var pts = this._fixedColumnPoints;
	            var x = 0;
	            pts.push(x);
	            for (var i = 0; i < this._fixedCols; i++) {
	                var column = grid.getVisibleColumn(i);
	                this._columns.push(column);
	                x += column.width;
	                column["_displayIndex"] = i;
	                pts.push(x);
	            }
	            var w = this._fixedBarWidth = options.colBarWidth;
	            this._fixedWidth = this._fixedColumnPoints[this._fixedCols] + w;
	        }
	    };
	    GridLayoutManager.prototype.$_calcColumnPoints = function () {
	        this._columnsLength = 0;
	        this._columnPoints = [];
	        var grid = this._grid;
	        var cnt = grid.visibleColumnCount - this._fixedCols - this._rightCols;
	        if (cnt > 0) {
	            var x = 0;
	            this._columnPoints.push(x);
	            for (var i = 0; i < cnt; i++) {
	                var column = grid.getVisibleColumn(i + this._fixedCols);
	                this._columns.push(column);
	                x += column.width;
	                column["_displayIndex"] = i;
	                this._columnPoints.push(x);
	            }
	            this._columnsLength = x;
	        }
	    };
	    GridLayoutManager.prototype.$_calcRightColumnPoints = function (grid) {
	        var options = grid.fixedOptions;
	        var cols = this._columnCount = grid.visibleColumnCount;
	        this._rightColumnPoints = [];
	        this._rightWidth = 0;
	        if (this._rightCols > 0) {
	            var pts = this._rightColumnPoints;
	            var x = 0;
	            pts.push(x);
	            for (var start = cols - this._rightCols, i = start; i < cols; i++) {
	                var column = grid.getVisibleColumn(i);
	                this._columns.push(column);
	                x += column.width;
	                column["_displayIndex"] = i - start;
	                pts.push(x);
	            }
	            var w = this._rightBarWidth = options.rightBarWidth;
	            this._rightWidth = this._rightColumnPoints[this._rightCols] + w;
	        }
	    };
	    GridLayoutManager.prototype.$_calcScrollWidth = function (bounds, sw) {
	        this._scrollWidth = bounds.width - this._leftContentBounds.width - this._sideContentBounds.width - this._fixedContentBounds.width - this._rightContentBounds.width - sw;
	    };
	    GridLayoutManager.prototype.$_calcLeftPos = function (bounds, sw) {
	        this.$_calcScrollWidth(bounds, sw);
	        var column;
	        if (this._focusIndex && (column = this._focusIndex.column)) {
	            var root = column; //.root();
	            var i = root.displayIndex;
	            if (i >= this._fixedCols && i < this.rightFirstCol) {
	                var x = this._columnPoints[i - this._fixedCols];
	                // while (column != root) {
	                //     x += column.displayOffset();
	                //     column = column.parent();
	                // }
	                if (x < this._leftPos) {
	                    this._leftPos = x;
	                }
	                else {
	                    //const dx = x + this._focusIndex.column.displayWidth() - this._leftPos - this._nonfixedBounds.width;
	                    var dx = x + this._focusIndex.column.width - this._leftPos - this._scrollWidth; // this._nonfixedBounds.width + sw;
	                    if (dx > 0) {
	                        this._leftPos = Math.min(x, this._leftPos + dx);
	                    }
	                }
	            }
	        }
	        this._leftPos = Math.max(0, Math.min(this._leftPos, this._columnsLength - this._scrollWidth));
	        this._firstCol = this._fixedCols;
	        this._lastCol = this._columnCount > 0 ? (this._columnCount - this._rightCols - 1) : -1;
	    };
	    GridLayoutManager.prototype.$_measureTopPane = function (grid) {
	        var r = this._topContentBounds;
	        this._topContentBounds.height = 0;
	    };
	    GridLayoutManager.prototype.$_measureViews = function (grid, r) {
	        var view;
	        var sz;
	        // header
	        this._headerBounds = r.clone();
	        if (grid.header.visible) {
	            view = grid.headerView;
	            sz = view.measure(grid, r.width, r.height);
	        }
	        else {
	            sz = Size_1.Size.EMPTY;
	        }
	        this._headerBounds.height = sz.height;
	        this._fixedHeaderBounds = this._headerBounds.clone();
	        this._rightHeaderBounds = this._headerBounds.clone();
	        // footer
	        this._footerBounds = r.clone();
	        if (grid.footer.visible) {
	            view = grid.footerView;
	            sz = view.measure(grid, r.width, r.height);
	        }
	        else {
	            sz = Size_1.Size.EMPTY;
	        }
	        this._footerBounds.height = sz.height;
	        this._fixedFooterBounds = this._footerBounds.clone();
	        this._rightFooterBounds = this._footerBounds.clone();
	    };
	    GridLayoutManager.prototype.$_measureLeftPane = function (grid) {
	        var r = this._leftContentBounds.clone();
	        var view;
	        var sz;
	        this._leftContentBounds.width = 0;
	        r.x = r.y = 0;
	        // head
	        this._headBounds = r.clone();
	        this._headBounds.height = this._headerBounds.height;
	        r.topBy(this._headBounds.height);
	        // foot
	        this._footBounds = r.clone();
	        this._footBounds.height = this._footerBounds.height;
	        this._footBounds.y = r.bottom - this._footBounds.height;
	        r.bottomBy(-this._footBounds.height);
	        // rowIndicator
	        this._indicatorBounds = r.clone();
	        if (grid.rowIndicator.visible) {
	            view = grid.rowIndicatorView;
	            sz = view.measure(grid, r.width, r.height);
	        }
	        else {
	            sz = Size_1.Size.EMPTY;
	        }
	        this._indicatorBounds.width = sz.width;
	        r.leftBy(sz.width);
	        this._leftContentBounds.width += sz.width;
	        // stateBar
	        this._stateBarBounds = r.clone();
	        if (grid.stateBar.visible) {
	            view = grid.stateBarView;
	            sz = view.measure(grid, r.width, r.height);
	        }
	        else {
	            sz = Size_1.Size.EMPTY;
	        }
	        this._stateBarBounds.width = sz.width;
	        r.leftBy(sz.width);
	        this._leftContentBounds.width += sz.width;
	        // checkBar
	        this._checkBarBounds = r.clone();
	        if (grid.checkBar.visible) {
	            view = grid.checkBarView;
	            sz = view.measure(grid, r.width, r.height);
	        }
	        else {
	            sz = Size_1.Size.EMPTY;
	        }
	        this._checkBarBounds.width = sz.width;
	        this._leftContentBounds.width += sz.width;
	        this._headBounds.width = this._leftContentBounds.width;
	        this._footBounds.width = this._leftContentBounds.width;
	    };
	    GridLayoutManager.prototype._measureSidePane = function (grid) {
	        if (grid.isSidePaneVisible()) {
	            var r = this._sideContentBounds.clone();
	            var view = grid.sideContentPane;
	            var sz = view.measure(grid, r.width, r.height);
	            this._sideContentBounds.width = sz.width;
	        }
	        else {
	            this._sideContentBounds.width = 0;
	        }
	    };
	    GridLayoutManager.prototype.$_measureFixedPane = function (grid) {
	        var w = this._fixedWidth;
	        this._fixedContentBounds.width = w;
	        var r = this._fixedContentBounds.clone();
	        r.x = r.y = 0;
	        // header
	        this._fixedHeaderBounds.x = r.x;
	        this._fixedHeaderBounds.y = r.y;
	        this._fixedHeaderBounds.width = r.width;
	        r.topBy(this._fixedHeaderBounds.height);
	        // footer
	        this._fixedFooterBounds.x = r.x;
	        this._fixedFooterBounds.y = r.bottom - this._fixedFooterBounds.height;
	        this._fixedFooterBounds.width = r.width;
	        r.bottomBy(-this._fixedFooterBounds.height);
	        // body
	        this._fixedBodyBounds = r;
	    };
	    GridLayoutManager.prototype.$_measureRightPane = function (grid) {
	        var w = this._rightWidth;
	        this._rightContentBounds.width = w;
	        var r = this._rightContentBounds.clone();
	        r.x = this._rightBarWidth;
	        r.y = 0;
	        r.width -= r.x;
	        // header
	        this._rightHeaderBounds.x = r.x;
	        this._rightHeaderBounds.y = r.y;
	        this._rightHeaderBounds.width = r.width;
	        r.topBy(this._rightHeaderBounds.height);
	        // footer
	        this._rightFooterBounds.x = r.x;
	        this._rightFooterBounds.y = r.bottom - this._rightFooterBounds.height;
	        this._rightFooterBounds.width = r.width;
	        r.bottomBy(-this._rightFooterBounds.height);
	        // body
	        this._rightBodyBounds = r;
	    };
	    GridLayoutManager.prototype.$_measureContentPane = function (grid) {
	        var w = this._columnsLength;
	        this._contentBounds.width = w;
	        var r = this._contentBounds.clone();
	        r.x = r.y = 0;
	        // header
	        this._headerBounds.x = r.x;
	        this._headerBounds.y = r.y;
	        this._headerBounds.width = r.width;
	        r.topBy(this._headerBounds.height);
	        this._dataBounds = r.clone();
	        // footer
	        this._footerBounds.x = r.x;
	        this._footerBounds.y = r.bottom - this._footerBounds.height;
	        this._footerBounds.width = r.width;
	        r.bottomBy(-this._footerBounds.height);
	        // body
	        this._bodyBounds = r;
	    };
	    GridLayoutManager.prototype.$_calcItemHeight = function (grid, index) {
	        // var item = this._items.getItem(index);
	        // var view = delegate.borrowItemView(item, false, false);
	        // var styles = null;
	        // if (view instanceof RowGroupHeaderElement && item instanceof GroupItem) {
	        // 	styles = grid.rowGroup().headerStyles();
	        // } else if (item instanceof GridItem) {
	        // 	styles = grid.body().styles();
	        // } 
	        // if (!view) {
	        // 	if ($_debug) debugger;
	        // }
	        // view.updateElement(item, styles);
	        // var h = this._heightMeasurer.itemHeight(0);
	        // var eachRowResizable = grid.displayOptions().isEachRowResizable() && grid._rootColumn._dataLevel == 1;
	        // if (eachRowResizable) {
	        // 	var dataId = item.dataId();
	        // 	if (this._itemHeights[dataId]) {
	        // 		h = this._itemHeights[dataId];
	        // 	}
	        // }
	        // var sz = view.measure(grid, 10000, h);
	        // delegate.returnItemView(view);
	        // return sz.height;
	        //return 23;
	        return this._calcRowHeight();
	    };
	    GridLayoutManager.prototype.$_calcItemPoints = function (bounds) {
	        var grid = this.grid;
	        var rs = grid.itemSource;
	        var height = bounds.height - this._topContentBounds.height - this._headerBounds.height - this._footBounds.height;
	        var y = 0;
	        this._compensated = 0;
	        this._fixedRows = rs ? Math.min(rs.fixedCount, rs.itemCount) : 0;
	        this._fixedItemCount = 0;
	        this._fixedBarHeight = 0;
	        this._fixedHeight = 0;
	        this._fixedItemPoints = [];
	        if (this._fixedRows > 0) {
	            this._fixedItemPoints.push(y);
	            for (var i = 0; i < this._fixedRows && y < height; i++) {
	                var h = this.$_calcItemHeight(grid, i);
	                y += h;
	                this._fixedItemPoints.push(y);
	                this._fixedItemCount++;
	            }
	            this._fixedHeight = y;
	            y += this._fixedBarHeight = grid.fixedOptions.rowBarHeight;
	        }
	        var cnt = grid.itemCount - this._fixedItemCount;
	        this._itemPoints = [y];
	        this._itemCount = 0;
	        this._fullItemCount = 0;
	        this._availableItemCount = 0;
	        if (cnt > 0 && y < height) {
	            var top_1 = this._topIndex;
	            var focusIndex = -1;
	            if (this._focusIndex) {
	                focusIndex = this._focusIndex.itemIndex;
	                if (focusIndex >= this._fixedItemCount && focusIndex < top_1 + this._fixedItemCount) {
	                    top_1 = this._topIndex = focusIndex - this._fixedItemCount;
	                }
	            }
	            for (var i = top_1; i < cnt && y < height; i++) {
	                var h = this.$_calcItemHeight(grid, i + this._fixedItemCount);
	                y += h;
	                this._itemCount++;
	                this._itemPoints.push(y);
	            }
	            this._fullItemCount = this._itemCount - (y >= height ? 1 : 0);
	            if (focusIndex >= this._topIndex + this._fixedItemCount + this._fullItemCount) {
	                if (this.fixedItemCount > 0) {
	                    y = this._fixedHeight + grid.fixedOptions.rowBarHeight;
	                }
	                else {
	                    y = 0;
	                }
	                // if (eachRowResizable) {
	                //     h = this.$_calcItemHeight(grid, delegate, focusIndex);
	                //     if (h >= bounds.height - this._fixedHeight) {
	                //         this._topIndex = focusIndex - this._fixedItemCount;
	                //     } else {
	                //         for (i=focusIndex-1;i >= this._fixedItemCount ;i--) {
	                //             h += this.$_calcItemHeight(grid, delegate, i);
	                //             if (h >= bounds.height - y) {
	                //                 this._topIndex = Math.max(i-this._fixedItemCount+1,0);
	                //                 break;
	                //             }
	                //         }
	                //     }
	                // } else {
	                this._topIndex = focusIndex - this._fixedItemCount - Math.max(0, this._fullItemCount - 1); // fullItemCount가 0일 수 있다.
	                // }
	                this._itemPoints = [y];
	                this._itemCount = 0;
	                this._fullItemCount = 0;
	                this._availableItemCount = 0;
	                var cnt_1 = grid.itemCount - this._fixedItemCount;
	                for (var i = this._topIndex; i < cnt_1 && y < bounds.height; i++) {
	                    var h = this.$_calcItemHeight(grid, i + this._fixedItemCount);
	                    y += h;
	                    this._itemCount++;
	                    this._itemPoints.push(y);
	                }
	                this._fullItemCount = this._itemCount - (y >= bounds.height ? 1 : 0);
	            }
	            // 아래가 남으면 채운다.
	            if (top_1 > 0 && y < height) {
	                var h2 = height - y;
	                for (; top_1 > 0 && h2 > 0; top_1--) {
	                    var h = this.$_calcItemHeight(grid, top_1 + this._fixedItemCount);
	                    if (h <= h2) {
	                        h2 -= h;
	                        y += h;
	                        this._itemCount++;
	                        this._itemPoints.push(y);
	                        this._compensated++;
	                    }
	                    else {
	                        break;
	                    }
	                }
	                if (this._compensated > 0) {
	                    this._topIndex = top_1;
	                    this._fullItemCount = this._itemCount - (h2 > 0 ? 1 : 0);
	                }
	            }
	        }
	        else {
	            this._topIndex = 0;
	        }
	    };
	    GridLayoutManager.prototype.$_updateScrollInfo = function (bounds, sw, sh) {
	        var w = this._columnsLength;
	        var h = this._itemPoints[this._itemPoints.length - 1];
	        this._hscrolled = w > this._scrollWidth;
	        this._vscrolled = this._topIndex > 0 || h > this._bodyBounds.height;
	        var hbar = sh > 0 && this._hscrolled;
	        var vbar = sw > 0 && this._vscrolled;
	        if (!hbar && !vbar) ;
	        else if (hbar && vbar) ;
	        else if (hbar) {
	            // TODO: vbar가 true가 되는 경우
	            vbar = h > this._bodyBounds.height - sh;
	        }
	        else { // if (vbar)
	            // TODO: hbar가 true가 되는 경우
	            hbar = w > this._scrollWidth - sw;
	        }
	        this._hscrollBar = hbar;
	        this._vscrollBar = vbar;
	        this._scrollBarWidth = vbar ? sw : 0;
	        this._scrollBarHeight = hbar ? sh : 0;
	        this._hscrolled = this._hscrolled || hbar;
	        this._vscrolled = this._vscrolled || vbar;
	        this._clientRect = bounds.clone();
	        this._clientRect.width -= this._hscrolled ? sw : 0;
	        this._clientRect.height -= this._vscrolled ? sh : 0;
	        // this._gridBounds.right = this._clientRect.right;
	        // this._gridBounds.bottom = this._footerBounds.y;
	    };
	    GridLayoutManager.prototype.$_adjustVerticals = function () {
	        var h = this._scrollBarHeight;
	        var pts = this._itemPoints;
	        if (h > 0) {
	            // left pane
	            this._leftContentBounds.height -= h;
	            this._footBounds.y -= h;
	            this._indicatorBounds.height -= h;
	            this._stateBarBounds.height -= h;
	            this._checkBarBounds.height -= h;
	            // side pane
	            this._sideContentBounds.height -= h;
	            // fixed pane
	            this._fixedContentBounds.height -= h;
	            this._fixedFooterBounds.y -= h;
	            this._fixedBodyBounds.height -= h;
	            // content pane
	            this._contentBounds.height -= h;
	            this._footerBounds.y -= h;
	            this._bodyBounds.height -= h;
	            // right pane
	            this._rightContentBounds.height -= h;
	            this._rightFooterBounds.y -= h;
	            this._rightBodyBounds.height -= h;
	            // adjust rows
	            var h2 = this._bodyBounds.height;
	            while (pts[pts.length - 2] > h2) {
	                this._itemCount--;
	                pts.pop();
	            }
	            if (this._compensated > 0) {
	                while (this._itemCount > 0 && pts[pts.length - 1] > h2) {
	                    this._itemCount--;
	                    this._topIndex++;
	                    pts.splice(0, 1);
	                    var h_1 = pts[1] - pts[0];
	                    for (var i = 0; i < pts.length; i++) {
	                        pts[i] -= h_1;
	                    }
	                }
	            }
	            this._fullItemCount = this._itemCount - (pts[this._itemCount] >= h2 ? 1 : 0);
	            var focusIndex = this._focusIndex ? this._focusIndex.itemIndex : -1;
	            if (focusIndex >= 0 && this._itemCount > this._fullItemCount) {
	                if (focusIndex >= this._topIndex + this._fixedItemCount + this._fullItemCount) {
	                    var hLast = pts[this._itemCount] - pts[this._itemCount - 1];
	                    var h_2 = 0;
	                    var n = 0;
	                    while (h_2 < hLast) {
	                        h_2 += pts[n + 1] - pts[n];
	                        n++;
	                    }
	                    this._topIndex += n;
	                    this._itemCount -= n - 1;
	                    this._fullItemCount -= n - 1;
	                    // 마지막행이면
	                    if (this._topIndex + this._fixedItemCount + this._itemCount > this.grid.itemCount) {
	                        this._itemCount--;
	                        n++;
	                    }
	                    pts.splice(0, n - 1);
	                    for (var i = 0; i < pts.length; i++) {
	                        pts[i] -= h_2;
	                    }
	                }
	            }
	        }
	        this._dataBounds.height = pts[pts.length - 1];
	        if (this._fullItemCount == this._itemCount) {
	            var y = pts[pts.length - 1];
	            this._indicatorBounds.height = y;
	            this._stateBarBounds.height = y;
	            this._checkBarBounds.height = y;
	        }
	    };
	    GridLayoutManager.prototype.$_adjustHorizontals = function (bounds) {
	        var w = this._scrollBarWidth;
	        //if (w > 0) {
	        this._rightContentBounds.x -= w;
	        this.$_calcLeftPos(bounds, w);
	        //}
	    };
	    GridLayoutManager.prototype._doMeasure = function (bounds, scrollBarWidth, scrollBarHeight) {
	        var grid = this._grid;
	        var r = bounds.clone();
	        this._hscrolled = this._vscrolled = false;
	        this._hscrollBar = this._vscrollBar = false;
	        //this._gridBounds = bounds.clone();
	        // columns
	        this.$_calcFixedColumnPoints(grid);
	        this.$_calcColumnPoints();
	        this.$_calcRightColumnPoints(grid);
	        // top pane
	        this._topContentBounds = r.clone();
	        this.$_measureTopPane(grid);
	        r.topBy(this._topContentBounds.height);
	        // views
	        this.$_measureViews(grid, r);
	        // left pane
	        this._leftContentBounds = r.clone();
	        this.$_measureLeftPane(grid);
	        r.leftBy(this._leftContentBounds.width);
	        // side pane
	        this._sideContentBounds = r.clone();
	        this._measureSidePane(grid);
	        r.leftBy(this._sideContentBounds.width);
	        // fixed pane
	        this._fixedContentBounds = r.clone();
	        this.$_measureFixedPane(grid);
	        r.leftBy(this._fixedContentBounds.width);
	        // right pane
	        this._rightContentBounds = r.clone();
	        this.$_measureRightPane(grid);
	        this._rightContentBounds.x = r.right - this._rightContentBounds.width;
	        r.width -= this._rightContentBounds.width;
	        // content pane
	        this._contentBounds = r.clone();
	        this.$_measureContentPane(grid);
	        this._nonfixedBounds = new Rectangle_1.Rectangle(this._fixedContentBounds.right, this._fixedContentBounds.y, bounds.width - this._fixedContentBounds.right - this.rightContentBounds.width, this._footerBounds.y - this._fixedContentBounds.y);
	        //this.$_calcLeftPos(bounds, 0);
	        this.$_calcItemPoints(bounds);
	        this.$_updateScrollInfo(bounds, scrollBarWidth, scrollBarHeight);
	        this.$_adjustVerticals();
	        this.$_adjustHorizontals(bounds);
	        this.$_checkColumnMerging();
	        this._gridBounds = new Rectangle_1.Rectangle(this._fixedContentBounds.x, this._fixedContentBounds.y, bounds.right - this._fixedContentBounds.x, this._footerBounds.y - this._fixedContentBounds.y);
	        // this._gridBounds.width -= this._scrollBarWidth;
	        // this._gridBounds.height -= this._scrollBarHeight;
	    };
	    GridLayoutManager.prototype.$_layoutTopPane = function (grid, pane) {
	        var r = this._topContentBounds;
	        if (pane.visible = !r.isEmpty) {
	            pane.layoutContent(this, r.width, r.height);
	        }
	    };
	    GridLayoutManager.prototype.$_layoutLeftPane = function (grid, pane) {
	        var r = this._leftContentBounds;
	        var view;
	        if (pane.visible = !r.isEmpty) {
	            pane.setRect(r);
	            view = grid.headView;
	            if (view.visible = grid.header.visible) {
	                view.setRect(this._headBounds);
	                view.layoutContent(this);
	            }
	            view = grid.footView;
	            if (view.visible = grid.footer.visible) {
	                view.setRect(this._footBounds);
	                view.layoutContent(this);
	            }
	            view = grid.rowIndicatorView;
	            if (view.visible = grid.rowIndicator.visible) {
	                view.setRect(this._indicatorBounds);
	                view.layoutContent(this);
	            }
	            view = grid.stateBarView;
	            if (view.visible = grid.stateBar.visible) {
	                view.setRect(this._stateBarBounds);
	                view.layoutContent(this);
	            }
	            view = grid.checkBarView;
	            if (view.visible = grid.checkBar.visible) {
	                view.setRect(this._checkBarBounds);
	                view.layoutContent(this);
	            }
	        }
	    };
	    GridLayoutManager.prototype._layoutSidePane = function (grid, pane) {
	        var r = this._sideContentBounds;
	        if (pane.visible = !r.isEmpty) {
	            pane.setRect(r);
	            pane.layoutContent(this, r.width, r.height);
	        }
	    };
	    GridLayoutManager.prototype._prepareItems = function ( /*parent: GridBodyElement, r: Rectangle*/) {
	        var top = this._topIndex + this._fixedItemCount;
	        this._items = [];
	        for (var i = 0; i < this._fixedItemCount; i++) {
	            var item = this._rs.getItem(i);
	            this._items.push(item);
	        }
	        for (var i = 0; i < this._itemCount; i++) {
	            var item = this._rs.getItem(i + top);
	            this._items.push(item);
	        }
	    };
	    GridLayoutManager.prototype.$_layoutFixedPane = function (grid, pane) {
	        var r = this._fixedContentBounds;
	        var view;
	        if (pane.visible = !r.isEmpty) {
	            pane.setRect(r);
	            view = grid.fixedHeaderView;
	            if (view.visible = grid.header.visible) {
	                view.setRect(this._fixedHeaderBounds);
	                view.layoutContent(this);
	            }
	            view = grid.fixedFooterView;
	            if (view.visible = grid.footer.visible) {
	                view.setRect(this._fixedFooterBounds);
	                view.layoutContent(this);
	            }
	            view = grid.fixedBodyView;
	            view.visible = true;
	            view.setRect(this._fixedBodyBounds);
	            view.layoutContent(this);
	            this._layoutFixedBodyView(this._rightBodyBounds, this.getItems());
	            view = grid.fixedMergeView;
	            if (view.visible = this._fixedColumnMerged) {
	                // 굳이 크기를 맞출 필요 없다...
	                //view.setRect(this._fixedBodyBounds);
	                view.layoutContent(this);
	            }
	            pane.layoutContent(this, r.width, r.height);
	        }
	        else {
	            grid.fixedHeaderView.visible = false;
	            grid.fixedFooterView.visible = false;
	            grid.fixedBodyView.visible = false;
	            grid.fixedMergeView.visible = false;
	        }
	    };
	    GridLayoutManager.prototype._layoutFixedBodyView = function (bounds, items) {
	    };
	    GridLayoutManager.prototype.$_layoutRightPane = function (grid, pane) {
	        var r = this._rightContentBounds;
	        var view;
	        if (pane.visible = !r.isEmpty) {
	            if (!this._rightFixed && !this._hscrolled) {
	                r.x = this._contentBounds.right;
	            }
	            pane.setRect(r);
	            view = grid.rightHeaderView;
	            if (view.visible = grid.header.visible) {
	                view.setRect(this._rightHeaderBounds);
	                view.layoutContent(this);
	            }
	            view = grid.rightFooterView;
	            if (view.visible = grid.footer.visible) {
	                view.setRect(this._rightFooterBounds);
	                view.layoutContent(this);
	            }
	            view = grid.rightBodyView;
	            view.visible = true;
	            view.setRect(this._rightBodyBounds);
	            view.layoutContent(this);
	            this._layoutRightBodyView(this._rightBodyBounds, this.getItems());
	            view = grid.rightMergeView;
	            if (view.visible = this._rightColumnMerged) {
	                // 굳이 크기를 맞출 필요 없다...
	                //view.setRect(this._rightBodyBounds);
	                view.layoutContent(this);
	            }
	            pane.layoutContent(this, r.width, r.height);
	        }
	        else {
	            grid.rightHeaderView.visible = false;
	            grid.rightFooterView.visible = false;
	            grid.rightBodyView.visible = false;
	            grid.rightMergeView.visible = false;
	        }
	    };
	    GridLayoutManager.prototype._layoutRightBodyView = function (bounds, items) {
	    };
	    GridLayoutManager.prototype.$_layoutContentPane = function (grid, pane) {
	        var r = this._contentBounds;
	        var view;
	        if (pane.visible = !r.isEmpty) {
	            r.x -= this._leftPos;
	            pane.setRect(r);
	            view = grid.headerView;
	            if (view.visible = grid.header.visible) {
	                view.setRect(this._headerBounds);
	                view.layoutContent(this);
	            }
	            view = grid.footerView;
	            if (view.visible = grid.footer.visible) {
	                view.setRect(this._footerBounds);
	                view.layoutContent(this);
	            }
	            view = grid.bodyView;
	            view.setRect(this._bodyBounds);
	            view.layoutContent(this);
	            this._layoutBodyView(this._bodyBounds, this.getItems());
	            view = grid.mergeView;
	            if (view.visible = this._columnMerged) {
	                // 굳이 크기를 맞출 필요 없다...
	                //view.setRect(this._bodyBounds);
	                view.layoutContent(this);
	            }
	            pane.layoutContent(this, r.width, r.height);
	        }
	    };
	    GridLayoutManager.prototype._layoutBodyView = function (bounds, items) {
	    };
	    GridLayoutManager.prototype._doLayout = function (bounds) {
	        var grid = this._grid;
	        var layer;
	        this._prepareItems();
	        // top pane
	        layer = grid["_topContentPane"];
	        this.$_layoutTopPane(grid, layer);
	        // left pane
	        layer = grid["_leftContentPane"];
	        this.$_layoutLeftPane(grid, layer);
	        // side pane
	        layer = grid["_sideContentPane"];
	        if (layer) {
	            this._layoutSidePane(grid, layer);
	        }
	        // fixed pane
	        layer = grid["_fixedContentPane"];
	        this.$_layoutFixedPane(grid, layer);
	        // right pane
	        layer = grid["_rightContentPane"];
	        this.$_layoutRightPane(grid, layer);
	        // content pane
	        layer = grid["_contentPane"];
	        this.$_layoutContentPane(grid, layer);
	        // bodyBounds들을 위에서 상대좌표로 사용한다. layout 이 후 밖에서 참조할 수 있도록...
	        this._bodyBounds.x = this._contentBounds.x;
	        this._fixedBodyBounds.x = this._fixedContentBounds.x;
	        this._rightBodyBounds.x = this._rightContentBounds.x;
	    };
	    GridLayoutManager.prototype.$_prepareColumnMerges = function (mergeView, columns, first, last) {
	        var prepared = false;
	        var spanned = false;
	        for (var i = 0, cnt = columns.length; i < cnt; i++) {
	            var col = columns[i];
	            if (col instanceof GridColumn_1.ValueColumn && col.canMerge()) {
	                var merges = col.stateFor(ColumnMerge.ColumnMergeManager.MERGE_ROOMS);
	                if (!merges) {
	                    merges = new ColumnMerge.ColumnMergeManager(col);
	                    col.setState(ColumnMerge.ColumnMergeManager.MERGE_ROOMS, merges);
	                }
	                if (!prepared) {
	                    prepared = true;
	                    mergeView.prepareSpanning(this);
	                }
	                merges.refresh(first, last);
	                var rooms = merges.getRooms();
	                mergeView.addColumnRooms(this, i, col, rooms);
	                spanned = true;
	            }
	        }
	        mergeView.spanningPrepared(this, spanned);
	        return spanned;
	    };
	    GridLayoutManager.prototype.$_checkColumnMerging = function () {
	        var grid = this._grid;
	        var colCount = this._columns.length;
	        var mergeView = grid.mergeView;
	        var fixedView = grid.fixedMergeView;
	        var rightView = grid.rightMergeView;
	        var first = this._fixedItemCount + this._topIndex;
	        var last = Math.min(grid.itemCount - 1, this._fixedItemCount + this._topIndex + this._itemCount - 1);
	        var fixed = this._fixedCols > 0;
	        var right = this._rightCols > 0;
	        mergeView.clearRooms();
	        if (fixed) {
	            fixedView.clearRooms();
	        }
	        if (right) {
	            rightView.clearRooms();
	        }
	        // fixed merge view
	        if (fixed) {
	            var columns_1 = grid.getHorzColumns(0, this._fixedCols);
	            this._fixedColumnMerged = this.$_prepareColumnMerges(fixedView, columns_1, first, last);
	        }
	        // right fixed merge view
	        if (right) {
	            var columns_2 = grid.getHorzColumns(colCount - this._rightCols, this._rightCols);
	            this._rightColumnMerged = this.$_prepareColumnMerges(rightView, columns_2, first, last);
	        }
	        // body merge view
	        var columns = grid.getHorzColumns(this._fixedCols, colCount - this._fixedCols - this._rightCols);
	        this._columnMerged = this.$_prepareColumnMerges(mergeView, columns, first, last);
	        // mergeView.clearFooters();
	        // if (fixed) {
	        // 	fixedMergeView.clearFooters();
	        // }
	        // if (rfixed) {
	        // 	rfixedMergeView.clearFooters();
	        // }
	        // grid.mergeHeaderView().clearHeaders();
	    };
	    return GridLayoutManager;
	}(Base_1.Base));
	exports.GridLayoutManager = GridLayoutManager;
	});

	unwrapExports(GridLayoutManager_1);
	var GridLayoutManager_2 = GridLayoutManager_1.GridLayoutManager;

	var StateBarElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// StateBarElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });






	var StateBarCellElement = /** @class */ (function (_super) {
	    __extends(StateBarCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function StateBarCellElement() {
	        var _this = _super.call(this, "stateBarCellView") || this;
	        _this._mark = RowIndicator_1.StateMark.DEFAULT;
	        return _this;
	    }
	    Object.defineProperty(StateBarCellElement.prototype, "rowState", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** rowState */
	        get: function () {
	            return this._rowState;
	        },
	        set: function (value) {
	            if (value != this._rowState) {
	                this._rowState = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    StateBarCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        _super.prototype._doUpdateContent.call(this, grid, model, dom);
	        var bar = grid.stateBar;
	        var texts = bar.stateTexts;
	        if (texts)
	            this._stateTexts = texts;
	        this._mark = bar.mark;
	    };
	    return StateBarCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.StateBarCellElement = StateBarCellElement;
	var StateBarElement = /** @class */ (function (_super) {
	    __extends(StateBarElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function StateBarElement(model) {
	        var _this = _super.call(this, model, "stateBarView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        // private _cells: StateBarCellElement[] = [];
	        _this._fixedCount = 0;
	        _this._count = 0;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    StateBarElement.prototype._getCssSelector = function () {
	        return "rg-statebar";
	    };
	    StateBarElement.prototype._getCellSelector = function (td) {
	        var item = this.grid.getItem(td.parentElement["$_row"]);
	        var row = item.dataRow;
	        if (row >= 0) {
	            var state = item.rowState;
	            switch (state) {
	                case RowState_1.RowState.UPDATED:
	                    return "rg-statebar-cell rg-statebar-updated";
	                case RowState_1.RowState.CREATED:
	                    return "rg-statebar-cell rg-statebar-created";
	                case RowState_1.RowState.DELETED:
	                    return "rg-statebar-cell rg-statebar-deleted";
	                case RowState_1.RowState.CREATE_AND_DELETED:
	                    return "rg-statebar-cell rg-statebar-create-and-deleted";
	                default:
	                    return "rg-statebar-cell";
	            }
	        }
	        else {
	            return "rg-statebar-cell";
	        }
	    };
	    StateBarElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    StateBarElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        var bar = grid.stateBar;
	        return new Size_1.Size(bar.width, hintHeight);
	    };
	    StateBarElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var statebar = this.model;
	        var topIndex = lm.topIndex;
	        var itemCount = lm.itemCount;
	        var fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var count = this._count = fixedCount + itemCount;
	        var focused = grid.focusedRow;
	        for (var i = 0; i < count; i++) {
	            var row = (i < fixedCount) ? i : i + topIndex;
	            var index = CellIndex_1.CellIndex.temp(grid, row);
	            var cell = statebar.getCell(index);
	            var tr = i < fixedCount ? i : fixed ? i + 1 : i;
	            var dom = this.getTableRow(tr);
	            dom["$_row"] = row;
	            var td = dom.children[0];
	            td["$_foc"] = row == focused;
	            td.className = this._getCellSelector(td);
	            this._updateCellContent(grid, cell, td);
	        }
	    };
	    StateBarElement.prototype._doRender = function (dom) {
	        // const bar = this.model as StateBar;
	        // const styles = bar.styles;
	        // const fill = styles.figureBackground;
	        // if (fill !== undefined) {
	        //     dom.style.background = fill.toCss();
	        // }
	    };
	    StateBarElement.prototype._getColumnCount = function (lm, row) {
	        return 1;
	    };
	    StateBarElement.prototype._getColumnWidth = function (lm, col) {
	        return this.width;
	    };
	    StateBarElement.prototype._doDrawCell = function (row, col, dom) {
	    };
	    return StateBarElement;
	}(TableBaseElement_1.DataTableElement));
	exports.StateBarElement = StateBarElement;
	});

	unwrapExports(StateBarElement_1);
	var StateBarElement_2 = StateBarElement_1.StateBarCellElement;
	var StateBarElement_3 = StateBarElement_1.StateBarElement;

	var CheckBarElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CheckBarElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var CheckBarCellElement = /** @class */ (function (_super) {
	    __extends(CheckBarCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckBarCellElement() {
	        var _this = _super.call(this, "checkBarCellView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._exclusive = false;
	        _this._checked = false;
	        return _this;
	    }
	    Object.defineProperty(CheckBarCellElement.prototype, "exclusive", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** exclusive */
	        get: function () {
	            return this._exclusive;
	        },
	        set: function (value) {
	            if (value != this._exclusive) {
	                this._exclusive = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckBarCellElement.prototype, "checked", {
	        /** checked */
	        get: function () {
	            return this._checked;
	        },
	        set: function (value) {
	            if (value != this._checked) {
	                this._checked = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CheckBarCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        var item = model.item;
	        //const checkbox = dom.lastElementChild as HTMLInputElement;
	        var checkbox = dom;
	        this._checked = item && item.checked;
	        checkbox.checked = this._checked;
	    };
	    return CheckBarCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.CheckBarCellElement = CheckBarCellElement;
	var CheckBarElement = /** @class */ (function (_super) {
	    __extends(CheckBarElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckBarElement(model) {
	        var _this = _super.call(this, model, "checkBarView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._fixedCount = 0;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    CheckBarElement.prototype._getCssSelector = function () {
	        return "rg-checkbar";
	    };
	    CheckBarElement.prototype._getCellSelector = function (td) {
	        return "rg-checkbar-cell";
	    };
	    CheckBarElement.prototype._prepareCellContent = function (cell) {
	        var div = document.createElement("div");
	        var check = document.createElement("input");
	        var css = check.style;
	        check.type = "checkbox";
	        check.className = "rg-checkbox";
	        css.display = "inline-block";
	        //return check;
	        div.appendChild(check);
	        return div;
	    };
	    CheckBarElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        var checkbar = this.model;
	        return new Size_1.Size(checkbar.width, hintHeight);
	    };
	    CheckBarElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var checkBar = this.model;
	        //const width = this.width;
	        var topIndex = lm.topIndex;
	        var itemCount = lm.itemCount;
	        var fixedCount = this._fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var count = fixedCount + itemCount;
	        var focused = grid.focusedRow;
	        // let view: CheckBarCellElement;
	        // while (this.childCount < count) {
	        //     if (this._cells.length > 0) {
	        //         view = this._cells.pop();
	        //     } else {
	        //         view = this.$_createCell();
	        //     }
	        //     this.addChild(view);
	        // }
	        // while (this.childCount > count) {
	        //     view = this.removeLast() as CheckBarCellElement;
	        //     view.validate();
	        //     this._cells.push(view);
	        // }
	        for (var i = 0; i < count; i++) {
	            //view = this.getChild(i) as CheckBarCellElement;
	            var row = (i < fixedCount) ? i : i + topIndex;
	            var index = CellIndex_1.CellIndex.temp(grid, row);
	            var cell = checkBar.getCell(index);
	            //let r = lm.getItemBounds(i);
	            var tr = i < fixedCount ? i : fixed ? i + 1 : i;
	            //view.updateCell(grid, cell, this.getCellContent(tr, 0));
	            var dom = this.getTableRow(tr);
	            dom["$_row"] = row;
	            var td = dom.children[0];
	            td["$_foc"] = row == focused;
	            td.className = this._getCellSelector(td);
	            this._updateCellContent(grid, cell, td);
	            // r.x = 0;
	            // r.width = width;
	            // view.setRect(r);
	        }
	    };
	    CheckBarElement.prototype._doUpdateCellContent = function (grid, model, dom) {
	        var item = model.item;
	        var checkbox = dom;
	        checkbox.checked = item && item.checked;
	    };
	    CheckBarElement.prototype._doRender = function (dom) {
	        // const bar = this.model as CheckBar;
	        // const styles = bar.styles;
	        // const fill = styles.figureBackground;
	        // if (fill !== undefined) {
	        //     dom.style.background = fill.toCss();
	        // }
	    };
	    CheckBarElement.prototype._getColumnCount = function (lm, row) {
	        return 1;
	    };
	    CheckBarElement.prototype._getColumnWidth = function (lm, col) {
	        return this.width;
	    };
	    CheckBarElement.prototype.getCellContent = function (row, col) {
	        return _super.prototype.getCellContent.call(this, row, col).lastElementChild;
	    };
	    CheckBarElement.prototype._getCellContent = function (td) {
	        return td.lastElementChild.lastElementChild;
	    };
	    CheckBarElement.prototype.getCheckBox = function (td) {
	        return td.lastElementChild.lastElementChild;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    CheckBarElement.prototype.$_createCell = function () {
	        return new CheckBarCellElement();
	    };
	    return CheckBarElement;
	}(TableBaseElement_1.DataTableElement));
	exports.CheckBarElement = CheckBarElement;
	});

	unwrapExports(CheckBarElement_1);
	var CheckBarElement_2 = CheckBarElement_1.CheckBarCellElement;
	var CheckBarElement_3 = CheckBarElement_1.CheckBarElement;

	var FooterElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// FooterElement.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });






	var FooterCellElement = /** @class */ (function (_super) {
	    __extends(FooterCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FooterCellElement() {
	        var _this = _super.call(this, "footerCellView") || this;
	        _this._text = "";
	        return _this;
	    }
	    Object.defineProperty(FooterCellElement.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // set text(value: string) {
	    //     if (value != this._text) {
	    //         this._text = value;
	    //         this._changed();
	    //     }
	    // }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FooterCellElement.prototype._doPrepareValue = function (grid, model) {
	        _super.prototype._doPrepareValue.call(this, grid, model);
	        var v = this._value = model.value;
	        var s = null;
	        if (v !== undefined) {
	            if (model.index.column instanceof DataColumn_1.DataColumn && model.index.dataColumn.valueType == Types.ValueType.DATETIME) {
	                var fmt = void 0;
	                if (this._value instanceof Date && (fmt = this.datetimeWriter)) {
	                    s = fmt.getText(this._value);
	                }
	                else {
	                    s = model.text;
	                }
	            }
	            else {
	                var n = Number(this._value);
	                var fmt = this.numberFormatter;
	                if (!isNaN(n) && (fmt = this.numberFormatter)) {
	                    s = fmt.format(n);
	                }
	                else if (this._value) {
	                    s = this._value;
	                }
	                else {
	                    s = model.text;
	                }
	            }
	        }
	        else {
	            s = model.text;
	        }
	        this._text = s || "";
	        this._error = model.error;
	    };
	    FooterCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        //const cell = model as FooterCell;
	        dom.textContent = this._text;
	    };
	    return FooterCellElement;
	}(CellElement_1.ValueCellElement));
	exports.FooterCellElement = FooterCellElement;
	var FooterElement = /** @class */ (function (_super) {
	    __extends(FooterElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FooterElement(model) {
	        var _this = _super.call(this, model, "footerView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = {};
	        return _this;
	    }
	    FooterElement.prototype.dispose = function () {
	        for (var k in this._cells) {
	            this._cells[k] = null;
	        }
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FooterElement.prototype._getCssSelector = function () {
	        return "rg-footer";
	    };
	    FooterElement.prototype._getCellSelector = function (td) {
	        return "rg-footer-cell";
	    };
	    FooterElement.prototype._prepareCellContent = function (cell) {
	        return document.createElement("div");
	    };
	    FooterElement.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        return Size_1.Size.create(hintWidth, this.model.minHeight);
	    };
	    FooterElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var header = this.model;
	        this.hideAll();
	        var start = this._getStartCol(lm);
	        var end = this._getEndCol(lm);
	        for (var i = start; i <= end; i++) {
	            var column = lm.getColumn(i);
	            var view = this._cells[column["$_hash"]];
	            if (!view) {
	                view = new FooterCellElement();
	                this._cells[column["$_hash"]] = view;
	                this.addChild(view);
	            }
	            view.visible = true;
	            var index = CellIndex_1.CellIndex.temp(grid, -1, column);
	            var model = header.getCell(index);
	            view.updateCell(grid, model, this.getCellContent(0, i - start));
	            var r = lm.getColumnBounds(i);
	            r.height = this.height;
	            view.setRect(r);
	            view.layoutContent(lm);
	        }
	    };
	    FooterElement.prototype._doRender = function (dom) {
	    };
	    FooterElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    FooterElement.prototype._getColumnCount = function (lm, row) {
	        return lm.columnCount - lm.fixedColCount - lm.rightColCount;
	    };
	    FooterElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getColumnWidth(col);
	    };
	    FooterElement.prototype._doDrawCell = function (row, col, dom) {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    FooterElement.prototype._getStartCol = function (lm) {
	        return lm.firstCol;
	    };
	    FooterElement.prototype._getEndCol = function (lm) {
	        return lm.lastCol;
	    };
	    return FooterElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.FooterElement = FooterElement;
	var FixedFooterElement = /** @class */ (function (_super) {
	    __extends(FixedFooterElement, _super);
	    function FixedFooterElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FixedFooterElement.prototype._getStartCol = function (lm) {
	        return 0;
	    };
	    FixedFooterElement.prototype._getEndCol = function (lm) {
	        return lm.fixedColCount - 1;
	    };
	    FixedFooterElement.prototype._getColumnCount = function (lm, row) {
	        return lm.fixedColCount;
	    };
	    FixedFooterElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getFixedColumnWidth(col);
	    };
	    return FixedFooterElement;
	}(FooterElement));
	exports.FixedFooterElement = FixedFooterElement;
	var RightFooterElement = /** @class */ (function (_super) {
	    __extends(RightFooterElement, _super);
	    function RightFooterElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RightFooterElement.prototype._getStartCol = function (lm) {
	        return lm.columnCount - lm.rightColCount;
	    };
	    RightFooterElement.prototype._getEndCol = function (lm) {
	        return lm.columnCount - 1;
	    };
	    RightFooterElement.prototype._getColumnCount = function (lm, row) {
	        return lm.rightColCount;
	    };
	    RightFooterElement.prototype._getColumnWidth = function (lm, col) {
	        return lm.getRightColumnWidth(col);
	    };
	    return RightFooterElement;
	}(FooterElement));
	exports.RightFooterElement = RightFooterElement;
	});

	unwrapExports(FooterElement_1);
	var FooterElement_2 = FooterElement_1.FooterCellElement;
	var FooterElement_3 = FooterElement_1.FooterElement;
	var FooterElement_4 = FooterElement_1.FixedFooterElement;
	var FooterElement_5 = FooterElement_1.RightFooterElement;

	var DragTracker_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DragTracker.ts
	// 2019. 08. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var DragTracker = /** @class */ (function (_super) {
	    __extends(DragTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DragTracker(container, name) {
	        var _this = _super.call(this) || this;
	        _this._active = false;
	        _this._completed = false;
	        _this._dragging = false;
	        _this._currentX = 0;
	        _this._currentY = 0;
	        _this._container = container;
	        _this._name = name;
	        return _this;
	    }
	    Object.defineProperty(DragTracker.prototype, "container", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** container */
	        get: function () {
	            return this._container;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragTracker.prototype, "name", {
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragTracker.prototype, "active", {
	        /** active */
	        get: function () {
	            return this._active;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragTracker.prototype, "dragging", {
	        /** dragging */
	        get: function () {
	            return this._dragging;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragTracker.prototype, "startWhenCreated", {
	        /** startWhenCreated */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragTracker.prototype, "completed", {
	        /** completed */
	        get: function () {
	            return this._completed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DragTracker.prototype.activate = function () {
	        if (!this._active) {
	            this._doActivate();
	            this._active = true;
	        }
	    };
	    DragTracker.prototype.deactivate = function () {
	        if (this._active) {
	            this.cancel();
	            this._doDeactivate();
	            this._active = false;
	        }
	    };
	    DragTracker.prototype.start = function (eventTarget, x, y, shift) {
	        if (shift === void 0) { shift = false; }
	        this.cancel();
	        if (this._active && this._doStart(eventTarget, x, y, shift)) {
	            this._currentX = this._startX = x;
	            this._currentY = this._startY = y;
	            this._dragging = true;
	            this._completed = false;
	            this._showFeedback(x, y);
	            return true;
	        }
	        return false;
	    };
	    DragTracker.prototype.drag = function (eventTarget, x, y) {
	        if (this._dragging) {
	            this._currentX = x;
	            this._currentY = y;
	            if (this._doDrag(eventTarget, x, y)) {
	                this._moveFeedback(x, y);
	                return true;
	            }
	        }
	        return false;
	    };
	    DragTracker.prototype.cancel = function () {
	        try {
	            if (this._dragging) {
	                try {
	                    this._dragging = false;
	                    this._doCanceled(this._currentX, this._currentY);
	                }
	                finally {
	                    this._doEnded();
	                }
	            }
	        }
	        finally {
	            this._hideFeedback();
	        }
	    };
	    DragTracker.prototype.drop = function (eventTarget, x, y) {
	        try {
	            if (this._dragging) {
	                try {
	                    this._currentX = x;
	                    this._currentY = y;
	                    this._dragging = false;
	                    if (this._canAccept(eventTarget, x, y)) {
	                        this._doCompleted(eventTarget, x, y);
	                        this._completed = true;
	                    }
	                    else {
	                        this._doCanceled(x, y);
	                    }
	                }
	                finally {
	                    this._doEnded();
	                }
	            }
	        }
	        finally {
	            this._hideFeedback();
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DragTracker.prototype._showFeedback = function (x, y) {
	    };
	    DragTracker.prototype._moveFeedback = function (x, y) {
	    };
	    DragTracker.prototype._hideFeedback = function () {
	    };
	    DragTracker.prototype._doActivate = function () {
	    };
	    DragTracker.prototype._doDeactivate = function () {
	    };
	    DragTracker.prototype._doStart = function (eventTarget, x, y, shfit) {
	        return true;
	    };
	    DragTracker.prototype._doDrag = function (eventTarget, x, y) {
	        return true;
	    };
	    DragTracker.prototype._doCanceled = function (x, y) {
	    };
	    DragTracker.prototype._canAccept = function (eventTarget, x, y) {
	        return true;
	    };
	    DragTracker.prototype._doCompleted = function (eventTarget, x, y) {
	    };
	    DragTracker.prototype._doEnded = function () {
	    };
	    return DragTracker;
	}(Base_1.Base));
	exports.DragTracker = DragTracker;
	});

	unwrapExports(DragTracker_1);
	var DragTracker_2 = DragTracker_1.DragTracker;

	var VisualTool_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// VisualTool.ts
	// 2019. 07. 25. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var DRAG_THRESHOLD = 3;
	var VisualTool = /** @class */ (function (_super) {
	    __extends(VisualTool, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function VisualTool(owner, name) {
	        var _this = _super.call(this) || this;
	        _this._clickX = 0;
	        _this._clickY = 0;
	        _this._currX = 0;
	        _this._currY = 0;
	        _this._owner = owner;
	        _this._name = name;
	        _this._previous = null;
	        return _this;
	    }
	    VisualTool.prototype.dispose = function () {
	        this._dragTracker = null;
	        this._previous = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(VisualTool.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner */
	        get: function () {
	            return this._owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualTool.prototype, "name", {
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualTool.prototype, "previous", {
	        /** previous */
	        get: function () {
	            return this._previous;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualTool.prototype, "dragTracker", {
	        /** dragTracker */
	        get: function () {
	            return this._dragTracker;
	        },
	        set: function (value) {
	            if (value !== this._dragTracker) {
	                if (this._dragTracker) {
	                    this._dragTracker.deactivate();
	                }
	                this._dragTracker = value;
	                if (this._dragTracker) {
	                    this._dragTracker.activate();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualTool.prototype, "dragging", {
	        /** dragging */
	        get: function () {
	            return this._dragTracker && this._dragTracker.dragging;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    VisualTool.prototype.findElementAt = function (x, y, hitTesting) {
	        return this._owner.findElementAt(x, y, hitTesting);
	    };
	    VisualTool.prototype.activate = function (previous) {
	        this._doActivated(previous);
	    };
	    VisualTool.prototype.deactivate = function () {
	        this._doDeactivated();
	    };
	    VisualTool.prototype.keyDown = function (key, ctrl, shift, alt, event) {
	        return this._doKeyDown(key, ctrl, shift, alt, event);
	    };
	    VisualTool.prototype.keyUp = function (key, ctrl, shift, alt, event) {
	        return this._doKeyUp(key, ctrl, shift, alt, event);
	    };
	    VisualTool.prototype.keyPress = function (key, event) {
	        return this._doKeyPress(key);
	    };
	    VisualTool.prototype.mouseDown = function (event) {
	        var x = this._currX = this._clickX = event["mouseX"];
	        var y = this._currY = this._clickY = event["mouseY"];
	        if (this.dragging) {
	            this._stopDragTracker(x, y, false);
	            this.dragTracker = null;
	        }
	        this._doMouseDown(x, y, event.ctrlKey || event.metaKey, event.shiftKey, event.button);
	    };
	    VisualTool.prototype.mouseMove = function (event) {
	        var x = this._currX = event["mouseX"];
	        var y = this._currY = event["mouseY"];
	        var tracker = this.dragTracker;
	        if (tracker) {
	            if (tracker.dragging) {
	                if (event.buttons == undefined || event.buttons > 0 || (Utils_1.Utils.ieOld && event.buttons >= 0)) {
	                    if (!tracker.drag(this._mouseEventTarget, x, y)) ;
	                }
	                else {
	                    this._stopDragTracker(x, y, true);
	                }
	            }
	            else if (Math.abs(x - this._clickX) >= DRAG_THRESHOLD || Math.abs(y - this._clickY) >= DRAG_THRESHOLD) {
	                this._startDragTracker(x, y, false);
	            }
	            else {
	                this._doMouseMove(x, y);
	            }
	        }
	        else {
	            this._doMouseMove(x, y);
	        }
	    };
	    VisualTool.prototype.mouseUp = function (event) {
	        var x = this._currX = event["mouseX"];
	        var y = this._currY = event["mouseY"];
	        if (this.dragging) {
	            //this.hasOwnProperty("_prevCheckIndex") && !(this._dragTracker instanceof ScrollThumbTracker) && (delete this._prevCheckIndex);
	            this._stopDragTracker(x, y, false);
	            return;
	        }
	        else {
	            this._doMouseUp(x, y);
	        }
	    };
	    VisualTool.prototype.mouseEnter = function (event) {
	        this._doMouseEnter(event["mouseX"], event["mouseY"]);
	    };
	    VisualTool.prototype.mouseLeave = function (event) {
	        this._doMouseLeave(event["mouseX"], event["mouseY"]);
	    };
	    VisualTool.prototype.mouseOver = function (event) {
	        this._doMouseOver(event["mouseX"], event["mouseY"]);
	    };
	    VisualTool.prototype.mouseOutside = function () {
	        this._doMouseOutside();
	    };
	    VisualTool.prototype.mouseWheel = function (event) {
	        return this._doMouseWheel(event /*event.mouseX, event.mouseY, event.wheelDelta, event.wheelDelta*/);
	    };
	    VisualTool.prototype.click = function (event) {
	        this._doClick(event["mouseX"], event["mouseY"], event.ctrlKey, event.shiftKey, event.button);
	    };
	    VisualTool.prototype.dblclick = function (event) {
	        this._doDblClick(event["mouseX"], event["mouseY"]);
	    };
	    VisualTool.prototype.setFocus = function () {
	        this._doSetFocus();
	    };
	    Object.defineProperty(VisualTool.prototype, "mouseEventTarget", {
	        //-------------------------------------------------------------------------
	        // internal members
	        //-------------------------------------------------------------------------
	        /** mouseTarget */
	        get: function () {
	            return this._mouseEventTarget;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    VisualTool.prototype.isMouseEventTarget = function (elt) {
	        return elt["_dom"] === this._mouseEventTarget;
	    };
	    VisualTool.prototype._doActivated = function (previous) {
	    };
	    VisualTool.prototype._doDeactivated = function () {
	    };
	    VisualTool.prototype._doKeyDown = function (key, ctrl, shift, alt, event) {
	        return false;
	    };
	    VisualTool.prototype._doKeyUp = function (key, ctrl, shift, alt, event) {
	        return false;
	    };
	    VisualTool.prototype._doKeyPress = function (key) {
	        return false;
	    };
	    VisualTool.prototype._doMouseDown = function (x, y, ctrl, shift, button) {
	    };
	    VisualTool.prototype._doMouseMove = function (x, y) {
	    };
	    /** 그리드 밖에서도 호출된다. */
	    VisualTool.prototype._doMouseUp = function (x, y) {
	    };
	    VisualTool.prototype._doMouseEnter = function (x, y) {
	    };
	    VisualTool.prototype._doMouseLeave = function (x, y) {
	    };
	    VisualTool.prototype._doMouseOver = function (x, y) {
	    };
	    VisualTool.prototype._doMouseOutside = function () {
	    };
	    VisualTool.prototype._doMouseWheel = function (event) {
	        return false;
	    };
	    /** 그리드 밖에서 마우스를 놓으면 호출되지 않는다. */
	    VisualTool.prototype._doClick = function (x, y, ctrl, shift, button) {
	    };
	    VisualTool.prototype._doDblClick = function (x, y) {
	    };
	    VisualTool.prototype._doSetFocus = function () {
	    };
	    VisualTool.prototype._startDragTracker = function (x, y, shift) {
	        if (this._dragTracker) {
	            if (this._dragTracker.start(this._mouseEventTarget, x, y, shift)) {
	                this._doDragTrackerStarted(this._dragTracker);
	            }
	            else {
	                this._dragTracker = null;
	            }
	        }
	    };
	    VisualTool.prototype._stopDragTracker = function (x, y, canceled) {
	        if (this.dragging) {
	            var tracker = this._dragTracker;
	            if (canceled) {
	                tracker.cancel();
	            }
	            else {
	                tracker.drop(this._mouseEventTarget, x, y);
	            }
	            this.dragTracker = null;
	            this._doDragTrackerFinished(tracker, canceled);
	            //this._owner && this._owner.invalidate && this._owner.invalidate();
	        }
	    };
	    VisualTool.prototype._doDragTrackerStarted = function (dragTracker) {
	        //trace("dragTracker started: " + dragTracker.name());
	    };
	    VisualTool.prototype._doDragTrackerFinished = function (dragTracker, canceled) {
	        //trace("dragTracker stopped: " + dragTracker.name() + ", " + (canceled ? "canceled" : "completed"));
	    };
	    return VisualTool;
	}(Base_1.Base));
	exports.VisualTool = VisualTool;
	var EditRequest = /** @class */ (function (_super) {
	    __extends(EditRequest, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function EditRequest() {
	        return _super.call(this) || this;
	    }
	    Object.defineProperty(EditRequest.prototype, "cursor", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** cursor */
	        get: function () {
	            return Types.Cursor.AUTO;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditRequest.prototype, "source", {
	        /** source */
	        get: function () {
	            return undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditRequest.prototype, "selectable", {
	        /** selectable */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditRequest.prototype, "dblClickable", {
	        /** dblClickable */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EditRequest;
	}(Base_1.Base));
	exports.EditRequest = EditRequest;
	});

	unwrapExports(VisualTool_1);
	var VisualTool_2 = VisualTool_1.VisualTool;
	var VisualTool_3 = VisualTool_1.EditRequest;

	var ScrollBar_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var ScrollEventType;
	(function (ScrollEventType) {
	    ScrollEventType["LINE"] = "line";
	    ScrollEventType["PAGE"] = "page";
	    ScrollEventType["THUMB_TRACK"] = "thumbTrack";
	    ScrollEventType["THUMB_END"] = "thumbEnd";
	})(ScrollEventType = exports.ScrollEventType || (exports.ScrollEventType = {}));
	var ScrollElement = /** @class */ (function (_super) {
	    __extends(ScrollElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollElement(scrollBar, name) {
	        var _this = _super.call(this, name) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._pressed = false;
	        _this._scrollBar = scrollBar;
	        return _this;
	    }
	    ScrollElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ScrollElement.prototype, "scrollBar", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** scrollBar */
	        get: function () {
	            return this._scrollBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollElement.prototype, "vertical", {
	        /** vertical */
	        get: function () {
	            return this._scrollBar.vertical;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollElement.prototype, "pressed", {
	        /** pressed */
	        get: function () {
	            return this._pressed;
	        },
	        set: function (value) {
	            if (value != this._pressed) {
	                this._pressed = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollElement.prototype._doDraw = function (dom) {
	        this._doRender(dom);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ScrollElement.prototype._doRender = function (dom) {
	    };
	    ScrollElement.prototype._changed = function () {
	        this.invalidate();
	    };
	    return ScrollElement;
	}(VisualElement_1.VisualElement));
	var ScrollEdge = /** @class */ (function (_super) {
	    __extends(ScrollEdge, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollEdge() {
	        return _super.call(this, null, "scrollEdgeView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollEdge.prototype._getCssSelector = function () {
	        return "rg-scrolledge";
	    };
	    return ScrollEdge;
	}(ScrollElement));
	exports.ScrollEdge = ScrollEdge;
	var ScrollTrack = /** @class */ (function (_super) {
	    __extends(ScrollTrack, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollTrack(scrollBar) {
	        return _super.call(this, scrollBar, "scrollTrackView") || this;
	    }
	    ScrollTrack.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollTrack.prototype._getCssSelector = function () {
	        return "rg-scrolltrack";
	    };
	    return ScrollTrack;
	}(ScrollElement));
	exports.ScrollTrack = ScrollTrack;
	var ScrollButton = /** @class */ (function (_super) {
	    __extends(ScrollButton, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollButton(scrollBar, far) {
	        var _this = _super.call(this, scrollBar, "scrollButtonView") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._enabled = true;
	        _this._far = far;
	        return _this;
	    }
	    Object.defineProperty(ScrollButton.prototype, "enabled", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** enabled */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            if (value != this._enabled) {
	                this._enabled = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollButton.prototype, "far", {
	        /** far */
	        get: function () {
	            return this._far;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollButton.prototype._getCssSelector = function () {
	        if (this.scrollBar.vertical) {
	            return this._far ? "rg-scroll-down" : "rg-scroll-up";
	        }
	        else {
	            return this._far ? "rg-scroll-right" : "rg-scroll-left";
	        }
	    };
	    return ScrollButton;
	}(ScrollElement));
	exports.ScrollButton = ScrollButton;
	var ScrollThumb = /** @class */ (function (_super) {
	    __extends(ScrollThumb, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollThumb(scrollBar) {
	        return _super.call(this, scrollBar, "scrollThumbView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollThumb.prototype._getCssSelector = function () {
	        return "rg-scrollthumb";
	    };
	    return ScrollThumb;
	}(ScrollElement));
	exports.ScrollThumb = ScrollThumb;
	var ScrollBar = /** @class */ (function (_super) {
	    __extends(ScrollBar, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollBar(container, vertical) {
	        if (vertical === void 0) { vertical = false; }
	        var _this = _super.call(this, "scrollBarView") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._lineScrollSize = 1;
	        _this._pageScrollSize = 1;
	        _this._minThumbSize = 20;
	        _this._min = 0;
	        _this._max = 0;
	        _this._pos = 0;
	        _this._page = 0;
	        _this._maxPosition = 0;
	        _this._buttonSize = 20;
	        _this._needLayout = true;
	        _this._container = container;
	        _this._vertical = vertical;
	        _this._track = new ScrollTrack(_this);
	        _this.addChild(_this._track);
	        _this._thumb = new ScrollThumb(_this);
	        _this.addChild(_this._thumb);
	        _this._nearButton = new ScrollButton(_this, false);
	        _this.addChild(_this._nearButton);
	        _this._farButton = new ScrollButton(_this, true);
	        _this.addChild(_this._farButton);
	        return _this;
	    }
	    ScrollBar.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ScrollBar.prototype, "container", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** container */
	        get: function () {
	            return this._container;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollBar.prototype, "lineScrollSize", {
	        /** lineScrollSize */
	        get: function () {
	            return this._lineScrollSize;
	        },
	        set: function (value) {
	            value = Math.max(1, value);
	            if (value != this._lineScrollSize) {
	                this._lineScrollSize = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollBar.prototype, "pageScrollSize", {
	        /** pageScrollSize */
	        get: function () {
	            return this._pageScrollSize;
	        },
	        set: function (value) {
	            value = Math.max(1, value);
	            if (value != this._pageScrollSize) {
	                this._pageScrollSize = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollBar.prototype, "minThumbSize", {
	        /** minThumbSize */
	        get: function () {
	            return this._minThumbSize;
	        },
	        set: function (value) {
	            value = Math.max(8, value);
	            if (value != this._minThumbSize) {
	                this._minThumbSize = value;
	                this.invalidateLayout();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollBar.prototype, "vertical", {
	        /** vertical */
	        get: function () {
	            return this._vertical;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollBar.prototype, "pos", {
	        /** pos */
	        get: function () {
	            return this._pos;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ScrollBar.prototype.layoutContent = function () {
	        if (this._needLayout) {
	            this._needLayout = false;
	            this._doLayoutContent();
	        }
	    };
	    ScrollBar.prototype.setProperties = function (min, max, page) {
	        min = Math.max(0, min);
	        max = Math.max(min, max);
	        if (min != this._min || max != this._max || page != this._page) {
	            this._min = min;
	            this._max = max;
	            this._page = page;
	            this._pos = Math.min(this._max, Math.max(this._min, this._pos));
	            this._maxPosition = Math.max(0, this._max - this._page);
	            this.invalidate(); //Layout(); <-- 그리드 layout 중 다시 layout 요청된다.
	            this._needLayout = true;
	        }
	    };
	    ScrollBar.prototype.setPosition = function (value, layout) {
	        if (layout === void 0) { layout = true; }
	        value = Math.min(this._maxPosition, Math.max(this._min, value));
	        if (value != this._pos) {
	            this._pos = value;
	            this.invalidate(); //Layout(); <-- 그리드 layout 중 다시 layout 요청된다.
	            this._needLayout = true;
	            layout && this.layoutContent();
	        }
	    };
	    ScrollBar.prototype.ptInTrack = function (x, y, far) {
	        var p = this.containerToElement(x, y);
	        if (this._vertical) {
	            if (p.y >= this._nearButton.height && p.x < this._farButton.y) {
	                return !far && p.y < this._thumb.y || far && p.y >= this._thumb.bottom;
	            }
	        }
	        else {
	            if (x >= this._nearButton.width && x < this._farButton.x) {
	                return !far && p.x < this._thumb.x || far && p.x >= this._thumb.right;
	            }
	        }
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollBar.prototype._getCssSelector = function () {
	        return this._vertical ? "rg-vscrollbar" : "rg-hscrollbar";
	    };
	    ScrollBar.prototype.draw = function () {
	        _super.prototype.draw.call(this);
	    };
	    ScrollBar.prototype._doDraw = function (dom) {
	    };
	    ScrollBar.prototype._doSizeChanged = function () {
	        this.invalidateLayout();
	    };
	    ScrollBar.prototype.invalidateLayout = function () {
	        this._needLayout = true;
	        _super.prototype.invalidateLayout.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ScrollBar.prototype._doLayoutContent = function () {
	        var vertical = this._vertical;
	        var szBtn = this._buttonSize;
	        var h = this.height;
	        var w = this.width;
	        var szTrack = (vertical ? h : w) - szBtn * 2;
	        var szThumb = Math.min(szTrack, Math.max(this._minThumbSize, Math.floor(szTrack * this._page / (this._max - this._min + 1))));
	        var pos = szBtn + Math.min(szTrack - szThumb, Math.max(0, Math.floor((szTrack - szThumb) * this._pos / (this._maxPosition - this._min + 1))));
	        this._track.setBounds(0, 0, w, h);
	        if (vertical) {
	            this._nearButton.setBounds(0, 0, w, szBtn);
	            this._farButton.setBounds(0, h - szBtn, w, szBtn);
	            if (szThumb <= szTrack) {
	                this._thumb.setBounds(2, pos, w - 4, szThumb);
	            }
	        }
	        else {
	            this._nearButton.setBounds(0, 0, szBtn, h);
	            this._farButton.setBounds(w - szBtn, 0, szBtn, h);
	            if (szThumb <= szTrack) {
	                this._thumb.setBounds(pos, 2, szThumb, h - 4);
	            }
	        }
	    };
	    ScrollBar.prototype._doScroll = function (eventType, delta, position) {
	        this.fireEvent(ScrollBar.SCROLLED, eventType, delta, position);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    ScrollBar.SCROLLED = "onScrollBarScrolled";
	    return ScrollBar;
	}(VisualElement_1.VisualElement));
	exports.ScrollBar = ScrollBar;
	var ScrollThumbTracker = /** @class */ (function (_super) {
	    __extends(ScrollThumbTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollThumbTracker(owner) {
	        return _super.call(this, owner, "scrollThumbTracker") || this;
	    }
	    ScrollThumbTracker.prototype.dispose = function () {
	        this._thumb = null;
	        this.dispose();
	    };
	    Object.defineProperty(ScrollThumbTracker.prototype, "thumb", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** thumb */
	        get: function () {
	            return this._thumb;
	        },
	        set: function (value) {
	            this._thumb = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollThumbTracker.prototype, "startWhenCreated", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScrollThumbTracker.prototype._doStart = function (eventTarget, x, y) {
	        var bar = this._thumb.scrollBar;
	        var p = bar.containerToElement(x, y);
	        if (bar.vertical) {
	            this._offset = p.y - this._thumb.y;
	        }
	        else {
	            this._offset = p.x - this._thumb.x;
	        }
	        this._thumb.pressed = true;
	        return true;
	    };
	    ScrollThumbTracker.prototype._doDrag = function (eventTarget, x, y) {
	        return this.$_doScroll(x, y, ScrollEventType.THUMB_TRACK);
	    };
	    ScrollThumbTracker.prototype._doCompleted = function (eventTarget, x, y) {
	        return this.$_doScroll(x, y, ScrollEventType.THUMB_END);
	    };
	    ScrollThumbTracker.prototype._doCanceled = function (x, y) {
	    };
	    ScrollThumbTracker.prototype._doEnded = function () {
	        this._thumb.pressed = false;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ScrollThumbTracker.prototype.$_doScroll = function (x, y, eventType) {
	        var bar = this._thumb.scrollBar;
	        var len = bar["_maxPosition"] - bar["_min"] + 1;
	        var szBtn = bar["_buttonSize"];
	        var p = bar.containerToElement(x, y);
	        if (bar.vertical) {
	            var scrLen = bar.height - szBtn * 2 - this._thumb.height;
	            if (scrLen <= 0) {
	                return false;
	            }
	            p.y -= this._offset;
	            p.y = (p.y - szBtn) * len / scrLen;
	            bar["_doScroll"](eventType, 0, Math.floor(p.y));
	        }
	        else {
	            var scrLen = bar.width - szBtn * 2 - this._thumb.width;
	            if (scrLen <= 0) {
	                return false;
	            }
	            p.x -= this._offset;
	            p.x = (p.x - szBtn) * len / scrLen;
	            bar["_doScroll"](eventType, 0, Math.floor(p.x));
	        }
	        return true;
	    };
	    return ScrollThumbTracker;
	}(DragTracker_1.DragTracker));
	exports.ScrollThumbTracker = ScrollThumbTracker;
	var ScrollButtonTimer = /** @class */ (function (_super) {
	    __extends(ScrollButtonTimer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollButtonTimer() {
	        var _this = _super.call(this) || this;
	        _this._active = false;
	        _this._timer = undefined;
	        _this._ready = false;
	        return _this;
	    }
	    Object.defineProperty(ScrollButtonTimer.prototype, "active", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** active */
	        get: function () {
	            return this._timer !== undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ScrollButtonTimer.prototype.start = function (button) {
	        this._button = button;
	        this._scrollBar = button.scrollBar;
	        this._button.pressed = true;
	        this._active = true;
	        this.$_fireEvent();
	        setTimeout(function () {
	            if (this._ready) {
	                this._ready = false;
	                this._timer = setInterval(function () {
	                    if (this._active) {
	                        this.$_fireEvent();
	                    }
	                }.bind(this), 20);
	            }
	        }.bind(this), 200);
	        this._ready = true;
	    };
	    ScrollButtonTimer.prototype.move = function (x, y) {
	        var p = this._button.containerToElement(x, y);
	        this._active = this._button.containsInClient(p.x, p.y);
	        // this._active = this._button.containsInClient(x, y);
	    };
	    ScrollButtonTimer.prototype.stop = function () {
	        // 위 setTimeout callback이 실행되기 전에 stop()이 호출되면 무시해야 한다.
	        this._ready = false;
	        if (this._timer) {
	            clearInterval(this._timer);
	            this._timer == undefined;
	        }
	        // 아무데서나 stop이 호출될 수 있으므로 _button이 null일 수도 있다.
	        if (this._button) {
	            this._button.pressed = false;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ScrollButtonTimer.prototype.$_fireEvent = function () {
	        var delta = this._button.far ? 1 : -1;
	        var type = ScrollEventType.LINE;
	        this._scrollBar["_doScroll"](type, this._scrollBar.lineScrollSize * delta, 0);
	    };
	    return ScrollButtonTimer;
	}(EventAware_1.EventAware));
	exports.ScrollButtonTimer = ScrollButtonTimer;
	var ScrollTrackTimer = /** @class */ (function (_super) {
	    __extends(ScrollTrackTimer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollTrackTimer() {
	        var _this = _super.call(this) || this;
	        _this._active = false;
	        _this._timer = undefined;
	        _this._ready = false;
	        _this._mouseX = 0;
	        _this._mouseY = 0;
	        return _this;
	    }
	    Object.defineProperty(ScrollTrackTimer.prototype, "active", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** active */
	        get: function () {
	            return this._active;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ScrollTrackTimer.prototype.start = function (bar, far, x, y) {
	        this._scrollBar = bar;
	        this._far = far;
	        this._active = true;
	        this.$_fireEvent();
	        setTimeout(function () {
	            if (this._ready) {
	                this._ready = false;
	                this._timer = setInterval(function () {
	                    if (this._active) {
	                        this.$_fireEvent();
	                    }
	                }.bind(this), 50);
	            }
	        }.bind(this), 200);
	        this._ready = true;
	        var p = this._scrollBar.containerToElement(x, y);
	        this._mouseX = p.x;
	        this._mouseY = p.y;
	    };
	    ScrollTrackTimer.prototype.move = function (x, y) {
	        var p = this._scrollBar.containerToElement(x, y);
	        this._mouseX = p.x;
	        this._mouseY = p.y;
	        this._active = this._scrollBar.ptInTrack(p.x, p.y, this._far);
	    };
	    ScrollTrackTimer.prototype.stop = function () {
	        this._ready = false;
	        if (this._timer) {
	            clearInterval(this._timer);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ScrollTrackTimer.prototype.$_fireEvent = function () {
	        var type = null;
	        var delta = 0;
	        var thumb = this._scrollBar["_thumb"];
	        if (this._scrollBar.vertical) {
	            var y = this._mouseY;
	            if (this._far && y > thumb.bottom) {
	                type = ScrollEventType.PAGE;
	                delta = 1;
	            }
	            else if (!this._far && y < thumb.y) {
	                type = ScrollEventType.PAGE;
	                delta = -1;
	            }
	        }
	        else {
	            var x = this._mouseX;
	            if (this._far && x > thumb.right) {
	                delta = 1;
	                type = ScrollEventType.PAGE;
	            }
	            else if (x < thumb.x) {
	                type = ScrollEventType.PAGE;
	                delta = -1;
	            }
	        }
	        delta != 0 && this._scrollBar["_doScroll"](type, this._scrollBar.pageScrollSize * delta, 0);
	    };
	    return ScrollTrackTimer;
	}(Base_1.Base));
	exports.ScrollTrackTimer = ScrollTrackTimer;
	/**
	 * window 수준의 event를 받기 위해 (capture가 이모저모 번거로운 일인 듯))
	 * 각 element의 event를 처리하지 않고 container 수준에서 처리하도록 한다.
	 * visual container에 scrollTool이 생성되고,
	 * scroll element가 클릭되면 active tool이 scroll tool이 된다.
	 * scroll 관련 action이 종료되면 이전 active tool로 재설정된다.
	 */
	var ScrollTool = /** @class */ (function (_super) {
	    __extends(ScrollTool, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ScrollTool(owner) {
	        var _this = _super.call(this, owner, "scrollTool") || this;
	        _this._buttonTimer = new ScrollButtonTimer();
	        _this._trackTimer = new ScrollTrackTimer();
	        _this._thumbTracker = new ScrollThumbTracker(owner);
	        return _this;
	    }
	    ScrollTool.prototype.dispose = function () {
	        this._thumbTracker.cancel();
	        this._thumbTracker = null;
	        this._buttonTimer.stop();
	        this._buttonTimer = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ScrollTool.prototype._doMouseDown = function (x, y) {
	        //console.log("SCROLLBAR DOWN: " + x + ", " + y);
	        if (this._clickElement) {
	            this._clickElement.pressed = false;
	            this._clickElement = null;
	        }
	        this._buttonTimer.stop();
	        this._trackTimer.stop();
	        var elt = this.findElementAt(x, y, false);
	        if (elt instanceof ScrollElement) {
	            this._clickElement = elt;
	            elt.pressed = true;
	            if (elt instanceof ScrollButton) {
	                this._buttonTimer.start(elt);
	            }
	            else if (elt instanceof ScrollThumb) {
	                this._thumbTracker.thumb = elt;
	                this.dragTracker = this._thumbTracker;
	            }
	            else if (elt instanceof ScrollTrack) {
	                var far = elt.scrollBar.ptInTrack(x, y, true);
	                this._trackTimer.start(elt.scrollBar, far, x, y);
	            }
	        }
	    };
	    ScrollTool.prototype._doMouseMove = function (x, y) {
	        //console.log("SCROLLBAR MOVE: " + x + ", " + y);
	        var elt = this._clickElement;
	        if (elt instanceof ScrollButton && this._buttonTimer.active) {
	            this._buttonTimer.move(x, y);
	        }
	        else if (elt instanceof ScrollTrack && this._trackTimer.active) {
	            this._trackTimer.move(x, y);
	        }
	    };
	    ScrollTool.prototype._doMouseUp = function (x, y) {
	        //console.log("SCROLLBAR UP: " + x + ", " + y);
	        if (this._clickElement) {
	            this._clickElement.pressed = false;
	            this._clickElement = null;
	        }
	        this._buttonTimer.stop();
	        this._trackTimer.stop();
	    };
	    return ScrollTool;
	}(VisualTool_1.VisualTool));
	exports.ScrollTool = ScrollTool;
	});

	unwrapExports(ScrollBar_1);
	var ScrollBar_2 = ScrollBar_1.ScrollEventType;
	var ScrollBar_3 = ScrollBar_1.ScrollEdge;
	var ScrollBar_4 = ScrollBar_1.ScrollTrack;
	var ScrollBar_5 = ScrollBar_1.ScrollButton;
	var ScrollBar_6 = ScrollBar_1.ScrollThumb;
	var ScrollBar_7 = ScrollBar_1.ScrollBar;
	var ScrollBar_8 = ScrollBar_1.ScrollThumbTracker;
	var ScrollBar_9 = ScrollBar_1.ScrollButtonTimer;
	var ScrollBar_10 = ScrollBar_1.ScrollTrackTimer;
	var ScrollBar_11 = ScrollBar_1.ScrollTool;

	var GridHeadElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridHeadElement.ts
	// 2019. 08. 07. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var GridHeadCellElement = /** @class */ (function (_super) {
	    __extends(GridHeadCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridHeadCellElement() {
	        var _this = _super.call(this, "gridHeadCellView") || this;
	        _this._text = "";
	        return _this;
	    }
	    Object.defineProperty(GridHeadCellElement.prototype, "model", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** model */
	        get: function () {
	            return this._model;
	        },
	        set: function (value) {
	            this._model = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridHeadCellElement.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value || "";
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridHeadCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = this._text;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridHeadCellElement.prototype._doRender = function (dom) {
	    };
	    return GridHeadCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.GridHeadCellElement = GridHeadCellElement;
	var GridHeadElement = /** @class */ (function (_super) {
	    __extends(GridHeadElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridHeadElement() {
	        var _this = _super.call(this, null, "gridHeadView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._count = 0;
	        return _this;
	    }
	    GridHeadElement.prototype.dispose = function () {
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridHeadElement.prototype._getCssSelector = function () {
	        return "rg-head";
	    };
	    GridHeadElement.prototype._getCellSelector = function (td) {
	        return "rg-head-cell";
	    };
	    GridHeadElement.prototype._doPrepareTableExtents = function (lm) {
	        var grid = lm.grid;
	        var n = 0;
	        if (grid.rowIndicator.visible) {
	            if (this._cells.length <= n) {
	                this._cells.push(new GridHeadCellElement());
	            }
	            this._cells[n].model = grid.rowIndicator;
	            this._cells[n].width = lm.indicatorWidth;
	            n++;
	        }
	        if (grid.stateBar.visible) {
	            if (this._cells.length <= n) {
	                this._cells.push(new GridHeadCellElement());
	            }
	            this._cells[n].model = grid.stateBar;
	            this._cells[n].width = lm.stateBarWidth;
	            n++;
	        }
	        if (grid.checkBar.visible) {
	            if (this._cells.length <= n) {
	                this._cells.push(new GridHeadCellElement());
	            }
	            this._cells[n].model = grid.checkBar;
	            this._cells[n].width = lm.checkBarWidth;
	            n++;
	        }
	        this._count = n;
	    };
	    GridHeadElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    GridHeadElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var count = this._count;
	        while (this.childCount < count) {
	            this.addChild(this._cells[this.childCount]);
	        }
	        while (this.childCount > count) {
	            this.removeLast();
	        }
	        for (var i = 0; i < count; i++) {
	            var view = this.getChild(i);
	            var cell = this._cells[i].model.getHeadCell();
	            view.text = this._cells[i].model.headText;
	            view.updateCell(grid, cell, this.getCellContent(0, i));
	        }
	    };
	    GridHeadElement.prototype._doRender = function (dom) {
	    };
	    GridHeadElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    GridHeadElement.prototype._getColumnCount = function (lm, row) {
	        return this._count;
	    };
	    GridHeadElement.prototype._getColumnWidth = function (lm, col) {
	        return this._cells[col].width;
	    };
	    return GridHeadElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.GridHeadElement = GridHeadElement;
	});

	unwrapExports(GridHeadElement_1);
	var GridHeadElement_2 = GridHeadElement_1.GridHeadCellElement;
	var GridHeadElement_3 = GridHeadElement_1.GridHeadElement;

	var GridFootElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridFootElement.ts
	// 2019. 08. 07. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var GridFootCellElement = /** @class */ (function (_super) {
	    __extends(GridFootCellElement, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridFootCellElement() {
	        var _this = _super.call(this, "gridHeadCellView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._text = "";
	        return _this;
	    }
	    Object.defineProperty(GridFootCellElement.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value || "";
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridFootCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = this.text;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridFootCellElement.prototype._doRender = function (dom) {
	    };
	    return GridFootCellElement;
	}(CellElement_1.SelectableCellElement));
	exports.GridFootCellElement = GridFootCellElement;
	var GridFootElement = /** @class */ (function (_super) {
	    __extends(GridFootElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridFootElement() {
	        var _this = _super.call(this, null, "gridFootView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._count = 0;
	        return _this;
	    }
	    GridFootElement.prototype.dispose = function () {
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridFootElement.prototype._getCssSelector = function () {
	        return "rg-foot";
	    };
	    GridFootElement.prototype._getCellSelector = function (td) {
	        return "rg-foot-cell";
	    };
	    GridFootElement.prototype._doPrepareTableExtents = function (lm) {
	        var grid = lm.grid;
	        var w = 0;
	        if (grid.rowIndicator.visible) {
	            w += lm.indicatorWidth;
	        }
	        if (grid.stateBar.visible) {
	            w += lm.stateBarWidth;
	        }
	        if (grid.checkBar.visible) {
	            w += lm.checkBarWidth;
	        }
	        if (w > 0) {
	            if (this._cells.length == 0) {
	                this._cells.push(new GridFootCellElement());
	            }
	            this._cells[0].width = w;
	        }
	        this._count = (w > 0 ? 1 : 0);
	    };
	    GridFootElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    GridFootElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var count = this._count;
	        while (this.childCount < count) {
	            this.addChild(this._cells[this.childCount]);
	        }
	        while (this.childCount > count) {
	            this.removeLast();
	        }
	        for (var i = 0; i < count; i++) {
	            var view = this.getChild(i);
	            //let cell = this._cells[i].model.getFootCell();
	            // 임시로... footCell들은 제거하고 footer.headCell로 변경할 것!
	            var cell = grid.rowIndicator.getFootCell();
	            view.text = grid.footer.headText;
	            view.updateCell(grid, cell, this.getCellContent(0, i));
	        }
	    };
	    GridFootElement.prototype._doRender = function (dom) {
	    };
	    GridFootElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    GridFootElement.prototype._getColumnCount = function (lm, row) {
	        return this._count;
	    };
	    GridFootElement.prototype._getColumnWidth = function (lm, col) {
	        return this._cells[col].width;
	    };
	    return GridFootElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.GridFootElement = GridFootElement;
	});

	unwrapExports(GridFootElement_1);
	var GridFootElement_2 = GridFootElement_1.GridFootCellElement;
	var GridFootElement_3 = GridFootElement_1.GridFootElement;

	var FormatOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// FormatOptions.ts
	// 2019. 08. 07. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var FormatOptions = /** @class */ (function (_super) {
	    __extends(FormatOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FormatOptions(grid) {
	        return _super.call(this, grid) || this;
	    }
	    FormatOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(FormatOptions.prototype, "datetimeFormat", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                this._datetimeWriter = value ? new DateTimeWriter_1.DateTimeWriter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormatOptions.prototype, "numberFormat", {
	        /** numberFormat */
	        get: function () {
	            return this._numberFormat;
	        },
	        set: function (value) {
	            if (value != this._numberFormat) {
	                this._numberFormat = value;
	                this._numberFormatter = value ? new DecimalFormatter_1.DecimalFormatter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormatOptions.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                this._boolFormatter = value ? new BooleanFormatter_1.BooleanFormatter(value) : null;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    FormatOptions.prototype.getNumberFormatter = function (formatter) {
	        return formatter || this._numberFormatter;
	    };
	    FormatOptions.prototype.getDateWriter = function (writer) {
	        return writer || this._datetimeWriter || DateTimeWriter_1.DateTimeWriter.Default;
	    };
	    FormatOptions.prototype.getBoolFormatter = function (formatter) {
	        return formatter || this._boolFormatter;
	    };
	    return FormatOptions;
	}(GridOptions.GridBaseOptions));
	exports.FormatOptions = FormatOptions;
	});

	unwrapExports(FormatOptions_1);
	var FormatOptions_2 = FormatOptions_1.FormatOptions;

	var ContentPane_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ContentPane.ts
	// 2019. 08. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var ContentPane = /** @class */ (function (_super) {
	    __extends(ContentPane, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ContentPane(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name) || this;
	    }
	    ContentPane.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ContentPane.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            var p = this.parent;
	            while (p) {
	                if (p instanceof GridBase_1.GridBase) {
	                    return p;
	                }
	                p = p.parent;
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ContentPane.prototype.measure = function (grid, hintWidth, hintHeight) {
	        return this._doMeasure(grid, hintWidth, hintHeight);
	    };
	    ContentPane.prototype.layoutContent = function (lm, width, height) {
	        this._doLayoutContent(lm, width, height);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ContentPane.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        return new Size_1.Size(hintWidth, hintHeight);
	    };
	    ContentPane.prototype._doLayoutContent = function (lm, width, height) {
	    };
	    return ContentPane;
	}(VisualElement_1.LayerElement));
	exports.ContentPane = ContentPane;
	var LeftContentPane = /** @class */ (function (_super) {
	    __extends(LeftContentPane, _super);
	    function LeftContentPane() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    LeftContentPane.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        var css = dom.style;
	        css.setProperty("background", "#fff", "important");
	    };
	    return LeftContentPane;
	}(ContentPane));
	exports.LeftContentPane = LeftContentPane;
	var DataContentPane = /** @class */ (function (_super) {
	    __extends(DataContentPane, _super);
	    function DataContentPane() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return DataContentPane;
	}(ContentPane));
	exports.DataContentPane = DataContentPane;
	var FixedColumnBarElement = /** @class */ (function (_super) {
	    __extends(FixedColumnBarElement, _super);
	    function FixedColumnBarElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FixedColumnBarElement.prototype._getCssSelector = function () {
	        return "fixed-column-bar";
	    };
	    return FixedColumnBarElement;
	}(VisualElement_1.LayerElement));
	var FixedContentPane = /** @class */ (function (_super) {
	    __extends(FixedContentPane, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FixedContentPane(name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, name) || this;
	    }
	    FixedContentPane.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FixedContentPane.prototype._doLayoutContent = function (lm, width, height) {
	        if (!this._barView) {
	            this._barView = this._createBars();
	            this.addChild(this._barView);
	            this._barView2 = this._createBars();
	            this.addChild(this._barView2);
	        }
	        this._layoutBars(lm, width, height);
	        _super.prototype._doLayoutContent.call(this, lm, width, height);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    FixedContentPane.prototype._createBars = function () {
	        return new FixedColumnBarElement("fixedColumnBar");
	    };
	    FixedContentPane.prototype._layoutBars = function (lm, width, height) {
	        var w = lm.fixedBarWidth;
	        var hFoot = lm.footBounds.isEmpty ? 0 : lm.footBounds.height;
	        this._barView.visible = w > 0;
	        this._barView2.visible = false;
	        if (this._barView.visible) {
	            var h = Math.min(height - hFoot, lm.dataBounds.bottom);
	            this._barView.setBounds(width - w, 0, w, h);
	            if (hFoot > 0) {
	                this._barView2.visible = true;
	                this._barView2.setBounds(width - w, height - hFoot, w, hFoot);
	            }
	        }
	    };
	    return FixedContentPane;
	}(DataContentPane));
	exports.FixedContentPane = FixedContentPane;
	var RightColumnBarElement = /** @class */ (function (_super) {
	    __extends(RightColumnBarElement, _super);
	    function RightColumnBarElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    RightColumnBarElement.prototype._getCssSelector = function () {
	        return "right-column-bar";
	    };
	    return RightColumnBarElement;
	}(VisualElement_1.LayerElement));
	var RightContentPane = /** @class */ (function (_super) {
	    __extends(RightContentPane, _super);
	    function RightContentPane() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RightContentPane.prototype._createBars = function () {
	        return new RightColumnBarElement("rightColumnBar");
	    };
	    RightContentPane.prototype._layoutBars = function (lm, width, height) {
	        var w = lm.rightBarWidth;
	        var hFooter = lm.footBounds.isEmpty ? 0 : lm.footBounds.height;
	        this._barView.visible = w > 0;
	        this._barView2.visible = false;
	        if (this._barView.visible) {
	            var h = Math.min(height - hFooter, lm.dataBounds.bottom);
	            this._barView.setBounds(0, 0, w, h);
	            if (hFooter > 0) {
	                this._barView2.visible = true;
	                this._barView2.setBounds(0, height - hFooter, w, hFooter);
	            }
	        }
	    };
	    return RightContentPane;
	}(FixedContentPane));
	exports.RightContentPane = RightContentPane;
	});

	unwrapExports(ContentPane_1);
	var ContentPane_2 = ContentPane_1.ContentPane;
	var ContentPane_3 = ContentPane_1.LeftContentPane;
	var ContentPane_4 = ContentPane_1.DataContentPane;
	var ContentPane_5 = ContentPane_1.FixedContentPane;
	var ContentPane_6 = ContentPane_1.RightContentPane;

	var DateTimeConverter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DateTimeConverter.ts
	// 2019. 07. 04. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });

	var $$_DATE_TOKENS = [
	    "yy", "yyyy",
	    "M", "MM",
	    "d", "dd",
	    "a", "A",
	    "H", "HH", "h", "hh",
	    "m", "mm",
	    "s", "ss"
	];
	var $$_DATE_SEPARATORS = [
	    ".", "/", "-", ":"
	];
	var $$_ZERO_CHAR = "0".charCodeAt(0);
	var $$_NINE_CHAR = "9".charCodeAt(0);
	var $$_MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30];
	var $$_DAY_MILLISECONDS = 86400000;
	var $$_AMPMS = ["am", "pm", "AM", "PM", "Am", "Pm", "aM", "pM"];
	var DateTimeConverter = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function DateTimeConverter(format) {
	        this._baseYear = 2000;
	        this._preserveTime = false;
	        this.formatString = format;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DateTimeConverter.getSimpleDateNull = function (date) {
	        if (date instanceof Date) {
	            return date;
	        }
	        if (typeof date === "number") {
	            return new Date(date);
	        }
	        date = date.length === 8 && /^[0-9]*$/.test(date) ? date.replace(/(\d{4})(\d{2})(\d{2})/, "$1/$2/$3") : date;
	        var arr = date.split(/[.//-]/);
	        if (arr.length != 3) {
	            return null;
	        }
	        var y = parseInt(arr[0]);
	        var m = parseInt(arr[1]) - 1;
	        var d = parseInt(arr[2]);
	        date = new Date(y, m, d);
	        if (y == date.getFullYear() && m == date.getMonth() && d == date.getDate()) {
	            return date; // 20190099 처럼 올바르지 않은 날짜는 null처리해버린다.
	        }
	        else {
	            return null;
	        }
	    };
	    Object.defineProperty(DateTimeConverter.prototype, "formatString", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** formatString */
	        get: function () {
	            return this._formatString;
	        },
	        set: function (value) {
	            if (value != this._formatString) {
	                this._formatString = value;
	                this.parse(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateTimeConverter.prototype, "format", {
	        /** format */
	        get: function () {
	            return this._format;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    /**
	     * 1. trim()한다.
	     * 2. 이어진 space는 하나의 space로 간주한다.
	     * 3. 일 구분자는 ".", "/", "-" 셋 중 하나면 된다.
	     */
	    DateTimeConverter.prototype.getDate = function (str) {
	        var date;
	        if (str = str.trim()) {
	            var tokens = this.parseDateFormatTokens(this._format);
	            var values = this.parseDateValueTokens(str, this._amText, this._pmText);
	            var ampm = tokens.indexOf("a") >= 0 || tokens.indexOf("A") >= 0;
	            var len = tokens.length;
	            var vlen = values.length;
	            var y = 0;
	            var m = 1;
	            var d = 1;
	            var h = 0;
	            var n = 0;
	            var s = 0;
	            var am = 0;
	            var pm = 0;
	            var i = 0;
	            var j = 0;
	            while (i < len && j < vlen) {
	                var token = tokens[i];
	                var v = values[j];
	                switch (token.charAt(0)) {
	                    case "L":
	                        var ss = String(v);
	                        i++;
	                        while (i < len && (str = tokens[i]) != "E") {
	                            var v_1 = ss ? parseInt(ss.substr(0, str.length)) : -1;
	                            ss = ss.substr(str.length);
	                            switch (str.charAt(0)) {
	                                case "Y":
	                                case "y":
	                                    y = Math.max(0, v_1);
	                                    break;
	                                case "M":
	                                    m = v_1 >= 0 ? v_1 : 1;
	                                    break;
	                                case "D":
	                                case "d":
	                                    d = v_1 >= 0 ? v_1 : 1;
	                                    break;
	                                case "H":
	                                case "h":
	                                    h = Math.max(0, v_1);
	                                    break;
	                                case "m":
	                                    n = Math.max(0, v_1);
	                                    break;
	                                case "s":
	                                    s = Math.max(0, v_1);
	                                    break;
	                            }
	                            i++;
	                        }
	                        break;
	                    case "Y":
	                    case "y":
	                        y = parseInt(v);
	                        break;
	                    case "M":
	                        m = parseInt(v);
	                        break;
	                    case "D":
	                    case "d":
	                        d = parseInt(v);
	                        break;
	                    case "H":
	                    case "h":
	                        h = parseInt(v);
	                        break;
	                    case "m":
	                        n = parseInt(v);
	                        break;
	                    case "s":
	                        s = parseInt(v);
	                        break;
	                    case "a":
	                        str = String(v);
	                        if (str) {
	                            str = str.toLowerCase();
	                            if ((this._amText && str == this._amText.toLowerCase()) || (str == "am")) {
	                                am = 12;
	                            }
	                            else if ((this._pmText && str == this._pmText.toLowerCase()) || (str == "pm")) {
	                                pm = 12;
	                            }
	                        }
	                        break;
	                }
	                i++;
	                j++;
	            }
	            if (y < 100 && y >= 0) {
	                y += this._baseYear;
	            }
	            if (y < 0 || y > 9999) {
	                return null;
	            }
	            if (Utils_1.Utils.included(m, 1, 3, 5, 7, 8, 10, 12)) {
	                if (d < 1 || d > 31)
	                    return null;
	            }
	            else if (Utils_1.Utils.included(m, 4, 6, 9, 11)) {
	                if (d < 1 || d > 30)
	                    return null;
	            }
	            else if (m == 2) {
	                if (d > 29) {
	                    return null;
	                }
	                if (d == 29) {
	                    if (!((y % 4 == 0) && (y % 100 != 0) || (y % 400 == 0)))
	                        return null;
	                }
	            }
	            else {
	                return null;
	            }
	            if (h < 0 || h > 24) {
	                return null;
	            }
	            if ((am > 0 || pm > 0) && h > 12) {
	                return null;
	            }
	            if (n < 0 || n > 59) {
	                return null;
	            }
	            if (s < 0 || s > 59) {
	                return null;
	            }
	            if (am > 0) {
	                h = h % 12;
	            }
	            else if (pm > 0) {
	                h = h % 12 + 12;
	            }
	            date = new Date(y, m - 1, d, h, n, s);
	        }
	        return date;
	    };
	    DateTimeConverter.prototype.getDateNull = function (s) {
	        try {
	            return this.getDate(s);
	        }
	        catch (err) {
	        }
	        return null;
	    };
	    DateTimeConverter.prototype.getText = function (d) {
	        var date = d;
	        if (!(date instanceof Date)) {
	            date = new Date(d);
	        }
	        var tokens = this.parseDateFormatTokens(this._format);
	        var ampm = tokens.indexOf("a") >= 0 || tokens.indexOf("A") >= 0;
	        var s = "";
	        for (var i = 0, cnt = tokens.length; i < cnt; i++) {
	            var t = tokens[i];
	            var len = t.length;
	            switch (t.charAt(0)) {
	                case "L":
	                    break;
	                case "Y":
	                case "y":
	                    s += len > 2 ? date.getFullYear() : Utils_1.Utils.pad(date.getFullYear() % 100);
	                    break;
	                case "M":
	                    s += len > 1 ? Utils_1.Utils.pad(date.getMonth() + 1) : date.getMonth() + 1;
	                    break;
	                case "D":
	                case "d":
	                    s += len > 1 ? Utils_1.Utils.pad(date.getDate()) : date.getDate();
	                    break;
	                case "H":
	                    s += len > 1 ? Utils_1.Utils.pad(date.getHours()) : date.getHours();
	                    break;
	                case "h":
	                    if (ampm) {
	                        var h = date.getHours();
	                        if (h == 0) {
	                            h = 12;
	                        }
	                        else if (h > 12) {
	                            h = h - 12;
	                        }
	                        s += len > 1 ? Utils_1.Utils.pad(h) : h;
	                    }
	                    else {
	                        s += len > 1 ? Utils_1.Utils.pad(date.getHours()) : date.getHours();
	                    }
	                    break;
	                case "m":
	                    s += len > 1 ? Utils_1.Utils.pad(date.getMinutes()) : date.getMinutes();
	                    break;
	                case "s":
	                    s += len > 1 ? Utils_1.Utils.pad(date.getSeconds()) : date.getSeconds();
	                    break;
	                case "A":
	                case "a":
	                    if (date.getHours() < 12) {
	                        s += this._amText;
	                    }
	                    else {
	                        s += this._pmText;
	                    }
	                    break;
	                default:
	                    s += t;
	            }
	        }
	        return s;
	    };
	    DateTimeConverter.prototype.daysOfYear = function (d) {
	        var days = 0;
	        for (var i = 0; i < d.getMonth(); i++) {
	            days += $$_MONTH_DAYS[i];
	        }
	        if (d.getMonth() >= 2) {
	            var y = d.getFullYear();
	            if (y % 400 == 0 || (y % 4 == 0 && y % 100 != 0))
	                days++;
	        }
	        days += d.getDate();
	        return days;
	    };
	    DateTimeConverter.prototype.daysOfPriorYears = function (y) {
	        if (y <= 1900)
	            return 0;
	        y--;
	        var leapDays = Math.floor(y / 4) // plus julian leap days in prior years
	            - Math.floor(y / 100) // minus prior century years
	            + Math.floor(y / 400) // plus years divisible by 400
	            - 460; // leap days in previous 1900 years
	        return 365 * (y - 1899) + leapDays;
	    };
	    DateTimeConverter.prototype.toExcelDate = function (d) {
	        var time = (((d.getHours() * 60 + d.getMinutes()) * 60 + d.getSeconds()) * 1000 + d.getMilliseconds()) / $$_DAY_MILLISECONDS;
	        var days = this.daysOfPriorYears(d.getFullYear()) + this.daysOfYear(d);
	        var v = days + time;
	        if (v >= 60)
	            v++; // ?
	        return v;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DateTimeConverter.prototype.splitWords = function (str) {
	        var len = str.length;
	        var words = [];
	        var p = 0;
	        var i = 0;
	        var c = str.charAt(i++);
	        while (i < len) {
	            var c2 = str.charAt(i);
	            if (c2 != c) {
	                words.push(str.substring(p, i));
	                c = c2;
	                p = i;
	            }
	            i++;
	        }
	        if (p < len) {
	            words.push(str.substr(p));
	        }
	        return words;
	    };
	    DateTimeConverter.prototype.parseDateFormatTokens = function (format) {
	        var tokens = [];
	        var str = format && format.trim();
	        if (str) {
	            var len = str.length;
	            var i = 0;
	            while (i < len) {
	                var c = str.charAt(i);
	                if ($$_DATE_SEPARATORS.indexOf(c) >= 0) {
	                    tokens.push(c);
	                    i++;
	                }
	                else {
	                    var p_1 = i++;
	                    while (i < len && str.charAt(i) == c) {
	                        i++;
	                    }
	                    c = str.substring(p_1, i);
	                    if ($$_DATE_TOKENS.indexOf(c) < 0) {
	                        throw new Error("Invalid datetime read format: " + format);
	                    }
	                    tokens.push(c == "A" ? "a" : c);
	                }
	                if (i < len && Utils_1.Utils.isWhiteSpace(c = str.charAt(i))) {
	                    tokens.push(" ");
	                    while (i < len && Utils_1.Utils.isWhiteSpace(str.charAt(i))) {
	                        i++;
	                    }
	                }
	            }
	            var tokens2 = [];
	            var p = 0;
	            len = tokens.length;
	            for (i = 0; i < len; i++) {
	                var c = tokens[i];
	                if (c == "a" || $$_DATE_TOKENS.indexOf(c) < 0) {
	                    if (p > 1) {
	                        tokens2.push("E");
	                    }
	                    tokens2.push(c);
	                    p = 0;
	                }
	                else {
	                    if (p == 1) {
	                        tokens2.splice(tokens2.length - 2, 0, "L");
	                    }
	                    tokens2.push(c);
	                    p++;
	                }
	            }
	            tokens = tokens2;
	        }
	        return tokens;
	    };
	    DateTimeConverter.prototype.parseDateValueTokens = function (date, amStr, pmStr) {
	        var tokens = [];
	        var str = date.trim();
	        if (str) {
	            var ampms = $$_AMPMS.slice();
	            amStr && ampms.push(amStr);
	            pmStr && ampms.push(pmStr);
	            var len = str.length;
	            var i = 0;
	            while (i < len) {
	                var c = str.charAt(i);
	                if ($$_DATE_SEPARATORS.indexOf(c) >= 0) {
	                    tokens.push(c);
	                    i++;
	                }
	                else if (c.charCodeAt(0) >= $$_ZERO_CHAR && c.charCodeAt(0) <= $$_NINE_CHAR) {
	                    var p = i++;
	                    while (i < len && str.charCodeAt(i) >= $$_ZERO_CHAR && str.charCodeAt(i) <= $$_NINE_CHAR) {
	                        i++;
	                    }
	                    c = str.substring(p, i);
	                    tokens.push(c);
	                }
	                else {
	                    var idx = -1;
	                    var j = 0;
	                    for (; j < ampms.length; j++) {
	                        if (str.indexOf(ampms[j], i) == i) {
	                            idx = j;
	                            break;
	                        }
	                    }
	                    if (idx < 0) {
	                        throw "Invalid date value: " + str;
	                    }
	                    tokens.push(ampms[j]);
	                    i += ampms[j].length;
	                }
	                if (i < len && Utils_1.Utils.isWhiteSpace(c = str.charAt(i))) {
	                    tokens.push(" ");
	                    while (i < len && Utils_1.Utils.isWhiteSpace(str.charAt(i))) {
	                        i++;
	                    }
	                }
	            }
	        }
	        return tokens;
	    };
	    DateTimeConverter.prototype.validateDateFormat = function (format) {
	        format = format && format.trim();
	        if (format) {
	            var tokens = this.parseDateFormatTokens(format);
	            /*
	             var str:String = StringUtil.trim(format);
	             var arr:Array = str.split(/[\s+|\.|\-|\/|\:]/);
	             for each (var s:String in arr) {
	             if (s && DATE_TOKENS.indexOf(s) < 0) {
	             var words:Array = splitWords(s);
	             var valid:Boolean = true;
	             for each (var w:String in words) {
	             if(DATE_TOKENS.indexOf(w) < 0) {
	             valid = false;
	             break;
	             }
	             }
	             if (!valid) {
	             throw new Error("Invalid datetime read format: " + format);
	             }
	             }
	             }
	             var ampm:Boolean = arr.indexOf("a") >= 0 || arr.indexOf("A") >= 0;
	             */
	            var ampm = tokens.indexOf("a") >= 0;
	            if (ampm && tokens.indexOf("H") >= 0) {
	                throw "Invalid datetime read format - 'H'와 'a'가 같이 존재할 수 없습니다: " + format;
	            }
	            if (tokens.indexOf("h") >= 0 && !ampm) {
	                throw "Invalid datetime read format - 'h'가 있으면 'a'가 반드시 있어야 합니다: " + format;
	            }
	        }
	    };
	    DateTimeConverter.prototype.parse = function (fmt) {
	        this._amText = "am";
	        this._pmText = "pm";
	        this._baseYear = 2000;
	        this._preserveTime = false;
	        if (fmt) {
	            var arr = fmt.split(";");
	            this._format = arr[0] ? arr[0] : DateTimeConverter.DEFAULT_FORMAT;
	            this.validateDateFormat(this._format);
	            if (arr.length > 1 && arr[1]) {
	                this._baseYear = parseInt(arr[1]);
	            }
	            if (arr.length > 2 && arr[2]) {
	                var ampms = arr[2].split(",");
	                this._amText = ampms[0] ? ampms[0] : "am";
	                if (ampms.length > 1) {
	                    this._pmText = ampms[1] ? ampms[1] : "pm";
	                }
	            }
	            if (arr.length > 3) {
	                this._preserveTime = arr[3] ? arr[3] == "1" : false;
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DateTimeConverter.DEFAULT_FORMAT = "yyyy/MM/dd";
	    DateTimeConverter.Default = new DateTimeConverter(DateTimeConverter.DEFAULT_FORMAT);
	    return DateTimeConverter;
	}());
	exports.DateTimeConverter = DateTimeConverter;
	});

	unwrapExports(DateTimeConverter_1);
	var DateTimeConverter_2 = DateTimeConverter_1.DateTimeConverter;

	var Validation = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	////////////////////////////////////////////////////////////////////////////////
	// Validation.ts
	// 2019. 10. 14. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var AbortError = /** @class */ (function (_super) {
	    __extends(AbortError, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function AbortError(message) {
	        var _this = _super.call(this) || this;
	        _this.message = message;
	        return _this;
	    }
	    return AbortError;
	}(Error));
	exports.AbortError = AbortError;
	var ValidationError = /** @class */ (function (_super) {
	    __extends(ValidationError, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ValidationError(level, message, column, userMessage) {
	        var _this = _super.call(this, message) || this;
	        _this.level = level;
	        _this.column = column;
	        _this.userMessage = userMessage;
	        return _this;
	    }
	    return ValidationError;
	}(AbortError));
	exports.ValidationError = ValidationError;
	});

	unwrapExports(Validation);
	var Validation_1 = Validation.AbortError;
	var Validation_2 = Validation.ValidationError;

	var Editors = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Editors.ts
	// 2019. 07. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });










	var $$_EDITOR_THRESHOLD = Utils_1.Utils.isSafari ? 1 : 0;
	var $$_EMPTY_TEXT_VALUE = '***1-da*&23%^1//+)(lu%v\\3d!#~`{``~er';
	var $$_EDITOR_FONT_NAME = 'Tahoma';
	var $$_EDITOR_FONT_SIZE = '10pt';
	var CellEditor = /** @class */ (function (_super) {
	    __extends(CellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function CellEditor(grid, parentElement) {
	        var _this = _super.call(this) || this;
	        _this._textCase = Types.TextInputCase.DEFAULT;
	        _this._readOnly = false;
	        _this._editorBorder = "2px solid rgb(82, 146, 247)";
	        _this._editorShadow = "rgba(0, 0, 0, 0.4) 1px 2px 5px";
	        _this._started = false;
	        _this._dateConverter = DateTimeConverter_1.DateTimeConverter.Default;
	        _this._boolConverter = BooleanConverter_1.BooleanConverter.Default;
	        _this._cellBounds = new Rectangle_1.Rectangle();
	        _this._checkHangeul = false;
	        _this._composing = false;
	        _this._grid = grid;
	        _this._parentElement = parentElement;
	        _this._editor = _this._createEditor(parentElement);
	        _this._editor["$_owner"] = _this;
	        _this._editIndex = grid.getIndex();
	        if (_this._editor) {
	            _this._editor.addEventListener("focus", function (e) {
	                this._grid["$_setEditFocused"](true, e);
	            }.bind(_this));
	            _this._editor.addEventListener("focusin", function (e) {
	                this._grid["$_setEditFocused"](true, e);
	            }.bind(_this));
	            _this._editor.addEventListener("blur", function (e) {
	                this._grid["$_setEditFocused"](false, e);
	            }.bind(_this));
	            _this._editor.addEventListener("focusout", function (e) {
	                this._grid["$_setEditFocused"](false, e);
	            }.bind(_this));
	        }
	        _this.setVisible(false, true);
	        _this.$_setEditorId(_this._editor);
	        return _this;
	    }
	    CellEditor.prototype.dispose = function () {
	        this._editor = null;
	        this._grid = null;
	        this._controller = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellEditor.prototype, "emptyValue", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** emptyValue */
	        get: function () {
	            return this._emptyValue;
	        },
	        set: function (value) {
	            if (value != this._emptyValue) {
	                this._emptyValue = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "textCase", {
	        /** textCase */
	        get: function () {
	            return this._textCase;
	        },
	        set: function (value) {
	            if (value != this._textCase) {
	                this._textCase = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "fontFamily", {
	        /** fontFamily */
	        get: function () {
	            return this._fontFamily;
	        },
	        set: function (value) {
	            if (value != this._fontFamily) {
	                this._fontFamily = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "fontSize", {
	        /** fontSize */
	        get: function () {
	            return this._fontSize;
	        },
	        set: function (value) {
	            if (value != this._fontSize) {
	                this._fontSize = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "dateTimeFormat", {
	        /** dateTimeFormat */
	        get: function () {
	            return this._dateTimeFormat;
	        },
	        set: function (value) {
	            if (value != this._dateTimeFormat) {
	                this._dateTimeFormat = value;
	                if (value) {
	                    if (!this._saveDateConverter) {
	                        this._saveDateConverter = new DateTimeConverter_1.DateTimeConverter(value);
	                    }
	                    this._saveDateConverter.formatString = value;
	                    this._dateConverter = this._saveDateConverter;
	                }
	                else {
	                    this._dateConverter = DateTimeConverter_1.DateTimeConverter.Default;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "todayChar", {
	        /** todayChar */
	        get: function () {
	            return this._todayChar;
	        },
	        set: function (value) {
	            if (value != this._todayChar) {
	                this._todayChar = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "nowChar", {
	        /** nowChar */
	        get: function () {
	            return this._nowChar;
	        },
	        set: function (value) {
	            if (value != this._nowChar) {
	                this._nowChar = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                if (value) {
	                    if (!this._saveBoolConverter) {
	                        this._saveBoolConverter = new BooleanConverter_1.BooleanConverter(value);
	                    }
	                    this._saveBoolConverter.format = value;
	                    this._boolConverter = this._saveBoolConverter;
	                }
	                else {
	                    this._boolConverter = BooleanConverter_1.BooleanConverter.Default;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "editor", {
	        /** editor */
	        get: function () {
	            return this._editor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "visible", {
	        /** visible */
	        get: function () {
	            return parseInt(this._container.style.width) > $$_EDITOR_THRESHOLD && parseInt(this._container.style.height) > $$_EDITOR_THRESHOLD;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CellEditor.prototype.setVisible = function (value, force) {
	        if (value) {
	            var v = void 0;
	            if (this._fontFamily) {
	                v = this._fontFamily;
	            }
	            else {
	                v = $$_EDITOR_FONT_NAME;
	            }
	            if (v != this._editor.style.fontFamily) {
	                this._editor.style.fontFamily = v;
	            }
	            if (this._fontSize) {
	                v = this._fontSize;
	            }
	            else {
	                v = $$_EDITOR_FONT_SIZE;
	            }
	            if (v != this._editor.style.fontSize) {
	                this._editor.style.fontSize = v;
	            }
	        }
	        if (this._editor instanceof HTMLInputElement) {
	            if (value && this._editor["value"] == $$_EMPTY_TEXT_VALUE) {
	                this._editor["value"] = "";
	            }
	            else if (!value && (this._editor["value"] == null || this._editor["value"] == undefined || this._editor["value"] == "")) {
	                this._editor["value"] = $$_EMPTY_TEXT_VALUE;
	                if (this._grid["$_editFocused"]) {
	                    this.selectAll();
	                }
	            }
	        }
	        if (!value) {
	            this._container.style.width = $$_EDITOR_THRESHOLD + "px";
	            this._container.style.height = $$_EDITOR_THRESHOLD + "px";
	        }
	    };
	    Object.defineProperty(CellEditor.prototype, "readOnly", {
	        /** readOnly */
	        get: function () {
	            return this._readOnly;
	        },
	        set: function (value) {
	            if (this._editor instanceof HTMLInputElement) {
	                this._editor.readOnly = this._readOnly = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "editing", {
	        /** editing */
	        get: function () {
	            return this._started;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "editIndex", {
	        /** editIndex */
	        get: function () {
	            return this._editIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CellEditor.prototype, "hasButton", {
	        /** hasButton */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellEditor.prototype.applyOptions = function (options) {
	        //options && this.assign(options);
	    };
	    CellEditor.prototype.setEditIndex = function (value) {
	        this._editIndex.assign(value);
	    };
	    CellEditor.prototype.setController = function (value) {
	        this._controller = value;
	    };
	    CellEditor.prototype.beginEdit = function (clear, select) {
	        if (!this._started) {
	            if (this._started = this._doBeginEdit()) {
	                clear && this.clear();
	                select && this.selectAll();
	            }
	        }
	    };
	    CellEditor.prototype.endEdit = function () {
	        if (this._started) {
	            this._doEndEdit();
	            this._started = false;
	        }
	    };
	    CellEditor.prototype.caretToLast = function () {
	    };
	    CellEditor.prototype.commit = function () {
	        this._doCommit();
	    };
	    CellEditor.prototype.setReadOnly = function (value) {
	    };
	    CellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        return undefined;
	    };
	    CellEditor.prototype.setEditValue = function (value) {
	        this._oldValue = value;
	    };
	    CellEditor.prototype.setCellEditValue = function (value, dropdown) {
	        if (!this.readOnly && this._requestStart(dropdown)) {
	            this.setEditValue(value);
	            this._doChanged();
	        }
	    };
	    CellEditor.prototype.getEditText = function () {
	        return "";
	    };
	    CellEditor.prototype.selectAll = function () {
	        if (this._grid["$_editFocused"]) {
	            this._selectAll();
	        }
	    };
	    CellEditor.prototype.clear = function () {
	        if (this._editor instanceof HTMLInputElement) {
	            this._editor["value"] = "";
	        }
	    };
	    CellEditor.prototype.setFocus = function () {
	        this._editor.focus();
	    };
	    CellEditor.prototype.setEditorTitle = function (index) {
	        // const grid = index.grid;
	        // const options = grid.editorOptions;
	        // if (!grid._loading && this._editor && index && index.I() >= 0 && options && options._titleExprStatement) {
	        // 	this._editor.title = "";
	        // 	var item = index.item();
	        // 	if (!(item instanceof GridRow || item instanceof TreeItem)) {
	        // 		return;
	        // 	}
	        // 	var cell = grid._body.getCellSimple(index);
	        // 	if (!(cell instanceof DataCell)) {
	        // 		return;
	        // 	}
	        // 	var runtime = options._titleExprRuntime;
	        // 	var v = cell.value() instanceof Date ? this._dateConverter.getText(cell.value()) : cell.displayText();
	        // 	runtime.setCell(cell);
	        // 	runtime.setValue(v);
	        // 	var title = options._titleExprStatement.evaluate(options._titleExprRuntime)			
	        // 	this._editor.title = title;
	        // }
	    };
	    CellEditor.prototype.setBounds = function (x, y, w, h) {
	    };
	    CellEditor.prototype.setCellBounds = function (x, y, w, h) {
	        this._cellBounds.set(x, y, w, h);
	    };
	    CellEditor.prototype.closeList = function (accept) {
	    };
	    CellEditor.prototype.dropDownList = function (force) {
	    };
	    CellEditor.prototype.buttonClicked = function (index) {
	    };
	    CellEditor.prototype.initOptions = function () {
	        this._emptyValue = undefined;
	        this.booleanFormat = null;
	        this._todayChar = null;
	        this._nowChar = null;
	        this.dateTimeFormat = null;
	        this._textCase = Types.TextInputCase.DEFAULT;
	        this._fontFamily = null;
	        this._fontSize = null;
	        this._checkHangeul = false;
	    };
	    CellEditor.prototype.$_setEditorId = function (editor) {
	    };
	    CellEditor.prototype._changed = function () {
	    };
	    CellEditor.prototype.$_setController = function (value) {
	        this._controller = value;
	    };
	    CellEditor.prototype._editField = function () {
	        return this._grid.dataSource ? this._grid.dataSource.getField(this._editIndex.dataField) : null;
	    };
	    CellEditor.prototype._isDateEditor = function () {
	        return false;
	    };
	    CellEditor.prototype._requestStart = function (dropDown) {
	        if (!this._started) {
	            this.selectAll();
	            return this._controller.onEditorStart(this);
	        }
	        return this._started;
	    };
	    CellEditor.prototype._valToStr = function (value) {
	        var index = this.editIndex;
	        var s = "";
	        try {
	            if (value !== undefined || this._mask) {
	                var fld = index.grid.dataSource.getField(index.dataField);
	                if (fld) {
	                    switch (fld.dataType) {
	                        case Types.ValueType.DATETIME:
	                            if (value) {
	                                s = this._dateConverter.getText(value);
	                            }
	                            if (this._mask) {
	                                s = this._mask.writeBuffer(s);
	                            }
	                            break;
	                        case Types.ValueType.BOOLEAN:
	                            s = this._boolConverter.toText(value);
	                            break;
	                        case Types.ValueType.NUMBER:
	                            if (!isNaN(value)) {
	                                s = Utils_1.Utils.toStr(value);
	                            }
	                            break;
	                        case Types.ValueType.OBJECT:
	                            var col = index.column;
	                            var dataRow = index.dataRow;
	                            var key = col["_objectKey"];
	                            var fn = col["_objectCallback"];
	                            if (value) {
	                                s = fn && typeof fn === "function" ? fn(fld.orgFieldName, dataRow, value) : key && value.hasOwnProperty(key) ? value[key] : value != null && typeof value == "object" ? JSON.stringify(value) : "";
	                            }
	                            break;
	                        default:
	                            s = this._mask ? this._mask.writeBuffer(value) : value;
	                            break;
	                    }
	                }
	                else {
	                    s = value;
	                }
	            }
	        }
	        catch (err) {
	            //_throwDebug(err);
	            s = value;
	        }
	        return s === null ? "" : s;
	    };
	    CellEditor.prototype._strToVal = function (s) {
	        s = Utils_1.Utils.toStr(s);
	        var index = this._editIndex;
	        var tcase = index.dataColumn && this._textCase == Types.TextInputCase.DEFAULT ? index.dataColumn.textInputCase : this._textCase;
	        try {
	            var fld = index.grid.dataSource.getField(index.dataField);
	            if (fld) {
	                var t = fld.dataType;
	                if (t == Types.ValueType.DATETIME || (s && this._isDateEditor() && t == Types.ValueType.TEXT)) {
	                    var dateFld = t == Types.ValueType.DATETIME;
	                    var d = null;
	                    if (s && s == this._nowChar) {
	                        d = new Date();
	                    }
	                    if (!d && s && s == this._todayChar) {
	                        d = new Date();
	                        d.setHours(0, 0, 0, 0);
	                    }
	                    if (!d) {
	                        this._mask && (s = this._mask.getStripValue());
	                        d = this._dateConverter.getDate(s);
	                    }
	                    return dateFld ? (!d || isNaN(d.getFullYear()) ? undefined : d) : d ? this._dateConverter.getText(d) : undefined;
	                }
	                else if (t == Types.ValueType.BOOLEAN) {
	                    return this._boolConverter.toBoolEx(s);
	                }
	                else if (t == Types.ValueType.NUMBER) {
	                    return parseFloat(s);
	                }
	                else if (t == Types.ValueType.TEXT) {
	                    this._mask && (s = this._mask.getStripValue());
	                }
	            }
	            if (tcase === Types.TextInputCase.UPPER) {
	                return s ? s.toLocaleUpperCase() : s;
	            }
	            else if (tcase === Types.TextInputCase.LOWER) {
	                return s ? s.toLocaleLowerCase() : s;
	            }
	            else {
	                return s;
	            }
	        }
	        catch (err) {
	            //_throwDebug(err);
	            return undefined;
	        }
	    };
	    CellEditor.prototype._dispatchKeyDown = function (keyCode, ctrl, shift, alt) {
	        if (!this._controller)
	            debugger;
	        return this._controller.onEditorKeyDown(this, keyCode, ctrl, shift, alt);
	    };
	    CellEditor.prototype._dispatchKeyPress = function (keyCode) {
	        if (!this._controller)
	            debugger;
	        return this._controller.onEditorKeyPress(this, keyCode);
	    };
	    CellEditor.prototype._dispatchKeyUp = function (keyCode, ctrl, shift, alt) {
	        if (!this._controller)
	            debugger;
	        return this._controller.onEditorKeyUp(this, keyCode, ctrl, shift, alt);
	    };
	    CellEditor.prototype._dispatchChange = function () {
	        this._controller.onEditorChange(this);
	    };
	    CellEditor.prototype._dispatchSearch = function (text) {
	        this._controller.onEditorSearch(this, text);
	    };
	    CellEditor.prototype._dispatchSearchCellButtonClick = function (text) {
	        return this._controller.onSearchCellButtonClick(this, text);
	    };
	    CellEditor.prototype._dispatchCommit = function () {
	        this._controller.onEditorCommit(this);
	    };
	    CellEditor.prototype._sendToParent = function (e, flag, nohandle) {
	        if (flag === void 0) { flag = undefined; }
	        try {
	            var ctrl = Utils_1.Utils.isMac && e.metaKey || !Utils_1.Utils.isMac && e.ctrlKey;
	            if (flag == 2) { // key press
	                if (this._dispatchKeyPress(e.keyCode || e.which)) {
	                    if (e.preventDefault) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    }
	                    return true;
	                }
	            }
	            else if (flag == 3) { // key up
	                if (this._dispatchKeyUp(e.keyCode, ctrl, e.shiftKey, e.altKey)) {
	                    if (e.preventDefault) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    }
	                    return true;
	                }
	                ;
	                // maxLength를 체크해서 maxLength가 입력되었으면 다음 셀로 넘어간다.
	                try {
	                    var grid = this._controller["_grid"];
	                    var options = grid.editOptions;
	                    var moveNextCell = options.imaxLengthToNextCell;
	                    if (!!moveNextCell) {
	                        var skip = options.skipReadOnly;
	                        var activeTool = grid.activeTool;
	                        var maxLength = this["maxLength"];
	                        var idx = this.editIndex.clone();
	                        var isSpecialKey = Utils_1.Utils.included(e.keyCode, Types.Keys.UP, Types.Keys.PAGEUP, Types.Keys.DOWN, Types.Keys.PAGEDOWN, Types.Keys.F2, Types.Keys.TAB, Types.Keys.ENTER);
	                        if (!this._checkHangeul && !isSpecialKey && !ctrl && !e.altKey && grid && grid.isEditing(idx) && maxLength > 0 && !this._composing && e.keyCode > 47) {
	                            var len = this._editor["value"].length;
	                            if (len >= maxLength) {
	                                idx.right();
	                                if (skip && activeTool.checkReadOnly(idx)) {
	                                    if (!activeTool.skipReadOnly(idx, 1)) {
	                                        idx = this.editIndex.clone();
	                                    }
	                                }
	                                if (!CellIndex_1.CellIndex.areEquals(idx, this.editIndex)) {
	                                    activeTool.setFocused(idx, true);
	                                }
	                                return true;
	                            }
	                        }
	                    }
	                }
	                catch (err) {
	                    if (err instanceof Validation.ValidationError) {
	                        throw err;
	                    }
	                    return true;
	                    // 오류가 나도. 정상처리하도록 한다.
	                }
	            }
	            else { // key down
	                if (this._dispatchKeyDown(e.keyCode, ctrl, e.shiftKey, e.altKey)) {
	                    if (e.preventDefault) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    }
	                    return true;
	                }
	            }
	            return false;
	        }
	        finally {
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    CellEditor.Unselected = {};
	    CellEditor.InvalidFormat = {};
	    return CellEditor;
	}(EventAware_1.EventAware));
	exports.CellEditor = CellEditor;
	var DefaultDefinitions = function () {
	    return {
	        "9": new RegExp("[0-9 ]"),
	        "0": new RegExp("[0-9]"),
	        "a": new RegExp("[A-Za-z]"),
	        "*": new RegExp("[A-Za-z0-9]")
	    };
	};
	var EditMask = /** @class */ (function (_super) {
	    __extends(EditMask, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function EditMask(editor, options) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._includedFormat = false;
	        _this._showInvalidFormatMessage = true;
	        _this._overwrite = false;
	        _this._allowEmpty = false; // 공백이 허용되지 않는 mask이지만 입력값이 없을때는 허용
	        _this._restrictNull = false;
	        _this._definitions = DefaultDefinitions();
	        _this._tests = null;
	        _this._editor = editor;
	        return _this;
	    }
	    EditMask.prototype.dispose = function () {
	        this._definitions = null;
	        this._tests = null;
	        this._editor["_editor"] && (this._editor["_editor"].onclick = null);
	        this._editor = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EditMask.prototype, "includedFormat", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** includedFormat */
	        get: function () {
	            return this._includedFormat;
	        },
	        set: function (value) {
	            if (value != this._includedFormat) {
	                this._includedFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "placeHolder", {
	        /** placeHolder */
	        get: function () {
	            return this._placeHolder;
	        },
	        set: function (value) {
	            if (value != this._placeHolder) {
	                this._placeHolder = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "editMask", {
	        /** editMask */
	        get: function () {
	            return this._editMask;
	        },
	        set: function (value) {
	            if (value != this._editMask) {
	                this._editMask = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "definitions", {
	        /** definitions */
	        get: function () {
	            return this._definitions;
	        },
	        set: function (value) {
	            if (value != this._definitions) {
	                this._definitions = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "invalidFormatMessage", {
	        /** invalidFormatMessage */
	        get: function () {
	            return this._invalidFormatMessage;
	        },
	        set: function (value) {
	            if (value != this._invalidFormatMessage) {
	                this._invalidFormatMessage = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "showInvalidFormatMessage", {
	        /** showInvalidFormatMessage */
	        get: function () {
	            return this._showInvalidFormatMessage;
	        },
	        set: function (value) {
	            if (value != this._showInvalidFormatMessage) {
	                this._showInvalidFormatMessage = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "overWrite", {
	        /** overWrite */
	        get: function () {
	            return this._overwrite;
	        },
	        set: function (value) {
	            if (value != this._overwrite) {
	                this._overwrite = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "allowEmpty", {
	        /** allowEmpty */
	        get: function () {
	            return this._allowEmpty;
	        },
	        set: function (value) {
	            if (value != this._allowEmpty) {
	                this._allowEmpty = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditMask.prototype, "restrictNull", {
	        /** restrictNull */
	        get: function () {
	            return this._restrictNull;
	        },
	        set: function (value) {
	            if (value != this._restrictNull) {
	                this._restrictNull = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    EditMask.prototype.clickHandler = function (event) {
	        if (!this.restrictNull) {
	            return;
	        }
	        this._moveCaret();
	    };
	    EditMask.prototype.clearBuffer = function (begin, end) {
	        begin = arguments.length > 0 ? begin : 0;
	        end = arguments.length > 1 ? end : this._tests.length;
	        for (var i = begin; i < end; i++) {
	            this._buffer[i] = this.$_getPlaceHolder(i);
	            this._defBuffer[i] = "";
	        }
	    };
	    EditMask.prototype.writeBuffer = function (value, isPaste) {
	        if (isPaste === void 0) { isPaste = false; }
	        if (value) {
	            isPaste && this.clearBuffer();
	            for (var i = 0, j = 0, cnt = this._tests.length; i < cnt; i++) {
	                if (this._tests[i] && (this._tests[i] instanceof RegExp)) {
	                    var c = void 0;
	                    while ((c = value[j++])) {
	                        if (this._tests[i].test(c)) {
	                            this._buffer[i] = c;
	                            this._defBuffer[i] = c;
	                            break;
	                        }
	                    }
	                }
	            }
	        }
	        return this._buffer && this._buffer.join("");
	    };
	    EditMask.prototype.getStripValue = function () {
	        var ret = [];
	        var buf = [];
	        var allowEmpty = this.allowEmpty;
	        if (this._defBuffer.join("") == "") {
	            return null;
	        }
	        if (this.includedFormat) {
	            for (var i = 0, cnt = this._buffer.length; i < cnt; i++) {
	                var c = this._buffer[i];
	                if (!this._tests[i] || this._tests[i].test(c)) {
	                    ret.push(c);
	                }
	                else if (c == this.$_getPlaceHolder(i) && this._tests[i].test(" ")) {
	                    ret.push(" ");
	                }
	            }
	        }
	        else {
	            for (var i = 0, cnt = this._buffer.length; i < cnt; i++) {
	                if (this._tests[i] && this._tests[i] instanceof RegExp && this._tests[i].test(this._buffer[i])) {
	                    buf.length > 0 && (ret = ret.concat(buf), buf = []);
	                    ret.push(this._buffer[i]);
	                }
	                else if (this._tests[i] && typeof this._tests[i] == "function") {
	                    buf.length > 0 && (ret = ret.concat(buf), buf = []);
	                    ret.push(this._buffer[i]);
	                }
	            }
	        }
	        return ret.join("");
	    };
	    EditMask.prototype.setOptions = function (options) {
	        if (typeof options == "string") { // mask:"9999-99-99"등과 같이 문자열로 입력한 경우 사용한다.
	            this.$_parseMask(options);
	        }
	        else {
	            // 순서가 문제가 되는 경우가 있어서 하나씩 지정한다. (defineClass로 만들지 않음.)
	            options.definitions && this.$_parseDefinitions(options.definitions);
	            options.placeHolder && (this._placeHolder = options.placeHolder);
	            options.editMask && this.$_parseMask(options.editMask);
	            options.includedFormat && (this._includedFormat = options.includedFormat);
	            options.invalidFormatMessage && (this._invalidFormatMessage = options.invalidFormatMessage);
	            options.showInvlidFormatMessage && (this._showInvalidFormatMessage = options.showInvalidFormatMessage);
	            options.overWrite != null && (this._overwrite = !!options.overWrite);
	            options.allowEmpty != null && (this._allowEmpty = !!options.allowEmpty);
	            options.restrictNull !== undefined && (this._restrictNull = !!options.restrictNull);
	            if (this._restrictNull) {
	                var editor = this._editor["_editor"];
	                !editor.onclick && (editor.onclick = this.clickHandler.bind(this));
	            }
	        }
	    };
	    EditMask.prototype.checkValid = function (s) {
	        var allowEmpty = this.allowEmpty;
	        var checkData = [];
	        if (allowEmpty) {
	            for (var i = 0, cnt = this._tests.length; i < cnt; i++) {
	                checkData[i] = this.$_getPlaceHolder(i);
	            }
	            if (checkData.join("") === this._buffer.join("")) {
	                return true;
	            }
	        }
	        for (var i = 0, cnt = this._tests.length; i < cnt; i++) {
	            var c = this._buffer[i]; // == this.$_getPlaceHolder(i) ? " ": this._buffer[i];
	            if (this._tests[i] && !this._tests[i].test(c)) {
	                if (c == this.$_getPlaceHolder(i) && !this._tests[i].test(" ")) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EditMask.prototype._changed = function () {
	    };
	    EditMask.prototype._moveCaret = function (start, end) {
	        var editor = this._editor["_editor"];
	        start = arguments.length > 0 ? start : editor["selectionStart"];
	        end = arguments.length > 1 ? end : editor["selectionEnd"];
	        var st = start, ed = end;
	        for (var i = start - 1; i >= 0; i--) {
	            if (this._tests[i] && this._tests[i].test(this._buffer[i])) {
	                st = i + 1;
	                break;
	            }
	            else {
	                st = i;
	            }
	        }
	        for (var i = end - 1; i >= 0; i--) {
	            if (this._tests[i] && this._tests[i].test(this._buffer[i])) {
	                ed = i + 1;
	                break;
	            }
	            else {
	                ed = i;
	            }
	        }
	        if (st != start || ed != end) {
	            for (var i = st; i <= start; i++) {
	                if (this._tests[i]) {
	                    break;
	                }
	                else {
	                    st++;
	                }
	            }
	            for (var i = ed; i <= end; i++) {
	                if (this._tests[i]) {
	                    break;
	                }
	                else {
	                    ed++;
	                }
	            }
	            editor["setSelectionRange"](st, ed);
	            return true;
	        }
	        return st != start || ed != end;
	    };
	    EditMask.prototype.$_setCaret = function (start, end) {
	        var editor = this._editor["_editor"];
	        // clearTimeout(this._caretTimer);
	        // this._caretTimer = setTimeout(function() {
	        editor["setSelectionRange"](start, end);
	        // }, 0);
	    };
	    /* 사용자가 지정한 format function은 아직 사용할수 없다. */
	    EditMask.prototype.$_parseDefinitions = function (defs) {
	        for (var def in defs) {
	            typeof defs[def] === "string" && (this._definitions[def] = new RegExp(defs[def]));
	        }
	    };
	    EditMask.prototype.$_parseMask = function (mask) {
	        var tests = this._tests = [];
	        var defs = this._definitions;
	        var am = mask.split("");
	        this._editMask = mask;
	        this._buffer = [];
	        for (var i = 0, cnt = am.length; i < cnt; i++) {
	            tests.push(defs[am[i]]);
	            this._buffer.push(defs[am[i]] ? this.$_getPlaceHolder(i) : am[i]);
	        }
	    };
	    EditMask.prototype.$_getPlaceHolder = function (n) {
	        if (this._placeHolder && this._placeHolder.length > n) {
	            return this._placeHolder[n];
	        }
	        return this._tests[n] ? "_" : (this._editMask && this._editMask.length > n ? this._editMask[n] : "_");
	    };
	    EditMask.prototype.$_seekPrev = function (pos) {
	        for (; --pos >= 0 && !this._tests[pos];)
	            ;
	        return pos;
	    };
	    EditMask.prototype.$_seekNext = function (pos) {
	        for (; ++pos < this._editMask.length && !this._tests[pos];)
	            ;
	        return pos;
	    };
	    EditMask.prototype.$_shiftL = function (begin, end) {
	        var len = this._editMask.length;
	        var buffer = this._buffer;
	        if (begin >= 0) {
	            for (var i = begin, j = this.$_seekNext(end); len > i; i++) {
	                if (this._tests[i]) {
	                    if (!(len > j && this._tests[i].test(buffer[j])))
	                        break;
	                    buffer[i] = buffer[j];
	                    this._defBuffer[i] = this._defBuffer[j];
	                    buffer[j] = this.$_getPlaceHolder(j);
	                    this._defBuffer[j] = "";
	                    j = this.$_seekNext(j);
	                }
	            }
	        }
	    };
	    EditMask.prototype.$_shiftR = function (begin) {
	        var j;
	        var t;
	        var len = this._editMask.length;
	        var buffer = this._buffer;
	        for (var i = begin, c_1 = this.$_getPlaceHolder(begin); len > i; i++)
	            if (this._tests[i]) {
	                if (j = this.$_seekNext(i), t = buffer[i], this._defBuffer[i] = c_1, buffer[i] = c_1, !(len > j && this._tests[j].test(t))) {
	                    break;
	                }
	                c_1 = t;
	            }
	    };
	    return EditMask;
	}(Base_1.Base));
	exports.EditMask = EditMask;
	var TextCellEditor = /** @class */ (function (_super) {
	    __extends(TextCellEditor, _super);
	    function TextCellEditor() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._maxLength = 0;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._borderable = true;
	        _this._modified = false;
	        return _this;
	    }
	    Object.defineProperty(TextCellEditor.prototype, "maxLength", {
	        //-------------------------------------------------------------------------
	        // constructor
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** maxLength */
	        get: function () {
	            return this._maxLength;
	        },
	        set: function (value) {
	            if (value != this._maxLength) {
	                this._maxLength = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TextCellEditor.prototype, "mask", {
	        /** mask */
	        get: function () {
	            return this._mask;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TextCellEditor.prototype, "textAlignment", {
	        /** textAlignment */
	        get: function () {
	            return this._textAlignment;
	        },
	        set: function (value) {
	            if (value != this._textAlignment) {
	                this._textAlignment = value;
	                this.$_resetStyle();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TextCellEditor.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._editor["value"];
	        },
	        set: function (value) {
	            if (this._editor && (value != this._editor["value"] || value != this._controller.getData(this._editIndex))) {
	                this._editor["value"] = value;
	                this._doChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TextCellEditor.prototype.setMask = function (options) {
	        this._mask = null;
	        if (options)
	            this._mask = new EditMask(this, options);
	    };
	    TextCellEditor.prototype.setAlignment = function (align) {
	        this._container.style.textAlign = "left";
	    };
	    Object.defineProperty(TextCellEditor.prototype, "readonly", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        set: function (value) {
	            this._editor["readOnly"] = this._readOnly = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TextCellEditor.prototype.isEdited = function () {
	        return this._modified;
	    };
	    TextCellEditor.prototype._createContainer = function () {
	        var elt = document.createElement("div");
	        var css = elt.style;
	        elt.spellcheck = false;
	        elt.setAttribute("aria-hidden", "true");
	        css.position = "absolute";
	        css.zIndex = "2000";
	        css.boxSizing = "border-box";
	        css.overflow = "hidden";
	        css.border = "none";
	        css.width = "0px";
	        css.height = "0px";
	        css.padding = "0px";
	        css.margin = "0px";
	        css.backgroundColor = "#fff";
	        css.border = "none";
	        css.boxShadow = "rgba(0, 0, 0, 0.4) 1px 2px 5px";
	        css.resize = "none";
	        /*
	         elt["spellCheck"] = false;
	         elt["aria-hidden"] = false;
	         elt.style["outline"] = "none";
	         elt.style["aria-hidden"] = false;
	         elt.style["max-width"] = "none";
	         elt.style["max-height"] = "none";
	         elt.style["background-color"] = "rgb(255, 255, 255)";
	         elt.style["box-shadow"] = "rgba(0, 0, 0, 0.4) 1px 2px 5px";
	         elt.style["color"] = "rgb(68, 84, 106)";
	         elt.style["word-wrap"] = "break-word";
	         */
	        return elt;
	    };
	    TextCellEditor.prototype._createEditor = function (parent) {
	        this._container = this._createContainer();
	        parent.appendChild(this._container);
	        var elt = document.createElement("input");
	        var css = elt.style;
	        elt.setAttribute("aria-hidden", "true");
	        elt.autocomplete = "off";
	        css.position = "absolute";
	        css.boxSizing = "border-box";
	        css.margin = "0px";
	        css.padding = "0px";
	        css.fontFamily = $$_EDITOR_FONT_NAME;
	        css.fontStyle = "normal";
	        css.fontVariant = "normal";
	        css.fontWeight = "normal";
	        css.fontSize = $$_EDITOR_FONT_SIZE;
	        css.lineHeight = "normal";
	        css.wordWrap = "normal";
	        css.overflow = "hidden";
	        css.resize = "none";
	        css.border = "none";
	        css.outline = "none";
	        css.textAlign = "left";
	        css.color = "rgb(68, 84, 106)";
	        css.left = "0px";
	        css.top = "0px";
	        css.width = "100%";
	        css.height = "100%";
	        css.imeMode = "auto";
	        css.cursor = "text";
	        css["-webkit-user-modify"] = "read-write-plaintext-only";
	        css["white-space"] = "pre";
	        css["-webkit-transform"] = "translateZ(0)";
	        elt.tabIndex = -1;
	        elt.onkeydown = this._keyDownHandler.bind(this);
	        elt.onkeyup = this._keyUpHandler.bind(this);
	        elt.onkeypress = this._keyPressHandler.bind(this);
	        elt.oninput = this._inputHandler.bind(this);
	        elt.onpaste = this._pasteHandler.bind(this);
	        elt.oncopy = this._copyHandler.bind(this);
	        elt.addEventListener("compositionstart", this._compositionstartHandler.bind(this));
	        elt.addEventListener("compositionupdate", this._compositionupdateHandler.bind(this));
	        elt.addEventListener("compositionend", this._compositionendHandler.bind(this));
	        elt.addEventListener("text", this._textHandler.bind(this));
	        this._container.appendChild(elt);
	        this._defMaxLength = elt.maxLength > 0 ? elt.maxLength : 1000000; // ff에서는 기본값이 -1
	        return elt;
	    };
	    TextCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._editor["readOnly"] = this._readOnly = false;
	        this._maxLength = 0;
	        this._mask && (this._mask.dispose(), this._mask = null);
	        this.textAlignment = Types.Alignment.NEAR;
	    };
	    TextCellEditor.prototype._selectAll = function () {
	        this._editor["select"]();
	    };
	    TextCellEditor.prototype._doBeginEdit = function () {
	        this._modified = false;
	        if (this.visible) { // 당연히 visible이어야 한다.
	            if (!this._editor["value"]) {
	                this._editor["setSelectionRange"](0, 0);
	            }
	        }
	        return true;
	    };
	    TextCellEditor.prototype._doEndEdit = function () {
	        this._modified = false;
	    };
	    TextCellEditor.prototype.caretToLast = function () {
	        var len = Utils_1.Utils.toStr(this._editor["value"]).length;
	        this._editor["setSelectionRange"](len, len);
	    };
	    TextCellEditor.prototype._doCommit = function () {
	    };
	    TextCellEditor.prototype.setEditIndex = function (value) {
	        _super.prototype.setEditIndex.call(this, value);
	        var grid = value && value.grid;
	        /*
	         m_editor.editable = !readOnly;
	         m_editor.maxChars = maxLength;
	         m_editor.textCase = textCase == TextInputCase.Default ? index.dataColumn.textInputCase : textCase;
	         setEditFont(grid, m_editor);
	         */
	        var vcolumn = value.valueColumn;
	        if (vcolumn) {
	            var tcase = this._textCase == Types.TextInputCase.DEFAULT ? vcolumn.textInputCase : this._textCase;
	            switch (tcase) {
	                case Types.TextInputCase.LOWER:
	                    this._editor.style.textTransform = "lowercase";
	                    break;
	                case Types.TextInputCase.UPPER:
	                    this._editor.style.textTransform = "uppercase";
	                    break;
	                default:
	                    this._editor.style.textTransform = "none";
	                    break;
	            }
	            this._editor["maxLength"] = this._maxLength > 0 ? this._maxLength : this._defMaxLength;
	        }
	    };
	    TextCellEditor.prototype.setEditValue = function (value) {
	        _super.prototype.setEditValue.call(this, value);
	        this._editor["value"] = this._valToStr(value);
	    };
	    TextCellEditor.prototype.setCellEditValue = function (value, dropdown) {
	        _super.prototype.setCellEditValue.call(this, value, dropdown);
	    };
	    TextCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        var fld = this._editField();
	        var v = this._emptyValue;
	        try {
	            var t = fld.dataType;
	            var s = this._editor["value"];
	            if (t == Types.ValueType.TEXT) {
	                if (!s && this._emptyValue !== undefined) {
	                    s = this._emptyValue;
	                }
	                v = this._strToVal(s);
	                if (v === undefined) {
	                    v = "";
	                }
	            }
	            else {
	                if (!Utils_1.Utils.isWhiteSpace(s)) {
	                    v = this._strToVal(s);
	                }
	                else if (this._emptyValue !== undefined) {
	                    v = this._strToVal(this._emptyValue);
	                }
	                else {
	                    switch (t) {
	                        case Types.ValueType.NUMBER:
	                            if (isNaN(this._oldValue)) {
	                                v = NaN;
	                            }
	                            break;
	                        case Types.ValueType.DATETIME:
	                            if (this._oldValue === null) {
	                                v = null;
	                            }
	                            break;
	                        case Types.ValueType.BOOLEAN:
	                            break;
	                    }
	                }
	            }
	            if (v === CellEditor.InvalidFormat)
	                return v;
	            v = fld.readValue(v);
	        }
	        catch (e) {
	            if (throwError)
	                throw e;
	            v = this._emptyValue;
	        }
	        return v;
	    };
	    TextCellEditor.prototype.getEditText = function () {
	        return this._editor["value"];
	    };
	    TextCellEditor.prototype.setVisible = function (value, force) {
	        _super.prototype.setVisible.call(this, value, force);
	        if (value && this._borderable) {
	            //var editorBorder = this._grid.displayOptions.focusActivePen.css() : this._editorBorder;
	            var editorBorder = this._editorBorder;
	            this._container.style["border"] = editorBorder;
	            this._container.style["box-shadow"] = this._editorShadow;
	        }
	        else {
	            this._container.style["border"] = "none";
	            this._container.style["box-shadow"] = "none";
	        }
	        if (Utils_1.Utils.isWinSafari) {
	            try {
	                this._editor.style["width"] = this._container.getBoundingClientRect().width + "px";
	                this._container.style.cssText = this._container.style.cssText.replace(/border-width: initial; border-color: initial; /g, "");
	            }
	            catch (err) { }
	            setTimeout(function () { this._editor.style["width"] = "100%"; }.bind(this), 0);
	        }
	    };
	    TextCellEditor.prototype._doChanged = function () {
	        this._requestStart();
	        if (this._started && !this._editor["readOnly"]) {
	            this._modified = true;
	            this._dispatchChange();
	        }
	    };
	    TextCellEditor.prototype.setBounds = function (x, y, w, h) {
	        Utils_1.Utils.setBounds(this._container, x, y, w, h);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TextCellEditor.prototype._keyDownHandler = function (e) {
	        var editor = this._editor;
	        var k = e.keyCode;
	        if ((Utils_1.Utils.isIE || Utils_1.Utils.isEdge) && !this.visible && e.ctrlKey && k == Types.Keys.Z) {
	            return false;
	        }
	        if ((Utils_1.Utils.isIE) && e.ctrlKey && e.keyCode == Types.Keys.V && editor.readOnly) {
	            e.preventDefault();
	            this._pasteHandler(e);
	            return false;
	        }
	        this._inputValue = editor.value;
	        switch (k) {
	            case Types.Keys.BACK:
	            case Types.Keys.DELETE:
	                if (!this._sendToParent(e)) {
	                    if (!this.visible && this._requestStart()) {
	                        if (!editor.readOnly && this._controller["_getData"](this._editIndex)) {
	                            if (this._mask) {
	                                e.preventDefault();
	                                e.stopImmediatePropagation();
	                                this._mask["keydown"](e);
	                                this._doChanged(); // 일반 editor에서는 _inputHandler 에서 doChanged가 발생된다.
	                            }
	                            else {
	                                this.text = "";
	                            }
	                        }
	                    }
	                    else if (this._mask) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                        this._mask["keydown"](e);
	                        this._doChanged(); // 일반 editor에서는 _inputHandler 에서 doChanged가 발생된다.
	                    }
	                    if (k === Types.Keys.BACK && editor.readOnly) { // readonly일때 BackSpace이면 이전페이지가 실행되는것을 막아준다.
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    }
	                }
	                break;
	            case Types.Keys.TAB:
	                return !this._sendToParent(e);
	            case Types.Keys.LEFT:
	                if (!this.visible || (editor.selectionEnd == 0 && editor.selectionEnd == editor.selectionStart)) {
	                    return !this._sendToParent(e);
	                }
	                if (editor.readOnly && Utils_1.Utils.isChrome) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.RIGHT:
	                if (!this.visible || (editor.selectionEnd == editor.value.length && editor.selectionEnd == editor.selectionStart)) {
	                    return !this._sendToParent(e);
	                }
	                if (editor.readOnly && Utils_1.Utils.isChrome) {
	                    return !this._sendToParent(e);
	                }
	                if (!(e.altKey || e.ctrlKey || e.shiftKey) && this._mask && this._mask.restrictNull) {
	                    var start = editor.selectionStart;
	                    if (this._mask["_moveCaret"](start + 1, start + 1)) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    }
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.HOME:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.END:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                if (this._mask && this._mask.restrictNull) {
	                    var end = editor.value ? editor.value.length - 1 : 0;
	                    if (this._mask["_moveCaret"](end, end)) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                    } // null이 제한되면.
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.SPACE:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.UP:
	            case Types.Keys.PAGEUP:
	            case Types.Keys.DOWN:
	            case Types.Keys.PAGEDOWN:
	            case Types.Keys.ENTER:
	            case Types.Keys.ESCAPE:
	            case Types.Keys.F2:
	            case Types.Keys.INSERT:
	                e.preventDefault();
	                e.stopImmediatePropagation();
	                return !this._sendToParent(e);
	            case 229: // ime 변환 키 등...
	                this._sendToParent(e);
	                break;
	            default:
	                return !this._sendToParent(e, null, true);
	        }
	        if (Utils_1.Utils.isFirefox) {
	            if (!e.ctrlKey && !e.altKey && (k == 0 || k >= 32) && (k < 0x70 || k > 0x82)) {
	                this._requestStart();
	            }
	        }
	        else if (Utils_1.Utils.isIE) ;
	        return true; // false를 return하면 chrome에서는 key 입력이 진행되지 않는다.
	    };
	    TextCellEditor.prototype._keyUpHandler = function (e) {
	        var key = e.keyCode;
	        if (key == Types.Keys.BACK || key == Types.Keys.DELETE) {
	            if (Utils_1.Utils.ieOld && this.visible && !this._editor["readOnly"] && this._editor["value"] != this._inputValue) {
	                this._doChanged();
	            }
	        }
	        switch (e.keyCode) {
	            case Types.Keys.LEFT:
	            case Types.Keys.RIGHT:
	            case Types.Keys.HOME:
	            case Types.Keys.END:
	            case Types.Keys.SPACE:
	                if (!this.visible) {
	                    this._sendToParent(e, 3);
	                }
	                break;
	            default:
	                this._sendToParent(e, 3);
	                break;
	        }
	    };
	    TextCellEditor.prototype._keyPressHandler = function (e) {
	        var k = e.which || e.keyCode;
	        this._sendToParent(e, 2);
	        if (Utils_1.Utils.isFirefox) {
	            // if (!e.ctrlKey && !e.altKey && (k == 0 || k >= 32) && (k < 0x70 || k > 0x82)) {
	            if (!e.ctrlKey && !e.altKey && (k == 0 || k >= 32)) {
	                if (!this._requestStart()) {
	                    e.preventDefault();
	                }
	                else if (this._mask) {
	                    this._mask["_pStart"] = e.target["selectionStart"];
	                    this._mask["keyPress"](e);
	                    this._doChanged();
	                    e.preventDefault();
	                }
	            }
	        }
	        else if (k >= 32) {
	            if (!this._requestStart()) {
	                e.preventDefault();
	            }
	            else {
	                if (this._mask) {
	                    this._mask["_pStart"] = e.target["selectionStart"];
	                    this._mask["keyPress"](e);
	                    this._doChanged();
	                    e.preventDefault();
	                }
	            }
	            // !this._requestStart() ? e.preventDefault() : null; 
	        }
	    };
	    TextCellEditor.prototype._textHandler = function () {
	        this._requestStart();
	    };
	    TextCellEditor.prototype._compositionstartHandler = function (e) {
	        //trace("########## COMPOSITION START: ");
	        this._composing = true;
	        this._requestStart();
	        if (this._started && !this._editor["readOnly"]) {
	            this._modified = true;
	            this._dispatchChange();
	            this._checkHangeul = true;
	        }
	    };
	    TextCellEditor.prototype._compositionendHandler = function () {
	        this._composing = false;
	    };
	    TextCellEditor.prototype._compositionupdateHandler = function () {
	        this._composing = true;
	    };
	    TextCellEditor.prototype._changeHandler = function (e) {
	        /*
	        if (this.isVisible() && !this._editor.readOnly) {
	            console.log("### EDITOR.VALUE = " + this._editor.value);
	        }
	        */
	    };
	    TextCellEditor.prototype._inputHandler = function (e) {
	        /* IE 10에서는 placeholder가 있는 경우 oninput event가 focusin, focusout시점에 발생한다. 입력된 값을 확인해서 입력이 아니면 return*/
	        if (Utils_1.Utils.ieTen) {
	            if (this._editor["value"] == $$_EMPTY_TEXT_VALUE) {
	                return;
	            }
	            if (((this._inputValue == undefined || this._inputValue == null) ? "" : this._inputValue) === this._editor["value"]) {
	                return;
	            }
	        }
	        this._mask && this._mask["input"](e);
	        this._doChanged();
	    };
	    TextCellEditor.prototype._pasteHandler = function (e) {
	        if (this.visible) {
	            this._doChanged();
	            return;
	        }
	        e.preventDefault();
	        var options = this._grid.pasteOptions;
	        try {
	            var text = void 0;
	            var clp = (e["originalEvent"] || e).clipboardData;
	            if (clp) {
	                text = clp.getData('text/plain');
	            }
	            else {
	                text = window["clipboardData"].getData("text");
	            }
	            if (text != null) {
	                this._grid.pasteFromClipboard(text, e);
	            }
	        }
	        catch (err) {
	            if (err instanceof Validation.ValidationError) {
	                if (options.throwValidationError) {
	                    throw err;
	                }
	            }
	            else if (err instanceof Validation.AbortError) {
	                alert(err.message);
	            }
	            else if (err) {
	                throw err;
	            }
	        }
	    };
	    TextCellEditor.prototype._copyHandler = function (e) {
	        if (!this.editing) {
	            var data = this._grid.copyToClipboard();
	            if (data != null) {
	                if (window["clipboardData"]) {
	                    window["clipboardData"].setData("Text", data);
	                }
	                else {
	                    e["clipboardData"].setData('text/plain', data);
	                }
	            }
	            return e.preventDefault();
	        }
	    };
	    TextCellEditor.prototype.$_resetStyle = function () {
	        var align = "left";
	        switch (this._textAlignment) {
	            case Types.Alignment.FAR:
	                align = "right";
	                break;
	            case Types.Alignment.CENTER:
	                align = "center";
	                break;
	        }
	        this._editor.style["text-align"] = align;
	    };
	    return TextCellEditor;
	}(CellEditor));
	exports.TextCellEditor = TextCellEditor;
	var LineCellEditor = /** @class */ (function (_super) {
	    __extends(LineCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LineCellEditor(grid, parentElement) {
	        return _super.call(this, grid, parentElement) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    LineCellEditor.prototype._createEditor = function (parent) {
	        var editor = _super.prototype._createEditor.call(this, parent);
	        editor.tabIndex = Utils_1.Utils.isMobile ? -1 : 0;
	        return editor;
	    };
	    return LineCellEditor;
	}(TextCellEditor));
	exports.LineCellEditor = LineCellEditor;
	var PasswordCellEditor = /** @class */ (function (_super) {
	    __extends(PasswordCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function PasswordCellEditor(grid, parentElement) {
	        return _super.call(this, grid, parentElement) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    PasswordCellEditor.prototype._createEditor = function (parent) {
	        var editor = _super.prototype._createEditor.call(this, parent);
	        editor.setAttribute("type", "password");
	        editor.tabIndex = Utils_1.Utils.isMobile ? -1 : 0;
	        return editor;
	    };
	    return PasswordCellEditor;
	}(TextCellEditor));
	exports.PasswordCellEditor = PasswordCellEditor;
	var MultiLineCellEditor = /** @class */ (function (_super) {
	    __extends(MultiLineCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MultiLineCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._maxLength = 0;
	        _this._minHeight = 0;
	        _this._altEnterNewLine = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._modified = false;
	        return _this;
	    }
	    Object.defineProperty(MultiLineCellEditor.prototype, "maxLength", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** maxLength */
	        get: function () {
	            return this._maxLength;
	        },
	        set: function (value) {
	            if (value != this._maxLength) {
	                this._maxLength = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiLineCellEditor.prototype, "minHeight", {
	        /** minHeight */
	        get: function () {
	            return this._minHeight;
	        },
	        set: function (value) {
	            if (value != this._minHeight) {
	                this._minHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiLineCellEditor.prototype, "altEnterNewLine", {
	        /** altEnterNewLine */
	        get: function () {
	            return this._altEnterNewLine;
	        },
	        set: function (value) {
	            if (value != this._altEnterNewLine) {
	                this._altEnterNewLine = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiLineCellEditor.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._editor["value"];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    MultiLineCellEditor.prototype.setAlignment = function (align) {
	        this._container.style.textAlign = "left";
	    };
	    MultiLineCellEditor.prototype.isEdited = function () {
	        return this._modified;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    MultiLineCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._maxLength = 0;
	        this._minHeight = 0;
	        this.setReadOnly(false);
	    };
	    MultiLineCellEditor.prototype.setReadOnly = function (value) {
	        this._editor["readOnly"] = this._readOnly = value;
	    };
	    MultiLineCellEditor.prototype._selectAll = function () {
	        this._editor["select"]();
	    };
	    MultiLineCellEditor.prototype._doBeginEdit = function () {
	        this._modified = false;
	        if (this.visible) { // 당연히 visible이어야 한다.
	            if (!this._editor["value"]) {
	                this._editor["setSelectionRange"](0, 0);
	            }
	        }
	        return true;
	    };
	    MultiLineCellEditor.prototype._doEndEdit = function () {
	        this._modified = false;
	    };
	    MultiLineCellEditor.prototype._doCommit = function () {
	    };
	    MultiLineCellEditor.prototype.setEditIndex = function (index) {
	        _super.prototype.setEditIndex.call(this, index);
	        var grid = index && index.grid;
	        /*
	         m_editor.editable = !readOnly;
	         m_editor.maxChars = maxLength;
	         m_editor.textCase = textCase == TextInputCase.Default ? index.dataColumn.textInputCase : textCase;
	         setEditFont(grid, m_editor);
	         */
	        var tcase = this._textCase == Types.TextInputCase.DEFAULT ? index.dataColumn.textInputCase : this._textCase;
	        switch (tcase) {
	            case Types.TextInputCase.LOWER:
	                this._editor.style.textTransform = "lowercase";
	                break;
	            case Types.TextInputCase.UPPER:
	                this._editor.style.textTransform = "uppercase";
	                break;
	            default:
	                this._editor.style.textTransform = "none";
	                break;
	        }
	        this._editor["maxLength"] = this._maxLength > 0 ? this._maxLength : 2000000000;
	    };
	    MultiLineCellEditor.prototype.setEditValue = function (value) {
	        _super.prototype.setEditValue.call(this, value);
	        this._editor["value"] = this._valToStr(value);
	    };
	    MultiLineCellEditor.prototype.setCellEditValue = function (value) {
	        //super.setCellEditValue(value);
	    };
	    MultiLineCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        var fld = this._editField();
	        var v = fld.nullValue;
	        try {
	            var t = fld.dataType;
	            var s = this._editor["value"];
	            if (t == Types.ValueType.TEXT) {
	                if (!s && this._emptyValue !== undefined) {
	                    s = this._emptyValue;
	                }
	                v = this._strToVal(s);
	                if (v === undefined) {
	                    v = "";
	                }
	            }
	            else {
	                if (!Utils_1.Utils.isWhiteSpace(s)) {
	                    v = this._strToVal(s);
	                }
	                else if (this._emptyValue !== undefined) {
	                    v = this._strToVal(this._emptyValue);
	                }
	                else {
	                    switch (t) {
	                        case Types.ValueType.NUMBER:
	                            if (isNaN(this._oldValue)) {
	                                v = NaN;
	                            }
	                            break;
	                        case Types.ValueType.DATETIME:
	                            if (this._oldValue === null) {
	                                v = null;
	                            }
	                            break;
	                        case Types.ValueType.BOOLEAN:
	                            break;
	                    }
	                }
	            }
	            v = fld.readValue(v);
	        }
	        catch (e) {
	            if (throwError)
	                throw e;
	        }
	        return v;
	    };
	    MultiLineCellEditor.prototype.getEditText = function () {
	        return this._editor["value"];
	    };
	    MultiLineCellEditor.prototype.setVisible = function (value, force) {
	        _super.prototype.setVisible.call(this, value, force);
	        // const options = this._grid.displayOptions;
	        // if (value) {
	        // 	var editorBorder = options ? this._displayOptions._focusActivePen.css() : this._editorBorder;
	        // 	this._container.style["border"] = editorBorder;
	        // 	this._container.style["box-shadow"] = this._editorShadow;
	        // } else {
	        // 	this._container.style["border"] = "none";
	        // 	this._container.style["box-shadow"] = "none";
	        // }
	        // if (_isWinSafari) {
	        // 	try {
	        // 		this._editor.style["width"] = this._container.getBoundingClientRect().width+"px";
	        // 		this._container.style.cssText = this._container.style.cssText.replace(/border-width: initial; border-color: initial; /g,"");			
	        // 	} catch(err) {}
	        // 	setTimeout(function() {this._editor.style["width"] = "100%";}.bind(this), 0);
	        // }
	    };
	    MultiLineCellEditor.prototype._doChanged = function () {
	        this._requestStart();
	        if (this._started && !this._editor["readOnly"]) {
	            this._modified = true;
	            this._dispatchChange();
	            this.$_resetBounds();
	        }
	    };
	    MultiLineCellEditor.prototype.$_resetBounds = function () {
	        var r = Utils_1.Utils.getClientRect(this._container);
	        var x = r["cx"];
	        var y = r["cy"];
	        var w = r.width; // Math.max(r.width, this._editor.scrollWidth + 4);
	        var h = Math.round(r.height); //Math.max(r.height, this._editor.scrollHeight + 4);
	        var empty = this._editor["value"] == $$_EMPTY_TEXT_VALUE;
	        if (!empty && this._editor.scrollWidth > w) {
	            w = this._editor.scrollWidth + 6;
	        }
	        if (!empty && this._editor.scrollHeight > h) {
	            h = this._editor.scrollHeight + 6;
	        }
	        var minHeight = isNaN(this._minHeight) ? 0 : this._minHeight;
	        if (minHeight > 0) {
	            h = Math.max(h, minHeight);
	        }
	        r = Utils_1.Utils.getClientRect(this._parentElement);
	        w = Math.min(r.width, w);
	        h = Math.min(r.height, h);
	        if (x + w > r.width) {
	            x = r.width - w;
	        }
	        if (y + h > r.height) {
	            y = r.height - h;
	        }
	        Utils_1.Utils.setBounds(this._container, Math.max(x, 0), Math.max(y, 0), w, h);
	    };
	    MultiLineCellEditor.prototype.$_createContainer = function () {
	        var elt = document.createElement("div");
	        var css = elt.style;
	        elt.spellcheck = false;
	        elt.setAttribute("aria-hidden", "true");
	        css.position = "absolute";
	        css.zIndex = "2000";
	        css.boxSizing = "border-box";
	        css.overflow = "hidden";
	        css.border = "none";
	        css.width = "0px";
	        css.height = "0px";
	        css.padding = "0px";
	        css.margin = "0px";
	        css.backgroundColor = "#fff";
	        css.border = "none";
	        css.boxShadow = "rgba(0, 0, 0, 0.4) 1px 2px 5px";
	        css.resize = "none";
	        /*
	         elt["spellCheck"] = false;
	         elt["aria-hidden"] = false;
	         elt.style["outline"] = "none";
	         elt.style["aria-hidden"] = false;
	         elt.style["max-width"] = "none";
	         elt.style["max-height"] = "none";
	         elt.style["background-color"] = "rgb(255, 255, 255)";
	         elt.style["box-shadow"] = "rgba(0, 0, 0, 0.4) 1px 2px 5px";
	         elt.style["color"] = "rgb(68, 84, 106)";
	         elt.style["word-wrap"] = "break-word";
	         */
	        return elt;
	    };
	    MultiLineCellEditor.prototype._createEditor = function (parent) {
	        this._container = this.$_createContainer();
	        parent.appendChild(this._container);
	        var elt = document.createElement("textarea");
	        var css = elt.style;
	        elt.autocomplete = "off";
	        elt.setAttribute("aria-hidden", "true");
	        // css.tabIndex = -1;
	        css.position = "absolute";
	        css.margin = "0px";
	        css.padding = "0px";
	        css.fontFamily = $$_EDITOR_FONT_NAME;
	        css.fontStyle = "normal";
	        css.fontVariant = "normal";
	        css.fontWeight = "normal";
	        css.fontSize = $$_EDITOR_FONT_SIZE;
	        css.lineHeight = "normal";
	        css.wordWrap = "normal";
	        css.overflow = "hidden";
	        css.resize = "none";
	        css.border = "none";
	        css.outline = "none";
	        css.textAlign = "left";
	        css.color = "rgb(68, 84, 106)";
	        css.left = "0px";
	        css.top = "0px";
	        css.width = "100%";
	        css.height = "100%";
	        css.imeMode = "auto";
	        css.cursor = "text";
	        css["-webkit-user-modify"] = "read-write-plaintext-only";
	        css["white-space"] = "pre";
	        css["-webkit-transform"] = "translateZ(0)";
	        elt.tabIndex = -1;
	        elt.onkeydown = this._keyDownHandler.bind(this);
	        elt.onkeyup = this._keyUpHandler.bind(this);
	        elt.onkeypress = this._keyPressHandler.bind(this);
	        elt.oninput = this._inputHandler.bind(this);
	        elt.onpaste = this._pasteHandler.bind(this);
	        elt.oncopy = this._copyHandler.bind(this);
	        elt.addEventListener("compositionstart", this._compositionstartHandler.bind(this));
	        elt.addEventListener("compositionupdate", this._compositionupdateHandler.bind(this));
	        elt.addEventListener("compositionend", this._compositionendHandler.bind(this));
	        elt.addEventListener("text", this._textHandler.bind(this));
	        this._container.appendChild(elt);
	        return elt;
	    };
	    MultiLineCellEditor.prototype.setBounds = function (x, y, w, h) {
	        Utils_1.Utils.setBounds(this._container, x, y, w, h);
	        if (x > Utils_1.Utils["$_INVISIBLE_EDIT_BOUNDS"].x) {
	            this.$_resetBounds();
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    MultiLineCellEditor.prototype._textHandler = function () {
	        this._requestStart();
	    };
	    MultiLineCellEditor.prototype._compositionstartHandler = function (e) {
	        //trace("########## COMPOSITION START: ");
	        this._composing = true;
	        this._requestStart();
	    };
	    MultiLineCellEditor.prototype._compositionendHandler = function () {
	        this._composing = false;
	    };
	    MultiLineCellEditor.prototype._compositionupdateHandler = function () {
	        this._composing = true;
	    };
	    MultiLineCellEditor.prototype._keyDownHandler = function (e) {
	        //trace("########## EDITOR KEYDOWN: " + e.keyCode);
	        var editor = this._editor;
	        var k = e.keyCode;
	        if ((Utils_1.Utils.isIE || Utils_1.Utils.isEdge) && !this.visible && e.ctrlKey && k == Types.Keys.Z) {
	            return false;
	        }
	        switch (k) {
	            case Types.Keys.BACK:
	            case Types.Keys.DELETE:
	                if (!this._sendToParent(e)) {
	                    if (!this.visible && this._requestStart()) {
	                        e.preventDefault();
	                        e.stopImmediatePropagation();
	                        if (!this._editor["readOnly"] && this._controller.getData(this._editIndex) /*this._editor.value*/) {
	                            this._editor["value"] = ""; // null이라고 하면 "NULL"이라 쓰는 브라우저가 있더라...
	                            this._modified = true;
	                            this._dispatchChange();
	                        }
	                    }
	                }
	                break;
	            case Types.Keys.TAB:
	                return !this._sendToParent(e);
	            case Types.Keys.LEFT:
	                if (!this.visible || (editor["selectionEnd"] == 0 && editor["selectionEnd"] == editor["selectionStart"])) {
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.RIGHT:
	                if (!this.visible || (editor["selectionEnd"] == editor["value"].length && editor["selectionEnd"] == editor["selectionStart"])) {
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.HOME:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.END:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.UP:
	            case Types.Keys.PAGEUP:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.DOWN:
	            case Types.Keys.PAGEDOWN:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                e.stopImmediatePropagation();
	                break;
	            case Types.Keys.SPACE:
	                if (!this.visible) {
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.ENTER:
	                if (this.altEnterNewLine) {
	                    if ((!e.altKey || !this.editing) && !e.shiftKey) {
	                        return !this._sendToParent(e);
	                    }
	                }
	                else {
	                    if ((!e.ctrlKey || !this.editing) && !e.shiftKey) {
	                        return !this._sendToParent(e);
	                    }
	                }
	                if (((this.altEnterNewLine && e.altKey) || (!this.altEnterNewLine && e.ctrlKey)) && !e.shiftKey) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    var s = editor["value"] === $$_EMPTY_TEXT_VALUE ? "" : editor["value"];
	                    if (s) {
	                        var i = editor["selectionEnd"];
	                        s = s.substring(0, i) + "\r\n" + s.substring(i);
	                        editor["value"] = s;
	                        editor["setSelectionRange"](i + 1, i + 1);
	                        this._doChanged();
	                    }
	                }
	                break;
	            case Types.Keys.ESCAPE:
	            case Types.Keys.F2:
	            case Types.Keys.INSERT:
	                e.preventDefault();
	                e.stopImmediatePropagation();
	                return !this._sendToParent(e);
	            case 229: // ime 변환 키 등...
	                break;
	            default:
	                this._sendToParent(e, null, true);
	                return true;
	        }
	        if (e.keyCode == 0) ;
	        return true;
	    };
	    MultiLineCellEditor.prototype._keyUpHandler = function (e) {
	        var key = e.keyCode;
	        if (key == Types.Keys.BACK || key == Types.Keys.DELETE) {
	            if (Utils_1.Utils.ieOld && this.visible && !this._editor["readOnly"] && this._editor["value"] != this._inputValue) {
	                this._doChanged();
	            }
	        }
	        switch (e.keyCode) {
	            case Types.Keys.LEFT:
	            case Types.Keys.RIGHT:
	            case Types.Keys.HOME:
	            case Types.Keys.END:
	            case Types.Keys.SPACE:
	                if (!this.visible) {
	                    this._sendToParent(e, 3);
	                }
	                break;
	            default:
	                this._sendToParent(e, 3);
	                break;
	        }
	    };
	    MultiLineCellEditor.prototype._keyPressHandler = function (e) {
	        if (e.keyCode >= 32) {
	            !this._requestStart() ? e.preventDefault() : null;
	        }
	    };
	    MultiLineCellEditor.prototype._inputHandler = function (e) {
	        this._doChanged();
	    };
	    MultiLineCellEditor.prototype._pasteHandler = function (e) {
	        if (this.visible) {
	            this._doChanged();
	            return;
	        }
	        e.preventDefault();
	        var options = this._grid.pasteOptions;
	        try {
	            var text = void 0;
	            var clp = (e["originalEvent"] || e).clipboardData;
	            if (clp) {
	                text = clp.getData('text/plain');
	            }
	            else {
	                text = window["clipboardData"].getData("text");
	            }
	            if (text != null) {
	                this._grid.pasteFromClipboard(text, e);
	            }
	        }
	        catch (err) {
	            if (err instanceof Validation.ValidationError) {
	                if (options.throwValidationError) {
	                    throw err;
	                }
	            }
	            else if (err instanceof Validation.AbortError) {
	                alert(err.message);
	            }
	            else if (err) {
	                throw err;
	            }
	        }
	    };
	    MultiLineCellEditor.prototype._copyHandler = function (e) {
	        if (!this.editing) {
	            var data = this._grid.copyToClipboard();
	            if (data != null) {
	                if (window["clipboardData"]) {
	                    window["clipboardData"].setData("Text", data);
	                }
	                else {
	                    e["clipboardData"].setData('text/plain', data);
	                }
	            }
	            return e.preventDefault();
	        }
	    };
	    return MultiLineCellEditor;
	}(CellEditor));
	exports.MultiLineCellEditor = MultiLineCellEditor;
	var $$$_DEC_SEP = ".";
	var $$$_GRP_SEP = ",";
	var $$_HANGUL_REG = /[ㄱ-ㅎㅏ-ㅣ가-힝]/g;
	var NumberCellEditor = /** @class */ (function (_super) {
	    __extends(NumberCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function NumberCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._positiveOnly = false;
	        _this._integerOnly = false;
	        _this._decSep = $$$_DEC_SEP;
	        _this._groupSep = $$$_GRP_SEP;
	        _this._addString = "000";
	        _this._maxLengthExceptComma = false;
	        _this._maxIntegerLength = 0;
	        _this._blankWhenSpace = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._regxAll = /[0-9]|,|\.|\-|\+|e|E/;
	        _this._regxPos = /[0-9]|,|\.|\+|e|E/;
	        _this._regxInt = /[0-9]|,|\+|\-/;
	        _this._regxPosInt = /[0-9]|,|\+/;
	        _this._regx = _this._regxAll;
	        _this._numValue = undefined;
	        _this._decLen = undefined;
	        _this._decimalFormatter = undefined;
	        _this._isMultiple = false;
	        _this._editor.style.imeMode = "disabled";
	        _this._editor.style["-webkit-ime-mode"] = "disabled";
	        _this._editor.style["-moz-ime-mode"] = "disabled";
	        _this._editor.style["-ms-ime-mode"] = "disabled";
	        return _this;
	    }
	    Object.defineProperty(NumberCellEditor.prototype, "positiveOnly", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** positiveOnly */
	        get: function () {
	            return this._positiveOnly;
	        },
	        set: function (value) {
	            if (value != this._positiveOnly) {
	                this._positiveOnly = value;
	                this.$_resetRistrict();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "integerOnly", {
	        /** integerOnly */
	        get: function () {
	            return this._integerOnly;
	        },
	        set: function (value) {
	            if (value != this._integerOnly) {
	                this._integerOnly = value;
	                this.$_resetRistrict();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "decSep", {
	        /** decSep */
	        get: function () {
	            return this._decSep;
	        },
	        set: function (value) {
	            if (value != this._decSep) {
	                this._decSep = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "groupSep", {
	        /** groupSep */
	        get: function () {
	            return this._groupSep;
	        },
	        set: function (value) {
	            if (value != this._groupSep) {
	                this._groupSep = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "editFormat", {
	        /** editFormat */
	        get: function () {
	            return this._editFormat;
	        },
	        set: function (value) {
	            if (value != this._editFormat) {
	                this._editFormat = value;
	                if (value) {
	                    var decFormatter = this._decimalFormatter = new DecimalFormatter_1.DecimalFormatter(value);
	                    if (decFormatter) {
	                        this._decSep = decFormatter.separator ? decFormatter.separator : $$$_DEC_SEP;
	                        this._groupSep = decFormatter.groupSep ? decFormatter.groupSep : $$$_GRP_SEP;
	                        this._decLen = Math.max(decFormatter.minDigits, decFormatter.maxDigits);
	                    }
	                }
	                else {
	                    this._decimalFormatter = undefined;
	                    this._decSep = $$$_DEC_SEP;
	                    this._groupSep = $$$_GRP_SEP;
	                    this._decLen = undefined;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "multipleChar", {
	        /** multipleChar */
	        get: function () {
	            return this._multipleChar;
	        },
	        set: function (value) {
	            if (value != this._multipleChar) {
	                this._multipleChar = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "addString", {
	        /** addString */
	        get: function () {
	            return this._addString;
	        },
	        set: function (value) {
	            if (value != this._addString) {
	                this._addString = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "maxLengthExceptComma", {
	        /** maxLengthExceptComma */
	        get: function () {
	            return this._maxLengthExceptComma;
	        },
	        set: function (value) {
	            if (value != this._maxLengthExceptComma) {
	                this._maxLengthExceptComma = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "maxIntegerLength", {
	        /** maxIntegerLength */
	        get: function () {
	            return this._maxIntegerLength;
	        },
	        set: function (value) {
	            if (value != this._maxIntegerLength) {
	                this._maxIntegerLength = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NumberCellEditor.prototype, "blankWhenSpace", {
	        /** blankWhenSpace */
	        get: function () {
	            return this._blankWhenSpace;
	        },
	        set: function (value) {
	            if (value != this._blankWhenSpace) {
	                this._blankWhenSpace = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    NumberCellEditor.prototype.setMask = function (options) {
	        this._mask = null;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    NumberCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._decSep = $$$_DEC_SEP;
	        this._groupSep = $$$_GRP_SEP;
	        this.editFormat = undefined;
	        this.positiveOnly = false;
	        this.integerOnly = false;
	    };
	    NumberCellEditor.prototype.setEditIndex = function (index) {
	        _super.prototype.setEditIndex.call(this, index);
	        this._editor["maxLength"] = (this.maxLengthExceptComma || this.maxLength <= 0) ? this._defMaxLength : this.maxLength;
	    };
	    NumberCellEditor.prototype._inputHandler = function (e) {
	        if (this._editFormat) {
	            var target = e.target;
	            this.$_editFormatting(e);
	        }
	        _super.prototype._inputHandler.call(this, e);
	    };
	    NumberCellEditor.prototype._keyPressHandler = function (e) {
	        if (Utils_1.Utils.isFirefox) {
	            if (e.ctrlKey || e.charCode === 0) {
	                _super.prototype._keyPressHandler.call(this, e);
	                return;
	            }
	        }
	        var chkLen = true;
	        var c = String.fromCharCode(e.keyCode || e.charCode);
	        if (!this._regx.test(c) || (e.target["value"] && e.target["value"].indexOf(this._decSep) >= 0 && c == this._decSep)) {
	            if (!this._multipleChar || c !== this._multipleChar) {
	                chkLen = false;
	                !(this.blankWhenSpace && c === " ") && e.preventDefault();
	            }
	        }
	        var ss = e.target["selectionStart"];
	        var se = e.target["selectionEnd"];
	        var value = e.target["value"];
	        var tsReg = new RegExp("\\" + this._groupSep, "g");
	        var s = value ? value.split("") : [];
	        s.splice(ss, se - ss, c === this._multipleChar ? this._addString : c);
	        s = s.join("").replace(tsReg, "");
	        if (this.maxLength > 0 && chkLen && this.maxLengthExceptComma && value && value !== $$_EMPTY_TEXT_VALUE) {
	            s.length > this.maxLength && e.preventDefault();
	        }
	        if (this._maxIntegerLength > 0 && c !== this._decSep) {
	            var int = Math.floor(this.$_strToNum(s));
	            if (!isNaN(int)) {
	                var len = Math.abs(int).toString().length;
	                this._maxIntegerLength < len && e.preventDefault();
	            }
	        }
	        this._isMultiple = c == this._multipleChar;
	        _super.prototype._keyPressHandler.call(this, e);
	    };
	    NumberCellEditor.prototype._keyDownHandler = function (e) {
	        var key = e.keyCode || e.charCode;
	        this._isMultiple = false;
	        if ((key === 8 || key === 46) && this.editing && this._editFormat) {
	            var elt = e.target;
	            var value = elt["value"];
	            var len = value.length;
	            var ary = value && value.split("");
	            var ss = elt["selectionStart"];
	            var se = elt["selectionEnd"];
	            if (ss !== se) {
	                return _super.prototype._keyDownHandler.call(this, e);
	            }
	            var c = value[key === 8 ? ss - 1 : ss];
	            if (c === this._groupSep || c === this._decSep) {
	                if (c === this._decSep && ss === (key === 8 ? value.length : value.length - 1)) ;
	                else {
	                    ary.splice(key === 8 ? ss - 2 : ss + 1, 1);
	                    elt["value"] = ary.join("");
	                    this.$_editFormatting(e);
	                    var value_1 = elt["value"];
	                    var aLen = len - (key === 8 ? value_1.length : len);
	                    elt["setSelectionRange"](ss - aLen, se - aLen);
	                    this._doChanged();
	                    e.preventDefault();
	                }
	            }
	        }
	        return _super.prototype._keyDownHandler.call(this, e);
	    };
	    NumberCellEditor.prototype._dispatchChange = function () {
	        if (this.visible) {
	            this.$_resetValue();
	            _super.prototype._dispatchChange.call(this);
	        }
	    };
	    NumberCellEditor.prototype.setEditValue = function (value) {
	        var v = parseFloat(value);
	        if (isNaN(v)) {
	            this._editor["value"] = "";
	        }
	        else if (this._editFormat && (typeof v == "number")) {
	            var len = Math.max(0, v.toString().length - Math.floor(v).toFixed().length - 1, this._decimalFormatter._minDigits);
	            this._editor["value"] = this.$_formatNum(v, len);
	        }
	        else {
	            this._editor["value"] = v;
	        }
	    };
	    NumberCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        this.$_resetValue();
	        var fld = this._editField();
	        var v = fld.nullValue;
	        try {
	            var s = this._editor["value"];
	            s = s && s.trim();
	            if (s) {
	                var tsReg = new RegExp("\\" + this._groupSep, "g");
	                var dpReg = new RegExp("[\\" + this._decSep + "]+", "g");
	                s = s.replace(tsReg, "");
	                s = s.replace(dpReg, ".");
	                s = s.replace(/\++/g, "+");
	                s = s.replace(/\-+/g, "-");
	                s = s.replace(/\+\-/g, "+");
	                s = s.replace(/\-\+/g, "-");
	            }
	            v = s ? parseFloat(s) : undefined;
	        }
	        catch (e) {
	            if (throwError)
	                throw e;
	        }
	        return v;
	    };
	    NumberCellEditor.prototype.setCellEditValue = function (value) {
	        if (!this.readOnly && this._requestStart()) {
	            if (typeof value === "string" || typeof value === "number") {
	                value = this.$_strToNum(value);
	                this.setEditValue(value);
	                this._doChanged();
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    NumberCellEditor.prototype.$_strToNum = function (numStr) {
	        numStr = "" + numStr;
	        var dpReg = new RegExp("\\" + this._decSep, "g");
	        var tsReg = new RegExp("\\" + this._groupSep, "g");
	        var sign = numStr[0] === "-";
	        numStr = numStr.replace(tsReg, "").replace(dpReg, ".");
	        var v = parseFloat(numStr);
	        return isNaN(v) ? NaN : sign ? -Math.abs(v) : v;
	    };
	    NumberCellEditor.prototype.$_formatNum = function (value, c) {
	        var n = value;
	        c = Math.abs(c);
	        c = isNaN(c) ? 2 : c;
	        var s = n < 0 ? "-" : n == 0 && 1 / n === -Infinity ? "-" : "";
	        var v = parseInt(n = Math.abs(+n || 0).toFixed(c));
	        var i = v + "";
	        var j = i.length;
	        j = i.length > 3 ? j % 3 : 0;
	        return s + (j ? i.substr(0, j) + this._groupSep : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + this._groupSep) + (c ? this._decSep + Math.abs(n - v).toFixed(c).slice(2) : "");
	    };
	    NumberCellEditor.prototype.$_editFormatting = function (e) {
	        var editor = this._editor;
	        var value = e.target["value"];
	        var isDecSep = value && value[value.length - 1] == this._decSep;
	        var selStart = e.target["selectionStart"];
	        var selEnd = e.target["selectionEnd"];
	        value = this._isMultiple && this._addString ? value.replace(/\+/g, this._addString) : value;
	        this._isMultiple && this._addString && (selStart += this._addString.length, selEnd += this._addString.length);
	        var ary = value.split(this._decSep);
	        var fLen = 0;
	        if (ary.length > 1) {
	            ary.length = 2;
	            ary[1] = ary[1].substr(0, this._decimalFormatter._maxDigits);
	            fLen = ary[1].length;
	            value = ary.join(this._decSep);
	        }
	        fLen = ary.length == 2 ? Math.min(ary[1].length, this._decLen != null ? this._decLen : 99) : 0;
	        var num = this.$_strToNum(value);
	        if (!isNaN(num)) {
	            if (this.maxLength > 0 || this.maxIntegerLength > 0) {
	                var s = String(num).split(".");
	                if (this.maxIntegerLength > 0) {
	                    s[0] = s[0].substr(0, this.maxIntegerLength);
	                }
	                var s2 = s.join(".");
	                if (this.maxLength > 0) {
	                    s2 = s2.substr(0, this.maxLength);
	                }
	                num = parseFloat(s2);
	            }
	            value = this.$_formatNum(num, fLen); //, this.decSep, this.groupSep);
	            value = isDecSep && this._decLen && value.indexOf(this._decSep) < 0 ? value + this._decSep : value;
	            var l1 = value.length, l2 = e.target["value"].length;
	            Math.abs(l1 - l2) == 1 && (l1 > l2 ? (selStart++, selEnd++) : (value.indexOf(this._decSep) >= selStart && (selStart--, selEnd--)));
	            e.target["value"] = value;
	            e.target["setSelectionRange"](selStart, selEnd);
	        }
	    };
	    NumberCellEditor.prototype.$_resetValue = function () {
	        if (this.visible) {
	            var editor = this._editor;
	            var s = editor.selectionStart;
	            var p = editor.selectionEnd;
	            var plen = editor.value ? editor.value.length : 0;
	            editor.value = editor.value.replace($$_HANGUL_REG, '').trim();
	            var alen = editor.value ? editor.value.length : 0;
	            alen == plen ? editor.setSelectionRange(s, p) : editor.setSelectionRange(p, p);
	        }
	    };
	    NumberCellEditor.prototype.$_resetRistrict = function () {
	        if (this._positiveOnly && this._integerOnly) {
	            this._regx = this._regxPosInt;
	        }
	        else if (this._positiveOnly) {
	            this._regx = this._regxPos;
	        }
	        else if (this._integerOnly) {
	            this._regx = this._regxInt;
	        }
	        else {
	            this._regx = this._regxAll;
	        }
	    };
	    return NumberCellEditor;
	}(TextCellEditor));
	exports.NumberCellEditor = NumberCellEditor;
	});

	unwrapExports(Editors);
	var Editors_1 = Editors.CellEditor;
	var Editors_2 = Editors.EditMask;
	var Editors_3 = Editors.TextCellEditor;
	var Editors_4 = Editors.LineCellEditor;
	var Editors_5 = Editors.PasswordCellEditor;
	var Editors_6 = Editors.MultiLineCellEditor;
	var Editors_7 = Editors.NumberCellEditor;

	var ListEditors = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ListEditors.ts
	// 2019. 10. 16. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	// TODO: Editors.ts에서도 선언한다. 개선할 것!
	var $$_EMPTY_TEXT_VALUE = '***1-da*&23%^1//+)(lu%v\\3d!#~`{``~er';
	var DropDownPosition;
	(function (DropDownPosition) {
	    DropDownPosition["BUTTON"] = "button";
	    DropDownPosition["EDITOR"] = "editor";
	})(DropDownPosition = exports.DropDownPosition || (exports.DropDownPosition = {}));
	var DropDownSortStyle;
	(function (DropDownSortStyle) {
	    DropDownSortStyle["NONE"] = "none";
	    DropDownSortStyle["ASCENDING"] = "ascending";
	    DropDownSortStyle["DESCENDING"] = "descending";
	})(DropDownSortStyle = exports.DropDownSortStyle || (exports.DropDownSortStyle = {}));
	var DropDownValueLabel;
	(function (DropDownValueLabel) {
	    DropDownValueLabel["VALUE"] = "value";
	    DropDownValueLabel["LABEL"] = "label";
	    DropDownValueLabel["VALUE_LABEL"] = "valueLabel";
	    DropDownValueLabel["LABEL_VALUE"] = "labelValue";
	})(DropDownValueLabel = exports.DropDownValueLabel || (exports.DropDownValueLabel = {}));
	var DropDownList = /** @class */ (function (_super) {
	    __extends(DropDownList, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DropDownList(container) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._minWidth = 0;
	        _this._maxWidth = 0;
	        _this._dropDownCount = 8;
	        _this._caseSensitive = false;
	        _this._partialMatch = false;
	        _this._sortStyle = DropDownSortStyle.NONE;
	        _this._items = null;
	        _this._itemIndex = -1;
	        _this._dropDownPosition = DropDownPosition.BUTTON;
	        _this._dropDownWidth = -1; // -1: column width, 0: measured width, 0 < explicit width
	        _this._displayLabels = null;
	        _this._separator = null;
	        _this._itemColumned = false;
	        _this._viewGridInside = false;
	        _this._trimLabelText = true;
	        _this._initCount = 0;
	        _this._moreItemCount = 25;
	        _this._moreText = null;
	        _this._selected = false;
	        _this._mouseoverHandler = function (e) {
	            var div = this._currDiv = e.currentTarget;
	            if (Utils_1.Utils.getChildIndex(div) != this._itemIndex) {
	                div.style.background = "rgba(0, 255, 0, 0.2)";
	            }
	        }.bind(_this);
	        _this._mouseoutHandler = function (e) {
	            var div = this._currDiv = e.currentTarget;
	            if (Utils_1.Utils.getChildIndex(div) != this._itemIndex) {
	                div.style.background = "";
	            }
	        }.bind(_this);
	        _this._clickHandler = function (e) {
	            var div = e.currentTarget;
	            var idx = Utils_1.Utils.getChildIndex(div);
	            if (idx >= 0) {
	                this._itemIndex = idx;
	                this._selected = true;
	                this.fireEvent(DropDownList.CLOSE_UP, true);
	            }
	        }.bind(_this);
	        _this._nextClickHandler = function (e) {
	            var div = e.currentTarget;
	            this.$_addMoreItems(div);
	        }.bind(_this);
	        _this._container = container;
	        return _this;
	    }
	    DropDownList.prototype.dispose = function () {
	        this._container = null;
	        this._containerElement = null;
	        this._items = null;
	        Utils_1.Utils.clearElements(this._element);
	        if (this._element.parentNode) {
	            this._element.parentNode.removeChild(this._element);
	        }
	        this._element = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DropDownList.prototype, "minWidth", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** minWidth */
	        get: function () {
	            return this._minWidth;
	        },
	        set: function (value) {
	            if (value != this._minWidth) {
	                this._minWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "maxWidth", {
	        /** maxWidth */
	        get: function () {
	            return this._maxWidth;
	        },
	        set: function (value) {
	            if (value != this._maxWidth) {
	                this._maxWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "dropDownCount", {
	        /** dropDownCount */
	        get: function () {
	            return this._dropDownCount;
	        },
	        set: function (value) {
	            if (value != this._dropDownCount) {
	                this._dropDownCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "caseSensitive", {
	        /** caseSensitive */
	        get: function () {
	            return this._caseSensitive;
	        },
	        set: function (value) {
	            if (value != this._caseSensitive) {
	                this._caseSensitive = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "partialMatch", {
	        /** partialMatch */
	        get: function () {
	            return this._partialMatch;
	        },
	        set: function (value) {
	            if (value != this._partialMatch) {
	                this._partialMatch = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "sortStyle", {
	        /** sortStyle */
	        get: function () {
	            return this._sortStyle;
	        },
	        set: function (value) {
	            if (value != this._sortStyle) {
	                this._sortStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "items", {
	        /** items */
	        get: function () {
	            return this._items;
	        },
	        set: function (value) {
	            if (value !== this._items) {
	                this._items = [];
	                if (value) {
	                    for (var i = 0, cnt = value.length; i < cnt; i++) {
	                        this._items.push({
	                            label: value[i].label,
	                            value: value[i].value,
	                            index: i
	                        });
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "itemIndex", {
	        /** itemIndex */
	        get: function () {
	            return this._itemIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "dropDownPosition", {
	        /** dropDownPosition */
	        get: function () {
	            return this._dropDownPosition;
	        },
	        set: function (value) {
	            if (value != this._dropDownPosition) {
	                this._dropDownPosition = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "dropDownWidth", {
	        /** dropDownWidth */
	        get: function () {
	            return this._dropDownWidth;
	        },
	        set: function (value) {
	            if (value != this._dropDownWidth) {
	                this._dropDownWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "displayLabels", {
	        /** displayLabels */
	        get: function () {
	            return this._displayLabels;
	        },
	        set: function (value) {
	            if (value !== this._displayLabels) {
	                this._displayLabels = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "separator", {
	        /** separator */
	        get: function () {
	            return this._separator;
	        },
	        set: function (value) {
	            if (value != this._separator) {
	                this._separator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "itemColumned", {
	        /** itemColumned */
	        get: function () {
	            return this._itemColumned;
	        },
	        set: function (value) {
	            if (value != this._itemColumned) {
	                this._itemColumned = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "viewGridInside", {
	        /** viewGridInside */
	        get: function () {
	            return this._viewGridInside;
	        },
	        set: function (value) {
	            if (value != this._viewGridInside) {
	                this._viewGridInside = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "trimLabelText", {
	        /** trimLabelText */
	        get: function () {
	            return this._trimLabelText;
	        },
	        set: function (value) {
	            if (value != this._trimLabelText) {
	                this._trimLabelText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "initCount", {
	        /** initCount */
	        get: function () {
	            return this._initCount;
	        },
	        set: function (value) {
	            if (value != this._initCount) {
	                this._initCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "moreItemCount", {
	        /** moreItemCount */
	        get: function () {
	            return this._moreItemCount;
	        },
	        set: function (value) {
	            if (value != this._moreItemCount) {
	                this._moreItemCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "moreText", {
	        /** moreText */
	        get: function () {
	            return this._moreText;
	        },
	        set: function (value) {
	            if (value != this._moreText) {
	                this._moreText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "listing", {
	        /** listing */
	        get: function () {
	            return this._containerElement && this._containerElement.contains(this._element);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "itemCount", {
	        /** itemCount */
	        get: function () {
	            return this.initCount == 0 ? (this._items && this._items.length) : this._element.children.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "valueIndex", {
	        /** valueIndex */
	        get: function () {
	            var items = this._items;
	            var i = this._itemIndex;
	            return (items && i >= 0 && i < items.length) ? items[i].index : -1;
	        },
	        set: function (value) {
	            value = Math.max(-1, value);
	            this._itemIndex = -1;
	            if (value >= 0) {
	                for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	                    if (this._items[i].index == value) {
	                        this._itemIndex = value;
	                        break;
	                    }
	                }
	            }
	            this.listing && this._refreshItems();
	            this._selected = true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownList.prototype, "selected", {
	        /** selected */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DropDownList.prototype.setItemIndex = function (value, forceRefresh, isSearch) {
	        if (forceRefresh === void 0) { forceRefresh = false; }
	        if (isSearch === void 0) { isSearch = false; }
	        var child = this._element.childNodes;
	        value = Math.max(-1, value);
	        if (value < this._items.length && (forceRefresh || value != this._itemIndex || value >= child.length - 1)) {
	            if (isSearch && value >= child.length - 1) {
	                var div = child[child.length - 1];
	                if (div["isMoreButton"]) {
	                    var addCount = value - (child.length - 1);
	                    addCount = (Math.floor(addCount / this.moreItemCount) + 1) * this.moreItemCount;
	                    this.$_addMoreItems(div, addCount);
	                }
	            }
	            this._itemIndex = value;
	            this.listing && this._refreshItems();
	            this._selected = value >= 0;
	        }
	    };
	    DropDownList.prototype.show = function (containerElement, x, y, cellWidth, editBounds) {
	        this._containerElement = this._viewGridInside ? this._container["_container"] : containerElement;
	        (this._sortStyle != DropDownSortStyle.NONE) && this.$_sortItems();
	        this._show(x, y, cellWidth, editBounds);
	    };
	    DropDownList.prototype.hide = function () {
	        Utils_1.Utils.detach(this._element);
	        this._containerElement = null;
	    };
	    DropDownList.prototype.currentIsMore = function (itemIndex) {
	        var item = this._element.childNodes[itemIndex != null ? itemIndex : this._itemIndex];
	        return item && item["isMoreButton"];
	    };
	    DropDownList.prototype.addMoreItems = function () {
	        if (this.currentIsMore(null)) {
	            var item = this._element.childNodes[this._itemIndex];
	            this.$_addMoreItems(item, 0);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DropDownList.prototype._changed = function () {
	    };
	    DropDownList.prototype._createList = function () {
	        var element = document.createElement("div");
	        element.className = "rg-dropdownlist";
	        element.onkeydown = function (e) {
	            if (e.keyCode == 27) {
	                this.fireEvent(DropDownList.CLOSE_UP, false);
	            }
	        }.bind(this);
	        return element;
	    };
	    DropDownList.prototype.$_sortItems = function () {
	        if (this._sortStyle == DropDownSortStyle.ASCENDING) {
	            this._items.sort(function (i1, i2) {
	                return i1.label < i2.label ? -1 : i1.label > i2.label ? 1 : 0;
	            });
	        }
	        else {
	            this._items.sort(function (i1, i2) {
	                return i1.label > i2.label ? -1 : i1.label < i2.label ? 1 : 0;
	            });
	        }
	    };
	    DropDownList.prototype._show = function (x, y, cellWidth, editBounds) {
	        var elt = this._element;
	        if (!elt) {
	            return;
	        }
	        var css = elt.style;
	        css.position = "absolute";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.minWidth = "20px";
	        css.minHeight = "10px";
	        css.overflow = "auto";
	        css.zIndex = "3000";
	        this._firstChild = null;
	        Utils_1.Utils.clearChildren(elt);
	        Utils_1.Utils.disableSelection(elt);
	        this._containerElement.appendChild(elt);
	        this._cellWidth = cellWidth;
	        this._editBounds = editBounds;
	        css.width = "10px";
	        this._buildItems();
	        this.$_resetHeight();
	        this._resetWidth(cellWidth);
	        this.$_resetPosition(x, y, cellWidth, editBounds);
	        this._selected = false;
	    };
	    DropDownList.prototype.$_resetHeight = function () {
	        var elt = this._element;
	        if (this._firstChild) {
	            var cr = Utils_1.Utils.getClientRect(this._firstChild);
	            var style = this._firstChild["currentStyle"] || window.getComputedStyle(this._firstChild);
	            var marginTop = parseInt(style.marginTop.replace("px", ""));
	            marginTop = isNaN(marginTop) ? 0 : marginTop;
	            var marginBottom = parseInt(style.marginBottom.replace("px", ""));
	            marginBottom = isNaN(marginBottom) ? 0 : marginBottom;
	            var h = (this._dropDownCount > 0) ? Math.min(this._dropDownCount, this._items.length) : this._items.length;
	            elt.style.height = ((cr.height + marginTop) * h + 4 + marginBottom) + "px";
	        }
	        else {
	            elt.style.height = "10px";
	        }
	    };
	    DropDownList.prototype._resetWidth = function (cellWidth) {
	        var elt = this._element;
	        var r = Utils_1.Utils.getClientRect(elt);
	        var dw = this._dropDownWidth;
	        var w = this._dropDownWidth;
	        var ew = elt.offsetWidth ? elt.offsetWidth + (Utils_1.Utils.ieOld && elt.style.boxSizing === "border-box" ? 17 : 0) : 0;
	        if (w < 0) {
	            w = cellWidth;
	        }
	        else if (w == 0) {
	            w = 10; // Dom Size가 큰 상태에서는 줄어들지 않으므로 최소 크기(10)으로 설정 후 계산
	        }
	        elt.style.width = w + "px";
	        var cw = 0;
	        if (this._firstChild) {
	            var style = this._firstChild["currentStyle"] || window.getComputedStyle(this._firstChild);
	            var marginLeft = parseInt(style.marginLeft.replace("px", ""));
	            marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
	            var marginRight = parseInt(style.marginRight.replace("px", ""));
	            marginRight = isNaN(marginRight) ? 0 : marginRight;
	            var childs = elt.childNodes;
	            for (var i = 0; i < childs.length; i++) {
	                cw = Math.max(cw, childs[i]["scrollWidth"]);
	            }
	            cw += elt.offsetWidth - elt.clientWidth + marginLeft + marginRight + 2;
	        }
	        //r = Dom.getBounds(elt);
	        //cw = Math.max(cw, r.width);
	        if (dw < 0) {
	            cw = Math.max(cw, w);
	        }
	        var sz = Utils_1.Utils.getBrowserSize(); // Dom.getBounds(this._containerElement);
	        cw = Math.min(cw, r.width);
	        w = cw;
	        if (Utils_1.Utils.ieOld && (dw >= 0 || cw > w)) { // boxSizing: "border-box"일 때 IE 9에서 width가 text보다 작아지는 현상
	            w += 20;
	        }
	        if (w < r.width) {
	            elt.style.overflowX = "hidden";
	        }
	        else {
	            elt.style.overflowX = "auto";
	        }
	        elt.style.width = Math.max(w, ew) + "px";
	    };
	    DropDownList.prototype.$_resetPosition = function (x, y, cellWidth, editBounds) {
	        var br = Utils_1.Utils.getBrowserSize();
	        var pr = Utils_1.Utils.getClientRect(this._containerElement);
	        var cr = Utils_1.Utils.getClientRect(this._container["_container"]);
	        var w = br.width; // this._container.width(); // _container: grid container
	        var h = br.height; //this._container.height();
	        var r = Utils_1.Utils.getClientRect(this._element);
	        var sx = window.pageXOffset || document.documentElement.scrollLeft;
	        var sy = window.pageYOffset || document.documentElement.scrollTop;
	        if (document.documentElement.scrollWidth > document.documentElement.clientWidth) {
	            h -= 18;
	        }
	        if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {
	            w -= 18;
	        }
	        x += cr.left - pr.left;
	        y += cr.top - pr.top;
	        if (Utils_1.Utils.ieTen || Utils_1.Utils.ieOld || Utils_1.Utils.ieLeg) {
	            x += document.documentElement.scrollLeft;
	            y += document.documentElement.scrollTop;
	        }
	        if (y + r.height > h + sy) {
	            y = y - editBounds.height - r.height;
	            if (y < 0) {
	                y = h - r.height - 2;
	            }
	        }
	        if (this._dropDownPosition != DropDownPosition.EDITOR) { // BUTTON 이거나 잘못된 값.
	            x = Math.max(0, x + cellWidth - r.width);
	        }
	        else {
	            if (x + r.width > w + sx) {
	                x = w - r.width;
	            }
	        }
	        if (this._viewGridInside) {
	            y = editBounds.bottom - pr.top + 2;
	            if ((pr.bottom < editBounds.bottom + r.height) || (h + sy < editBounds.bottom + r.height)) {
	                y = editBounds.top - r.height - pr.top - 2;
	            }
	        }
	        Utils_1.Utils.move(this._element, Math.max(0, x), Math.max(0, y));
	    };
	    DropDownList.prototype._resetItems = function (x, y, cellWidth, editBounds) {
	        Utils_1.Utils.clearChildren(this._element);
	        this._firstChild = null;
	        this._buildItems();
	        this.$_resetHeight();
	        this._resetWidth(cellWidth);
	        this.$_resetPosition(x, y, cellWidth, editBounds);
	    };
	    DropDownList.prototype._buildItems = function (startIndex, addCount) {
	        if (startIndex === void 0) { startIndex = 0; }
	        if (addCount === void 0) { addCount = 0; }
	        var itemWidth = 0;
	        var font;
	        var addValue = function (div, item) {
	            var s = (item && item.value ? item.value.toString() : "");
	            var span = document.createElement("span");
	            span.style.whiteSpace = "pre";
	            span.innerHTML = s ? Utils_1.Utils.htmlEncode(s) : "&nbsp;";
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	            return span;
	        }.bind(this);
	        var addLabel = function (div, item, calcWidth) {
	            var s = (item && item.label ? item.label.toString() : "");
	            s = this._trimLabelText ? s.trim() : s;
	            var span = document.createElement("span");
	            !this._trimLabelText && (span.style.whiteSpace = "pre");
	            span.innerHTML = s ? Utils_1.Utils.htmlEncode(s) : "&nbsp;";
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	            return span;
	        }.bind(this);
	        var addSeparator = function (div, separator) {
	            var span = document.createElement("span");
	            span.style.whiteSpace = "pre";
	            span.innerHTML = separator ? Utils_1.Utils.htmlEncode(separator) : "&nbsp;";
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	        }.bind(this);
	        var calcWidth = function (span) {
	            if (!font) {
	                var style = window.getComputedStyle(span);
	                font = {
	                    font: style.fontSize + " " + style.fontFamily,
	                    size: parseInt(style.fontSize)
	                };
	            }
	            return itemWidth; // Math.max(itemWidth, g.getTextWidth(font, span.innerText));
	        }.bind(this);
	        var items = this._items;
	        var moreCount = addCount || (this._element.children.length > 0 ? this.moreItemCount : this.initCount);
	        if (!items || items.length < 1) {
	            return;
	        }
	        for (var i = startIndex, cnt = items.length; i < cnt; i++) {
	            if (this._initCount && i - startIndex >= moreCount && i < cnt) {
	                var div_1 = document.createElement("div");
	                var css_1 = div_1.style;
	                css_1.position = "relative";
	                css_1.cssFloat = "none";
	                css_1.paddingTop = "1px";
	                css_1.paddingBottom = "1px";
	                css_1.paddingLeft = "2px";
	                css_1.paddingRight = "2px";
	                css_1.whiteSpace = "nowrap";
	                css_1.cursor = "pointer";
	                css_1.textAlign = "center";
	                Utils_1.Utils.disableSelection(div_1);
	                div_1["nextIndex"] = i;
	                div_1.onmouseover = null; //!this._useCssStyle ? this._mouseoverHandler : null;
	                div_1.onmouseout = null; //!this._useCssStyle ? this._mouseoutHandler : null;
	                div_1.onclick = this._nextClickHandler;
	                div_1["isMoreButton"] = true;
	                div_1.className = "rg-dropdown-more";
	                addLabel(div_1, { label: this.moreText });
	                this._element.appendChild(div_1);
	                break;
	            }
	            var item = items[i];
	            var div = document.createElement("div");
	            var css = div.style;
	            css.position = "relative";
	            css.cssFloat = "none";
	            css.paddingTop = "1px";
	            css.paddingBottom = "1px";
	            css.paddingLeft = "2px";
	            css.paddingRight = "2px";
	            css.whiteSpace = "nowrap";
	            css.cursor = "default";
	            // !this._useCssStyle && (div.style.background = i == this._itemIndex ? "#333" : "");
	            // !this._useCssStyle && (div.style.color = i == this._itemIndex ? "#fff" : "");
	            // this._useCssStyle && (div.className = i == this._itemIndex ? "rg-dropdown-select" : "rg-dropdown-item");
	            Utils_1.Utils.disableSelection(div);
	            this._element.appendChild(div);
	            if (i == 0)
	                this._firstChild = div;
	            div.onmouseover = null; //!this._useCssStyle ? this._mouseoverHandler : null;
	            div.onmouseout = null; //!this._useCssStyle ? this._mouseoutHandler : null;
	            div.onclick = this._clickHandler;
	            var span = null;
	            switch (this.displayLabels) {
	                case DropDownValueLabel.LABEL:
	                    addLabel(div, item);
	                    break;
	                case DropDownValueLabel.VALUE:
	                    addValue(div, item);
	                    break;
	                case DropDownValueLabel.LABEL_VALUE:
	                    span = addLabel(div, item, true);
	                    addSeparator(div, this._separator);
	                    addValue(div, item);
	                    break;
	                case DropDownValueLabel.VALUE_LABEL:
	                    span = addValue(div, item, true);
	                    addSeparator(div, this._separator);
	                    addLabel(div, item);
	                    break;
	            }
	            if (span && this._itemColumned) {
	                itemWidth = Math.max(itemWidth, calcWidth(span));
	            }
	        }
	        if (this._itemColumned && itemWidth) {
	            for (var i = 0, cnt = this._element.childNodes.length; i < cnt; i++) {
	                var span = this._element.childNodes[i].firstChild;
	                span.style.display = "inline-block";
	                span.style.width = itemWidth + "px";
	            }
	        }
	    };
	    DropDownList.prototype.$_addMoreItems = function (div, addCount) {
	        var idx = div["nextIndex"];
	        div.parentNode && div.parentNode.removeChild(div);
	        this._buildItems(idx, addCount);
	        this._resetWidth(this._cellWidth);
	        this.fireEvent(DropDownList.EDITOR_FOCUS);
	    };
	    DropDownList.prototype._refreshItems = function () {
	        var items = this._element.childNodes;
	        for (var i = 0; i < items.length; i++) {
	            var item = items[i];
	            item.className = i == this._itemIndex ? "rg-dropdown-select" : "rg-dropdown-item";
	        }
	        var idx = this._itemIndex;
	        if (idx >= 0 && idx < items.length) {
	            var item = items[idx];
	            if (item.offsetTop < this._element.scrollTop) {
	                this._element.scrollTop = item.offsetTop;
	            }
	            else {
	                var y = item.offsetTop + Utils_1.Utils.getSize(item).height;
	                if (y >= this._element.scrollTop + this._element.clientHeight) {
	                    this._element.scrollTop = y - this._element.clientHeight;
	                }
	            }
	        }
	    };
	    DropDownList.prototype.$_hangulToChosungAll = function (str) {
	        var cho = ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];
	        var result = "";
	        for (var i = 0; i < str.length; i++) {
	            var code = str.charCodeAt(i) - 44032;
	            if (code > -1 && code < 11172)
	                result += cho[Math.floor(code / 588)];
	            else
	                result += str[i];
	        }
	        return result;
	    };
	    DropDownList.prototype.$_hangulToChosung = function (str) {
	        var result = { cho: str, org: str };
	        if (/[ㄱ-힝]/.test(str)) {
	            var rCho = ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];
	            var rJung = ["ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ"];
	            var nTmp = str.charCodeAt(0) - 0xAC00;
	            var jong = nTmp % 28;
	            var jung = ((nTmp - jong) / 28) % 21;
	            var cho = (((nTmp - jong) / 28) - jung) / 21;
	            result.cho = rCho[cho] ? rCho[cho] : str;
	            if (rJung[jung]) {
	                result.org = str;
	            }
	        }
	        return result;
	    };
	    DropDownList.prototype.$_search = function (text, ignoreSelected) {
	        if (ignoreSelected === void 0) { ignoreSelected = false; }
	        try {
	            if (this._items && this._items.length > 0 && text) {
	                var items = this._items;
	                var cnt = items.length;
	                var t = this._caseSensitive ? text : text.toLowerCase();
	                var list = [];
	                for (var i = 0; i < cnt; i++) {
	                    var s = items[i].label.toString();
	                    if (s) {
	                        s = this._caseSensitive ? s : s.toLowerCase();
	                        if (this._partialMatch) {
	                            var sc = "";
	                            for (var y = 0; y < s.length; y++) {
	                                var htcS = this.$_hangulToChosung(s[y]);
	                                var htcT = this.$_hangulToChosung(t[y]);
	                                sc += htcT.org ? htcS.org : htcS.cho;
	                            }
	                            if (sc == t) {
	                                this.setItemIndex(i, ignoreSelected, true);
	                                return;
	                            }
	                        }
	                        else {
	                            if (s == t) {
	                                this.setItemIndex(i, ignoreSelected, true);
	                                return;
	                            }
	                        }
	                    }
	                    list.push(s);
	                }
	                for (var i = 0; i < cnt; i++) {
	                    var s = list[i];
	                    if (this._partialMatch) {
	                        var match = false;
	                        for (var y = 0; y < t.length; y++) {
	                            var c = this.$_hangulToChosung(s[y]);
	                            if ((c.org && c.org == t[y]) || (c.cho && c.cho == t[y]))
	                                match = true;
	                            else {
	                                match = false;
	                                break;
	                            }
	                        }
	                        if (match) {
	                            this.setItemIndex(i, ignoreSelected, true);
	                            return;
	                        }
	                    }
	                    else {
	                        if (s && s.indexOf(t) == 0) {
	                            this.setItemIndex(i, ignoreSelected, true);
	                            return;
	                        }
	                    }
	                }
	                for (var i = 0; i < cnt; i++) {
	                    var s = list[i];
	                    if (this._partialMatch) {
	                        var htcSA = this.$_hangulToChosungAll(s);
	                        var htcTA = this.$_hangulToChosungAll(t);
	                        var idx = htcSA.indexOf(htcTA);
	                        var sc = s.substr(0, idx);
	                        if (~idx) {
	                            for (var y = 0, z = idx, len = t.length; y < len; y++, z++) {
	                                var htcS = this.$_hangulToChosung(s[z]);
	                                var htcT = this.$_hangulToChosung(t[y]);
	                                sc += htcT.org ? htcS.org : htcS.cho;
	                            }
	                        }
	                        if (sc && sc.indexOf(t) > 0) {
	                            this.setItemIndex(i, ignoreSelected, true);
	                            return;
	                        }
	                    }
	                    else {
	                        if (s && s.indexOf(t) > 0) {
	                            this.setItemIndex(i, ignoreSelected, true);
	                            return;
	                        }
	                    }
	                }
	            }
	            this.setItemIndex(-1);
	        }
	        finally {
	            if (ignoreSelected) {
	                this._selected = true;
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    DropDownList.CLOSE_UP = "onDropDownListCloseUp";
	    DropDownList.EDITOR_FOCUS = "onDropDownListEditorFocus";
	    return DropDownList;
	}(EventAware_1.EventAware));
	exports.DropDownList = DropDownList;
	var DropDownCellEditor = /** @class */ (function (_super) {
	    __extends(DropDownCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DropDownCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._values = null;
	        _this._items = null;
	        _this._labels = null;
	        _this._displayLabels = DropDownValueLabel.LABEL;
	        _this._domainOnly = false;
	        _this._textReadOnly = false;
	        _this._dropDownWidth = -1;
	        _this._dropDownPosition = DropDownPosition.BUTTON;
	        _this._dropDownCount = 8;
	        _this._itemSortStyle = DropDownSortStyle.NONE;
	        _this._caseSensitive = false;
	        _this._partialMatch = false;
	        _this._commitOnSelect = true;
	        _this._dropDownWhenClick = false;
	        _this._trimLabelText = true;
	        _this._separator = null;
	        _this._itemColumned = false;
	        _this._lookup = false;
	        _this._labeling = false;
	        _this._domain = null;
	        _this._closing = false;
	        _this._selectedIndex = -1;
	        _this._globalMouseHandler = function (e) {
	            var p = e.target;
	            while (p) {
	                if (p == this._list._element) {
	                    return;
	                }
	                p = p.parentElement;
	            }
	            this.closeUp(true);
	        }.bind(_this);
	        _this._list = _this._createDropDown(grid.container);
	        _this._list.addListener(_this);
	        return _this;
	    }
	    DropDownCellEditor.prototype.dispose = function () {
	        this._list.removeListener(this);
	        this._list.dispose();
	        this._list = null;
	        this._globalMouseHandler = null;
	        this._items = null;
	        this._values = null;
	        this._labels = null;
	        this._value = undefined;
	        _super.prototype.dispose.call(this);
	    };
	    DropDownCellEditor.prototype._createDropDown = function (container) {
	        return new DropDownList(container);
	    };
	    Object.defineProperty(DropDownCellEditor.prototype, "values", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** values */
	        get: function () {
	            return this._values;
	        },
	        set: function (value) {
	            this._values = value ? value.slice() : [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "items", {
	        /** items */
	        get: function () {
	            return this._values;
	        },
	        set: function (value) {
	            this.values = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "labels", {
	        /** labels */
	        get: function () {
	            return this._labels;
	        },
	        set: function (value) {
	            this._labels = value ? value.slice() : [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "displayLabels", {
	        /** displayLabels */
	        get: function () {
	            return this._displayLabels;
	        },
	        set: function (value) {
	            if (value != this._displayLabels) {
	                this._displayLabels = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "domainOnly", {
	        /** domainOnly */
	        get: function () {
	            return this._domainOnly;
	        },
	        set: function (value) {
	            if (value != this._domainOnly) {
	                this._domainOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "textReadOnly", {
	        /** textReadOnly */
	        get: function () {
	            return this._textReadOnly;
	        },
	        set: function (value) {
	            if (value != this._textReadOnly) {
	                this._textReadOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "dropDownWidth", {
	        /** dropDownWidth */
	        get: function () {
	            return this._dropDownWidth;
	        },
	        set: function (value) {
	            if (value != this._dropDownWidth) {
	                this._dropDownWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "dropDownPosition", {
	        /** dropDownPosition */
	        get: function () {
	            return this._dropDownPosition;
	        },
	        set: function (value) {
	            if (value != this._dropDownPosition) {
	                this._dropDownPosition = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "dropDownCount", {
	        /** dropDownCount */
	        get: function () {
	            return this._dropDownCount;
	        },
	        set: function (value) {
	            if (value != this._dropDownCount) {
	                this._dropDownCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "itemSortStyle", {
	        /** itemSortStyle */
	        get: function () {
	            return this.itemSortStyle;
	        },
	        set: function (value) {
	            if (value != this.itemSortStyle) {
	                this.itemSortStyle = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "caseSensitive", {
	        /** caseSensitive */
	        get: function () {
	            return this._caseSensitive;
	        },
	        set: function (value) {
	            if (value != this._caseSensitive) {
	                this._caseSensitive = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "partialMatch", {
	        /** partialMatch */
	        get: function () {
	            return this._partialMatch;
	        },
	        set: function (value) {
	            if (value != this._partialMatch) {
	                this._partialMatch = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "commitOnSelect", {
	        /** commitOnSelect */
	        get: function () {
	            return this._commitOnSelect;
	        },
	        set: function (value) {
	            if (value != this._commitOnSelect) {
	                this._commitOnSelect = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "dropDownWhenClick", {
	        /** dropDownWhenClick */
	        get: function () {
	            return this._dropDownWhenClick;
	        },
	        set: function (value) {
	            if (value != this._dropDownWhenClick) {
	                this._dropDownWhenClick = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "trimLabelText", {
	        /** trimLabelText */
	        get: function () {
	            return this._trimLabelText;
	        },
	        set: function (value) {
	            if (value != this._trimLabelText) {
	                this._trimLabelText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "separator", {
	        /** separator */
	        get: function () {
	            return this._separator;
	        },
	        set: function (value) {
	            if (value != this._separator) {
	                this._separator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "itemColumned", {
	        /** itemColumned */
	        get: function () {
	            return this._itemColumned;
	        },
	        set: function (value) {
	            if (value != this._itemColumned) {
	                this._itemColumned = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownCellEditor.prototype, "listing", {
	        /** listing */
	        get: function () {
	            return this._list.listing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DropDownCellEditor.prototype.dropDown = function (force) {
	        if (force === void 0) { force = false; }
	        if (!this.readOnly && !this.listing && !this._closing) {
	            this._refreshItems();
	            if (force || this._items && this._items.length > 0) {
	                var options = this._grid.editorOptions;
	                this._list.viewGridInside = options.viewGridInside;
	                this._list.displayLabels = this.displayLabels;
	                this._list.separator = this.separator;
	                this._list.itemColumned = this.itemColumned;
	                this._list.items = this._items;
	                var r = Utils_1.Utils.getClientRect(this._container);
	                this._saveIndex = this._selectedIndex;
	                this._saveText = this._editor["value"];
	                this._list.caseSensitive = this._caseSensitive;
	                this._list.partialMatch = this._partialMatch;
	                this._list.dropDownCount = this._dropDownCount;
	                this._list.dropDownWidth = this._dropDownWidth;
	                this._list.dropDownPosition = this._dropDownPosition;
	                this._list.sortStyle = this._itemSortStyle;
	                this._list.valueIndex = this._selectedIndex;
	                this._list.trimLabelText = this._trimLabelText;
	                this._list.show(document.documentElement, r["cx"] - 1, r["cy"] + r.height, this._cellBounds.width, Utils_1.Utils.getClientRect(this._editor));
	                this._list["$_search"](this._editor["value"], true);
	                window.addEventListener("mousedown", this._globalMouseHandler);
	                return true;
	            }
	        }
	        return false;
	    };
	    DropDownCellEditor.prototype.closeUp = function (accept) {
	        if (this.listing) {
	            this._closing = true;
	            try {
	                window.removeEventListener("mousedown", this._globalMouseHandler);
	                this._list.hide();
	                var idx = void 0;
	                if (accept && this._list.selected && (idx = this._list.itemIndex) >= 0 && this._items && this._items.length > idx) {
	                    this._selectedIndex = this._list.valueIndex;
	                    this._editor["value"] = this._labeling ? this._items[idx].label : this._items[idx].value;
	                    if (this._selectedIndex != this._saveIndex || this._editor["value"] != this._saveText) {
	                        this._dispatchChange();
	                    }
	                    if (this._commitOnSelect) {
	                        this._dispatchCommit();
	                    }
	                }
	                else {
	                    this._selectedIndex = -1;
	                }
	            }
	            finally {
	                this._closing = false;
	            }
	            return true;
	        }
	        return false;
	    };
	    Object.defineProperty(DropDownCellEditor.prototype, "hasButton", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DropDownCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._values = [];
	        this._labels = [];
	        this._displayLabels = DropDownValueLabel.LABEL;
	        this._separator = " - ";
	        this._itemColumned = false;
	        this._domainOnly = false;
	        this._textReadOnly = false;
	        this._dropDownWidth = -1;
	        this._dropDownPosition = DropDownPosition.BUTTON;
	        this._dropDownCount = 8;
	        this._itemSortStyle = DropDownSortStyle.NONE;
	        this._caseSensitive = false;
	        this._partialMatch = false;
	        this._commitOnSelect = true;
	        this._dropDownWhenClick = false;
	        this["_viewGridInside"] = false;
	        this["_initCount"] = 0;
	        this["_moreItemCount"] = 25;
	        this["_moreText"] = window["RG_CONST"] && window["RG_CONST"]["MORETEXT"] || "더보기";
	    };
	    DropDownCellEditor.prototype.setEditIndex = function (index) {
	        _super.prototype.setEditIndex.call(this, index);
	        this._lookup = false;
	        this._labeling = false;
	        this._domain = null;
	        this._items = null;
	    };
	    DropDownCellEditor.prototype.setEditValue = function (value) {
	        var index = -1;
	        var v;
	        this._value = value;
	        if (this._lookup) {
	            var domain = this._domain;
	            if (domain) {
	                var i = index = domain.keys ? domain.keys.indexOf(value) : -1;
	                v = (i >= 0 && domain.values && domain.values.length > i) ? domain.values[i] : value;
	            }
	            else {
	                index = this._editIndex.dataColumn.getLookupIndex(value);
	            }
	            if (this._labeling) {
	                if (domain) {
	                    v = (index >= 0 && domain.values && domain.values.length > index) ? domain.values[index] : value;
	                }
	                else {
	                    v = index >= 0 ? this._editIndex.dataColumn.getLookupLabel(value) : value;
	                }
	                _super.prototype.setEditValue.call(this, v);
	            }
	            else {
	                _super.prototype.setEditValue.call(this, value);
	            }
	        }
	        else if (this._values) {
	            var i = 0;
	            for (var cnt = this._values.length; i < cnt; i++) {
	                if (value == this._values[i]) {
	                    index = i;
	                    break;
	                }
	            }
	            if (this._labeling && this._labels && (index < 0 || this._labels.length > index)) {
	                v = index >= 0 ? this._labels[i] : value;
	                _super.prototype.setEditValue.call(this, v);
	            }
	            else {
	                _super.prototype.setEditValue.call(this, value);
	            }
	        }
	        else {
	            _super.prototype.setEditValue.call(this, value);
	        }
	        this._selectedIndex = index;
	    };
	    DropDownCellEditor.prototype.isEdited = function () {
	        var modified = _super.prototype.isEdited.call(this);
	        if (modified && this.domainOnly) {
	            modified = this.$_getEditValue(false) !== undefined;
	        }
	        return modified;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DropDownCellEditor.prototype.setCellEditValue = function (value, dropdown) {
	        _super.prototype.setCellEditValue.call(this, value, dropdown);
	    };
	    DropDownCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        if (!this.isEdited() && this._selectedIndex < 0) {
	            return this._value;
	        }
	        else {
	            return this.$_getEditValue(throwError, validateValue);
	        }
	    };
	    DropDownCellEditor.prototype._createContainer = function () {
	        var elt = _super.prototype._createContainer.call(this);
	        elt.style.border = "none";
	        elt.style.boxShadow = "none";
	        return elt;
	    };
	    DropDownCellEditor.prototype.setBounds = function (x, y, w, h) {
	        x += 2;
	        y += 2;
	        w -= 4;
	        h -= 4;
	        _super.prototype.setBounds.call(this, x, y, w, h);
	    };
	    DropDownCellEditor.prototype._createEditor = function (parent) {
	        var editor = _super.prototype._createEditor.call(this, parent);
	        return editor;
	    };
	    DropDownCellEditor.prototype._textHandler = function () {
	        this._requestStart();
	    };
	    DropDownCellEditor.prototype._compositionstartHandler = function (e) {
	        _super.prototype._compositionstartHandler.call(this, e);
	    };
	    DropDownCellEditor.prototype._keyDownHandler = function (e) {
	        var list = this._list;
	        switch (e.keyCode) {
	            case Types.Keys.BACK:
	            case Types.Keys.DELETE:
	                if (!e.ctrlKey && this.textReadOnly) {
	                    this._requestStart();
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.SPACE:
	                if (this.listing && list.currentIsMore) {
	                    list.addMoreItems();
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.ENTER:
	                if (this.listing && list.currentIsMore) {
	                    list.addMoreItems();
	                    e.preventDefault();
	                    return true;
	                }
	                if (this.closeUp(true)) {
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.ESCAPE:
	                if (this.closeUp(false)) {
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.DOWN:
	                if (e.altKey && !this.listing) {
	                    this._requestStart();
	                    e.preventDefault();
	                    return true;
	                }
	                else if (this.listing) {
	                    this._list.setItemIndex(Math.min(list.itemCount - 1, list.itemIndex + 1));
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.PAGEDOWN:
	                if (this.listing) {
	                    this._list.setItemIndex(Math.min(list.itemCount - 1, list.itemIndex + list.dropDownCount));
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.UP:
	                if (e.altKey && this.listing) {
	                    this.closeUp(false);
	                    e.preventDefault();
	                    return true;
	                }
	                else if (this.listing) {
	                    this._list.setItemIndex(Math.max(0, list.itemIndex - 1));
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	            case Types.Keys.PAGEUP:
	                if (this.listing) {
	                    this._list.setItemIndex(Math.max(0, list.itemIndex - list.dropDownCount));
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	        }
	        return _super.prototype._keyDownHandler.call(this, e);
	    };
	    DropDownCellEditor.prototype._keyPressHandler = function (e) {
	        _super.prototype._keyPressHandler.call(this, e);
	        e.keyCode && /* e.keyCode === Keys.SPACE &&*/ this["isTextReadOnly"] && this["isTextReadOnly"]() && e.preventDefault();
	    };
	    DropDownCellEditor.prototype._inputHandler = function (e) {
	        if (this["isTextReadOnly"] && this["isTextReadOnly"]()) {
	            e.target["value"] = this._oldValue || "";
	        }
	        _super.prototype._inputHandler.call(this, e);
	    };
	    DropDownCellEditor.prototype._pasteHandler = function (e) {
	        _super.prototype._pasteHandler.call(this, e);
	    };
	    DropDownCellEditor.prototype._copyHandler = function (e) {
	        _super.prototype._copyHandler.call(this, e);
	    };
	    DropDownCellEditor.prototype._requestStart = function (dropdown) {
	        if (dropdown === void 0) { dropdown = false; }
	        if (_super.prototype._requestStart.call(this, dropdown)) {
	            dropdown !== false && this.dropDown();
	            return true;
	        }
	        return false;
	    };
	    DropDownCellEditor.prototype._doChanged = function () {
	        _super.prototype._doChanged.call(this);
	        if (this.listing) {
	            this._list["$_search"](this._editor["value"]);
	            this._selectedIndex = -1;
	        }
	    };
	    DropDownCellEditor.prototype.dropDownList = function (force) {
	        this.dropDown(force);
	    };
	    DropDownCellEditor.prototype.closeList = function (accept) {
	        this.closeUp(accept);
	    };
	    DropDownCellEditor.prototype.buttonClicked = function (index) {
	        this.listing ? this.closeUp(false) : this.dropDown();
	    };
	    DropDownCellEditor.prototype.$_setItems = function (values, labels) {
	        this._items = [];
	        for (var i = 0, cnt = values.length; i < cnt; i++) {
	            this._items.push({
	                value: values[i],
	                label: labels && labels.length > i ? labels[i] : values[i]
	            });
	        }
	    };
	    DropDownCellEditor.prototype._refreshItems = function (updateList, force) {
	        if (updateList === void 0) { updateList = false; }
	        if (force === void 0) { force = false; }
	        var index = this.editIndex;
	        var item = index.item;
	        if (this._values && (this._values.length > 0 || force)) {
	            this.$_setItems(this._values, this._labels);
	            this._labeling = this.displayLabels !== DropDownValueLabel.VALUE && this._labels && this._labels.length >= this._values.length;
	        }
	        else if (index.dataColumn && index.item && (index.dataRow >= 0 || GridItem_1.ItemState_isEditing(item.itemState))) {
	            var column = index.dataColumn;
	            if (column.lookupSource()) {
	                var flds = column.lookupKeyFieldIds;
	                var keys = [];
	                for (var i = 0; i < flds.length - 1; i++) {
	                    keys.push(item.getData(flds[i]));
	                }
	                var domain = column.lookupSource().getTextDomain(keys);
	                if (domain && domain.values && domain.values.length > 0) {
	                    this.$_setItems(domain.keys, domain.values);
	                    this._labeling = true;
	                    this._lookup = true;
	                    this._domain = domain;
	                }
	            }
	            else if (column.lookupValues && column.lookupValues.length > 0) {
	                this.$_setItems(column.lookupValues, column.lookupLabels);
	                this._labeling = this.displayLabels !== DropDownValueLabel.VALUE && column.lookupLabels && column.lookupLabels.length >= column.lookupValues.length;
	                this._lookup = true;
	            }
	        }
	        if (updateList && this.listing) {
	            this._list.items = this._items;
	            var r = Utils_1.Utils.getClientRect(this._container);
	            this._list["_resetItems"](r["cx"] - 1, r["cy"] + r.height, this._cellBounds.width, Utils_1.Utils.getBounds(this._editor));
	        }
	    };
	    DropDownCellEditor.prototype.$_getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        if (validateValue === void 0) { validateValue = false; }
	        var t = this.text;
	        var org = Editors.TextCellEditor.prototype.getEditValue.call(this, throwError, validateValue);
	        var v = org;
	        var col = this._editIndex.dataColumn;
	        var index = this._selectedIndex;
	        var selected = index >= 0;
	        if (this._lookup) {
	            if (this._domain) {
	                if (this._labeling) {
	                    var i = selected ? index : this._domain.values ? this._domain.values.indexOf(t) : -1;
	                    v = (i >= 0 && this._domain.keys && this._domain.keys.length > i) ? this._domain.keys[i] : v;
	                }
	                if (this.domainOnly) {
	                    if (!this._domain.keys || this._domain.keys.indexOf(v) < 0) {
	                        return Editors.CellEditor.Unselected;
	                    }
	                }
	            }
	            else {
	                if (this._labeling) {
	                    if (selected) {
	                        v = col.getLookupValue(index);
	                    }
	                    else {
	                        v = col.getSourceValue(t);
	                    }
	                    if (v === undefined) {
	                        v = org;
	                    }
	                }
	                if (this.domainOnly) {
	                    if (!col.lookupValues || col.lookupValues.indexOf(v) < 0) {
	                        return Editors.CellEditor.Unselected;
	                    }
	                }
	            }
	        }
	        else {
	            if (this._labeling) {
	                var i = selected ? index : this._labels ? this._labels.indexOf(t) : -1;
	                if (i >= 0 && i < this._values.length) {
	                    v = this._values[i];
	                }
	            }
	            if (this.domainOnly) {
	                if (!this._values || this._values.indexOf(v) < 0) {
	                    return Editors.CellEditor.Unselected;
	                }
	            }
	        }
	        return v;
	    };
	    //-------------------------------------------------------------------------
	    // DropDownList event handlers
	    //-------------------------------------------------------------------------
	    DropDownCellEditor.prototype.onDropDownListCloseUp = function (list, accept) {
	        this.closeUp(accept);
	        !Utils_1.Utils.isMobile && this.setFocus();
	    };
	    DropDownCellEditor.prototype.onDropDownListEditorFocus = function () {
	        this.setFocus();
	    };
	    return DropDownCellEditor;
	}(Editors.TextCellEditor));
	exports.DropDownCellEditor = DropDownCellEditor;
	var MultiCheckList = /** @class */ (function (_super) {
	    __extends(MultiCheckList, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MultiCheckList(container) {
	        var _this = _super.call(this, container) || this;
	        _this._selectItemIndices = [];
	        _this._acceptText = null;
	        _this._cancelText = null;
	        _this._showButtons = false;
	        _this._showAllCheck = false;
	        _this._acceptClickHandler = function (e) {
	            this.fireEvent(MultiCheckList.CLOSE_UP_2, true);
	        }.bind(_this);
	        _this._cancelClickHandler = function (e) {
	            this.fireEvent(MultiCheckList.CANCEL, false);
	        }.bind(_this);
	        _this._acceptMouseoverHandler = function (e) {
	            var label = e.currentTarget;
	            label.style.background = "rgba(9, 211, 140, 0.5)";
	        }.bind(_this);
	        _this._acceptMouseoutHander = function (e) {
	            var label = e.currentTarget;
	            label.style.background = "";
	        }.bind(_this);
	        _this._cancelMouseoverHandler = function (e) {
	            var label = e.currentTarget;
	            label.style.background = "#888";
	        }.bind(_this);
	        _this._cancelMouseoutHandler = function (e) {
	            var label = e.currentTarget;
	            label.style.background = "";
	        }.bind(_this);
	        _this._checkClickHandler = function (e) {
	            e.stopImmediatePropagation();
	            var div = e.currentTarget.parentNode;
	            if (div) {
	                var idx = Utils_1.Utils.getChildIndex(div);
	                var checked = e.currentTarget.checked;
	                this.$_changeCheckIndex(div, idx, checked, true);
	            }
	        }.bind(_this);
	        _this._allCheckMouseoverHandler = function (e) {
	            var div = e.currentTarget;
	            div.style.background = "rgba(0, 255, 0, 0.2)";
	            div.style.color = "";
	        }.bind(_this);
	        _this._allCheckMouseoutHandler = function (e) {
	            var div = this._currDiv = e.currentTarget;
	            div.style.background = "";
	            div.style.color = "";
	        }.bind(_this);
	        _this._allCheckClickHandler = function (e) {
	            e.stopImmediatePropagation();
	            if (e.eventPhase == 2 && e.currentTarget == this._allCheckElement) {
	                this._allCheck.checked = !this._allCheck.checked;
	                this.$_toggleAllCheck();
	            }
	            else if (e.eventPhase == 2 && e.currentTarget == this._allCheck) {
	                this.$_toggleAllCheck();
	                return;
	            }
	        }.bind(_this);
	        _this._mouseoverHandler = function (e) {
	            var div = this._currDiv = e.currentTarget;
	            var idx = Utils_1.Utils.getChildIndex(div);
	            var index = idx >= 0 && idx < this._items.length ? this._items[idx].index : idx;
	            if (this._selectItemIndices.indexOf(index) < 0) {
	                div.style.background = "rgba(0, 255, 0, 0.2)";
	                div.style.color = "";
	            }
	        }.bind(_this);
	        _this._mouseoutHandler = function (e) {
	            var div = this._currDiv = e.currentTarget;
	            var idx = Utils_1.Utils.getChildIndex(div);
	            var index = idx >= 0 && idx < this._items.length ? this._items[idx].index : idx;
	            if (this._selectItemIndices.indexOf(index) < 0) {
	                div.style.background = idx == this._itemIndex ? "#888" : "";
	                div.style.color = idx == this._itemIndex ? "#fff" : "";
	            }
	        }.bind(_this);
	        _this._clickHandler = function (e) {
	            var div = e.currentTarget;
	            if (e.eventPhase == 2) { // target
	                var idx = Utils_1.Utils.getChildIndex(div);
	                var check = void 0;
	                var inputs = div.getElementsByTagName("input");
	                for (var i = 0, cnt = inputs.length; i < cnt; i++) {
	                    if (inputs[i].type == "checkbox") {
	                        check = inputs[i];
	                        break;
	                    }
	                }
	                if (check) {
	                    check.checked = !check.checked;
	                }
	                this.$_changeCheckIndex(div, idx, check.checked, true);
	            }
	        }.bind(_this);
	        return _this;
	    }
	    Object.defineProperty(MultiCheckList.prototype, "valueIndices", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** valueIndices */
	        get: function () {
	            return this._selectItemIndices.slice();
	        },
	        set: function (value) {
	            this._selectItemIndices = [];
	            if (value == null) {
	                return;
	            }
	            this._selectItemIndices = value.slice();
	            this.listing && this._refreshItems();
	            this._selected = false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    MultiCheckList.prototype.changeCheckIndex = function (idx, checked, fireEvent) {
	        var items = this._listElement.childNodes;
	        if (idx >= 0 && idx < items.length) {
	            var item = items[idx];
	            var inputs = item.getElementsByTagName("input");
	            var check = void 0;
	            for (var i = 0, cnt = inputs.length; i < cnt; i++) {
	                if (inputs[i].type == "checkbox") {
	                    check = inputs[i];
	                    break;
	                }
	            }
	            if (check) {
	                check.checked = checked != null ? checked : !check.checked;
	                this.$_changeCheckIndex(item, idx, check.checked, fireEvent);
	            }
	        }
	    };
	    MultiCheckList.prototype.$_changeCheckIndex = function (div, idx, checked, fireEvent) {
	        var indices = this._selectItemIndices;
	        if (idx < 0 || idx >= this._items.length) {
	            return;
	        }
	        var index = this._items[idx].index;
	        if (checked) {
	            indices.indexOf(index) < 0 ? indices.push(index) : null;
	        }
	        else {
	            indices.indexOf(index) >= 0 ? indices.splice(indices.indexOf(index), 1) : null;
	        }
	        div.style.background = checked ? "#aaa" : this._itemIndex == idx ? "#888" : "";
	        div.style.color = (checked || this._itemIndex == idx) ? "#fff" : "";
	        div.className = checked ? "rg-multicheck-select" : "rg-multicheck-item";
	        this._selected = true;
	        fireEvent && this.fireEvent(MultiCheckList.CHECK_CLICK, false);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    MultiCheckList.prototype._createList = function () {
	        var element = document.createElement("div");
	        element.className = "rg-multicheck";
	        var allCheckDiv = document.createElement("div");
	        allCheckDiv.className = "rg-multicheck-allcheck";
	        this._allCheckElement = allCheckDiv;
	        allCheckDiv.style.paddingLeft = "2px";
	        Utils_1.Utils.disableSelection(allCheckDiv);
	        element.appendChild(allCheckDiv);
	        var listDiv = document.createElement("div");
	        listDiv.className = "rg-multicheck-list";
	        this._listElement = listDiv;
	        element.appendChild(listDiv);
	        var buttonDiv = document.createElement("div");
	        buttonDiv.style.textAlign = "center";
	        buttonDiv.className = "rg-multicheck-button";
	        this._buttonElement = buttonDiv;
	        buttonDiv.style.margin = "2px";
	        buttonDiv.style.paddingLeft = "2px";
	        Utils_1.Utils.disableSelection(buttonDiv);
	        element.appendChild(buttonDiv);
	        element.onkeydown = function (e) {
	            if (e.keyCode == 27) {
	                this.fireEvent(MultiCheckList.CLOSE_UP_2, false);
	            }
	        }.bind(this);
	        return element;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    MultiCheckList.prototype.$_toggleAllCheck = function () {
	        var listElt = this._listElement;
	        var cnt = listElt.childElementCount;
	        var checked = this._allCheck.checked;
	        for (var i = 0; i < cnt; i++) {
	            this.changeCheckIndex(i, checked, false);
	        }
	        this.fireEvent(MultiCheckList.CHECK_CLICK, false);
	    };
	    MultiCheckList.prototype._show = function (x, y, cellWidth, editBounds) {
	        var elt = this._element;
	        if (!elt) {
	            return;
	        }
	        // var elt = this._dom.element();
	        var css = elt.style;
	        css.position = "absolute";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.minWidth = "20px";
	        css.minHeight = "10px";
	        css.overflow = "visible";
	        css.zIndex = "3000";
	        css = this._listElement.style;
	        css.position = "relative";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.minWidth = "20px";
	        css.minHeight = "10px";
	        css.overflow = "auto";
	        css.zIndex = "3000";
	        css = this._buttonElement.style;
	        css.position = "relative";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.marginLeft = "0px";
	        css.marginRight = "0px";
	        this._firstChild = null;
	        Utils_1.Utils.clearChildren(this._element);
	        Utils_1.Utils.disableSelection(this._element);
	        this._containerElement.appendChild(this._element);
	        this._buildItems();
	        this.$_buildButtons();
	        this.$_resetHeight();
	        this._resetWidth(cellWidth);
	        this.$_resetPosition(x, y, cellWidth, editBounds);
	        if (this._selectItemIndices.length > 0 && this._itemIndex < 0) {
	            this.setItemIndex(this._selectItemIndices[0]);
	        }
	        this._selected = false;
	    };
	    MultiCheckList.prototype._resetWidth = function (cellWidth) {
	        var elt = this._listElement;
	        var r = Utils_1.Utils.getClientRect(elt);
	        var dw = this.dropDownWidth;
	        var w = dw;
	        if (w < 0) {
	            w = cellWidth;
	        }
	        else if (w == 0) {
	            w = 10; // Dom Size가 큰 상태에서는 줄어들지 않으므로 최소 크기(10)으로 설정 후 계산
	        }
	        elt.style.width = w + "px";
	        var cw = 0;
	        if (this._firstChild) {
	            var style = this._firstChild["currentStyle"] || window.getComputedStyle(this._firstChild);
	            var marginLeft = parseInt(style.marginLeft.replace("px", ""));
	            marginLeft = isNaN(marginLeft) ? 0 : marginLeft;
	            var marginRight = parseInt(style.marginRight.replace("px", ""));
	            marginRight = isNaN(marginRight) ? 0 : marginRight;
	            var childs = elt.childNodes;
	            for (var i = 0; i < childs.length; i++) {
	                cw = Math.max(cw, childs[i]["scrollWidth"]);
	            }
	            cw += elt.offsetWidth - elt.clientWidth + marginLeft + marginRight; // + 4;
	        }
	        //r = Dom.getBounds(elt);
	        //cw = Math.max(cw, r.width);
	        if (dw < 0) {
	            cw = Math.max(cw, w);
	        }
	        var sz = Utils_1.Utils.getBrowserSize(); // Dom.getBounds(this._containerElement);
	        cw = Math.min(cw, sz.width);
	        w = cw;
	        if (Utils_1.Utils.ieOld && (dw >= 0 || cw > w)) { // boxSizing: "border-box"일 때 IE 9에서 width가 text보다 작아지는 현상
	            w += 20;
	        }
	        if (w < r.width) {
	            elt.style.overflowX = "hidden";
	        }
	        else {
	            elt.style.overflowX = "auto";
	        }
	        cw = Math.floor(this._buttonElement.getBoundingClientRect().width);
	        if (!isNaN(cw)) {
	            w = Math.max(w, cw);
	        }
	        elt.style.width = w + "px";
	    };
	    MultiCheckList.prototype.$_resetPosition = function (x, y, cellWidth, editBounds) {
	        var br = Utils_1.Utils.getBrowserSize();
	        var pr = Utils_1.Utils.getClientRect(this._containerElement);
	        var cr = Utils_1.Utils.getClientRect(this._container["_container"]);
	        var w = br.width; // this._container.width(); // _container: grid container
	        var h = br.height; //this._container.height();
	        // var r = this._dom.getBounds();
	        var r = Utils_1.Utils.getClientRect(this._element);
	        var sx = window.pageXOffset || document.documentElement.scrollLeft;
	        var sy = window.pageYOffset || document.documentElement.scrollTop;
	        if (document.documentElement.scrollWidth > document.documentElement.clientWidth) {
	            h -= 18;
	        }
	        if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {
	            w -= 18;
	        }
	        x += cr.left - pr.left;
	        y += cr.top - pr.top;
	        if (Utils_1.Utils.ieTen || Utils_1.Utils.ieOld || Utils_1.Utils.ieLeg) {
	            x += document.documentElement.scrollLeft;
	            y += document.documentElement.scrollTop;
	        }
	        if (y + r.height > h + sy) {
	            y = y - editBounds.height - r.height;
	            if (y < 0) {
	                y = h - r.height - 2;
	            }
	        }
	        if (this.dropDownPosition != DropDownPosition.EDITOR) { // BUTTON 이거나 잘못된 값.
	            x = Math.max(0, x + cellWidth - r.width);
	        }
	        else {
	            if (x + r.width > w + sx) {
	                x = w - r.width;
	            }
	        }
	        if (this.viewGridInside) {
	            y = editBounds.bottom - pr.top + 2;
	            if ((pr.bottom < editBounds.bottom + r.height) || (h + sy < editBounds.bottom + r.height)) {
	                y = editBounds.top - r.height - pr.top - 2;
	            }
	        }
	        // this._dom.move(Math.max(0, x), Math.max(0, y));
	        Utils_1.Utils.move(this._element, Math.max(0, x), Math.max(0, y));
	    };
	    MultiCheckList.prototype._resetItems = function (x, y, cellWidth, editBounds) {
	        Utils_1.Utils.clearChildren(this._listElement);
	        this._firstChild = null;
	        this._buildItems();
	        this.$_buildButtons();
	        this.$_resetHeight();
	        this._resetWidth(cellWidth);
	        this.$_resetPosition(x, y, cellWidth, editBounds);
	    };
	    MultiCheckList.prototype._buildItems = function () {
	        var itemWidth = 0;
	        var font;
	        var addValue = function (div, item, check) {
	            var s = (item ? item.value.toString() : "");
	            var span = document.createElement("label");
	            span.style.whiteSpace = "pre";
	            span.innerHTML = s ? Utils_1.Utils.htmlEncode(s) : "&nbsp;";
	            span.htmlFor = check && check.id;
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	            return span;
	        }.bind(this);
	        var addLabel = function (div, item, check) {
	            var s = (item ? item.label.toString() : "");
	            s = this._trimLabelText ? s.trim() : s;
	            var span = document.createElement("label");
	            !this._trimLabelText && (span.style.whiteSpace = "pre");
	            span.innerHTML = s ? Utils_1.Utils.htmlEncode(s) : "&nbsp;";
	            span.htmlFor = check && check.id;
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	            return span;
	        }.bind(this);
	        var addSeparator = function (div, separator) {
	            var span = document.createElement("span");
	            span.style.whiteSpace = "pre";
	            span.innerHTML = separator ? Utils_1.Utils.htmlEncode(separator) : "&nbsp;";
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	        }.bind(this);
	        var calcWidth = function (span) {
	            if (!font) {
	                var style = window.getComputedStyle(span);
	                font = {
	                    font: style.fontSize + " " + style.fontFamily,
	                    size: parseInt(style.fontSize)
	                };
	            }
	            return itemWidth; // Math.max(itemWidth, g.getTextWidth(font, span.innerText));
	        }.bind(this);
	        var items = this._items;
	        if (!items || items.length < 1) {
	            return;
	        }
	        for (var i = 0, cnt = items.length; i < cnt; i++) {
	            var item = items[i];
	            var div = document.createElement("div");
	            var css = div.style;
	            css.position = "relative";
	            css.cssFloat = "none";
	            css.paddingTop = "1px";
	            css.paddingBottom = "1px";
	            css.paddingLeft = "2px";
	            css.paddingRight = "2px";
	            css.whiteSpace = "nowrap";
	            css.cursor = "default";
	            var isChecked = this._selectItemIndices.indexOf(items[i].index) >= 0;
	            Utils_1.Utils.disableSelection(div);
	            this._listElement.appendChild(div);
	            if (i == 0)
	                this._firstChild = div;
	            div.onclick = this._clickHandler;
	            var check = document.createElement("input");
	            check.id = "$multiCheck_item_" + MultiCheckList.$_checkId++;
	            check.type = "checkBox";
	            check.onclick = this._checkClickHandler;
	            check.checked = isChecked;
	            div.appendChild(check);
	            var span = null;
	            // var s = (item ? item.label.toString() : "");
	            // s = this._trimLabelText && s ? s.trim() : s;
	            // var span = Dom.createElement("label");
	            // !this._trimLabelText && (span.style.whiteSpace = "pre");
	            // span.innerHTML = s ? Dom.htmlEncode(s) : "&nbsp;";
	            // span.htmlFor = check.id;
	            // span.tabIndex = -1;
	            // Dom.disableSelection(span);
	            // div.appendChild(span);
	            switch (this.displayLabels) {
	                case DropDownValueLabel.LABEL:
	                    addLabel(div, item, check);
	                    break;
	                case DropDownValueLabel.VALUE:
	                    addValue(div, item, check);
	                    break;
	                case DropDownValueLabel.LABEL_VALUE:
	                    span = addLabel(div, item, check);
	                    addSeparator(div, this.separator);
	                    addValue(div, item, check);
	                    break;
	                case DropDownValueLabel.VALUE_LABEL:
	                    span = addValue(div, item, check);
	                    addSeparator(div, this.separator);
	                    addLabel(div, item, check);
	                    break;
	            }
	            if (span && this.itemColumned) {
	                itemWidth = Math.max(itemWidth, calcWidth(span));
	                div["_firstItem"] = span;
	            }
	        }
	        if (this.itemColumned && itemWidth) {
	            for (var i_1 = 0, cnt_1 = this._listElement.childNodes.length; i_1 < cnt_1; i_1++) {
	                var span = this._listElement.childNodes[i_1]["_firstItem"];
	                span && (span.style.display = "inline-block");
	                span && (span.style.width = itemWidth + "px");
	            }
	        }
	    };
	    MultiCheckList.prototype.setButtonOptions = function (acceptText, cancelText, showButtons, showAllCheck, allCheckText) {
	        this._acceptText = acceptText;
	        this._cancelText = cancelText;
	        this._showButtons = showButtons;
	        this._showAllCheck = showAllCheck;
	        this._allCheckText = allCheckText;
	        this.$_buildButtons();
	    };
	    MultiCheckList.prototype.$_buildButtons = function () {
	        if (!this._buttonElement) {
	            return;
	        }
	        this._buttonElement.style.display = this._showButtons ? "" : "none";
	        Utils_1.Utils.clearChildren(this._buttonElement);
	        var button = document.createElement("label");
	        var css = button.style;
	        button.innerHTML = this._acceptText;
	        button.onclick = this._acceptClickHandler;
	        button.className = "rg-multicheck-accept";
	        css.padding = "0px 3px";
	        css.marginRight = "0px";
	        css.marginLeft = "2px";
	        css.cursor = "pointer";
	        Utils_1.Utils.disableSelection(button);
	        this._buttonElement.appendChild(button);
	        button = document.createElement("label");
	        css = button.style;
	        button.innerHTML = this._cancelText;
	        button.onclick = this._cancelClickHandler;
	        button.className = "rg-multicheck-cancel";
	        css.padding = "0px 1px";
	        css.marginRight = "0px";
	        css.marginLeft = "2px";
	        css.cursor = "pointer";
	        Utils_1.Utils.disableSelection(button);
	        this._buttonElement.appendChild(button);
	        var allCheckDiv = this._allCheckElement;
	        allCheckDiv.onclick = this._allCheckClickHandler;
	        Utils_1.Utils.clearChildren(allCheckDiv);
	        if (this._showAllCheck) {
	            allCheckDiv.style.display = "";
	            var allCheck = document.createElement("input");
	            allCheck.type = "checkbox";
	            allCheck.id = "$multiCheck_item_" + MultiCheckList.$_checkId++;
	            allCheck.onclick = this._allCheckClickHandler;
	            this._allCheck = allCheck;
	            allCheckDiv.appendChild(allCheck);
	            var span = document.createElement("label");
	            span.innerHTML = this._allCheckText;
	            span.htmlFor = allCheck.id;
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            allCheckDiv.appendChild(span);
	        }
	        else {
	            allCheckDiv.style.display = "none";
	        }
	    };
	    MultiCheckList.prototype._refreshItems = function () {
	        var items = this._listElement.childNodes;
	        var idx = -1;
	        for (var i = 0; i < items.length; i++) {
	            idx = i < this._items.length ? this._items[i].index : -1;
	            var item = items[i];
	            if (i == this._itemIndex) {
	                item.style.background = "#888";
	                item.style.color = "#fff";
	            }
	            else {
	                item.style.background = this._selectItemIndices.indexOf(idx) >= 0 ? "#aaa" : "";
	                item.style.color = this._selectItemIndices.indexOf(idx) >= 0 ? "#fff" : "";
	            }
	        }
	        idx = this._itemIndex;
	        if (idx >= 0 && idx < items.length) {
	            var item = items[idx];
	            if (item.offsetTop < this._listElement.scrollTop) {
	                this._listElement.scrollTop = item.offsetTop;
	            }
	            else {
	                var y = item.offsetTop + Utils_1.Utils.getSize(item).height;
	                if (y >= this._listElement.scrollTop + this._listElement.clientHeight) {
	                    this._listElement.scrollTop = y - this._listElement.clientHeight;
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    MultiCheckList.CLOSE_UP_2 = "onMultiCheckListCloseUp";
	    MultiCheckList.CANCEL = "onMultiCheckListCancel";
	    MultiCheckList.CHECK_CLICK = "onMultiCheckListCheckClick";
	    MultiCheckList.$_checkId = 0;
	    return MultiCheckList;
	}(DropDownList));
	var MultiCheckCellEditor = /** @class */ (function (_super) {
	    __extends(MultiCheckCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MultiCheckCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._showButtons = true;
	        _this._acceptText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKACCEPT"] ? window["RG_CONST"]["MULTICHECKACCEPT"] : "accept";
	        _this._cancelText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKCANCEL"] ? window["RG_CONST"]["MULTICHECKCANCEL"] : "accept";
	        _this._allCheckText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKALLCHECK"] ? window["RG_CONST"]["MULTICHECKALLCHECK"] : "accept";
	        _this._showAllCheck = false;
	        return _this;
	    }
	    Object.defineProperty(MultiCheckCellEditor.prototype, "showButtons", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** showButtons */
	        get: function () {
	            return this._showButtons;
	        },
	        set: function (value) {
	            this._showButtons = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiCheckCellEditor.prototype, "acceptText", {
	        /** acceptText */
	        get: function () {
	            return this._acceptText;
	        },
	        set: function (value) {
	            this._acceptText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiCheckCellEditor.prototype, "cancelText", {
	        /** cancelText */
	        get: function () {
	            return this._cancelText;
	        },
	        set: function (value) {
	            this._cancelText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiCheckCellEditor.prototype, "allCheckText", {
	        /** allCheckText */
	        get: function () {
	            return this._allCheckText;
	        },
	        set: function (value) {
	            this._allCheckText = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MultiCheckCellEditor.prototype, "showAllCheck", {
	        /** showAllCheck */
	        get: function () {
	            return this._showAllCheck;
	        },
	        set: function (value) {
	            this._showAllCheck = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    MultiCheckCellEditor.prototype._createDropDown = function (container) {
	        return new MultiCheckList(container);
	    };
	    MultiCheckCellEditor.prototype.setMask = function (options) {
	        this._mask = null;
	    };
	    MultiCheckCellEditor.prototype.dropDown = function (force) {
	        if (force === void 0) { force = false; }
	        if (!this.readOnly && !this.listing && !this._closing) {
	            this._refreshItems();
	            if (force || this._items && this._items.length > 0) {
	                var list = this._list;
	                var options = this._grid.editorOptions;
	                list.viewGridInside = options.viewGridInside;
	                list.displayLabels = this.displayLabels;
	                list.separator = this.separator;
	                list.itemColumned = this.itemColumned;
	                list.items = this._items;
	                var r = Utils_1.Utils.getClientRect(this._container);
	                this._saveIndices = this._selectedIndices.slice();
	                this._saveText = this._editor["value"];
	                list.caseSensitive = this.caseSensitive;
	                list.dropDownCount = this.dropDownCount;
	                list.dropDownWidth = this.dropDownWidth;
	                list.dropDownPosition = this.dropDownPosition;
	                list.setButtonOptions(this._acceptText, this._cancelText, this._showButtons, this._showAllCheck, this._allCheckText);
	                list.sortStyle = this.itemSortStyle;
	                list.valueIndices = this._selectedIndices;
	                list.trimLabelText = this.trimLabelText;
	                list.show(document.documentElement, r["cx"] - 1, r["cy"] + r.height, this._cellBounds.width, Utils_1.Utils.getClientRect(this._editor));
	                window.addEventListener("mousedown", this._globalMouseHandler);
	                return true;
	            }
	        }
	        return false;
	    };
	    MultiCheckCellEditor.prototype.getCheckValues = function (indices, items) {
	        var ret = [];
	        for (var i = 0, len = indices.length; i < len; i++) {
	            if (indices[i] >= 0 && indices[i] < items.length) {
	                ret.push(this._labeling ? items[indices[i]].label : items[indices[i]].value);
	            }
	        }
	        return ret;
	    };
	    MultiCheckCellEditor.prototype.closeUp = function (accept) {
	        if (this.listing) {
	            this._closing = true;
	            try {
	                var list = this._list;
	                var column = this.editIndex && this.editIndex.dataColumn;
	                window.removeEventListener("mousedown", this._globalMouseHandler);
	                list.hide();
	                if (accept && list.selected) {
	                    this._selectedIndices = list.valueIndices;
	                    this._editor["value"] = this.getCheckValues(this._selectedIndices, this._items).join(column.valueSeparator);
	                    if (!Utils_1.Utils.equalArrays(this._saveIndices, this._selectedIndices) || this._editor["value"] != this._saveText) {
	                        this._dispatchChange();
	                    }
	                    if (this.commitOnSelect) {
	                        this._dispatchCommit();
	                    }
	                }
	                else {
	                    this._selectedIndices = this._saveIndices.slice();
	                }
	            }
	            finally {
	                this._closing = false;
	            }
	            return true;
	        }
	        return false;
	    };
	    MultiCheckCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._showButtons = true;
	        this._showAllCheck = false;
	        this._acceptText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKACCEPT"] ? window["RG_CONST"]["MULTICHECKACCEPT"] : "accept";
	        this._cancelText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKCANCEL"] ? window["RG_CONST"]["MULTICHECKCANCEL"] : "accept";
	        this._allCheckText = window["RG_CONST"] && window["RG_CONST"]["MULTICHECKALLCHECK"] ? window["RG_CONST"]["MULTICHECKALLCHECK"] : "accept";
	    };
	    MultiCheckCellEditor.prototype.setEditValue = function (value) {
	        var v;
	        var indices = [];
	        var labels = [];
	        var idx = -1;
	        var values = Utils_1.Utils.isArray(value) ? value : (value ? value.split(this._editIndex.dataColumn.valueSeparator) : []);
	        this._value = value;
	        if (this._lookup) {
	            var domain = this._domain;
	            if (domain) {
	                for (var i = 0, cnt = values.length; i < cnt; i++) {
	                    idx = domain.keys.indexOf(values[i]);
	                    if (idx >= 0) {
	                        indices.push(idx);
	                        labels.push(idx < domain.values.length ? domain.values[idx] : values[i]);
	                    }
	                }
	            }
	            else {
	                indices = this._editIndex.dataColumn.getLookupIndices(value);
	            }
	            if (this._labeling) {
	                if (domain) {
	                    v = labels.join(this._editIndex.dataColumn.valueSeparator);
	                }
	                else {
	                    v = indices.length > 0 ? this._editIndex.dataColumn.getLookupLabel(value) : value;
	                }
	                _super.prototype.setEditValue.call(this, v);
	            }
	            else {
	                _super.prototype.setEditValue.call(this, value);
	            }
	        }
	        else if (this._values) {
	            for (var i_2 = 0, cnt_2 = values.length; i_2 < cnt_2; i_2++) {
	                idx = this._values.indexOf(values[i_2]);
	                if (idx >= 0) {
	                    indices.push(idx);
	                    labels.push(this._labels && idx >= 0 && this._labels.length > idx ? this._labels[idx] : values[i_2]);
	                }
	            }
	            if (this._labeling && this._labels) {
	                v = labels.join(this._editIndex.dataColumn.valueSeparator);
	                _super.prototype.setEditValue.call(this, v);
	            }
	            else {
	                _super.prototype.setEditValue.call(this, value);
	            }
	        }
	        else {
	            _super.prototype.setEditValue.call(this, value);
	        }
	        this._selectedIndices = indices;
	    };
	    MultiCheckCellEditor.prototype.setCellEditValue = function (value, dropdown) {
	        _super.prototype.setCellEditValue.call(this, value, dropdown);
	    };
	    MultiCheckCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        if (validateValue === void 0) { validateValue = false; }
	        if (!this.isEdited() && !this._list.selected) {
	            return this._value;
	        }
	        else {
	            return this.$_getEditValue(throwError, validateValue);
	        }
	    };
	    MultiCheckCellEditor.prototype._keyDownHandler = function (e) {
	        var list = this._list;
	        if (e.ctrlKey && e.keyCode == Types.Keys.A && this.listing) {
	            e.preventDefault();
	            list["_allCheck"].checked = !list["_allCheck"].checked;
	            list["$_toggleAllCheck"]();
	            return true;
	        }
	        switch (e.keyCode) {
	            case Types.Keys.SPACE:
	                if (this.listing) {
	                    list.changeCheckIndex(list.itemIndex, null, true);
	                    e.preventDefault();
	                    return true;
	                }
	                break;
	        }
	        return _super.prototype._keyDownHandler.call(this, e);
	    };
	    MultiCheckCellEditor.prototype.$_getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = false; }
	        if (validateValue === void 0) { validateValue = false; }
	        function getValues(self, value, lookupValues, lookupLabels, col) {
	            var ret = [];
	            var labels = value && value.split(col.valueSeparator());
	            if (labels && labels.length > 0) {
	                for (var i_3 = 0, cnt = labels.length; i_3 < cnt; i_3++) {
	                    if (lookupLabels.indexOf(labels[i_3]) >= 0 && lookupLabels.indexOf(labels[i_3]) < lookupValues.length) {
	                        ret.push(lookupValues[i_3]);
	                    }
	                    else if (lookupValues.indexOf(labels[i_3]) >= 0) {
	                        ret.push(lookupValues[i_3]);
	                    }
	                    else if (!self.isDomainOnly()) {
	                        ret.push(labels[i_3]);
	                    }
	                }
	            }
	            return ret;
	        }
	        var list = this._list;
	        var t = this.text;
	        var org = Editors.TextCellEditor.prototype.getEditValue.call(this, throwError, validateValue);
	        var v = org;
	        var col = this._editIndex.dataColumn;
	        var indices = this._selectedIndices.slice();
	        var values = [];
	        var selected = this._list.selected;
	        if (this._lookup) {
	            if (this._domain) {
	                if (this._labeling) {
	                    if (selected) {
	                        for (var i_4 = 0, cnt = indices.length; i_4 < cnt; i_4++) {
	                            indices[i_4] < this._domain.keys.length ? values.push(this._domain.keys[indices[i_4]]) : null;
	                        }
	                    }
	                    else {
	                        if (t) {
	                            values = getValues(this, t, this._domain.keys, this._domain.values, col);
	                        }
	                    }
	                    v = values.join(col.valueSeparator);
	                }
	            }
	            else {
	                if (this._labeling) {
	                    if (selected) {
	                        v = col.getLookupValues(indices);
	                    }
	                    else {
	                        v = col.getSourceValues(t);
	                    }
	                    if (v === undefined) {
	                        v = org;
	                    }
	                }
	                if (this.domainOnly) {
	                    if (!col.lookupValues) {
	                        return Editors.CellEditor.Unselected;
	                    }
	                    v = Utils_1.Utils.isArray(v) ? v : v && v.split ? v.split(col.valueSeparator) : [v];
	                    for (var i = v.length - 1; i >= 0; i--) {
	                        if (col.lookupValues.indexOf(v[i]) < 0) {
	                            v.splice(i, 1);
	                        }
	                    }
	                    // if (!col.lookupValues() || col.lookupValues().indexOf(v) < 0) {
	                    // 	return CellEditor.Unselected;
	                    // }
	                }
	            }
	        }
	        else {
	            if (this._labeling) {
	                if (selected) {
	                    for (var i_5 = 0, cnt = indices.length; i_5 < cnt; i_5++) {
	                        indices[i_5] < this._values.length ? values.push(this._values[indices[i_5]]) : null;
	                    }
	                }
	                else {
	                    if (t) {
	                        values = getValues(this, t, this._values, this._labels, col);
	                    }
	                }
	                v = values.join(col.valueSeparator);
	            }
	            if (this.domainOnly) {
	                if (!col.lookupValues) {
	                    return Editors.CellEditor.Unselected;
	                }
	                v = Utils_1.Utils.isArray(v) ? v : v && v.split ? v.split(col.valueSeparator) : [v];
	                for (var i = v.length - 1; i >= 0; i--) {
	                    if (col.lookupValues.indexOf(v[i]) < 0) {
	                        v.splice(i, 1);
	                    }
	                }
	                // if (!this._values || this._values.indexOf(v) < 0) {
	                // 	return CellEditor.Unselected;;
	                // }
	            }
	        }
	        return v;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    MultiCheckCellEditor.prototype.onMultiCheckListCloseUp = function (list, accept) {
	        this.closeUp(accept);
	        this.setFocus();
	    };
	    MultiCheckCellEditor.prototype.onMultiCheckListCheckClick = function (list) {
	        this._editor["value"] = this.getCheckValues(list["_selectItemIndices"], this._items).join(this.editIndex.dataColumn.valueSeparator);
	        this._selectedIndices = list["_selectItemIndices"].slice();
	        this._saveIndices = list["_selectItemIndices"].slice();
	        this._modified = true;
	        this._dispatchChange();
	        this._editor.focus();
	    };
	    MultiCheckCellEditor.prototype.onMultiCheckListCancel = function () {
	        this._controller.cancelEditor(true);
	    };
	    return MultiCheckCellEditor;
	}(DropDownCellEditor));
	var SearchCellEditor = /** @class */ (function (_super) {
	    __extends(SearchCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SearchCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._searchLength = 1;
	        _this._searchDelay = 1000;
	        _this._useCtrlEnterKey = false;
	        _this._useEnterKey = false;
	        _this._initCount = 0;
	        _this._moreItemCount = 25;
	        _this._reInquery = true;
	        _this._timer = undefined;
	        return _this;
	    }
	    Object.defineProperty(SearchCellEditor.prototype, "searchLength", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** searchLength */
	        get: function () {
	            return this._searchLength;
	        },
	        set: function (value) {
	            if (value != this._searchLength) {
	                this._searchLength = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "searchDelay", {
	        /** searchDelay */
	        get: function () {
	            return this._searchDelay;
	        },
	        set: function (value) {
	            if (value != this._searchDelay) {
	                this._searchDelay = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "useCtrlEnterKey", {
	        /** useCtrlEnterKey */
	        get: function () {
	            return this._useCtrlEnterKey;
	        },
	        set: function (value) {
	            if (value != this._useCtrlEnterKey) {
	                this._useCtrlEnterKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "useEnterKey", {
	        /** useEnterKey */
	        get: function () {
	            return this._useEnterKey;
	        },
	        set: function (value) {
	            if (value != this._useEnterKey) {
	                this._useEnterKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "initCount", {
	        /** initCount */
	        get: function () {
	            return this._initCount;
	        },
	        set: function (value) {
	            if (value != this._initCount) {
	                this._initCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "moreItemCount", {
	        /** moreItemCount */
	        get: function () {
	            return this._moreItemCount;
	        },
	        set: function (value) {
	            if (value != this._moreItemCount) {
	                this._moreItemCount = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "moreText", {
	        /** moreText */
	        get: function () {
	            return this._moreText;
	        },
	        set: function (value) {
	            if (value != this._moreText) {
	                this._moreText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SearchCellEditor.prototype, "reInquery", {
	        /** reInquery */
	        get: function () {
	            return this._reInquery;
	        },
	        set: function (value) {
	            if (value != this._reInquery) {
	                this._reInquery = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    SearchCellEditor.prototype.fillItems = function (key, values, labels) {
	        if (this.listing && key == this.getEditText()) {
	            this.values = values;
	            this.labels = labels;
	            this._refreshItems(true, true);
	            this._list["$_search"](this._editor["value"], true);
	            return true;
	        }
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    SearchCellEditor.prototype._keyDownHandler = function (e) {
	        var key = e.keyCode == Types.Keys.ENTER;
	        if (key) {
	            if (e.ctrlKey) {
	                key = this.useCtrlEnterKey;
	            }
	            else {
	                key = this.useEnterKey && (!this._items || this._items.length < 1);
	            }
	        }
	        if (key && this.editing) {
	            e.preventDefault();
	            e.stopImmediatePropagation();
	            this.$_stopTimer();
	            var s = this.getEditText();
	            if (s && (s != this._searchKey)) {
	                this._searchKey = s;
	                this._dispatchSearch(s);
	            }
	            return true;
	        }
	        return _super.prototype._keyDownHandler.call(this, e);
	    };
	    SearchCellEditor.prototype._keyUpHandler = function (e) {
	        _super.prototype._keyUpHandler.call(this, e);
	        /**
	         * 크롬에서 한글 입력 시, composing이 완료되는 시점에
	         * editor.value값이 새로 추가된 문자를 제외시키고 있다.
	         */
	        if (Utils_1.Utils.isChrome) {
	            this.$_search();
	        }
	    };
	    SearchCellEditor.prototype._inputHandler = function (e) {
	        _super.prototype._inputHandler.call(this, e);
	        if (!Utils_1.Utils.isChrome) {
	            this.$_search();
	        }
	    };
	    SearchCellEditor.prototype._doEndEdit = function () {
	        _super.prototype._doEndEdit.call(this);
	        this.$_stopTimer();
	        this._searchKey = null;
	    };
	    SearchCellEditor.prototype.dropDown = function (force) {
	        var list = this._list;
	        if (list) {
	            list.initCount = this.initCount;
	            list.moreItemCount = this.moreItemCount;
	            list.moreText = this.moreText;
	        }
	        return _super.prototype.dropDown.call(this, true);
	    };
	    SearchCellEditor.prototype.buttonClicked = function (index) {
	        if (this.listing) {
	            this.closeUp(false);
	        }
	        else {
	            this.dropDown();
	            var searchKey = this.getEditText();
	            var ret = this._dispatchSearchCellButtonClick(searchKey);
	            if (ret) {
	                if ((typeof ret === "object") && ret["values"]) {
	                    this.fillItems(searchKey, ret["values"], ret["labels"]);
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    SearchCellEditor.prototype.$_search = function () {
	        var s = this.getEditText();
	        if (s && s !== $$_EMPTY_TEXT_VALUE && s.length >= this._searchLength) {
	            this.$_startTimer();
	        }
	        else {
	            this.$_stopTimer();
	        }
	    };
	    SearchCellEditor.prototype.$_startTimer = function () {
	        this.$_stopTimer();
	        if (!this.reInquery && this.listing && this._list["_items"].length > 0) {
	            return;
	        }
	        this._timer = setInterval(function () {
	            var s = this.getEditText();
	            if (s && s !== $$_EMPTY_TEXT_VALUE && (s != this._searchKey)) {
	                this._searchKey = s;
	                this.$_stopTimer();
	                this._dispatchSearch(s, true);
	            }
	        }.bind(this), this._searchDelay);
	    };
	    SearchCellEditor.prototype.$_stopTimer = function () {
	        this._timer && clearInterval(this._timer);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    SearchCellEditor.SEARCH = "onSearchCellEditorSearch";
	    return SearchCellEditor;
	}(DropDownCellEditor));
	exports.SearchCellEditor = SearchCellEditor;
	});

	unwrapExports(ListEditors);
	var ListEditors_1 = ListEditors.DropDownPosition;
	var ListEditors_2 = ListEditors.DropDownSortStyle;
	var ListEditors_3 = ListEditors.DropDownValueLabel;
	var ListEditors_4 = ListEditors.DropDownList;
	var ListEditors_5 = ListEditors.DropDownCellEditor;
	var ListEditors_6 = ListEditors.SearchCellEditor;

	var DateEditors = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DateEditors.ts
	// 2019. 10. 16. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	// Editors.ts에서도 선언한다. 개선할 것!
	var $$_HANGUL_REG = /[ㄱ-ㅎㅏ-ㅣ가-힝]/g;
	// 입력된 년주차에 해당하는 기준 목요일을 구해온다.
	var $_getWeekThurs = function (weeks) {
	    if (!weeks) {
	        return null;
	    }
	    (weeks = String(weeks)) && (weeks = weeks.replace(/[^0-9]/g, ""));
	    var year = parseInt(weeks.substr(0, 4));
	    var week = parseInt(weeks.substr(4, 2));
	    if (isNaN(year) || year <= 0 || isNaN(week) || week < 0) {
	        return null; // 뭔가 잘못되었으면 null;
	    }
	    var d = new Date(year, 0, 1);
	    var day = 4 - d.getDay() + 1;
	    d.setDate(day);
	    // 해당년도부터 시작하면 -1 전년도부터 시작하면 0
	    if (d.getFullYear() == year) {
	        week--;
	    }
	    day = week * 7;
	    d.setDate(d.getDate() + day);
	    return d;
	};
	// ISO기준은 월요일이 시작요일이다.
	// 2017-01-01의 경우 ISO기준으로는 2016-52주이고 일반적인 달력으로는 2017-01주이다.
	// 1월 1일의 기준 목요일과 입력된 날짜의 기준 목요일을 구한다.
	// 1월 1일의 기준 목요일이 전 년도라면 1일 더해준다. 1월 첫 주의 경우 전년도 주차도 구해주어야 한다.
	var $_getYearWeeks = function (dt, startWeek, includeSeparator) {
	    if (includeSeparator === void 0) { includeSeparator = false; }
	    var thursDay = function (dt) {
	        var d = new Date(dt);
	        var day = d.getDay();
	        day = day < startWeek ? -3 - day : 4 - day;
	        var date = d.getDate();
	        d.setDate(date + day); // 기준 목요일이 된다.
	        return d;
	    };
	    var year = dt.getFullYear();
	    var firstThurs = thursDay(new Date(year, 0, 1));
	    var thurs = thursDay(new Date(year, dt.getMonth(), dt.getDate()));
	    var firstYear = firstThurs.getFullYear();
	    var thursYear = thurs.getFullYear();
	    var weeks;
	    // thurs 입력된 일자의 기준 목요일이 현재년도면 주차 return;
	    // 전년도면 
	    // 다음년도면 1주차가 된다.
	    if (thursYear < year) { // 기준 목요일의 년도가 입력된 일자의 년도보다 작다면 (1월1~3일정도) 전년도의 마지막 주차를 구해야 한다.
	        firstThurs = thursDay(new Date(firstYear, 0, 1));
	        weeks = Math.ceil((thurs.valueOf() - firstThurs.valueOf()) / (24 * 60 * 60 * 1000 * 7)) + (firstThurs.getFullYear() === thursYear ? 1 : 0);
	    }
	    else if (thursYear > year) { // 기준목요일의 년도가 다음년도이다. 이건 다음년도의 1주차로 처리한다.
	        weeks = 1;
	    }
	    else {
	        weeks = Math.ceil((thurs.valueOf() - firstThurs.valueOf()) / (24 * 60 * 60 * 1000 * 7)) + (firstYear === thursYear ? 1 : 0); // 처음 목요일이 해당 년도면 1을 더한다.
	    }
	    return String(thursYear) + (includeSeparator ? '-' : "") + (weeks < 10 ? "0" + weeks : String(weeks));
	};
	var Holiday = /** @class */ (function (_super) {
	    __extends(Holiday, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function Holiday(owner) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._tooltips = [];
	        _this._items = [];
	        _this._enabled = true;
	        _this._owner = owner;
	        return _this;
	    }
	    Holiday.prototype.dispose = function () {
	        this._owner = null;
	        this._tooltips = null;
	        this._items = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(Holiday.prototype, "tooltips", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** tooltips */
	        get: function () {
	            return this._tooltips;
	        },
	        set: function (value) {
	            this._tooltips = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Holiday.prototype, "items", {
	        /** items */
	        get: function () {
	            return this._items;
	        },
	        set: function (value) {
	            this._items = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Holiday.prototype, "enabled", {
	        /** enabled */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            this._enabled = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Holiday.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._items && this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    Holiday.prototype.load = function (value) {
	        this.clear();
	    };
	    Holiday.prototype.clear = function () {
	        this._items = [];
	        this._tooltips = [];
	    };
	    Holiday.prototype.contains = function (date) {
	        return false;
	    };
	    Holiday.prototype.getTooltip = function (date) {
	        return null;
	    };
	    return Holiday;
	}(Base_1.Base));
	var DateHoliday = /** @class */ (function (_super) {
	    __extends(DateHoliday, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DateHoliday(owner, value) {
	        var _this = _super.call(this, owner) || this;
	        value && _this.load(value);
	        return _this;
	    }
	    DateHoliday.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DateHoliday.prototype.load = function (value) {
	        _super.prototype.load.call(this, value);
	        if (value) {
	            var dates = Utils_1.Utils.isArray(value.dates) ? value.dates : value.dates ? [value.dates] : [];
	            value.tooltips = Utils_1.Utils.isArray(value.tooltips) ? value.tooltips : value.tooltips ? [value.tooltips] : [];
	            for (var i = 0, cnt = dates.length; i < cnt; i++) {
	                var date = dates[i];
	                var dt = void 0;
	                if (date instanceof Date) {
	                    dt = new Date(date);
	                    dt.setHours(0, 0, 0, 0);
	                }
	                else if (typeof date === "number") {
	                    dt = new Date(date);
	                    dt.setHours(0, 0, 0, 0);
	                }
	                else if (typeof date === "string") {
	                    if ((date.length === 4 || date.length === 8) && /^[0-9]*$/.test(date)) {
	                        date = date.length === 4 ? date.replace(/(\d{2})(\d{2})/, "$1/$2") : date.replace(/(\d{4})(\d{2})(\d{2})/, "$1/$2/$3");
	                    }
	                    var arr = date.split(/[.//-]/);
	                    if (arr.length == 2) {
	                        try {
	                            dt = parseInt(arr[0]).toString() + "/" + parseInt(arr[1]).toString();
	                        }
	                        catch (e) { }
	                    }
	                    else if (arr.length == 3) {
	                        // editorFormat에 따라서 변경해야 할 필요가 있다. 다국어 인경우.
	                        dt = DateTimeConverter_1.DateTimeConverter.getSimpleDateNull(date);
	                    }
	                }
	                if (dt) {
	                    this._items.push(dt);
	                    value.tooltips[i] && this._tooltips.push(value.tooltips[i]);
	                }
	            }
	            this.enabled = !!value.enabled;
	        }
	    };
	    DateHoliday.prototype.getItemIndex = function (date) {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            var item = this._items[i];
	            if (item instanceof Date && item.getFullYear() === date.getFullYear() && item.getMonth() === date.getMonth() && item.getDate() === date.getDate()) {
	                return i;
	            }
	            else if (item === (date.getMonth() + 1) + "/" + date.getDate()) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    DateHoliday.prototype.contains = function (date) {
	        return this.getItemIndex(date) >= 0;
	    };
	    DateHoliday.prototype.getTooltip = function (date) {
	        var idx = this.getItemIndex(date);
	        return idx >= 0 ? this._tooltips[idx] : null;
	    };
	    return DateHoliday;
	}(Holiday));
	var DayHoliday = /** @class */ (function (_super) {
	    __extends(DayHoliday, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DayHoliday(owner, value) {
	        var _this = _super.call(this, owner) || this;
	        value && _this.load(value);
	        return _this;
	    }
	    DayHoliday.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    DayHoliday.prototype.load = function (value) {
	        _super.prototype.load.call(this, value);
	        if (value) {
	            this._items = Utils_1.Utils.isArray(value.days) ? value.days : value.days ? [value.days] : [];
	            this._tooltips = Utils_1.Utils.isArray(value.tooltips) ? value.tooltips : value.tooltips ? [value.tooltips] : [];
	            this.enabled = !!value.enabled;
	        }
	    };
	    DayHoliday.prototype.contains = function (date) {
	        if (date instanceof Date) {
	            return this._items.indexOf(date.getDay()) >= 0;
	            // } else if (typeof date == "number") {
	            // 	return this._items.indexOf(date) >= 0;
	        }
	        return false;
	    };
	    DayHoliday.prototype.getTooltip = function (date) {
	        var idx = date instanceof Date ? this._items.indexOf(date.getDay()) : this._items.indexOf(date);
	        return idx >= 0 ? this._tooltips[idx] : null;
	    };
	    return DayHoliday;
	}(Holiday));
	var HolidayCollection = /** @class */ (function (_super) {
	    __extends(HolidayCollection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HolidayCollection() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._items = [];
	        _this._count = -1;
	        return _this;
	    }
	    HolidayCollection.prototype.dispose = function () {
	        this._editor = null;
	        this._items = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(HolidayCollection.prototype, "items", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** items */
	        get: function () {
	            return this._items;
	        },
	        set: function (value) {
	            this._items = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HolidayCollection.prototype, "editor", {
	        /** editor */
	        get: function () {
	            return this._editor;
	        },
	        set: function (value) {
	            this._editor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HolidayCollection.prototype, "isNull", {
	        /** isNull */
	        get: function () {
	            return this._count == -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HolidayCollection.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._count;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    HolidayCollection.prototype.setNull = function () {
	        this._count = -1;
	    };
	    HolidayCollection.prototype.getDateConvert = function () {
	        return this._editor && this._editor["_dateConverter"];
	    };
	    HolidayCollection.prototype.clear = function () {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            this._items[i].clear();
	        }
	        this._items = [];
	        this._count = -1;
	    };
	    HolidayCollection.prototype.load = function (values) {
	        this.clear();
	        if (!values) {
	            this._count = -1;
	            return;
	        }
	        values = Utils_1.Utils.isArray(values) ? values : [values];
	        for (var i = 0, cnt = values.length; i < cnt; i++) {
	            var value = values[i];
	            var item = void 0;
	            switch (value.type) {
	                case "day":
	                    item = new DayHoliday(this, value);
	                    break;
	                case "date":
	                    item = new DateHoliday(this, value);
	                    break;
	            }
	            if (item.count > 0) {
	                this._items.push(item);
	            }
	        }
	        this._count = this._items.length;
	    };
	    HolidayCollection.prototype.contains = function (date) {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            if (this._items[i].contains(date)) {
	                return this._items[i];
	            }
	        }
	        return null;
	    };
	    return HolidayCollection;
	}(Base_1.Base));
	exports.HolidayCollection = HolidayCollection;
	var MonthPicker = /** @class */ (function (_super) {
	    __extends(MonthPicker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MonthPicker(editor, list) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._month = -1;
	        _this._mouseoverHandler = function (e) {
	            var div = e.currentTarget;
	            div.style.background = "rgba(0, 0, 0, 0.9)";
	            div.style.color = "#fff";
	        }.bind(_this);
	        _this._mouseoutHandler = function (e) {
	            var div = e.currentTarget;
	            div.style.background = "";
	            div.style.color = "";
	        }.bind(_this);
	        _this._clickHandler = function (e) {
	            e.preventDefault();
	            e.stopImmediatePropagation();
	            var div = e.currentTarget;
	            var idx = Utils_1.Utils.getChildIndex(div);
	            if (idx >= 0) {
	                this._month = idx;
	                this.fireEvent(MonthPicker.CLOSE_UP, this._month);
	            }
	            this.hide();
	        }.bind(_this);
	        _this._listElement = list;
	        _this._months = editor.months;
	        _this._element = _this.$_createPicker();
	        return _this;
	    }
	    Object.defineProperty(MonthPicker.prototype, "month", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** month */
	        get: function () {
	            return this._month;
	        },
	        set: function (value) {
	            this._month = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MonthPicker.prototype, "listElement", {
	        /** listElement */
	        get: function () {
	            return this._listElement;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MonthPicker.prototype, "listing", {
	        /** listing */
	        get: function () {
	            return this._container && this._container.contains(this._element);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    MonthPicker.prototype.show = function (containerElement, x, y, innerDropDown) {
	        this._container = containerElement;
	        if (containerElement) {
	            containerElement.appendChild(this._element);
	            var r = Utils_1.Utils.getClientRect(this._element);
	            var s = Utils_1.Utils.getScrolled();
	            if (innerDropDown && this._listElement) {
	                var width = this._listElement.getBoundingClientRect().width;
	                x = parseInt(this._listElement.style.left.replace("px", "")) + width / 2;
	                y = parseInt(this._listElement.style.top.replace("px", ""));
	            }
	            x = Math.max(s.sx, x - r.width - 2);
	            y = Math.max(s.sy, y - r.height / 2 + 13);
	            Utils_1.Utils.move(this._element, x, y);
	        }
	    };
	    MonthPicker.prototype.hide = function () {
	        Utils_1.Utils.detach(this._element);
	        this._container = null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    MonthPicker.prototype.$_createPicker = function () {
	        var element = document.createElement("div");
	        var css = element.style;
	        css.position = "absolute";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.zIndex = "3001";
	        element.className = "rg-cal-month-picker";
	        element.onkeydown = function (e) {
	            if (e.keyCode == 27) {
	                this.hide();
	            }
	        }.bind(this);
	        for (var i = 1; i <= 12; i++) {
	            var div = document.createElement("div");
	            var css_1 = div.style;
	            css_1.position = "relative";
	            css_1.cssFloat = "none";
	            div.className = "rg-cal-month-picker-item";
	            Utils_1.Utils.disableSelection(div);
	            element.appendChild(div);
	            div.onclick = this._clickHandler;
	            div.onmouseup = this._clickHandler;
	            var span = document.createElement("span");
	            span.innerHTML = Utils_1.Utils.htmlEncode((this._months ? this._months[i - 1] : i) + " ");
	            span.tabIndex = -1;
	            Utils_1.Utils.disableSelection(span);
	            div.appendChild(span);
	        }
	        return element;
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    MonthPicker.CLOSE_UP = "onMonthPickerCloseUp";
	    return MonthPicker;
	}(EventAware_1.EventAware));
	var DatePicker = /** @class */ (function (_super) {
	    __extends(DatePicker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DatePicker(container, editor) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._minWidth = 0;
	        _this._maxWidth = 0;
	        _this._yearNavigation = false;
	        _this._dropDownPosition = ListEditors.DropDownPosition.BUTTON;
	        _this._showToday = true;
	        _this._viewGridInside = false;
	        _this._showWeeks = false;
	        _this._startWeek = 0;
	        _this._weekSelectable = false;
	        _this._weekSeparator = "";
	        _this._date = new Date();
	        _this._selected = false;
	        _this._focused = true;
	        _this._cellBackground = "#f5f5f5";
	        _this._todayBackground = "#d5d5d5";
	        _this._focusedBackground = "rgba(255, 255, 0, 0.3)";
	        _this._hoveredBackground = ""; // "rgba(0, 255, 0, 0.2)";
	        _this._prevBackground = "";
	        _this._cellBorder = "1px solid #eee";
	        _this._nullBorder = "1px solid #fff";
	        _this._focusedBorder = "1px solid #aaa";
	        _this._todayBorder = "1px solid #aaa";
	        _this._hoveredBorder = "1px solid #000";
	        _this._cellColor = "#333";
	        _this._nullColor = "#ccc";
	        _this._prevColor = "#565656";
	        _this._mouseoverHandler = function (e) {
	            var td = e.currentTarget;
	            var date2 = this.$_getCellDate(this._currDate, td["$_day"] + 1);
	            var innerDate = this._editor.containsRange(date2);
	            var holiday = this._holidays && this._holidays.contains(date2);
	            td.style.background = holiday && innerDate ? holiday.styles().background().css() : innerDate ? this._hoveredBackground : "";
	            innerDate && holiday && (td.style.color = holiday.styles().foreground().css());
	            td.style.border = innerDate ? this._hoveredBorder : this._nullBorder;
	            if (innerDate && holiday && holiday.getTooltip(date2)) {
	                td.title = holiday.getTooltip(date2);
	            }
	        }.bind(_this);
	        _this._mouseoutHandler = function (e) {
	            var date = this._currDate;
	            var y = date.getFullYear();
	            var m = date.getMonth();
	            var mdays = Utils_1.Utils.month_days[Utils_1.Utils.isLeapYear(y) ? 1 : 0][m];
	            var td = e.currentTarget;
	            var d = td["$_day"];
	            var date2 = this.$_getCellDate(this._currDate, td["$_day"] + 1);
	            var innerDate = this._editor.containsRange(date2);
	            var holiday = this._holidays && this._holidays.contains(date2);
	            if (d < 0 || d >= mdays) {
	                td.style.background = "";
	                td.style.border = this._nullBorder;
	                td.style.color = innerDate ? this._prevColor : this._nullColor;
	            }
	            else if (this.$_isFocusedDay(this._currDate, d + 1)) {
	                td.style.background = this._focusedBackground;
	                td.style.border = this._focusedBorder;
	                td.style.color = innerDate ? this._cellColor : this._nullColor;
	            }
	            else if (this.$_isToday(this._currDate, d + 1)) {
	                td.style.background = this._todayBackground;
	                td.style.border = this._todayBorder;
	                td.style.color = innerDate ? this._cellColor : this._nullColor;
	            }
	            else {
	                td.style.background = innerDate && holiday ? holiday.styles().background().css() : this._cellBackground;
	                td.style.border = this._cellBorder;
	                td.style.color = innerDate ? (holiday ? holiday.styles().foreground().css() : this._cellColor) : this._nullColor;
	            }
	        }.bind(_this);
	        _this._yearWeekmouseoverHandler = function (e) {
	            var td = e.currentTarget;
	            var innerDate = this._editor.containsRange($_getWeekThurs(e.currentTarget["$_yearWeek"]));
	            td.style.background = innerDate ? this._hoveredBackground : "";
	            td.style.border = innerDate ? this._hoveredBorder : this._nullBorder;
	            td.style.color = innerDate ? this._cellColor : this._nullColor;
	        }.bind(_this);
	        _this._yearWeekmouseoutHandler = function (e) {
	            var td = e.currentTarget;
	            var innerDate = this._editor.containsRange($_getWeekThurs(e.currentTarget["$_yearWeek"]));
	            var isFocusedWeek = this.$_isFocusedWeek(this._currDate, e.currentTarget["$_yearWeek"]);
	            td.style.background = isFocusedWeek ? this._focusedBackground : this._cellBackground;
	            td.style.border = isFocusedWeek ? this._focusedBorder : innerDate ? this._cellBorder : this._nullBorder;
	            td.style.color = innerDate ? this._cellColor : this._nullColor;
	        }.bind(_this);
	        _this._clickHandler = function (e) {
	            var d = this.$_getCellDate(this._currDate, e.currentTarget["$_day"] + 1);
	            if (!this._editor.containsRange(d)) {
	                // 선택할수 없다.
	                return;
	            }
	            var holiday = this._holidays && this._holidays.contains(d);
	            if (holiday && !holiday.isEnabled()) {
	                return;
	            }
	            this._date = new Date(d);
	            this._selected = true;
	            this.fireEvent(DatePicker.CLOSE_UP, true);
	        }.bind(_this);
	        _this._yearWeekClickHandler = function (e) {
	            var week = e.currentTarget["$_yearWeek"];
	            var d;
	            week && (d = $_getWeekThurs(week));
	            if (!d || !this._editor.containsRange(d)) {
	                return;
	            }
	            this._date = new Date(d);
	            this._selected = true;
	            this.fireEvent(DatePicker.CLOSE_UP, true);
	        }.bind(_this);
	        _this._editor = editor;
	        _this._container = container;
	        _this._yearDisplayFormat = editor.yearDisplayFormat;
	        _this._monthDisplayFormat = editor.monthDisplayFormat;
	        _this._months = editor.months();
	        _this._weekDays = Utils_1.Utils.week_days;
	        return _this;
	    }
	    Object.defineProperty(DatePicker.prototype, "minWidth", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** minWidth */
	        get: function () {
	            return this._minWidth;
	        },
	        set: function (value) {
	            if (value != this._minWidth) {
	                this._minWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "maxWidth", {
	        /** maxWidth */
	        get: function () {
	            return this._maxWidth;
	        },
	        set: function (value) {
	            if (value != this._maxWidth) {
	                this._maxWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "minDate", {
	        /** minDate */
	        get: function () {
	            return this._minDate;
	        },
	        set: function (value) {
	            if (value != this._minDate) {
	                this._minDate = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "maxDate", {
	        /** maxDate */
	        get: function () {
	            return this._maxDate;
	        },
	        set: function (value) {
	            if (value != this._maxDate) {
	                this._maxDate = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "yearNavigation", {
	        /** yearNavigation */
	        get: function () {
	            return this._yearNavigation;
	        },
	        set: function (value) {
	            if (value != this._yearNavigation) {
	                this._yearNavigation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "dropDownPosition", {
	        /** dropDownPosition */
	        get: function () {
	            return this._dropDownPosition;
	        },
	        set: function (value) {
	            if (value != this._dropDownPosition) {
	                this._dropDownPosition = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "showToday", {
	        /** showToday */
	        get: function () {
	            return this._showToday;
	        },
	        set: function (value) {
	            if (value != this._showToday) {
	                this._showToday = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "yearDisplayFormat", {
	        /** yearDisplayFormat */
	        get: function () {
	            return this._yearDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._yearDisplayFormat) {
	                this._yearDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "monthDisplayFormat", {
	        /** monthDisplayFormat */
	        get: function () {
	            return this._monthDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._monthDisplayFormat) {
	                this._monthDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "months", {
	        /** months */
	        get: function () {
	            return this._months;
	        },
	        set: function (value) {
	            if (value != this._months) {
	                this._months = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "viewGridInside", {
	        /** viewGridInside */
	        get: function () {
	            return this._viewGridInside;
	        },
	        set: function (value) {
	            if (value != this._viewGridInside) {
	                this._viewGridInside = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "showWeeks", {
	        /** showWeeks */
	        get: function () {
	            return this._showWeeks;
	        },
	        set: function (value) {
	            if (value != this._showWeeks) {
	                this._showWeeks = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "startWeek", {
	        /** startWeek */
	        get: function () {
	            return this._startWeek;
	        },
	        set: function (value) {
	            if (value != this._startWeek) {
	                this._startWeek = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "weekSelectable", {
	        /** weekSelectable */
	        get: function () {
	            return this._weekSelectable;
	        },
	        set: function (value) {
	            if (value != this._weekSelectable) {
	                this._weekSelectable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "weekSeparator", {
	        /** weekSeparator */
	        get: function () {
	            return this._weekSeparator;
	        },
	        set: function (value) {
	            if (value != this._weekSeparator) {
	                this._weekSeparator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "holidays", {
	        /** holidays */
	        get: function () {
	            return this._holidays;
	        },
	        set: function (value) {
	            if (value != this._holidays) {
	                this._holidays = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "date", {
	        /** date */
	        get: function () {
	            return this._date;
	        },
	        set: function (value) {
	            if (value.getTime() != this._date.getTime()) {
	                this._currDate = new Date(value);
	                this._date = new Date(value);
	                if (this.listing) {
	                    this.$_buildCalendar();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "listing", {
	        /** listing */
	        get: function () {
	            return this._containerElement && this._containerElement.contains(this._element);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "monthListing", {
	        /** monthListing */
	        get: function () {
	            return this._monthPicker.listing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "selected", {
	        /** selected */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "focused", {
	        /** focused */
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            if (value != this._focused) {
	                this._focused = value;
	                this._element.style.border = value ? "1px solid rgba(50, 50, 50, 1)" : "1px solid rgba(50, 50, 50, 0.3)";
	                this._element.style.boxShadow = value ? "rgba(0, 0, 0, 0.8) 1px 2px 5px" : "rgba(0, 0, 0, 0.5) 1px 2px 5px";
	                this._headerElement.style.backgroundColor = value ? "rgba(0, 200, 200, 0.1)" : "#e8e8e8";
	                this._headElement.style.opacity = value ? "1.0" : "0.5";
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DatePicker.prototype, "today", {
	        /** today */
	        get: function () {
	            return this.date = new Date();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DatePicker.prototype.setWeekDays = function (value) {
	        if (value != this._weekDays) {
	            if (Utils_1.Utils.isArray(value) && value.length >= 7) {
	                this._weekDays = value;
	            }
	            else {
	                this._weekDays = Utils_1.Utils.week_days;
	            }
	        }
	    };
	    DatePicker.prototype.closeMonth = function () {
	        this._monthPicker.hide();
	    };
	    DatePicker.prototype.show = function (containerElement, x, y, cellWidth, editBounds) {
	        this._containerElement = this._viewGridInside ? this._container["_container"] : containerElement;
	        this.$_show(x, y, cellWidth, editBounds);
	    };
	    DatePicker.prototype.hide = function () {
	        this.focused = false;
	        this._monthPicker.hide();
	        Utils_1.Utils.detach(this._element);
	        this._containerElement = null;
	    };
	    DatePicker.prototype.incDay = function (delta) {
	        var d;
	        if (this._date.getMonth() == this._currDate.getMonth()) {
	            d = new Date(this._date);
	            this._date && d.setDate(this._date.getDate() + delta);
	        }
	        else {
	            d = this._currDate;
	            d = new Date(d.getFullYear(), d.getMonth(), 1);
	        }
	        return this.date = d;
	    };
	    DatePicker.prototype.incMonth = function (delta) {
	        var d;
	        if (this._date.getMonth() == this._currDate.getMonth()) {
	            d = new Date(this._date);
	            this._date && Utils_1.Utils.incMonth(d, delta);
	        }
	        else {
	            d = this._currDate;
	            d = new Date(d.getFullYear(), d.getMonth(), 1);
	        }
	        return this.date = d;
	    };
	    DatePicker.prototype.firstDay = function () {
	        var d = new Date(this._currDate);
	        this._date && (d.setDate(1)); //this._date.getDate() - this._date.getDay());
	        return this.date = d;
	    };
	    DatePicker.prototype.lastDay = function () {
	        var d = new Date(this._currDate);
	        if (this._date) {
	            var y = d.getFullYear();
	            var m = d.getMonth();
	            var mdays = Utils_1.Utils.month_days[Utils_1.Utils.isLeapYear(y) ? 1 : 0][m];
	            d.setDate(mdays); //this._date.getDate() + 6 - this._date.getDay());
	        }
	        return this.date = d;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DatePicker.prototype._changed = function () {
	    };
	    DatePicker.prototype.$_getCellDate = function (value, date) {
	        var ret = new Date(value);
	        ret.setDate(date);
	        return ret;
	    };
	    DatePicker.prototype.$_createPicker = function () {
	        var element = document.createElement("div");
	        var css = element.style;
	        css.position = "absolute";
	        css.cssFloat = "none";
	        css.clear = "both";
	        css.boxSizing = "border-box";
	        css.margin = "0px";
	        css.overflow = "auto";
	        css.zIndex = "3000";
	        element.className = "rg-calendar";
	        this._header = this.$_createHeader();
	        element.appendChild(this._header);
	        this._calendar = this.$_createCalendar();
	        element.appendChild(this._calendar);
	        element.addEventListener("keydown", function (e) {
	            if (e.keyCode == 27) {
	                if (this.isMonthLisiting()) {
	                    this.closeMonth();
	                }
	                else {
	                    this.fireEvent(ListEditors.DropDownList.CLOSE_UP, false);
	                }
	            }
	        }.bind(this));
	        element.addEventListener("mouseup", function (e) {
	            this._editor.setFocus();
	        }.bind(this));
	        return element;
	    };
	    DatePicker.prototype.$_createHeader = function () {
	        var list = this;
	        var elt = this._headerElement = document.createElement("div");
	        var css = elt.style;
	        css.position = "relative";
	        elt.className = "rg-cal-header";
	        var prev = document.createElement("span");
	        css = prev.style;
	        css.position = "absolute";
	        css.left = "4px";
	        css.minWidth = "17px";
	        css.minHeight = "17px";
	        css.backgroundRepeat = "no-repeat";
	        css.backgroundPosition = "center center";
	        prev.className = "rg-cal-prev-month";
	        elt.appendChild(elt["$_prev"] = prev);
	        prev.onclick = function (e) {
	            Utils_1.Utils.incMonth(this._currDate, -1);
	            this.$_buildCalendar();
	        }.bind(this);
	        var next = document.createElement("span");
	        css = next.style;
	        css.position = "absolute";
	        css.right = "4px";
	        css.minWidth = "17px";
	        css.minHeight = "17px";
	        css.backgroundRepeat = "no-repeat";
	        css.backgroundPosition = "center center";
	        next.className = "rg-cal-next-month";
	        elt.appendChild(elt["$_next"] = next);
	        next.onclick = function (e) {
	            Utils_1.Utils.incMonth(this._currDate, 1);
	            this.$_buildCalendar();
	        }.bind(this);
	        var today = this._todayElement = document.createElement("span");
	        css = today.style;
	        css.position = "absolute";
	        css.right = "18px";
	        css.top = "2px";
	        today.className = "rg-cal-today-button";
	        elt.appendChild(today);
	        today.innerHTML = "Today";
	        today.onclick = function (e) {
	            // if (!list._editor.containsRange(date)) {
	            // 	return;
	            // }
	            list["setFocused"](true);
	            list["setDate"](new Date());
	            list._editor["$_selectDate"](list._currDate);
	        };
	        var title = document.createElement("div");
	        css = title.style;
	        css.position = "relative";
	        css.textAlign = "center";
	        css.marginLeft = "20px";
	        css.marginRight = "50px";
	        elt.appendChild(elt["$_title"] = title);
	        title.className = "rg-cal-yearmonth";
	        var year = document.createElement("span");
	        css = year.style;
	        css.position = "relative";
	        css.verticalAlign = "top";
	        css.height = "16px";
	        year.className = "rg-cal-year";
	        title.appendChild(title["$_year"] = year);
	        year.innerHTML = "2015년";
	        year.onclick = function (e) {
	        };
	        var yearSpin = this.$_createYearSpin();
	        title.appendChild(title["$_yearSpin"] = yearSpin);
	        var month = document.createElement("span");
	        css = month.style;
	        css.position = "relative";
	        css.verticalAlign = "top";
	        month.className = "rg-cal-month";
	        title.appendChild(title["$_month"] = month);
	        month.innerHTML = "1월";
	        month.onmousedown = function (e) {
	            e.preventDefault();
	            e.stopImmediatePropagation();
	            /*
	            var r = Dom.getBounds(this._headerElement.$_title.$_month);
	            var x = r.left + (window.pageXOffset || document.documentElement.scrollLeft);
	            var y = r.top + (window.pageXOffset || document.documentElement.scrollLeft);
	            this._monthPicker.show(this._containerElement, x, y);
	            */
	            var p = Utils_1.Utils.getOffset(this._headerElement.$_title.$_month);
	            this._monthPicker.show(this._containerElement, p.x, p.y, this._viewGridInside);
	        }.bind(this);
	        return elt;
	    };
	    DatePicker.prototype.$_createYearSpin = function () {
	        var div = document.createElement("div");
	        var css = div.style;
	        css.display = "inline-block";
	        css.visibility = "hidden";
	        css.position = "relative";
	        css.width = "15px";
	        css.height = "16px";
	        css.marginLeft = "-4px";
	        css.marginRight = "2px";
	        var upper = document.createElement("span");
	        css = upper.style;
	        css.position = "absolute";
	        css.top = "0px";
	        css.left = "0px";
	        css.width = "15px";
	        css.height = "9px";
	        css.backgroundRepeat = "no-repeat";
	        css.backgroundPosition = "center center";
	        upper.className = "rg-cal-next-year";
	        div.appendChild(upper);
	        upper.onclick = function (e) {
	            this._currDate.setFullYear(this._currDate.getFullYear() + 1);
	            this.$_buildCalendar();
	        }.bind(this);
	        var lower = document.createElement("span");
	        css = lower.style;
	        css.position = "absolute";
	        css.top = "7px";
	        css.left = "0px";
	        css.width = "15px";
	        css.height = "9px";
	        css.backgroundRepeat = "no-repeat";
	        css.backgroundPosition = "center center";
	        lower.className = "rg-cal-prev-year";
	        div.appendChild(lower);
	        lower.onclick = function (e) {
	            this._currDate.setFullYear(this._currDate.getFullYear() - 1);
	            this.$_buildCalendar();
	        }.bind(this);
	        return div;
	    };
	    DatePicker.prototype.$_createCalendar = function () {
	        var weeks = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
	        var elt = document.createElement("table");
	        var css = elt.style;
	        css.margin = "2px";
	        elt.className = "rg-cal-days-table";
	        var head = document.createElement("thead");
	        head.className = "rg-cal-weeks";
	        elt.appendChild(elt["$_head"] = head);
	        var tr = document.createElement("tr");
	        head.appendChild(tr);
	        var cells = [];
	        var th = document.createElement("th");
	        css = th.style;
	        css.minWidth = "20px";
	        css.textAlign = "center";
	        th.className = "rg-cal-week-year-week";
	        tr.appendChild(th);
	        var span = document.createElement("span");
	        th.appendChild(span);
	        head["$_weeks"] = th;
	        for (var i = 0; i < 7; i++) {
	            var th_1 = document.createElement("th");
	            css = th_1.style;
	            css.minWidth = "20px";
	            css.textAlign = "center";
	            th_1.className = "rg-cal-week-" + weeks[i];
	            tr.appendChild(th_1);
	            var span_1 = document.createElement("span");
	            span_1.innerHTML = Utils_1.Utils.htmlEncode(this._weekDays[i]);
	            th_1.appendChild(span_1);
	            cells.push(span_1);
	        }
	        head["$_cells"] = cells;
	        var body = document.createElement("tbody");
	        body.className = "rg-cal-days";
	        elt.appendChild(elt["$_body"] = body);
	        var rows = body["$_rows"] = [];
	        var yearweeks = body["$_yearweeks"] = [];
	        for (var r = 0; r < 6; r++) {
	            var tr_1 = document.createElement("tr");
	            body.appendChild(tr_1);
	            rows.push(tr_1);
	            tr_1["$_cells"] = cells = [];
	            // 년주차를 표시.
	            var td = document.createElement("td");
	            css = td.style;
	            css.padding = "1px";
	            td.className = "rg-cal-day rg-cal-year-weeks";
	            tr_1.appendChild(td);
	            var span_2 = document.createElement("span");
	            td.appendChild(td["$_span"] = span_2);
	            yearweeks.push(td);
	            for (var i = 0; i < 7; i++) {
	                var td_1 = document.createElement("td");
	                css = td_1.style;
	                css.padding = "1px";
	                td_1.className = "rg-cal-day rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	                tr_1.appendChild(td_1);
	                td_1.onclick = this._clickHandler;
	                var span_3 = document.createElement("span");
	                td_1.appendChild(td_1["$_span"] = span_3);
	                cells.push(td_1);
	            }
	        }
	        return elt;
	    };
	    DatePicker.prototype.$_show = function (x, y, cellWidth, editBounds) {
	        this.focused = false;
	        this._selected = false;
	        this._header["$_title"]["$_yearSpin"].style.visibility = this._yearNavigation ? "visible" : "hidden";
	        this._todayElement.style.display = this._showToday ? "initial" : "none";
	        this._header["$_title"].style.marginRight = this._showToday ? "50px" : "20px";
	        var d = this._date;
	        // if (!(d instanceof Date) || d == "Invalid Date") {
	        // 	d = null;
	        // }
	        this._currDate = d ? new Date(d) : new Date();
	        this._today = new Date();
	        this.$_buildCalendar();
	        Utils_1.Utils.disableSelection(this._element);
	        this._containerElement.appendChild(this._element);
	        var br = Utils_1.Utils.getBrowserSize();
	        var pr = Utils_1.Utils.getBounds(this._containerElement);
	        var cr = Utils_1.Utils.getBounds(this._container["_container"]);
	        var w = br.width; // this._container.width(); // _container: grid container
	        var h = br.height; //this._container.height();
	        var r = Utils_1.Utils.getClientRect(this._element);
	        var sx = window.pageXOffset || document.documentElement.scrollLeft;
	        var sy = window.pageYOffset || document.documentElement.scrollTop;
	        if (document.documentElement.scrollWidth > document.documentElement.clientWidth) {
	            h -= 18;
	        }
	        if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {
	            w -= 18;
	        }
	        x += cr.left - pr.left;
	        y += cr.top - pr.top;
	        if (Utils_1.Utils.ieTen || Utils_1.Utils.ieOld || Utils_1.Utils.ieLeg) {
	            x += document.documentElement.scrollLeft;
	            y += document.documentElement.scrollTop;
	        }
	        if (y + r.height > h + sy) {
	            y = y - editBounds.height - r.height;
	            if (y < 0) {
	                y = h - r.height - 2;
	            }
	        }
	        if (this._dropDownPosition != ListEditors.DropDownPosition.EDITOR) { // BUTTON 이거나 잘못된 값.
	            x = Math.max(0, x + cellWidth - r.width);
	        }
	        else {
	            if (x + r.width > w + sx) {
	                x = w - r.width;
	            }
	        }
	        if (this._viewGridInside) {
	            y = editBounds.bottom - pr.top + 2;
	            if ((pr.bottom < editBounds.bottom + r.height) || (h + sy < editBounds.bottom + r.height)) {
	                y = editBounds.top - r.height - pr.top - 2;
	            }
	        }
	        Utils_1.Utils.move(this._element, Math.max(0, x), Math.max(0, y));
	    };
	    DatePicker.prototype.$_checkFocusedWeek = function (date, weekElt, innerDate) {
	        var focused = this.$_isFocusedWeek(date, weekElt["$_yearWeek"]);
	        weekElt.className = "rg-cal-week-year-week " + focused ? "rg-cal-week-year-focusweek" : null;
	    };
	    DatePicker.prototype.$_isFocusedWeek = function (date, yearWeek) {
	        return date && yearWeek && $_getYearWeeks(date, this._startWeek) == yearWeek;
	    };
	    DatePicker.prototype.$_isFocusedDay = function (date, day) {
	        var t = this._date;
	        return t && date.getFullYear() == t.getFullYear() &&
	            date.getMonth() == t.getMonth() &&
	            day == t.getDate();
	    };
	    DatePicker.prototype.$_isToday = function (date, day) {
	        var t = this._today;
	        return t && date.getFullYear() == t.getFullYear() &&
	            date.getMonth() == t.getMonth() &&
	            day == t.getDate();
	    };
	    DatePicker.prototype.$_buildCalendar = function () {
	        var weeks = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
	        var header = this._header;
	        var date = this._currDate;
	        var prev = header["$_prev"];
	        var next = header["$_next"];
	        var title = header["$_title"];
	        var y = date.getFullYear();
	        var m = date.getMonth();
	        title.$_year.innerHTML = (this._yearDisplayFormat ? this._yearDisplayFormat.replace("{Y}", y + "") : y + "년") + "&nbsp;";
	        if (this._months && this._months.length > 0) {
	            title.$_month.innerHTML = this._months[m];
	        }
	        else {
	            title.$_month.innerHTML = this._monthDisplayFormat ? this._monthDisplayFormat.replace("{M}", m + "1") : (m + 1) + "월";
	        }
	        if (m == 0) {
	            prev.title = (y - 1) + "/12";
	        }
	        else {
	            prev.title = y + "/" + Utils_1.Utils.pad(m);
	        }
	        if (m == 11) {
	            next.title = (y + 1) + "/01";
	        }
	        else {
	            next.title = y + "/" + Utils_1.Utils.pad(m + 2);
	        }
	        var cells = this._calendar["$_head"]["$_cells"];
	        for (var i = 0; i < 7; i++) {
	            var elt = cells[(i + 7 - this._startWeek) % 7];
	            elt.innerHTML = Utils_1.Utils.htmlEncode(this._weekDays[i]);
	            var th = elt.parentElement;
	            th.className = "rg-cal-week-" + weeks[i];
	        }
	        this._calendar["$_head"]["$_weeks"].style.display = this.showWeeks ? "" : "none";
	        var body = this._calendar["$_body"];
	        var yearWeeks = body["$_yearweeks"]; // td array
	        for (var i = 0, cnt = yearWeeks.length; i < cnt; i++) {
	            yearWeeks[i].style.display = this.showWeeks ? "" : "none";
	            yearWeeks[i].onclick = this.weekSelectable ? this._yearWeekClickHandler : null;
	        }
	        var rows = body.$_rows;
	        var mdays = Utils_1.Utils.month_days[Utils_1.Utils.isLeapYear(y) ? 1 : 0][m];
	        var d = new Date(date);
	        d.setDate(1);
	        var dow = (d.getDay() + 7 - this._startWeek) % 7;
	        if (mdays == 30 && dow == 6 || mdays == 31 && dow >= 5) {
	            Utils_1.Utils.addChild(body, rows[5]);
	        }
	        else {
	            Utils_1.Utils.removeChild(body, rows[5]);
	        }
	        if (mdays == 28 && dow == 0) {
	            Utils_1.Utils.removeChild(body, rows[4]);
	        }
	        else {
	            Utils_1.Utils.addChild(body, rows[4]);
	        }
	        var md = 0;
	        var weekElt = yearWeeks[0];
	        cells = rows[0].$_cells;
	        if (dow > 0) {
	            var y2 = y;
	            var m2 = m - 1;
	            if (m2 < 0) {
	                y2--;
	                m2 = 11;
	            }
	            var mdays2 = Utils_1.Utils.month_days[Utils_1.Utils.isLeapYear(y2) ? 1 : 0][m2];
	            for (var i = 0; i < dow; i++) {
	                var c = cells[i];
	                c.removeAttribute("title");
	                var d_1 = new Date(this._currDate);
	                c.$_day = i - dow;
	                d_1.setDate(c.$_day + 1);
	                var innerDate = this._editor.containsRange(d_1);
	                if (i === 0) {
	                    weekElt.$_yearWeek = $_getYearWeeks(d_1, this._startWeek);
	                    weekElt.$_span.innerText = weekElt.$_yearWeek.substr(4, 2);
	                    this.$_checkFocusedWeek(this._currDate, weekElt, innerDate);
	                }
	                c.$_span.innerHTML = (mdays2 - dow + i + 1);
	                c.className = "rg-cal-day rg-cal-prev-day " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	            }
	        }
	        for (var i = dow; i < 7; i++) {
	            var c = cells[i];
	            c.removeAttribute("title");
	            c.$_day = md++;
	            c.$_span.innerHTML = md;
	            (d = new Date(this._currDate)).setDate(md);
	            var innerDate = this._editor.containsRange(d);
	            if (i === 0) {
	                weekElt.$_yearWeek = $_getYearWeeks(d, this._startWeek);
	                weekElt.$_span.innerText = weekElt.$_yearWeek.substr(4, 2);
	                this.$_checkFocusedWeek(this._currDate, weekElt, innerDate);
	            }
	            if (this.$_isFocusedDay(date, md)) {
	                c.className = "rg-cal-day rg-cal-focusday " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	            }
	            else if (this.$_isToday(date, md)) {
	                c.className = "rg-cal-day rg-cal-today " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	            }
	            else {
	                var holiday = this._holidays && this._holidays.contains(d);
	                c.className = "rg-cal-day " + (innerDate ? "" : "rg-cal-disable-day ") + (holiday ? "rg-cal-holiday " : "") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	            }
	        }
	        for (var r = 1; r < 6 && md < mdays; r++) {
	            cells = rows[r].$_cells;
	            var weekElt_1 = yearWeeks[r];
	            for (var i = 0; i < 7; i++) {
	                if (md < mdays) {
	                    var c = cells[i];
	                    c.removeAttribute("title");
	                    c.$_day = md++;
	                    (d = new Date(this._currDate)).setDate(md);
	                    var innerDate = this._editor.containsRange(d);
	                    if (i === 0) {
	                        weekElt_1.$_yearWeek = $_getYearWeeks(d, this._startWeek);
	                        weekElt_1.$_span.innerText = weekElt_1.$_yearWeek.substr(4, 2);
	                        this.$_checkFocusedWeek(this._currDate, weekElt_1, innerDate);
	                    }
	                    c.$_span.innerHTML = md;
	                    if (this.$_isFocusedDay(date, md)) {
	                        c.className = "rg-cal-day rg-cal-focusday " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	                    }
	                    else if (this.$_isToday(date, md)) {
	                        c.className = "rg-cal-day rg-cal-today " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	                    }
	                    else {
	                        var holiday = this._holidays && this._holidays.contains(d);
	                        c.className = "rg-cal-day " + (innerDate ? "" : "rg-cal-disable-day ") + (holiday ? "rg-cal-holiday " : "") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	                    }
	                }
	                else {
	                    var j = 1;
	                    for (; i < 7; i++) {
	                        var c = cells[i];
	                        c.removeAttribute("title");
	                        c.$_day = md++;
	                        (d = new Date(this._currDate)).setDate(md);
	                        var innerDate = this._editor.containsRange(d);
	                        c.$_span.innerHTML = j++;
	                        c.className = "rg-cal-day rg-cal-next-day " + (innerDate ? "" : "rg-cal-disable-day ") + "rg-cal-week-" + weeks[(i + this._startWeek) % 7];
	                    }
	                }
	            }
	        }
	    };
	    DatePicker.prototype.$_refreshItems = function () {
	    };
	    DatePicker.prototype.$_search = function (text) {
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    DatePicker.prototype.onMonthPickerCloseUp = function (picker, month) {
	        var delta = month - this._currDate.getMonth();
	        if (delta) {
	            Utils_1.Utils.incMonth(this._currDate, delta);
	            this.$_buildCalendar();
	        }
	        this._editor.setFocus();
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    DatePicker.CLOSE_UP = "onDatePickerCloseUp";
	    return DatePicker;
	}(EventAware_1.EventAware));
	var DateCellEditor = /** @class */ (function (_super) {
	    __extends(DateCellEditor, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DateCellEditor(grid, parentElement) {
	        var _this = _super.call(this, grid, parentElement) || this;
	        _this._minDate = new Date(1970, 0, 1);
	        _this._maxDate = new Date(2100, 11, 31);
	        _this._yearNavigation = false;
	        _this._textReadOnly = false;
	        _this._dropDownPosition = ListEditors.DropDownPosition.BUTTON;
	        _this._dropDownWhenClick = false;
	        _this._showToday = true;
	        _this._yearDisplayFormat = "{Y}년";
	        _this._monthDisplayFormat = "{M}월";
	        _this._months = null;
	        _this._weekDays = null;
	        _this._showWeeks = false;
	        _this._startWeek = 0;
	        _this._weekSelectable = false;
	        _this._weekSeparator = "";
	        _this._commitOnSelect = false;
	        _this._holidays = null;
	        _this._holidayCollection = new HolidayCollection();
	        _this._closing = false;
	        _this._regx = /[0-9]|\.|\-|\/|a|A|p|P|m/;
	        _this._globalMouseHandler = function (e) {
	            var p = e.target;
	            while (p) {
	                if (p === this._list._element) {
	                    this._list._monthPicker.hide();
	                    return;
	                }
	                if (p === this._list._monthPicker._dom._element) {
	                    return;
	                }
	                p = p.parentElement;
	            }
	            this.closeUp(true);
	        }.bind(_this);
	        var options = grid.editorOptions;
	        _this._yearDisplayFormat = options.yearDisplayFormat;
	        _this._monthDisplayFormat = options.monthDisplayFormat;
	        _this._months = options.months;
	        _this._weekDays = options.weekDays;
	        _this._list = new DatePicker(grid.container, _this);
	        _this._list.addListener(_this);
	        return _this;
	    }
	    DateCellEditor.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DateCellEditor.prototype, "editFormat", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** editFormat */
	        get: function () {
	            return this._editFormat;
	        },
	        set: function (value) {
	            if (value != this._editFormat) {
	                this._editFormat = value;
	                this.dateTimeFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "minDate", {
	        /** minDate */
	        get: function () {
	            return this._minDate;
	        },
	        set: function (value) {
	            if (value != this._minDate) {
	                this._minDate = !value ? null : value instanceof Date ? value : typeof value == "string" ? this._dateConverter.getDateNull(value) : null;
	                this._minDate && this._minDate.setHours(0, 0, 0, 0);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "maxDate", {
	        /** maxDate */
	        get: function () {
	            return this._maxDate;
	        },
	        set: function (value) {
	            if (value != this._maxDate) {
	                this._maxDate = !value ? null : value instanceof Date ? value : typeof value == "string" ? this._dateConverter.getDateNull(value) : null;
	                this._maxDate && this._maxDate.setHours(23, 59, 59);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "yearNavigation", {
	        /** yearNavigation */
	        get: function () {
	            return this._yearNavigation;
	        },
	        set: function (value) {
	            if (value != this._yearNavigation) {
	                this._yearNavigation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "textReadOnly", {
	        /** textReadOnly */
	        get: function () {
	            return this._textReadOnly;
	        },
	        set: function (value) {
	            if (value != this._textReadOnly) {
	                this._textReadOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "dropDownPosition", {
	        /** dropDownPosition */
	        get: function () {
	            return this._dropDownPosition;
	        },
	        set: function (value) {
	            if (value != this._dropDownPosition) {
	                this._dropDownPosition = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "dropDownWhenClick", {
	        /** dropDownWhenClick */
	        get: function () {
	            return this._dropDownWhenClick;
	        },
	        set: function (value) {
	            if (value != this._dropDownWhenClick) {
	                this._dropDownWhenClick = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "showToday", {
	        /** showToday */
	        get: function () {
	            return this._showToday;
	        },
	        set: function (value) {
	            if (value != this._showToday) {
	                this._showToday = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "yearDisplayFormat", {
	        /** yearDisplayFormat */
	        get: function () {
	            return this._yearDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._yearDisplayFormat) {
	                this._yearDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "monthDisplayFormat", {
	        /** monthDisplayFormat */
	        get: function () {
	            return this._monthDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._monthDisplayFormat) {
	                this._monthDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "months", {
	        /** months */
	        get: function () {
	            return this._months;
	        },
	        set: function (value) {
	            if (value != this._months) {
	                this._months = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "weekDays", {
	        /** weekDays */
	        get: function () {
	            return this._weekDays;
	        },
	        set: function (value) {
	            if (value != this._weekDays) {
	                this._weekDays = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "showWeeks", {
	        /** showWeeks */
	        get: function () {
	            return this._showWeeks;
	        },
	        set: function (value) {
	            if (value != this._showWeeks) {
	                this._showWeeks = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "startWeek", {
	        /** startWeek */
	        get: function () {
	            return this._startWeek;
	        },
	        set: function (value) {
	            value = value == null ? 0 : (isNaN(value = Math.floor(value)) ? 0 : value);
	            if (value !== this._startWeek) {
	                this._startWeek = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "weekSelectable", {
	        /** weekSelectable */
	        get: function () {
	            return this._weekSelectable;
	        },
	        set: function (value) {
	            if (value != this._weekSelectable) {
	                this._weekSelectable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "weekSeparator", {
	        /** weekSeparator */
	        get: function () {
	            return this._weekSeparator;
	        },
	        set: function (value) {
	            if (value != this._weekSeparator) {
	                this._weekSeparator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "commitOnSelect", {
	        /** commitOnSelect */
	        get: function () {
	            return this._commitOnSelect;
	        },
	        set: function (value) {
	            if (value != this._commitOnSelect) {
	                this._commitOnSelect = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "defaultShowDate", {
	        /** defaultShowDate */
	        get: function () {
	            return this._defaultShowDate;
	        },
	        set: function (value) {
	            if (value != this._defaultShowDate) {
	                switch (value) {
	                    case Types.DefaultShowDate.TODAY:
	                    case Types.DefaultShowDate.NORMAL:
	                    case Types.DefaultShowDate.TODAY_WHEN_NULL:
	                        break;
	                    default:
	                        // var date = typeof value == "string" ? this._dateConverter.getDateNull(value) : value instanceof Date ? value : null;
	                        // value = date || "normal";
	                        break;
	                }
	                this._defaultShowDate = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "holidays", {
	        /** holidays */
	        get: function () {
	            return this._holidays;
	        },
	        set: function (value) {
	            if (value != this._holidays) {
	                this._holidays = value;
	                if (value) {
	                    this._holidayCollection = this._holidayCollection || new HolidayCollection();
	                    this._holidayCollection.editor = this;
	                    this._holidayCollection.load(value);
	                }
	                else {
	                    this._holidayCollection.setNull();
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "listing", {
	        get: function () {
	            return this._list.listing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DateCellEditor.prototype, "monthListing", {
	        get: function () {
	            return this._list.monthListing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DateCellEditor.prototype.dropDown = function () {
	        if (!this.readOnly && !this._controller["_readOnly"] && !this.listing && !this._closing) {
	            var options = this._grid.editorOptions;
	            var list = this._list;
	            var r = Utils_1.Utils.getClientRect(this._container);
	            list.viewGridInside = options.viewGridInside;
	            list.yearNavigation = this._yearNavigation;
	            list.dropDownPosition = this._dropDownPosition;
	            list.showToday = this._showToday;
	            list.yearDisplayFormat = this._yearDisplayFormat;
	            list.monthDisplayFormat = this._monthDisplayFormat;
	            list.months = this._months;
	            list.minDate = this._minDate;
	            list.maxDate = this._maxDate;
	            list.showWeeks = this._showWeeks;
	            list.startWeek = this._startWeek || 0;
	            list.weekSelectable = this.weekSelectable;
	            list.weekSeparator = this.weekSeparator;
	            list.holidays = this._holidayCollection.isNull ? options["_holidayCollection"] : this._holidayCollection;
	            if (this._weekDays && this._weekDays.length > 0) {
	                list.setWeekDays(this._weekDays);
	            }
	            this.$_setListDate();
	            // list.show(this._parentElement, r.cx - 1, r.cy + r.height, this._cellBounds.width, Dom.getBounds(this._editor));
	            list.show(document.documentElement, r["cx"] - 1, r["cy"] + r.height, this._cellBounds.width, Utils_1.Utils.getClientRect(this._editor));
	            window.addEventListener("mousedown", this._globalMouseHandler);
	            return true;
	        }
	        return false;
	    };
	    DateCellEditor.prototype.closeUp = function (accept) {
	        if (this.listing) {
	            this._closing = true;
	            try {
	                window.removeEventListener("mousedown", this._globalMouseHandler);
	                this._list.hide();
	                if (accept && this._list.selected) {
	                    this.$_selectDate(this._list.date);
	                    this._commitOnSelect && this._dispatchCommit();
	                }
	            }
	            finally {
	                this._closing = false;
	            }
	            return true;
	        }
	        return false;
	    };
	    DateCellEditor.prototype.containsRange = function (value) {
	        return (!this._minDate || value >= this._minDate) && (!this._maxDate || value <= this._maxDate);
	    };
	    Object.defineProperty(DateCellEditor.prototype, "hasButton", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DateCellEditor.prototype.initOptions = function () {
	        _super.prototype.initOptions.call(this);
	        this._dropDownWhenClick = false;
	        this._yearNavigation = false;
	        this._textReadOnly = false;
	        this._showToday = true;
	        this._minDate = new Date(1970, 0, 1);
	        this._maxDate = new Date(2100, 11, 31);
	        this._showWeeks = false;
	        this._startWeek = 0;
	        this._weekSelectable = false;
	        this._weekSeparator = "";
	        this._commitOnSelect = false;
	        this._defaultShowDate = Types.DefaultShowDate.NORMAL;
	        this._holidayCollection && this._holidayCollection.setNull();
	    };
	    DateCellEditor.prototype.setEditIndex = function (index) {
	        _super.prototype.setEditIndex.call(this, index);
	        var dataType = this._editField().dataType;
	        this._weekSelectable = this._weekSelectable && dataType !== Types.ValueType.DATE && dataType !== Types.ValueType.DATETIME;
	    };
	    DateCellEditor.prototype.setEditValue = function (value) {
	        _super.prototype.setEditValue.call(this, value);
	        if (this.weekSelectable) {
	            this._date = $_getWeekThurs(value);
	        }
	        else {
	            this._date = typeof value === "string" ? this._dateConverter.getDateNull(value) : value;
	        }
	        this._editor["value"] = this._valToStr(value);
	    };
	    DateCellEditor.prototype.setCellEditValue = function (value, dropdown) {
	        _super.prototype.setCellEditValue.call(this, value, dropdown);
	    };
	    DateCellEditor.prototype.getEditValue = function (throwError, validateValue) {
	        if (throwError === void 0) { throwError = true; }
	        if (validateValue === void 0) { validateValue = false; }
	        var v = _super.prototype.getEditValue.call(this, throwError);
	        var valueType = this._editField().dataType;
	        if (v && validateValue && (valueType == Types.ValueType.DATE || valueType == Types.ValueType.DATETIME)) {
	            v = this._minDate ? Math.max(this._minDate.getTime(), v) : v;
	            v = this._maxDate ? Math.min(this._maxDate.getTime(), v) : v;
	            v && (v = new Date(v));
	        }
	        return v;
	    };
	    DateCellEditor.prototype._createContainer = function () {
	        var elt = _super.prototype._createContainer.call(this);
	        elt.style.border = "none";
	        elt.style.boxShadow = "none";
	        return elt;
	    };
	    DateCellEditor.prototype._createEditor = function (parent) {
	        var editor = _super.prototype._createEditor.call(this, parent);
	        return editor;
	    };
	    DateCellEditor.prototype._textHandler = function () {
	        this._requestStart(false);
	    };
	    DateCellEditor.prototype._compositionstartHandler = function (e) {
	        this._requestStart(false); //e);
	    };
	    DateCellEditor.prototype._keyDownHandler = function (e) {
	        var list = this._list;
	        if (list.monthListing) {
	            if (e.keyCode == Types.Keys.ESCAPE) {
	                this.closeMonthList();
	                e.preventDefault();
	                e.stopImmediatePropagation();
	                return true;
	            }
	            return false;
	        }
	        var listing = this.listing;
	        var focused = listing && list.focused;
	        switch (e.keyCode) {
	            case Types.Keys.ENTER:
	                if (this.closeUp(true)) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    return !this._sendToParent(e);
	                }
	                break;
	            case Types.Keys.ESCAPE:
	                if (this.closeUp(false)) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    return true;
	                }
	                break;
	            case Types.Keys.HOME:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.firstDay());
	                    return true;
	                }
	                break;
	            case Types.Keys.END:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.lastDay());
	                    return true;
	                }
	                break;
	            case Types.Keys.LEFT:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.incDay(-1));
	                    return true;
	                }
	                break;
	            case Types.Keys.RIGHT:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.incDay(1));
	                    return true;
	                }
	                break;
	            case Types.Keys.PAGEUP:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.incMonth(-1));
	                    return true;
	                }
	                break;
	            case Types.Keys.PAGEDOWN:
	                if (focused) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this.$_selectDate(list.incMonth(1));
	                    return true;
	                }
	                break;
	            case Types.Keys.DOWN:
	                if (e.altKey && !listing) {
	                    this._requestStart(false);
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    return true;
	                }
	                else if (listing) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    if (focused) {
	                        this.$_selectDate(list.incDay(7));
	                    }
	                    else {
	                        this._list.focused = true;
	                        this.$_setListDate();
	                    }
	                    return true;
	                }
	                break;
	            case Types.Keys.UP:
	                if (e.altKey && listing) {
	                    this.closeUp(false);
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    return true;
	                }
	                else if (listing) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    if (focused) {
	                        var d = list.date;
	                        if (d.getDate() <= 7) { //} && d.getDay() + 1 >= d.getDate()) {
	                            this._list.focused = false;
	                        }
	                        else {
	                            this.$_selectDate(list.incDay(-7));
	                        }
	                    }
	                    else {
	                        this._list.focused = false;
	                    }
	                    return true;
	                }
	                break;
	            case Types.Keys.T:
	                if ((e.altKey || e.altKey && e.ctrlKey) && listing) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    this._list.date = new Date();
	                    this.$_selectDate(this._list.date);
	                }
	                break;
	        }
	        return _super.prototype._keyDownHandler.call(this, e);
	    };
	    DateCellEditor.prototype._keyPressHandler = function (e) {
	        var list = this._list;
	        var c = String.fromCharCode(e.keyCode || e.charCode);
	        if (c.toLocaleLowerCase() == this.todayChar) {
	            e.preventDefault();
	            e.stopImmediatePropagation();
	            if (this.listing) {
	                list.focused = true;
	                this.$_selectDate(list.today);
	                return true;
	            }
	        }
	        else {
	            if (Utils_1.Utils.isFirefox && (e.ctrlKey || e.charCode === 0)) {
	                _super.prototype._keyPressHandler.call(this, e);
	                return;
	            }
	            if (!this._regx.test(c)) {
	                e.preventDefault();
	                return;
	            }
	        }
	        _super.prototype._keyPressHandler.call(this, e);
	        e.keyCode && /* e.keyCode === Keys.SPACE &&*/ this.textReadOnly && e.preventDefault();
	    };
	    DateCellEditor.prototype.$_resetValue = function () {
	        if (this.visible) {
	            var editor = this._editor;
	            var s = editor.selectionStart;
	            var p = editor.selectionEnd;
	            var plen = editor.value ? editor.value.length : 0;
	            editor.value = editor.value.replace($$_HANGUL_REG, '');
	            var alen = editor.value ? editor.value.length : 0;
	            alen == plen ? editor.setSelectionRange(s, p) : editor.setSelectionRange(p, p);
	        }
	    };
	    DateCellEditor.prototype._dispatchChange = function () {
	        if (this.visible) {
	            this.$_resetValue();
	            _super.prototype._dispatchChange.call(this);
	        }
	    };
	    DateCellEditor.prototype._changeHandler = function (e) {
	        _super.prototype._changeHandler.call(this, e);
	    };
	    DateCellEditor.prototype._pasteHandler = function (e) {
	        _super.prototype._pasteHandler.call(this, e);
	    };
	    DateCellEditor.prototype._copyHandler = function (e) {
	        _super.prototype._copyHandler.call(this, e);
	    };
	    DateCellEditor.prototype._requestStart = function (dropdown) {
	        if (dropdown === void 0) { dropdown = false; }
	        if (_super.prototype._requestStart.call(this)) {
	            dropdown && this.dropDown();
	            return true;
	        }
	        return false;
	    };
	    DateCellEditor.prototype.setBounds = function (x, y, w, h) {
	        x += 2;
	        y += 2;
	        w -= 4;
	        h -= 4;
	        _super.prototype.setBounds.call(this, x, y, w, h);
	    };
	    DateCellEditor.prototype._doChanged = function () {
	        !this._started && this._requestStart();
	        // date Editor에서 this._readOnly=false// this._controller._readOnly를 이용해서 처리해야 한다.
	        // input element의 readOnly는 textReadOnly를 따라간다.
	        if (this._started && !this._controller["_readOnly"] && this._controller["editable"]) {
	            this._modified = true;
	            this._dispatchChange();
	        }
	    };
	    DateCellEditor.prototype.dropDownList = function (force) {
	        this.dropDown();
	    };
	    DateCellEditor.prototype.closeList = function (accept) {
	        this.closeUp(accept);
	    };
	    DateCellEditor.prototype.closeMonthList = function () {
	        this._list.closeMonth();
	    };
	    DateCellEditor.prototype.buttonClicked = function (index) {
	        this.listing ? this.closeUp(false) : this.dropDown();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DateCellEditor.prototype._isDateEditor = function () {
	        var valueType = this._editField().dataType;
	        return valueType == Types.ValueType.DATE || valueType == Types.ValueType.DATETIME || !this.weekSelectable;
	    };
	    DateCellEditor.prototype.$_selectDate = function (d) {
	        if (d && d != this._date) {
	            this._date = d;
	            if (this.containsRange(d)) {
	                var s = void 0;
	                if (this.weekSelectable) {
	                    s = $_getYearWeeks(d, this._startWeek, !!this.weekSeparator);
	                }
	                else {
	                    s = this._dateConverter.getText(this._date);
	                }
	                if (this._mask) {
	                    s = this._mask.writeBuffer(s);
	                }
	                this._editor["value"] = s;
	                // this._dispatchChange();
	                this._doChanged();
	            }
	        }
	    };
	    DateCellEditor.prototype.$_setListDate = function () {
	        var d;
	        var s = this._editor["value"];
	        //s && this._mask && (s = this._mask.getStripValue(s));
	        this._mask && (s = this._mask.getStripValue());
	        if (this.weekSelectable) {
	            d = $_getWeekThurs(s);
	        }
	        else {
	            d = this._dateConverter.getDateNull(s);
	        }
	        switch (this._defaultShowDate) {
	            case Types.DefaultShowDate.TODAY:
	                d = new Date();
	                break;
	            case Types.DefaultShowDate.NORMAL:
	                break;
	            case Types.DefaultShowDate.TODAY_WHEN_NULL:
	                d = d || new Date();
	                break;
	            default:
	                //d = d || (typeof this._defaultShowDate === "string" ? this._dateConverter.getDateNull(s) : this._defaultShowDate instanceof Date ? this._defaultShowDate : null);
	                break;
	        }
	        if (d) {
	            this._list.date = d;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    DateCellEditor.prototype.onDatePickerCloseUp = function (list, accept) {
	        this.closeUp(accept);
	        !Utils_1.Utils.isMobile && this.setFocus();
	    };
	    return DateCellEditor;
	}(Editors.TextCellEditor));
	exports.DateCellEditor = DateCellEditor;
	});

	unwrapExports(DateEditors);
	var DateEditors_1 = DateEditors.HolidayCollection;
	var DateEditors_2 = DateEditors.DateCellEditor;

	var EditOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// EditOptions.ts
	// 2019. 08. 13. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });










	var EditOptions = /** @class */ (function (_super) {
	    __extends(EditOptions, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._readOnly = false;
	        _this._editable = !Utils_1.Utils.isMobile();
	        _this._checkable = true;
	        _this._updatable = true;
	        _this._appendable = false;
	        _this._insertable = false;
	        _this._deletable = false;
	        _this._revertable = false;
	        _this._editWhenFocused = false;
	        _this._commitWhenNoEdit = false;
	        _this._commitWhenExitLast = false;
	        _this._crossWhenExitLast = false;
	        _this._validateOnEdited = true;
	        _this._validateOnExit = false;
	        _this._hintOnError = true;
	        _this._deleteRowsMessage = Utils_1.Utils.win["RG_CONST"] && Utils_1.Utils.win["RG_CONST"]["DELETEROWSMESSAGE"] ? Utils_1.Utils.win["RG_CONST"]["DELETEROWSMESSAGE"] : "선택된 행(들)을 삭제하시겠습니까??";
	        _this._invalidFormatMessage = Utils_1.Utils.win["RG_CONST"] && Utils_1.Utils.win["RG_CONST"]["INVALIDFORMATMESSAGE"] ? Utils_1.Utils.win["RG_CONST"]["INVALIDFORMATMESSAGE"] : "잘못된 입력 유형입니다.";
	        _this._showInvalidFormatMessage = true;
	        _this._deleteRowsConfirm = true;
	        _this._confirmWhenDelete = true;
	        _this._editWhenClickFocused = false;
	        _this._commitLevel = Types.ValidationLevel.IGNORE;
	        _this._useTabKey = true;
	        _this._useArrowKeys = true;
	        _this._skipReadOnly = false;
	        _this._skipReadOnlyCell = false;
	        //private _verticalMovingStep = VerticalMovingStep.DEFAULT;
	        _this._enterToTab = false;
	        _this._enterToNextRow = false;
	        _this._enterToEdit = false;
	        _this._maxLengthToNextCell = false;
	        _this._forceInsert = false;
	        _this._forceAppend = false;
	        _this._checkDiff = false;
	        _this._checkCellDiff = false;
	        _this._strictDiff = false;
	        _this._deletableWhenEdit = true;
	        _this._showCommitError = true;
	        _this._firstCellWhenInsert = false;
	        _this._appendWhenInsertKey = false;
	        _this._appendWhenExitLast = false;
	        _this._showOnlyValidationMessage = true;
	        _this._displayEmptyEditRow = false;
	        _this._checkWhenSpace = false;
	        _this._buttonClickWhenSpace = false;
	        _this._exitGridWhenTab = false;
	        _this._innerDraggable = false;
	        _this._exceptDataClickWhenButton = false;
	        return _this;
	    }
	    EditOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EditOptions.prototype, "readOnly", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** readOnly */
	        get: function () {
	            return this._readOnly;
	        },
	        set: function (value) {
	            if (value != this._readOnly) {
	                this._readOnly = value;
	                this._refreshOwner();
	                this._invalidateEditor();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "editable", {
	        /** editable */
	        get: function () {
	            return this._editable;
	        },
	        set: function (value) {
	            if (value != this._editable) {
	                this._editable = value;
	                this._refreshOwner();
	                this._invalidateEditor();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "checkable", {
	        /** checkable */
	        get: function () {
	            return this._checkable;
	        },
	        set: function (value) {
	            if (value != this._checkable) {
	                this._checkable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "updatable", {
	        /** updatable */
	        get: function () {
	            return this._updatable;
	        },
	        set: function (value) {
	            if (value != this._updatable) {
	                this._updatable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "appendable", {
	        /** appendable */
	        get: function () {
	            return this._appendable;
	        },
	        set: function (value) {
	            if (value != this._appendable) {
	                this._appendable = value;
	                this.displayEmptyEditRow = this._displayEmptyEditRow;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "insertable", {
	        /** insertable */
	        get: function () {
	            return this._insertable;
	        },
	        set: function (value) {
	            if (value != this._insertable) {
	                this._insertable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "deletable", {
	        /** deletable */
	        get: function () {
	            return this._deletable;
	        },
	        set: function (value) {
	            if (value != this._deletable) {
	                this._deletable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "revertable", {
	        /** revertable */
	        get: function () {
	            return this._revertable;
	        },
	        set: function (value) {
	            if (value != this._revertable) {
	                this._revertable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "editWhenFocused", {
	        /** editWhenFocused */
	        get: function () {
	            return this._editWhenFocused;
	        },
	        set: function (value) {
	            this._editWhenFocused = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "commitWhenNoEdit", {
	        /** commitWhenNoEdit */
	        get: function () {
	            return this._commitWhenNoEdit;
	        },
	        set: function (value) {
	            this._commitWhenNoEdit = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "commitWhenExitLast", {
	        /** commitWhenExitLast */
	        get: function () {
	            return this._commitWhenExitLast;
	        },
	        set: function (value) {
	            this._commitWhenExitLast = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "crossWhenExitLast", {
	        /** crossWhenExitLast */
	        get: function () {
	            return this._crossWhenExitLast;
	        },
	        set: function (value) {
	            this._crossWhenExitLast = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "validateOnEdited", {
	        /** validateOnEdited */
	        get: function () {
	            return this._validateOnEdited;
	        },
	        set: function (value) {
	            this._validateOnEdited = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "validateOnExit", {
	        /** validateOnExit */
	        get: function () {
	            return this._validateOnExit;
	        },
	        set: function (value) {
	            this._validateOnExit = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "hintOnError", {
	        /** hintOnError */
	        get: function () {
	            return this._hintOnError;
	        },
	        set: function (value) {
	            this._hintOnError = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "deleteRowsMessage", {
	        /** deleteRowsMessage */
	        get: function () {
	            return this._deleteRowsMessage;
	        },
	        set: function (value) {
	            this._deleteRowsMessage = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "invalidFormatMessage", {
	        /** invalidFormatMessage */
	        get: function () {
	            return this._invalidFormatMessage;
	        },
	        set: function (value) {
	            this._invalidFormatMessage = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "showInvalidFormatMessage", {
	        /** showInvalidFormatMessage */
	        get: function () {
	            return this._showInvalidFormatMessage;
	        },
	        set: function (value) {
	            this._showInvalidFormatMessage = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "deleteRowsConfirm", {
	        /** deleteRowsConfirm */
	        get: function () {
	            return this._deleteRowsConfirm;
	        },
	        set: function (value) {
	            this._deleteRowsConfirm = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "confirmWhenDelete", {
	        /** confirmWhenDelete */
	        get: function () {
	            return this._confirmWhenDelete;
	        },
	        set: function (value) {
	            this._confirmWhenDelete = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "editWhenClickFocused", {
	        /** editWhenClickFocused */
	        get: function () {
	            return this._editWhenClickFocused;
	        },
	        set: function (value) {
	            this._editWhenClickFocused = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "commitLevel", {
	        /** commitLevel */
	        get: function () {
	            return this._commitLevel;
	        },
	        set: function (value) {
	            this._commitLevel = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "useTabKey", {
	        /** useTabKey */
	        get: function () {
	            return this._useTabKey;
	        },
	        set: function (value) {
	            this._useTabKey = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "useArrowKeys", {
	        /** useArrowKeys */
	        get: function () {
	            return this._useArrowKeys;
	        },
	        set: function (value) {
	            this._useArrowKeys = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "skipReadOnly", {
	        /** skipReadOnly */
	        get: function () {
	            return this._skipReadOnly;
	        },
	        set: function (value) {
	            this._skipReadOnly = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "skipReadOnlyCell", {
	        /** skipReadOnlyCell */
	        get: function () {
	            return this._skipReadOnlyCell;
	        },
	        set: function (value) {
	            this._skipReadOnlyCell = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "enterToTab", {
	        // verticalMovingStep: VerticalMovingStep.DEFAULT,
	        /** enterToTab */
	        get: function () {
	            return this._enterToTab;
	        },
	        set: function (value) {
	            this._enterToTab = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "enterToNextRow", {
	        /** enterToNextRow */
	        get: function () {
	            return this._enterToNextRow;
	        },
	        set: function (value) {
	            this._enterToNextRow = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "enterToEdit", {
	        /** enterToEdit */
	        get: function () {
	            return this._enterToEdit;
	        },
	        set: function (value) {
	            this._enterToEdit = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "maxLengthToNextCell", {
	        /** maxLengthToNextCell */
	        get: function () {
	            return this._maxLengthToNextCell;
	        },
	        set: function (value) {
	            this._maxLengthToNextCell = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "forceInsert", {
	        /** forceInsert */
	        get: function () {
	            return this._forceInsert;
	        },
	        set: function (value) {
	            this._forceInsert = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "forceAppend", {
	        /** forceAppend */
	        get: function () {
	            return this._forceAppend;
	        },
	        set: function (value) {
	            this._forceAppend = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "checkDiff", {
	        /** checkDiff */
	        get: function () {
	            return this._checkDiff;
	        },
	        set: function (value) {
	            this._checkDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "checkCellDiff", {
	        /** checkCellDiff */
	        get: function () {
	            return this._checkCellDiff;
	        },
	        set: function (value) {
	            this._checkCellDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "strictDiff", {
	        /** strictDiff */
	        get: function () {
	            return this._strictDiff;
	        },
	        set: function (value) {
	            this._strictDiff = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "deletableWhenEdit", {
	        /** deletableWhenEdit */
	        get: function () {
	            return this._deletableWhenEdit;
	        },
	        set: function (value) {
	            this._deletableWhenEdit = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "showCommitError", {
	        /** showCommitError */
	        get: function () {
	            return this._showCommitError;
	        },
	        set: function (value) {
	            this._showCommitError = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "firstCellWhenInsert", {
	        /** firstCellWhenInsert */
	        get: function () {
	            return this._firstCellWhenInsert;
	        },
	        set: function (value) {
	            this._firstCellWhenInsert = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "appendWhenInsertKey", {
	        /** appendWhenInsertKey */
	        get: function () {
	            return this._appendWhenInsertKey;
	        },
	        set: function (value) {
	            this._appendWhenInsertKey = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "appendWhenExitLast", {
	        /** appendWhenExitLast */
	        get: function () {
	            return this._appendWhenExitLast;
	        },
	        set: function (value) {
	            this._appendWhenExitLast = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "showOnlyValidationMessage", {
	        /** showOnlyValidationMessage */
	        get: function () {
	            return this._showOnlyValidationMessage;
	        },
	        set: function (value) {
	            this._showOnlyValidationMessage = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "displayEmptyEditRow", {
	        /** displayEmptyEditRow */
	        get: function () {
	            return this._displayEmptyEditRow;
	        },
	        set: function (value) {
	            var grid = this.grid;
	            // if (grid && grid instanceof TreeView) {
	            // 	this._displayEmptyEditRow = false;
	            // 	return;
	            // }
	            this._displayEmptyEditRow = value;
	            if (this._displayEmptyEditRow && this._appendable) {
	                grid.itemSource["appendDummy"]();
	            }
	            else {
	                grid.itemSource["cancelDummy"]();
	            }
	            this._refreshOwner();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "checkWhenSpace", {
	        /** checkWhenSpace */
	        get: function () {
	            return this._checkWhenSpace;
	        },
	        set: function (value) {
	            this._checkWhenSpace = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "buttonClickWhenSpace", {
	        /** buttonClickWhenSpace */
	        get: function () {
	            return this._buttonClickWhenSpace;
	        },
	        set: function (value) {
	            this._buttonClickWhenSpace = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "exitGridWhenTab", {
	        /** exitGridWhenTab */
	        get: function () {
	            return this._exitGridWhenTab;
	        },
	        set: function (value) {
	            this._exitGridWhenTab = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "innerDraggable", {
	        /** innerDraggable */
	        get: function () {
	            return this._innerDraggable;
	        },
	        set: function (value) {
	            this._innerDraggable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditOptions.prototype, "exceptDataClickWhenButton", {
	        /** exceptDataClickWhenButton */
	        get: function () {
	            return this._exceptDataClickWhenButton;
	        },
	        set: function (value) {
	            this._exceptDataClickWhenButton = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EditOptions.prototype.isWritable = function () {
	        return this._editable && !this._readOnly;
	    };
	    EditOptions.prototype.canUpdate = function () {
	        return !this._readOnly && this._updatable;
	    };
	    EditOptions.prototype.canInsert = function () {
	        return !this._readOnly && this._insertable;
	    };
	    EditOptions.prototype.canAppend = function () {
	        return !this._readOnly && this._appendable;
	    };
	    EditOptions.prototype.canDelete = function () {
	        return !this._readOnly && this._deletable;
	    };
	    return EditOptions;
	}(GridOptions.GridBaseOptions));
	exports.EditOptions = EditOptions;
	var EditorTitleExpressionRuntime = /** @class */ (function (_super) {
	    __extends(EditorTitleExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditorTitleExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    EditorTitleExpressionRuntime.prototype.dispose = function () {
	        this._cell = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EditorTitleExpressionRuntime.prototype, "value", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** value */
	        set: function (value) {
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorTitleExpressionRuntime.prototype, "cell", {
	        /** cell */
	        set: function (value) {
	            this._cell = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    EditorTitleExpressionRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (EditorTitleExpressionRuntime.IDENTS.hasOwnProperty(token)) {
	            return EditorTitleExpressionRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    EditorTitleExpressionRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case EditorTitleExpressionRuntime.ID_VALUE:
	                return this._value;
	            case EditorTitleExpressionRuntime.ID_ROW:
	                return this._cell.itemIndex + 1;
	            case EditorTitleExpressionRuntime.ID_COLUMN_HEADER:
	                var column = this._cell && this._cell.column;
	                return column && column.header && column.header.text ? column.header.text : column.displayText;
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    EditorTitleExpressionRuntime.ID_VALUE = 0;
	    EditorTitleExpressionRuntime.ID_ROW = 1;
	    EditorTitleExpressionRuntime.ID_COLUMN_HEADER = 2;
	    EditorTitleExpressionRuntime.IDENTS = {
	        value: EditorTitleExpressionRuntime.ID_VALUE,
	        row: EditorTitleExpressionRuntime.ID_ROW,
	        dcount: EditorTitleExpressionRuntime.ID_COLUMN_HEADER
	    };
	    return EditorTitleExpressionRuntime;
	}(Expression.ExpressionRuntime));
	exports.EditorTitleExpressionRuntime = EditorTitleExpressionRuntime;
	var EditorOptions = /** @class */ (function (_super) {
	    __extends(EditorOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function EditorOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._yearDisplayFormat = window["RG_CONST"] && window["RG_CONST"]["YEARDISPLAYFORMAT"] ? window["RG_CONST"]["YEARDISPLAYFORMAT"] : "{Y}년";
	        _this._monthDisplayFormat = window["RG_CONST"] && window["RG_CONST"]["MONTHDISPLAYFORMAT"] ? window["RG_CONST"]["MONTHDISPLAYFORMAT"] : "{M}월";
	        _this._months = null;
	        _this._weekDays = null;
	        _this._viewGridInside = false;
	        _this._useCssStyle = false;
	        _this._useCssStyleDropDownList = false;
	        _this._useCssStyleDatePicker = false;
	        _this._useCssStylePopupMenu = false;
	        _this._useCssStyleMultiCheck = false;
	        _this._applyCellFont = false;
	        _this._holidays = null;
	        _this._titleExprRuntime = new EditorTitleExpressionRuntime();
	        return _this;
	    }
	    EditorOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(EditorOptions.prototype, "yearDisplayFormat", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** yearDisplayFormat */
	        get: function () {
	            return this._yearDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._yearDisplayFormat) {
	                this._yearDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "monthDisplayFormat", {
	        /** monthDisplayFormat */
	        get: function () {
	            return this._monthDisplayFormat;
	        },
	        set: function (value) {
	            if (value != this._monthDisplayFormat) {
	                this._monthDisplayFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "months", {
	        /** months */
	        get: function () {
	            return this._months;
	        },
	        set: function (value) {
	            if (value != this._months) {
	                this._months = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "weekDays", {
	        /** weekDays */
	        get: function () {
	            return this._weekDays;
	        },
	        set: function (value) {
	            if (value != this._weekDays) {
	                this._weekDays = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "viewGridInside", {
	        /** viewGridInside */
	        get: function () {
	            return this._viewGridInside;
	        },
	        set: function (value) {
	            if (value != this._viewGridInside) {
	                this._viewGridInside = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "applyCellFont", {
	        /** applyCellFont */
	        get: function () {
	            return this._applyCellFont;
	        },
	        set: function (value) {
	            if (value != this._applyCellFont) {
	                this._applyCellFont = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "titleStatement", {
	        /** titleStatement */
	        get: function () {
	            return this._titleStatement;
	        },
	        set: function (value) {
	            if (value != this._titleStatement) {
	                this._titleStatement = value;
	                if (value) {
	                    if (this._titleExprStatement) {
	                        this._titleExprStatement.source = value;
	                    }
	                    else {
	                        this._titleExprStatement = new ExpressionStatement_1.ExpressionStatement(value);
	                    }
	                }
	                else {
	                    this._titleExprStatement = null;
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EditorOptions.prototype, "holidays", {
	        /** holidays */
	        get: function () {
	            return this._holidays;
	        },
	        set: function (value) {
	            if (value != this._holidays) {
	                this._holidays = value;
	                if (value) {
	                    this._holidayCollection = this._holidayCollection || new DateEditors.HolidayCollection();
	                    this._holidayCollection.load(value);
	                }
	                else {
	                    this._holidayCollection && this._holidayCollection.clear();
	                }
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EditorOptions;
	}(GridOptions.GridBaseOptions));
	exports.EditorOptions = EditorOptions;
	var CopyOptions = /** @class */ (function (_super) {
	    __extends(CopyOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CopyOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._enabled = true;
	        _this._singleMode = false;
	        _this._datetimeFormat = null;
	        _this._booleanFormat = null;
	        _this._lookupDisplay = false;
	        _this._copyDisplayText = false;
	        return _this;
	    }
	    CopyOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CopyOptions.prototype, "enabled", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** enabled */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            if (value != this._enabled) {
	                this._enabled = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CopyOptions.prototype, "singleMode", {
	        /** singleMode */
	        get: function () {
	            return this._singleMode;
	        },
	        set: function (value) {
	            if (value != this._singleMode) {
	                this._singleMode = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CopyOptions.prototype, "datetimeFormat", {
	        /** datetimeFormat */
	        get: function () {
	            return this._datetimeFormat;
	        },
	        set: function (value) {
	            if (value != this._datetimeFormat) {
	                this._datetimeFormat = value;
	                if (value) {
	                    this._dateWriter = new DateTimeWriter_1.DateTimeWriter(value);
	                }
	                else {
	                    this._dateWriter = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CopyOptions.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                if (value) {
	                    this._boolWriter = new BooleanFormatter_1.BooleanFormatter(value);
	                }
	                else {
	                    this._boolWriter = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CopyOptions.prototype, "lookupDisplay", {
	        /** lookupDisplay */
	        get: function () {
	            return this._lookupDisplay;
	        },
	        set: function (value) {
	            if (value != this._lookupDisplay) {
	                this._lookupDisplay = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CopyOptions.prototype, "copyDisplayText", {
	        /** copyDisplayText */
	        get: function () {
	            return this._copyDisplayText;
	        },
	        set: function (value) {
	            if (value != this._copyDisplayText) {
	                this._copyDisplayText = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CopyOptions;
	}(GridOptions.GridBaseOptions));
	exports.CopyOptions = CopyOptions;
	var PasteOptions = /** @class */ (function (_super) {
	    __extends(PasteOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function PasteOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._enabled = true;
	        _this._singleMode = false;
	        _this._startEdit = true;
	        _this._commitEdit = true;
	        _this._enableAppend = true;
	        _this._fillFieldDefaults = false;
	        _this._fillColumnDefaults = false;
	        _this._forceRowValidation = false;
	        _this._forceColumnValidation = false;
	        _this._datetimeFormats = null;
	        _this._booleanFormat = null;
	        _this._numberChars = null;
	        _this._numberSeparator = null;
	        _this._numberCharsOfCols = {};
	        _this._numberSeparatorOfCols = {};
	        _this._selectionBase = false;
	        _this._selectBlockPaste = false;
	        _this._stopOnError = true;
	        _this._noEditEvent = false;
	        _this._noDataEvent = false;
	        _this._eventEachRow = false;
	        _this._checkReadOnly = false;
	        _this._checkDomainOnly = false;
	        _this._convertLookupLabel = false;
	        _this._applyNumberFormat = false;
	        _this._applyEditMask = false;
	        _this._applyMaxLength = false;
	        _this._throwValidationError = true;
	        return _this;
	    }
	    PasteOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(PasteOptions.prototype, "enabled", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** enabled */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            if (value != this._enabled) {
	                this._enabled = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "singleMode", {
	        /** singleMode */
	        get: function () {
	            return this._singleMode;
	        },
	        set: function (value) {
	            if (value != this._singleMode) {
	                this._singleMode = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "startEdit", {
	        /** startEdit */
	        get: function () {
	            return this._startEdit;
	        },
	        set: function (value) {
	            if (value != this._startEdit) {
	                this._startEdit = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "commitEdit", {
	        /** commitEdit */
	        get: function () {
	            return this._commitEdit;
	        },
	        set: function (value) {
	            if (value != this._commitEdit) {
	                this._commitEdit = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "enableAppend", {
	        /** enableAppend */
	        get: function () {
	            return this._enableAppend;
	        },
	        set: function (value) {
	            if (value != this._enableAppend) {
	                this._enableAppend = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "fillFieldDefaults", {
	        /** fillFieldDefaults */
	        get: function () {
	            return this._fillFieldDefaults;
	        },
	        set: function (value) {
	            if (value != this._fillFieldDefaults) {
	                this._fillFieldDefaults = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "fillColumnDefaults", {
	        /** fillColumnDefaults */
	        get: function () {
	            return this._fillColumnDefaults;
	        },
	        set: function (value) {
	            if (value != this._fillColumnDefaults) {
	                this._fillColumnDefaults = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "forceRowValidation", {
	        /** forceRowValidation */
	        get: function () {
	            return this._forceRowValidation;
	        },
	        set: function (value) {
	            if (value != this._forceRowValidation) {
	                this._forceRowValidation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "forceColumnValidation", {
	        /** forceColumnValidation */
	        get: function () {
	            return this._forceColumnValidation;
	        },
	        set: function (value) {
	            if (value != this._forceColumnValidation) {
	                this._forceColumnValidation = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "datetimeFormats", {
	        /** datetimeFormats */
	        get: function () {
	            return this._datetimeFormats;
	        },
	        set: function (value) {
	            if (value !== this._datetimeFormats) {
	                this._datetimeFormats = value && value.concat();
	                if (value) {
	                    this._dateReaders = [];
	                    for (var i = 0; i < this._datetimeFormats.length; i++) {
	                        this._dateReaders.push(new DateTimeReader_1.DateTimeReader(this._datetimeFormats[i]));
	                    }
	                }
	                else {
	                    this._dateReaders = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "dateReaders", {
	        /** dateReaders */
	        get: function () {
	            return this._dateReaders;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "booleanFormat", {
	        /** booleanFormat */
	        get: function () {
	            return this._booleanFormat;
	        },
	        set: function (value) {
	            if (value != this._booleanFormat) {
	                this._booleanFormat = value;
	                this._boolReader = value && new BooleanConverter_1.BooleanConverter(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "boolReader", {
	        /** boolReader */
	        get: function () {
	            return this._boolReader;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "numberChars", {
	        /** numberChars */
	        get: function () {
	            return this._numberChars;
	        },
	        set: function (value) {
	            if (value !== this._numberChars) {
	                this._numberChars = value;
	                if (value && value.length > 0) {
	                    var s = "[";
	                    for (var i = 0; i < value.length; i++) {
	                        var c = value[i];
	                        if (c == "\\") {
	                            s += "\\" + c;
	                        }
	                        else {
	                            s += c;
	                        }
	                    }
	                    s += "]";
	                    this._numberCharExp = new RegExp(s, "g");
	                }
	                else {
	                    this._numberCharExp = null;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "numberSeparator", {
	        /** numberSeparator */
	        get: function () {
	            return this._numberSeparator;
	        },
	        set: function (value) {
	            if (value != this._numberSeparator) {
	                this._numberSeparator = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "numberCharsOfCols", {
	        /** numberCharsOfCols */
	        get: function () {
	            return this._numberCharsOfCols;
	        },
	        set: function (value) {
	            if (value !== this._numberCharsOfCols) {
	                this._numberCharsOfCols = value;
	                this._numberCharExpOfCols = {};
	                if (value) {
	                    for (var name_1 in value) {
	                        var col = value[name_1];
	                        if (col instanceof Array && col.length > 0) {
	                            var s = "[";
	                            for (var i = 0, l = col.length; i < l; i++) {
	                                var c = col[i];
	                                if (c == "\\") {
	                                    s += "\\" + c;
	                                }
	                                else {
	                                    s += c;
	                                }
	                            }
	                            s += "]";
	                            this._numberCharExpOfCols[name_1] = new RegExp(s, "g");
	                        }
	                        else {
	                            this._numberCharExpOfCols[name_1] = null;
	                        }
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "numberCharExp", {
	        /** numberCharExp */
	        get: function () {
	            return this._numberCharExp;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "numberSeparatorOfCols", {
	        /** numberSeparatorOfCols */
	        get: function () {
	            return this._numberSeparatorOfCols;
	        },
	        set: function (value) {
	            if (value !== this._numberSeparatorOfCols) {
	                this._numberSeparatorOfCols = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "selectionBase", {
	        /** selectionBase */
	        get: function () {
	            return this._selectionBase;
	        },
	        set: function (value) {
	            if (value != this._selectionBase) {
	                this._singleMode = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "selectBlockPaste", {
	        /** selectBlockPaste */
	        get: function () {
	            return this._selectBlockPaste;
	        },
	        set: function (value) {
	            if (value != this._selectBlockPaste) {
	                this._selectBlockPaste = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "stopOnError", {
	        /** stopOnError */
	        get: function () {
	            return this._stopOnError;
	        },
	        set: function (value) {
	            if (value != this._stopOnError) {
	                this._stopOnError = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "noEditEvent", {
	        /** noEditEvent */
	        get: function () {
	            return this._noEditEvent;
	        },
	        set: function (value) {
	            if (value != this._noEditEvent) {
	                this._noEditEvent = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "noDataEvent", {
	        /** noDataEvent */
	        get: function () {
	            return this._noDataEvent;
	        },
	        set: function (value) {
	            if (value != this._noDataEvent) {
	                this._noDataEvent = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "eventEachRow", {
	        /** eventEachRow */
	        get: function () {
	            return this._eventEachRow;
	        },
	        set: function (value) {
	            if (value != this._eventEachRow) {
	                this._eventEachRow = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "checkReadOnly", {
	        /** checkReadOnly */
	        get: function () {
	            return this._checkReadOnly;
	        },
	        set: function (value) {
	            if (value != this._checkReadOnly) {
	                this._checkReadOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "checkDomainOnly", {
	        /** checkDomainOnly */
	        get: function () {
	            return this._checkDomainOnly;
	        },
	        set: function (value) {
	            if (value != this._checkDomainOnly) {
	                this._checkDomainOnly = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "convertLookupLabel", {
	        /** convertLookupLabel */
	        get: function () {
	            return this._convertLookupLabel;
	        },
	        set: function (value) {
	            if (value != this._convertLookupLabel) {
	                this._convertLookupLabel = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "applyNumberFormat", {
	        /** applyNumberFormat */
	        get: function () {
	            return this._applyNumberFormat;
	        },
	        set: function (value) {
	            if (value != this._applyNumberFormat) {
	                this._applyNumberFormat = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "applyEditMask", {
	        /** applyEditMask */
	        get: function () {
	            return this._applyEditMask;
	        },
	        set: function (value) {
	            if (value != this._applyEditMask) {
	                this._applyEditMask = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "applyMaxLength", {
	        /** applyMaxLength */
	        get: function () {
	            return this._applyMaxLength;
	        },
	        set: function (value) {
	            if (value != this._applyMaxLength) {
	                this._applyMaxLength = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PasteOptions.prototype, "throwValidationError", {
	        /** throwValidationError */
	        get: function () {
	            return this._throwValidationError;
	        },
	        set: function (value) {
	            if (value != this._throwValidationError) {
	                this._throwValidationError = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    PasteOptions.prototype.numberCharExpOfCol = function (col) {
	        return col && this._numberCharExpOfCols && this._numberCharExpOfCols[col] ? this._numberCharExpOfCols[col] : this._numberCharExp;
	    };
	    PasteOptions.prototype.numberSeparatorOfCol = function (col) {
	        return col && this._numberSeparatorOfCols && this._numberSeparatorOfCols[col] ? this._numberSeparatorOfCols[col] : this._numberSeparator;
	    };
	    return PasteOptions;
	}(GridOptions.GridBaseOptions));
	exports.PasteOptions = PasteOptions;
	var MobileOptions = /** @class */ (function (_super) {
	    __extends(MobileOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MobileOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._longTapDuration = 500;
	        _this._doubleTapInterval = 300;
	        _this._tapThreshold = 4;
	        _this._showEditCommander = true;
	        _this._showTooltip = false;
	        return _this;
	    }
	    MobileOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(MobileOptions.prototype, "longTapDuration", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** longTapDuration */
	        get: function () {
	            return this._longTapDuration;
	        },
	        set: function (value) {
	            if (value != this._longTapDuration) {
	                this._longTapDuration = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MobileOptions.prototype, "doubleTapInterval", {
	        /** doubleTapInterval */
	        get: function () {
	            return this._doubleTapInterval;
	        },
	        set: function (value) {
	            if (value != this._doubleTapInterval) {
	                this._doubleTapInterval = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MobileOptions.prototype, "tapThreshold", {
	        /** tapThreshold */
	        get: function () {
	            return this._tapThreshold;
	        },
	        set: function (value) {
	            if (value != this._tapThreshold) {
	                this._tapThreshold = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MobileOptions.prototype, "showEditCommander", {
	        /** showEditCommander */
	        get: function () {
	            return this._showEditCommander;
	        },
	        set: function (value) {
	            if (value != this._showEditCommander) {
	                this._showEditCommander = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MobileOptions.prototype, "showTooltip", {
	        /** showTooltip */
	        get: function () {
	            return this._showTooltip;
	        },
	        set: function (value) {
	            if (value != this._showTooltip) {
	                this._showTooltip = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return MobileOptions;
	}(GridOptions.GridBaseOptions));
	exports.MobileOptions = MobileOptions;
	});

	unwrapExports(EditOptions_1);
	var EditOptions_2 = EditOptions_1.EditOptions;
	var EditOptions_3 = EditOptions_1.EditorTitleExpressionRuntime;
	var EditOptions_4 = EditOptions_1.EditorOptions;
	var EditOptions_5 = EditOptions_1.CopyOptions;
	var EditOptions_6 = EditOptions_1.PasteOptions;
	var EditOptions_7 = EditOptions_1.MobileOptions;

	var ColumnMergeElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// RowGroupMergeElement.ts
	// 2019. 09. 04. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var MergedDataCellElement = /** @class */ (function (_super) {
	    __extends(MergedDataCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function MergedDataCellElement() {
	        var _this = _super.call(this, "mergedDataCellView") || this;
	        _this._topIndex = -1;
	        _this._bottomIndex = -1;
	        return _this;
	    }
	    Object.defineProperty(MergedDataCellElement.prototype, "mergeRoom", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** mergeRoom */
	        get: function () {
	            return this._mergeRoom;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    MergedDataCellElement.prototype._focusedChanged = function () {
	        this._doLayoutHandles();
	        _super.prototype._focusedChanged.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    MergedDataCellElement.prototype.$_setMergeRoom = function (value) {
	        this._mergeRoom = value;
	    };
	    return MergedDataCellElement;
	}(ItemElement_1.DataCellElement));
	exports.MergedDataCellElement = MergedDataCellElement;
	var ColumnMergeElement = /** @class */ (function (_super) {
	    __extends(ColumnMergeElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnMergeElement(bodyView) {
	        var _this = _super.call(this, null, "mergedGoupLayer") || this;
	        _this._roomMap = {}; // [ColumnMergeRoom : MergedDataCellElement];
	        _this._scopeViews = {}; // [any, MergedDataCellElement[]]
	        _this._bodyView = bodyView;
	        _this._cellLayer = new VisualElement_1.LayerElement("mergedCellLayer");
	        _this.addChild(_this._cellLayer);
	        return _this;
	    }
	    ColumnMergeElement.prototype.dispose = function () {
	        this._roomMap = null;
	        this._scopeViews = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnMergeElement.prototype.clearRooms = function () {
	        this._roomMap = {};
	        for (var i = this._cellLayer.childCount - 1; i >= 0; i--) {
	            var view = this._cellLayer.getChild(i);
	            var room = view.mergeRoom;
	            var views = this.$_getViews(room.scope);
	            view.visible = false;
	            if (views.indexOf(view) < 0) {
	                views.push(view);
	            }
	        }
	    };
	    ColumnMergeElement.prototype.prepareSpanning = function (lm) {
	        this._bodyView.prepareSpanning(lm.itemCount, lm.columnCount);
	    };
	    ColumnMergeElement.prototype.spanningPrepared = function (lm, spanned) {
	        this._bodyView.spanningPrepared(lm, spanned);
	    };
	    ColumnMergeElement.prototype.addColumnRooms = function (lm, col, column, rooms) {
	        var fixed = lm.fixedItemCount;
	        var top = lm.topIndex;
	        var views = this.$_getViews(column);
	        for (var i = rooms.length - 1; i >= 0; i--) {
	            var room = rooms[i];
	            var view = void 0;
	            if (views.length > 0) {
	                view = views.pop();
	            }
	            else {
	                view = this._createCellElement(room);
	                this._cellLayer.addChild(view);
	            }
	            view.visible = true;
	            view["$_setMergeRoom"](room);
	            this._roomMap[room["$_hash"]] = view;
	            var head = Math.max(0, room.head - top - fixed);
	            var tail = room.tail - top - fixed;
	            this._bodyView.addSpan(head, col, tail - head + 1, 1);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnMergeElement.prototype._doAttached = function (parent) {
	        _super.prototype._doAttached.call(this, parent);
	        var grid = this.grid;
	        this._headIndex = new CellIndex_1.CellIndex(grid);
	        this._tailIndex = new CellIndex_1.CellIndex(grid);
	    };
	    ColumnMergeElement.prototype._doLayoutContent = function (lm) {
	        var headerViews = this["_headerViews"];
	        var footerViews = this["_footerViews"];
	        var fixedFooterViews = this["_fixedFooterViews"];
	        var rightFooterViews = this["_rightFooterViews"];
	        var items = lm.getItems();
	        var itemCount = items.length;
	        var fixedCount = lm.fixedItemCount;
	        var w = this.width;
	        /*
	        for (let i = fixedCount; i < itemCount; i++) {
	            const item = items[i];

	            // group header
	            if (item instanceof MergedGroupHeader) {
	                const view = headerViews[nHeader++];
	                const r = lm.getItemBounds(i);
	                const indent = lm.getLevelIndent(item.level);

	                view.item = item;
	                view.setBounds(indent, r.y, w - indent, r.height);
	                view.layoutContent(lm);
	            } else if (item instanceof MergedGroupFooter) {
	                const tr = i < fixedCount ? i : fixed ? i + 1 : i;

	                // if (this._fixedView) {
	                //     const view = fixedFooterViews[nFooter];
	                //     view.updateItem(item, tr);
	                //     view.layoutContent(lm);
	                // }
	                // if (this._rightView) {
	                //     const view = rightFooterViews[nFooter];
	                //     view.updateItem(item, tr);
	                //     view.layoutContent(lm);
	                // }

	                const view = footerViews[nFooter++];
	                view.updateItem(item, tr, -1);
	                view.layoutContent(lm);
	            }
	        }
	        */
	        this.$_layoutCells(lm);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnMergeElement.prototype.$_getViews = function (scope) {
	        var views = this._scopeViews[scope.$_hash];
	        if (!views) {
	            views = [];
	            this._scopeViews[scope.$_hash] = views;
	        }
	        return views;
	    };
	    ColumnMergeElement.prototype.$_getCellContent = function (row, col) {
	        return this._bodyView["getCellContent"](row, col);
	    };
	    ColumnMergeElement.prototype._createCellElement = function (room) {
	        var view = null;
	        if (room != null) {
	            var column = room.column;
	            if (column instanceof DataColumn_1.SeriesColumn) ;
	            else if (column instanceof DataColumn_1.DataColumn) {
	                view = new MergedDataCellElement();
	            }
	        }
	        return view;
	    };
	    ColumnMergeElement.prototype.$_layoutCells = function (lm) {
	        var grid = this.grid;
	        var grouped = lm.mergedRowGrouped;
	        var bodyView = this._bodyView;
	        var vExpander = grid.rowGroup.mergeExpander;
	        var topItem = grid.topItem;
	        var topIndex = grid.topIndex;
	        var itemCount = lm.itemCount;
	        var fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0 ? 1 : 0;
	        for (var hash in this._roomMap) {
	            var view = this._roomMap[hash];
	            var room = view.mergeRoom;
	            var idx = room.getHead(this._headIndex);
	            if (idx.itemIndex - topItem > itemCount - 1) {
	                view.visible = false;
	                var views = this.$_getViews(room.column);
	                if (views.indexOf(view) < 0) {
	                    views.push(view);
	                }
	                continue;
	            }
	            idx = room.getTail(this._tailIndex);
	            var col = idx.column;
	            var cell = grid.body.getCell(this._headIndex, true);
	            // let r = lm.columnBounds(col.displayIndex);
	            // x = r.x;
	            // w = r.width;
	            var i = Math.min(fixedCount + itemCount - 1, Math.max(fixedCount, this._headIndex.itemIndex - topIndex));
	            // r = lm.itemBounds(i);
	            view["_topIndex"] = i;
	            //y = r.y;
	            var i2 = this._tailIndex.itemIndex;
	            i2 = Math.min(fixedCount + itemCount - 1, Math.max(fixedCount, i2 - topIndex));
	            view["_bottomIndex"] = i2;
	            // r = lm.itemBounds(i2);
	            // h = r.bottom() - y;
	            // view.setBoundsI(x, y, w, h);
	            //const c = bodyView.getSpannedColIndex(i, col.index); 
	            var c = col["_displayIndex"];
	            view.visible = true;
	            view.updateCell(grid, cell, this.$_getCellContent(i + fixed, c));
	            var td = this._bodyView["getTableCell"](i + fixed, c);
	            td.style.display = "";
	            td.rowSpan = i2 - i + 1;
	            if (view instanceof MergedDataCellElement) {
	                view.expanderVisible = vExpander && grouped;
	            }
	            view.layoutContent(lm);
	        }
	    };
	    return ColumnMergeElement;
	}(GridElement_1.VisualObjectElement));
	exports.ColumnMergeElement = ColumnMergeElement;
	});

	unwrapExports(ColumnMergeElement_1);
	var ColumnMergeElement_2 = ColumnMergeElement_1.MergedDataCellElement;
	var ColumnMergeElement_3 = ColumnMergeElement_1.ColumnMergeElement;

	var ImageList_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ImageList.ts
	// 2019. 09. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var ImageList = /** @class */ (function (_super) {
	    __extends(ImageList, _super);
	    //-------------------------------------------------------------------------
	    // constructors
	    //-------------------------------------------------------------------------
	    function ImageList(name, rootUrl) {
	        var _this = _super.call(this) || this;
	        _this._urls = [];
	        _this._name = name;
	        _this._rootUrl = rootUrl;
	        return _this;
	    }
	    ImageList.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ImageList.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageList.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._urls.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ImageList.prototype.addUrl = function (url) {
	        if (url && this._urls.indexOf(url) < 0) {
	            this._urls.push(url);
	        }
	    };
	    ImageList.prototype.addUrls = function () {
	        var urls = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            urls[_i] = arguments[_i];
	        }
	        if (urls) {
	            for (var i = 0; i < urls.length; i++) {
	                this.addUrl(urls[i]);
	            }
	        }
	    };
	    ImageList.prototype.getImage = function (index) {
	        if (index >= 0 && index < this._urls.length) {
	            return this._rootUrl + this._urls[index];
	        }
	        return null;
	    };
	    return ImageList;
	}(Base_1.Base));
	exports.ImageList = ImageList;
	});

	unwrapExports(ImageList_1);
	var ImageList_2 = ImageList_1.ImageList;

	var EditControllers = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// EditControllers.ts
	// 2019. 10. 21. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	var DefaultEditController = /** @class */ (function (_super) {
	    __extends(DefaultEditController, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DefaultEditController(grid) {
	        var _this = _super.call(this) || this;
	        _this._editIndex = new CellIndex_1.CellIndex();
	        _this._editors = [];
	        _this._starting = false;
	        _this._editRow = -1;
	        _this._editor = null;
	        //private _editState = UNDEFINED;
	        _this._modified = false;
	        _this._commiting = false;
	        _this._canceling = false;
	        _this._resetting = false;
	        _this._dirty = false;
	        _this._editable = false;
	        _this._readOnly = false;
	        _this.$_editFocused = false;
	        _this._resetFocused = false;
	        _this._grid = grid;
	        // test code에서 defaultEditor가 생성되지 않을 수 있다!
	        _this._defaultEditor = _this._createDefaultCellEditor();
	        _this._defaultEditor && _this._defaultEditor.setController(_this);
	        _this._defaultEditor && _this._internalHideEditor(_this._defaultEditor);
	        return _this;
	    }
	    DefaultEditController.prototype.dispose = function () {
	        this._grid = null;
	        this._defaultEditor = null;
	        this._editor = null;
	        this._editors = null; // 사용하는지 확인 필요.
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // EditController
	    //-------------------------------------------------------------------------
	    DefaultEditController.prototype.onEditorStart = function (editor) {
	        if (!editor.visible && !this._commiting && !this._canceling) {
	            return this._activateEditor(false, false);
	        }
	    };
	    DefaultEditController.prototype.onEditorKeyDown = function (editor, keyCode, ctrl, shift, alt) {
	        if (this._editor) {
	            if ((!this._editor.isTextReadOnly || !this._editor.isTextReadOnly()) && !ctrl && !alt && this._isEditKey(keyCode)) {
	                this._editor.setReadOnly(this._readOnly);
	            }
	            else if (this._editor.isTextReadOnly && this._editor.isTextReadOnly()) {
	                this._editor._editor.readOnly = this._editor.isTextReadOnly();
	            }
	            else if (keyCode == 229) {
	                this._editor.setReadOnly(this._readOnly);
	            }
	        }
	        return this._grid.activeTool.keyDown(keyCode, ctrl, shift, alt, null);
	    };
	    DefaultEditController.prototype.onEditorKeyPress = function (editor, keyCode) {
	        return this._grid.activeTool.keyPress(keyCode, null);
	    };
	    DefaultEditController.prototype.onEditorKeyUp = function (editor, keyCode, ctrl, shift, alt) {
	        return this._grid.activeTool.keyUp(keyCode, ctrl, shift, alt, null);
	    };
	    DefaultEditController.prototype.onEditorChange = function (editor) {
	        if (!this._modified) {
	            this._modified = true;
	            this._grid["_editorStarted"](this._editor, this._editIndex);
	        }
	        if (this.editing) {
	            this._grid.makeCellVisible(this._editIndex);
	            this._grid["_editorChange"](this._editor, this._editIndex, this._editor.getEditValue(false, false)); //, this._editor.getEditText());
	        }
	    };
	    DefaultEditController.prototype.onEditorSearch = function (editor, text) {
	        this._grid["_editorSearch"](this._editor, this._editIndex, text);
	    };
	    DefaultEditController.prototype.onSearchCellButtonClick = function (editor, text) {
	        return this._grid["_searchCellButtonClick"](this._editor, this._editIndex, text);
	    };
	    DefaultEditController.prototype.onEditorCommit = function (editor) {
	        return this.commitEditor(true);
	    };
	    Object.defineProperty(DefaultEditController.prototype, "editIndex", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** editIndex */
	        get: function () {
	            return this._editIndex.clone();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultEditController.prototype, "editing", {
	        /** editing */
	        get: function () {
	            return this._editor && this._editor.editing;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DefaultEditController.prototype.setFocus = function (force) {
	        this.$_focusToEditor(force);
	    };
	    DefaultEditController.prototype.resetEditor = function (resetValue) {
	        if (this.editing) {
	            if (!this._grid.isValid(this._editIndex)) {
	                this.hideEditor();
	            }
	            else {
	                this._resetBounds();
	                if (resetValue && this.editing) {
	                    var v = this.getData(this._editIndex);
	                    this._resetting = true;
	                    try {
	                        this._editor.setEditValue(v);
	                        this._editor.beginEdit(false, true);
	                    }
	                    finally {
	                        this._resetting = false;
	                    }
	                }
	            }
	        }
	    };
	    DefaultEditController.prototype.reprepareEditor = function (index) {
	        if (CellIndex_1.CellIndex.areEquals(index, this._editIndex)) {
	            if (this.editing) {
	                this._editor.selectAll();
	            }
	            else {
	                this._prepareEditor(index);
	            }
	        }
	    };
	    DefaultEditController.prototype.invalidateEditor = function () {
	        this._dirty = true;
	    };
	    DefaultEditController.prototype.closeList = function (accept) {
	        if (this._editor) {
	            this._editor.closeList(accept);
	        }
	    };
	    DefaultEditController.prototype.focusedIndexChanging = function () {
	        if (this.editing) {
	            this.closeList(true);
	            return this.commitEditor(true);
	        }
	        return true;
	    };
	    DefaultEditController.prototype.focusedIndexChanged = function (oldIndex, newIndex) {
	        this._hideEditor();
	        if (this._grid.isValid(newIndex)) {
	            this._prepareEditor(newIndex);
	        }
	    };
	    DefaultEditController.prototype.dataColumnChanged = function (column) {
	        if (column && this._editor && this._editIndex && this._editIndex.dataColumn === column) {
	            var readOnly = !column.editable || column.readOnly;
	            if (readOnly != (!this._editable || this._readOnly)) {
	                if (this.editing) {
	                    this._editor.setReadOnly(readOnly);
	                }
	                else {
	                    this._prepareEditor(this._editIndex);
	                }
	            }
	        }
	    };
	    DefaultEditController.prototype.showEditor = function (index, dropdown) {
	        var grid = this._grid;
	        if (grid && grid.isValid(index)) {
	            if (this._editor && this._editor.editing) {
	                grid.makeCellVisible(index);
	                return true;
	            }
	            var canShow = /*(grid.isItemEditing(item) || grid.canUpdate(item, index.dataField())) &&*/ 
	            /* grid.canEdit(index) &&*/ this._editor && !this._editor.editing;
	            if (canShow) {
	                !this._showEditorTimer && this._prepareEditor(index);
	                // if (this._editor) {
	                // 	if (!this._editor.isTextReadOnly || !this._editor.isTextReadOnly()) {
	                // 		this._editor.setReadOnly(this._readOnly);
	                // 	} else if (this._editor.isTextReadOnly && this._editor.isTextReadOnly()){
	                // 		this._editor._editor && (this._editor._editor.readOnly = this._editor.isTextReadOnly()); 
	                // 	}
	                // }
	                grid.makeCellVisible(index);
	                return this._activateEditor(false, true, dropdown);
	            }
	        }
	        return false;
	    };
	    DefaultEditController.prototype.caretToLast = function () {
	        this._editor && this._editor.caretToLast();
	    };
	    DefaultEditController.prototype.hideEditor = function () {
	        if (this.editing) {
	            this._modified = false;
	            this._resetting = true;
	            try {
	                this._internalHideEditor(this._editor);
	                this._prepareEditor(this._editIndex);
	            }
	            finally {
	                this._resetting = false;
	            }
	        }
	    };
	    DefaultEditController.prototype.commitEditor = function (hideEditor, throwError) {
	        if (throwError === void 0) { throwError = false; }
	        if (!this.editing || this._commiting) {
	            return true;
	        }
	        var editor = this._editor;
	        if (!editor)
	            return false;
	        var grid = this._grid;
	        var editOptions = grid.editOptions;
	        var index = this._editIndex;
	        var column = index.dataColumn;
	        var commit = true;
	        var mask = editor._mask;
	        var v;
	        var err;
	        this._commiting = true;
	        try {
	            editor.commit();
	            if (this._modified || editor.isEdited()) {
	                if (column && column.dataIndex >= 0) {
	                    try {
	                        try {
	                            v = mask && !mask.checkValid() ? Editors.CellEditor.InvalidFormat : editor.getEditValue(true, true);
	                            if (v === Editors.CellEditor.InvalidFormat) {
	                                commit = false;
	                                editOptions.showInvalidFormatMessage && mask && mask.showInvalidFormatMessage && alert((mask && mask.invalidFormatMessage) || editOptions.invalidFormatMessage);
	                            }
	                            else if (v === Editors.CellEditor.Unselected) {
	                                commit = false;
	                            }
	                            else {
	                                var editResult = { text: editor.getEditText(), value: v };
	                                this._grid.getEditValue(editor, index, editResult);
	                                v = editResult.value;
	                                commit = this._grid.editorCommit(editor, index, this._getData(index), v);
	                            }
	                        }
	                        catch (e) {
	                            // err = e;
	                            //_trace(e.message || e);
	                            commit = false;
	                        }
	                        if (!this._grid.isItemEditing()) {
	                            this._modified = false;
	                        }
	                        else if (commit) {
	                            this._setData(index, v);
	                            if (this._grid.isItemEditing(index.item)) {
	                                v = this._getData(index);
	                                this._grid.validateCellCommit(index, v);
	                            }
	                            this._modified = false;
	                        }
	                    }
	                    catch (e) {
	                        err = e;
	                        commit = false;
	                    }
	                }
	            }
	            this._resetting = true;
	            if (hideEditor) {
	                try {
	                    this._internalHideEditor(editor);
	                    this._prepareEditor(index);
	                }
	                finally {
	                    this._resetting = false;
	                }
	            }
	            if (err) {
	                //_trace(err.message || err);
	                if (throwError) {
	                    throw err;
	                }
	                else {
	                    alert(err.message || err);
	                }
	            }
	        }
	        finally {
	            this._commiting = false;
	        }
	        return commit;
	    };
	    DefaultEditController.prototype.cancelEditor = function (hideEditor) {
	        if (!this.editing) {
	            return;
	        }
	        this._canceling = true;
	        try {
	            try {
	                this._modified = false;
	                this._grid.editorCancel(this._editor, this._editIndex);
	            }
	            catch (err) {
	                throw err;
	            }
	            this._resetting = true;
	            try {
	                this._internalHideEditor(this._editor);
	                this._prepareEditor(this._editIndex);
	            }
	            finally {
	                this._resetting = false;
	            }
	        }
	        finally {
	            this._canceling = false;
	            this._grid.editorCanceled();
	        }
	    };
	    DefaultEditController.prototype.fillSearchItems = function (column, searchKey, values, labels) {
	        if (this.editing && this._editIndex.column === column && this._editor instanceof ListEditors.SearchCellEditor) {
	            this._editor.fillItems(searchKey, values, labels);
	        }
	    };
	    DefaultEditController.prototype.buttonClicked = function (index) {
	        if (this._editor && CellIndex_1.CellIndex.areEquals(this._editIndex, index) && this._editor.hasButton()) {
	            this._editor.buttonClicked(this._editIndex);
	        }
	    };
	    DefaultEditController.prototype.getData = function (index) {
	        throw new Error("Method not implemented.");
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DefaultEditController.prototype._createDefaultCellEditor = function () {
	        // test code에서 grid에 container가 설정되지 않을 수 있다.
	        if (this._grid.container) {
	            var parent_1 = this._grid.container["_container"];
	            var editor = new Editors.LineCellEditor(this._grid, parent_1);
	            return editor;
	        }
	        return null;
	    };
	    DefaultEditController.prototype._internalHideEditor = function (editor) {
	        this.closeList(false);
	        editor.setVisible(false, false);
	        editor.endEdit();
	        !this._grid["_loading"] && this._grid["_fireHideEditor"](editor["_editIndex"]);
	    };
	    DefaultEditController.prototype.$_hideEdit = function (index, editor) {
	        if (editor) {
	            //editor.setReadOnly(this._readOnly = true);
	            editor.setEditIndex(index);
	            editor.setVisible(false);
	            this.$_focusToEditor();
	        }
	    };
	    DefaultEditController.prototype.$_getCellEditor = function (index) {
	        var editor = this._grid.delegate.getCellEditor(index);
	        if (editor) {
	            editor.setController(this);
	        }
	        return editor;
	    };
	    DefaultEditController.prototype.getCellEditor2 = function (index) {
	        var grid = this._grid;
	        var column = index.column;
	        var editor = this._grid.delegate.getCellEditor(index);
	        //index.item && grid.body.getCell(index); // dynamicStyle적용.
	        //const options = grid.getCellEditorOptions(index) || column.editorOptions();
	        editor.initOptions();
	        //options && this._editor.applyOptions(options);		
	        return editor;
	    };
	    DefaultEditController.prototype._prepareEditor = function (index) {
	        this._dirty = false;
	        if (!this._grid.isValid(index)) {
	            return;
	        }
	        this._hideEditor();
	        this._editor = this.$_getCellEditor(index);
	        if (!this._editor) {
	            return;
	        }
	        this._editIndex.assign(index);
	        this._editor.setReadOnly(false);
	        var grid = this._grid;
	        var options = grid.editOptions;
	        var editorOpts = grid.editorOptions;
	        var column = index.dataColumn;
	        var item = index.item;
	        var itemState = item.itemState;
	        var row = GridItem_1.ItemState_isInserting(itemState) ? -1 : index.dataRow;
	        var style = grid.itemSource.getCellStyle(row, index.dataField);
	        var editable = grid.canEdit(index);
	        if (style) {
	            editable = style.isEditable(editable);
	        }
	        editorOpts["_titleExprStatement"] && this._editor.setEditorTitle(index);
	        // if (!grid.fixedOptions().isRowEditable() && index.itemIndex() < grid.layoutManager().fixedItemCount()) {
	        //     this.$_hideEdit(index, this._editor);
	        //     return;
	        // }
	        // var column = index.dataColumn();
	        // var item = index.item();
	        // var itemState = item.itemState();
	        // var row = ItemState.isInserting(itemState) ? -1 : index.dataRow();
	        // var style = grid.itemSource().getCellStyle(row, index.dataField());
	        // var editable = style ? style.isEditable() : undefined;
	        // if (editable === undefined) {
	        //     editable = grid.canEdit(index);
	        // }
	        if (!editable) {
	            this.$_hideEdit(index, this._editor);
	            return;
	        }
	        var readOnly = style ? style.isReadOnly(false) : undefined;
	        //var editorOptions = grid.getCellEditorOptions(index) || column.editorOptions();
	        if (readOnly === undefined && (readOnly = grid.getCellReadOnly(index)) === undefined) {
	            readOnly = options.readOnly || column.readOnly || (!GridItem_1.ItemState_isInserting(itemState) && !grid.canUpdate(item, index.dataField));
	        }
	        this._editor.initOptions();
	        //editorOptions && this._editor.applyOptions(editorOptions);
	        var ds = item.dataSource;
	        var field = ds ? ds.getField(index.dataField) : null;
	        this._readOnly = readOnly || !field || !field.updatable || !index.dataColumn || field.dataType == Types.ValueType.OBJECT;
	        //this._editor.setReadOnly(this._readOnly);
	        this._editor.setEditIndex(index);
	        this._editable = true;
	        this._editor.clear();
	        var v = this._getData(index);
	        this._editor.setEditValue(v);
	        this._editor.selectAll();
	        if (options.editWhenFocused && !this._editor.editing) {
	            if (this._showEditorTimer) {
	                clearTimeout(this._showEditorTimer);
	            }
	            if (!this._canceling) {
	                this._showEditorTimer = setTimeout(function () {
	                    grid.showEditor();
	                    this._showEditorTimer = null;
	                }.bind(this), 100);
	            }
	        }
	        else {
	            this._editor.setVisible(false);
	        }
	        this.$_focusToEditor();
	    };
	    DefaultEditController.prototype._applyCellFont = function () {
	        var grid = this._grid;
	        var options = grid.editorOptions;
	        if (options.applyCellFont) ;
	    };
	    DefaultEditController.prototype._hideEditor = function () {
	        if (this.editing) {
	            this._modified = false;
	            this._resetting = true;
	            try {
	                this._internalHideEditor(this._editor);
	                this._prepareEditor(this._editIndex);
	            }
	            finally {
	                this._resetting = false;
	            }
	        }
	    };
	    DefaultEditController.prototype._initEditor = function (bClear, bSelect, bDropdown) {
	        if (this._dirty) {
	            this._dirty = false;
	            if (!this._starting) {
	                this._prepareEditor(this._editIndex);
	            }
	        }
	        var editor = this._editor;
	        if (editor) {
	            editor.endEdit();
	            this._resetBounds();
	            this._applyCellFont();
	            editor.setVisible(true);
	            editor.beginEdit(bClear, bSelect);
	            bClear && editor.clear();
	            bSelect && editor.selectAll();
	            bDropdown && editor.dropDownList && editor.dropDownList();
	            this.$_focusToEditor(true);
	        }
	    };
	    DefaultEditController.prototype._setEditAttribute = function (attrs) {
	        var editor = this._editor;
	        if (editor) {
	            for (var attr in attrs) {
	                if (attr === "callback")
	                    continue;
	                editor._editor.setAttribute(attr, attrs[attr]);
	            }
	            if (attrs.callback && typeof attrs.callback == "function") {
	                attrs.callback();
	            }
	        }
	    };
	    DefaultEditController.prototype._editorActivated = function (editor) {
	        this._grid.editorActivated(editor);
	    };
	    DefaultEditController.prototype._activateEditor = function (bClear, bSelect, bDropdown) {
	        if (bDropdown === void 0) { bDropdown = false; }
	        var grid = this._grid;
	        var editor = this._editor;
	        var index = this._editIndex;
	        var attrs = {};
	        if (this._editable && editor && !editor.editing && grid.canShowEditor(index, attrs)) {
	            if (!editor.isTextReadOnly || !editor.isTextReadOnly()) {
	                editor.setReadOnly(this._readOnly);
	            }
	            else if (editor.isTextReadOnly && editor.isTextReadOnly()) {
	                editor._editor && (editor._editor.readOnly = editor.isTextReadOnly());
	            }
	            this._initEditor(bClear, bSelect, bDropdown);
	            this._modified = false;
	            this._editorActivated(this._editor);
	            this._setEditAttribute(attrs);
	            return true;
	        }
	        return false;
	    };
	    DefaultEditController.prototype._resetBounds = function () {
	        if (this._editor) {
	            var r = this._grid.getEditBounds(this._editIndex);
	            r.x--;
	            r.y--;
	            r.width++;
	            r.height++;
	            /**
	             * ie에서 편집기가 그리드 크기 밖에 있는 상태에서,
	             * 편집기가 새로 focus를 받으면 편집기를 표시하기 위해 canvas를 강제 스크롤 시키고 있다.
	             * 편집기 너비/높이를 0으로 하면 그렇게 동작하지 않는다.
	             */
	            if (Utils_1.Utils.isIE && r.right > this._grid.width + 3) {
	                this._editor.setBounds(r.x + 10000, r.y, 0, 0);
	            }
	            else {
	                this._editor.setBounds(r.x, r.y, r.width, r.height);
	            }
	            r = this._grid.getEditCellBounds(this._editIndex);
	            this._editor.setCellBounds(r.x, r.y, r.width, r.height);
	            if (r.x < 0) {
	                this._resetFocused = true;
	            }
	        }
	    };
	    DefaultEditController.prototype.$_focusToEditor = function (force) {
	        if (force === void 0) { force = false; }
	        if (force || this._grid["$_editFocused"]) {
	            this._grid.container["_setFocusAndScroll"](this._editor || this._defaultEditor);
	            if (!this.editing) {
	                this._editor && this._editor.selectAll();
	            }
	        }
	    };
	    DefaultEditController.prototype.$_focusToContainer = function () {
	    };
	    DefaultEditController.prototype._getData = function (index) {
	        var item = index.item;
	        if (item) {
	            var idx = index.dataColumn.dataIndex;
	            if (idx >= 0) {
	                return item.getData(idx);
	            }
	        }
	        return undefined;
	    };
	    DefaultEditController.prototype._setData = function (index, value) {
	        var item = index.item;
	        if (item) {
	            var idx = index.dataColumn.dataIndex;
	            if (idx >= 0) {
	                return item.setData(idx, value);
	            }
	        }
	    };
	    DefaultEditController.prototype._isEditKey = function (key) {
	        return (key == 8) || //backspace
	            (key >= 46 && key <= 90) || // delete, 0-9a-z
	            (key >= 96 && key <= 111) || // numberpad 0-9, *+-./
	            (key >= 186 && key <= 222) || // special char
	            (key == Types.Keys.ENTER && this._grid.editOptions.enterToEdit);
	    };
	    return DefaultEditController;
	}(Base_1.Base));
	exports.DefaultEditController = DefaultEditController;
	});

	unwrapExports(EditControllers);
	var EditControllers_1 = EditControllers.DefaultEditController;

	var GridDelegate_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridDelegate.ts
	// 2019. 10. 22. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var GridDelegate = /** @class */ (function (_super) {
	    __extends(GridDelegate, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridDelegate(grid) {
	        var _this = _super.call(this) || this;
	        _this._cellEditors = {};
	        _this._grid = grid;
	        return _this;
	    }
	    GridDelegate.prototype.dispose = function () {
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridDelegate.prototype.getDefaultCellEditor = function () {
	        if (!this._defaultEditor) {
	            var parent = this._grid.container["_container"];
	            this._defaultEditor = new Editors.LineCellEditor(this._grid, parent);
	            //this._cellEditors[null] = this._defaultEditor;
	            this._defaultEditor.setController(this._grid.editController);
	        }
	        return this._defaultEditor;
	    };
	    GridDelegate.prototype.getCellEditor = function (index) {
	        var editorType = this.$_getCellEditorType(index);
	        var parent = this._grid.container["_container"];
	        var editor = this._cellEditors[editorType];
	        if (!editor) {
	            switch (editorType) {
	                case "dropdown":
	                    editor = new ListEditors.DropDownCellEditor(this._grid, parent);
	                    break;
	                case "multiline":
	                    editor = new Editors.MultiLineCellEditor(this._grid, parent);
	                    break;
	                case "number":
	                    editor = new Editors.NumberCellEditor(this._grid, parent);
	                    break;
	                case "date":
	                    editor = new DateEditors.DateCellEditor(this._grid, parent);
	                    break;
	                // case "btdate":
	                // 	editor = new BTDateCellEditor(this._grid, parent);
	                // 	break;
	                case "search":
	                    editor = new ListEditors.SearchCellEditor(this._grid, parent);
	                    break;
	                // case "multicheck":
	                // 	editor = new MultiCheckCellEditor(this._grid, parent);
	                // 	break;
	                case "password":
	                    editor = new Editors.PasswordCellEditor(this._grid, parent);
	                    break;
	                case "line":
	                default:
	                    editor = this.getDefaultCellEditor();
	                    break;
	            }
	            this._cellEditors[editorType] = editor;
	            editor && editor.setController(this._grid.editController);
	        }
	        return editor;
	    };
	    GridDelegate.prototype.createRenderer = function (renderer) {
	        var r = null;
	        if (renderer) {
	            var type = void 0;
	            var options = void 0;
	            if (typeof renderer === "string") {
	                type = renderer;
	            }
	            else {
	                type = renderer.type || "text";
	                options = renderer;
	            }
	            switch (type) {
	                case "text":
	                    r = new CellRenderers.TextCellRenderer();
	                    break;
	                case "bar":
	                    r = new CellRenderers.BarCellRenderer();
	                    break;
	                case "image":
	                    r = new CellRenderers.ImageCellRenderer();
	                    break;
	                case "icon":
	                    r = new CellRenderers.IconCellRenderer();
	                    break;
	                case "check":
	                    r = new CellRenderers.CheckCellRenderer();
	                    break;
	                case "shape":
	                    r = new CellRenderers.ShapeCellRenderer();
	                    break;
	                case "link":
	                    r = new CellRenderers.LinkCellRenderer();
	                    break;
	            }
	            if (r && options) {
	                r.assignFrom(options);
	            }
	        }
	        return r;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridDelegate.prototype.$_getCellEditorType = function (index) {
	        return "text";
	        // const editor = this._grid.getCellEditor(index);
	        // if (editor) {
	        // 	return typeof editor === "string" ? editor.toLowerCase() : (editor.type || "text");
	        // };
	        // var column = index.dataColumn();
	        // if (column) {
	        //     editor = column.editor() ? column.editor().toLowerCase() : null;
	        //     return editor;
	        // }
	        // return null;
	    };
	    return GridDelegate;
	}(Base_1.Base));
	exports.GridDelegate = GridDelegate;
	});

	unwrapExports(GridDelegate_1);
	var GridDelegate_2 = GridDelegate_1.GridDelegate;

	var GridBase_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// static readonly ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });









































	var $_INVISIBLE_EDIT_BOUNDS = new Rectangle_1.Rectangle(-10000, -10000, 100, 100);
	var GridBase = /** @class */ (function (_super) {
	    __extends(GridBase, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridBase(container) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._summaryMode = Types.SummaryMode.AGGREGATE;
	        _this._scrollBarWidth = 16;
	        _this._scrollBarHeight = 16;
	        _this._loading = true;
	        _this._userMode = false;
	        _this._userModeError = null;
	        _this._gridObjects = [];
	        _this._tableViews = {};
	        _this._imageLists = {};
	        _this._columnMap = {};
	        _this._columnLock = 0;
	        _this._columnsDirty = false;
	        _this._columnSummaryRuntime = new SummaryRuntimes.ColumnSummaryRuntime();
	        _this._layouted = false;
	        _this._resetting = false;
	        _this._focusedIndex = new CellIndex_1.CellIndex();
	        _this._leftPos = 0;
	        _this._horzScrolled = false;
	        _this._topIndex = 0;
	        _this._updateLock = false;
	        _this._focusing = false;
	        _this._dataChanged = false;
	        _this.$_editFocused = false;
	        _this._buttonClicked = false;
	        _this._syncHeadCheck = false;
	        _this._cellUpdateEventLock = false;
	        _this._container = container;
	        _this._addGridObject(_this._panel = _this._createGridPanel());
	        _this._addGridObject(_this._header = new GridHeader_1.GridHeader(_this));
	        _this._addGridObject(_this._footer = _this._createGridFooter());
	        _this._addGridObject(_this._rowIndicator = new RowIndicator_1.RowIndicator(_this));
	        _this._addGridObject(_this._stateBar = new StateBar_1.StateBar(_this));
	        _this._addGridObject(_this._checkBar = new CheckBar_1.CheckBar(_this));
	        _this._addGridObject(_this._body = new GridBody_1.GridBody(_this));
	        _this._addGridObject(_this._rowGroup = new RowGroup_1.RowGroup(_this));
	        _this._rootElement = new VisualElement_1.LayerElement("grid root view");
	        _this.addChild(_this._rootElement);
	        _this._contentPane = new ContentPane_1.DataContentPane("contentPane");
	        _this.addElement(_this._contentPane);
	        _this._rightContentPane = new ContentPane_1.RightContentPane("rightContentPane");
	        _this.addElement(_this._rightContentPane);
	        _this._fixedContentPane = new ContentPane_1.FixedContentPane("fixedContentPane");
	        _this.addElement(_this._fixedContentPane);
	        _this._leftContentPane = new ContentPane_1.LeftContentPane("leftContentPane");
	        _this.addElement(_this._leftContentPane);
	        _this._sideContentPane = _this._createSidePane();
	        if (_this._sideContentPane)
	            _this.addElement(_this._sideContentPane);
	        _this._topContentPane = new ContentPane_1.ContentPane("topContentPane");
	        _this.addElement(_this._topContentPane);
	        _this._bodyView = _this._createBodyView(_this._body);
	        _this._fixedBodyView = _this._createFixedBodyView(_this._body);
	        _this._rightBodyView = _this._createRightBodyView(_this._body);
	        _this._mergeView = new ColumnMergeElement_1.ColumnMergeElement(_this._bodyView);
	        _this._fixedMergeView = new ColumnMergeElement_1.ColumnMergeElement(_this._fixedBodyView);
	        _this._rightMergeView = new ColumnMergeElement_1.ColumnMergeElement(_this._rightBodyView);
	        _this._headerView = new HeaderElement_1.HeaderElement(_this._header);
	        _this._fixedHeaderView = new HeaderElement_1.FixedHeaderElement(_this._header);
	        _this._rightHeaderView = new HeaderElement_1.RightHeaderElement(_this._header);
	        _this._footerView = new FooterElement_1.FooterElement(_this.footer);
	        _this._fixedFooterView = new FooterElement_1.FixedFooterElement(_this.footer);
	        _this._rightFooterView = new FooterElement_1.RightFooterElement(_this.footer);
	        _this._rowIndicatorView = new RowIndicatorElement_1.RowIndicatorElement(_this._rowIndicator);
	        _this._stateBarView = new StateBarElement_1.StateBarElement(_this.stateBar);
	        _this._checkBarView = new CheckBarElement_1.CheckBarElement(_this.checkBar);
	        _this._headView = new GridHeadElement_1.GridHeadElement();
	        _this._footView = new GridFootElement_1.GridFootElement();
	        var tableViews = [
	            _this._rowIndicatorView, _this._stateBarView, _this._checkBarView,
	            _this._bodyView, _this._fixedBodyView, _this._rightBodyView,
	            _this._headerView, _this._fixedHeaderView, _this._rightHeaderView,
	            _this._footerView, _this._fixedFooterView, _this._rightFooterView,
	            _this._headView, _this._footView
	        ];
	        for (var i = tableViews.length - 1; i >= 0; i--) {
	            var v = tableViews[i];
	            _this._tableViews[v["$_hash"]] = v;
	        }
	        _this._contentPane.addChild(_this._bodyView);
	        _this._contentPane.addChild(_this._mergeView);
	        _this._contentPane.addChild(_this._footerView);
	        _this._contentPane.addChild(_this._headerView);
	        _this._fixedContentPane.addChild(_this._fixedBodyView);
	        _this._fixedContentPane.addChild(_this._fixedMergeView);
	        _this._fixedContentPane.addChild(_this._fixedFooterView);
	        _this._fixedContentPane.addChild(_this._fixedHeaderView);
	        _this._rightContentPane.addChild(_this._rightBodyView);
	        _this._rightContentPane.addChild(_this._rightMergeView);
	        _this._rightContentPane.addChild(_this._rightFooterView);
	        _this._rightContentPane.addChild(_this._rightHeaderView);
	        _this._leftContentPane.addChild(_this._rowIndicatorView);
	        _this._leftContentPane.addChild(_this._stateBarView);
	        _this._leftContentPane.addChild(_this._checkBarView);
	        _this._leftContentPane.addChild(_this._footView);
	        _this._leftContentPane.addChild(_this._headView);
	        _this._doCreateOtherElements();
	        _this._selectionLayer = new Selections.SelectionLayer(_this);
	        _this.addElement(_this._selectionLayer);
	        _this._feedbackLayer = new VisualElement_1.LayerElement("feedbackLayer");
	        _this.addElement(_this._feedbackLayer);
	        _this._hscrollBar = new ScrollBar_1.ScrollBar(container, false);
	        _this._vscrollBar = new ScrollBar_1.ScrollBar(container, true);
	        _this._scrollEdge = new ScrollBar_1.ScrollEdge();
	        _this.addElement(_this._hscrollBar);
	        _this.addElement(_this._vscrollBar);
	        _this.addElement(_this._scrollEdge);
	        _this._hscrollBar.addListener(_this);
	        _this._vscrollBar.addListener(_this);
	        _this._selections = new Selections.SelectionManager(_this);
	        _this._selections.addListener(_this);
	        _this._fixedOptions = new FixedOptions_1.FixedOptions(_this);
	        _this._displayOptions = new DisplayOptions_1.DisplayOptions(_this);
	        _this._formatOptions = new FormatOptions_1.FormatOptions(_this);
	        _this._editOptions = new EditOptions_1.EditOptions(_this);
	        _this._editorOptions = new EditOptions_1.EditorOptions(_this);
	        _this._copyOptions = new EditOptions_1.CopyOptions(_this);
	        _this._pasteOptions = new EditOptions_1.PasteOptions(_this);
	        _this._initStyles();
	        _this._columns = new ColumnCollection_1.ColumnCollection(_this);
	        _this._activeLayout = _this._defaultLayout = new ColumnLayout_1.DefaultColumnLayout(_this._columns);
	        _this._delegate = _this._createDelegate();
	        _this._layoutManager = _this._createLayoutManager();
	        _this._editController = _this._createEditController();
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    GridBase.createColumn = function (source) {
	        if (source) {
	            var column = void 0;
	            if (source.type == "series") {
	                column = new DataColumn_1.SeriesColumn(source);
	            }
	            else {
	                column = new DataColumn_1.DataColumn(source);
	            }
	            return column;
	        }
	        return null;
	    };
	    GridBase.prototype.dispose = function () {
	        this._tableViews = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridBase.prototype, "activeTool", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** activeTool */
	        get: function () {
	            return this.container.activeTool;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "scrollBarWidth", {
	        /** scrollBarWidth */
	        get: function () {
	            return this._scrollBarWidth;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._scrollBarWidth) {
	                this._scrollBarWidth = value;
	                this.invalidateLayout();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "scrollBarHeight", {
	        /** scrollBarHeight */
	        get: function () {
	            return this._scrollBarHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._scrollBarHeight) {
	                this._scrollBarHeight = value;
	                this.invalidateLayout();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "body", {
	        /** body */
	        get: function () {
	            return this._body;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "panel", {
	        /** panel */
	        get: function () {
	            return this._panel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "header", {
	        /** header */
	        get: function () {
	            return this._header;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "footer", {
	        /** footer */
	        get: function () {
	            return this._footer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rowIndicator", {
	        /** indicator */
	        get: function () {
	            return this._rowIndicator;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "checkBar", {
	        /** checkBar */
	        get: function () {
	            return this._checkBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "stateBar", {
	        /** stateBar */
	        get: function () {
	            return this._stateBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rowGroup", {
	        /** rowGroup */
	        get: function () {
	            return this._rowGroup;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "columnCount", {
	        /** columnCount */
	        get: function () {
	            return this._activeLayout.count;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "visibleColumnCount", {
	        /** visibleColumnCount */
	        get: function () {
	            return this._activeLayout.visibleCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "dataSource", {
	        /** dataSource */
	        get: function () {
	            return this._itemProvider ? this._itemProvider.dataSource : null;
	        },
	        set: function (value) {
	            var old = this.dataSource;
	            if (this._itemProvider) {
	                this._itemProvider.dataSource = value;
	            }
	            if (this.dataSource != old) ;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "itemSource", {
	        /** itemSource */
	        get: function () {
	            return this._itemProvider;
	        },
	        set: function (value) {
	            if (this._itemProvider) {
	                this._itemProvider.removeListener(this);
	            }
	            this._itemProvider = value;
	            if (this._itemProvider) {
	                this._itemProvider.addListener(this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "maxItemCount", {
	        /** maxItemCount */
	        get: function () {
	            return 0;
	        },
	        set: function (value) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "itemCount", {
	        /** itemCount */
	        get: function () {
	            return this._itemProvider ? this._itemProvider.itemCount : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rowCount", {
	        /** rowCount */
	        get: function () {
	            var ds = this.dataSource;
	            return ds ? ds.rowCount : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "summaryMode", {
	        /** summaryMode */
	        get: function () {
	            return this._summaryMode;
	        },
	        set: function (value) {
	            if (value != this._summaryMode) {
	                this._summaryMode = value;
	                this.$_summaryModeChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "columnSummaryRuntime", {
	        /** columnSummaryRuntime */
	        get: function () {
	            return this._columnSummaryRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "linkCellClickedCallback", {
	        /** linkCellClickedCallback */
	        get: function () {
	            return this._linkCellClickedCallback;
	        },
	        set: function (value) {
	            this._linkCellClickedCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "focusedIndex", {
	        /** focusedIndex */
	        get: function () {
	            return this._focusedIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "focusedRow", {
	        /** focusedRow */
	        get: function () {
	            return this._focusedIndex ? this._focusedIndex.itemIndex : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rowIndicatorView", {
	        /** rowIndicatorView */
	        get: function () {
	            return this._rowIndicatorView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "stateBarView", {
	        /** stateBarView */
	        get: function () {
	            return this._stateBarView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "checkBarView", {
	        /** checkBarView */
	        get: function () {
	            return this._checkBarView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "topContentPane", {
	        /** topContentPane */
	        get: function () {
	            return this._topContentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "sideContentPane", {
	        /** sideContentPane */
	        get: function () {
	            return this._sideContentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "leftContentPane", {
	        /** leftContentPane */
	        get: function () {
	            return this._leftContentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "contentPane", {
	        /** contentPane */
	        get: function () {
	            return this._contentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedContentPane", {
	        /** fixedContentPane */
	        get: function () {
	            return this._fixedContentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rightContentPane", {
	        /** rightContentPane */
	        get: function () {
	            return this._rightContentPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "bodyView", {
	        /** bodyView */
	        get: function () {
	            return this._bodyView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedBodyView", {
	        /** fixedBodyView */
	        get: function () {
	            return this._fixedBodyView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rightBodyView", {
	        /** rightBodyView */
	        get: function () {
	            return this._rightBodyView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "mergeView", {
	        /** mergeView */
	        get: function () {
	            return this._mergeView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedMergeView", {
	        /** fixedMergeView */
	        get: function () {
	            return this._fixedMergeView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rightMergeView", {
	        /** rightMergeView */
	        get: function () {
	            return this._rightMergeView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "headerView", {
	        /** headerView */
	        get: function () {
	            return this._headerView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedHeaderView", {
	        /** fixedHeaderView */
	        get: function () {
	            return this._fixedHeaderView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rightHeaderView", {
	        /** rightHeaderView */
	        get: function () {
	            return this._rightHeaderView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "footerView", {
	        /** footerView */
	        get: function () {
	            return this._footerView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedFooterView", {
	        /** fixedFooterView */
	        get: function () {
	            return this._fixedFooterView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "rightFooterView", {
	        /** rightFooterView */
	        get: function () {
	            return this._rightFooterView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "headView", {
	        /** headView */
	        get: function () {
	            return this._headView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "footView", {
	        /** footView */
	        get: function () {
	            return this._footView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "fixedOptions", {
	        /** fixedOptions */
	        get: function () {
	            return this._fixedOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "displayOptions", {
	        /** displayOptions */
	        get: function () {
	            return this._displayOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "formatOptions", {
	        /** formatOptions */
	        get: function () {
	            return this._formatOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "editOptions", {
	        /** editOptions */
	        get: function () {
	            return this._editOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "editorOptions", {
	        /** editorOptions */
	        get: function () {
	            return this._editorOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "copyOptions", {
	        /** copyOptions */
	        get: function () {
	            return this._copyOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "pasteOptions", {
	        /** pasteOptions */
	        get: function () {
	            return this._pasteOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "delegate", {
	        /** delegate */
	        get: function () {
	            return this._delegate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "layoutManager", {
	        /** layoutManager */
	        get: function () {
	            return this._layoutManager;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "selections", {
	        /** selections */
	        get: function () {
	            return this._selections;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "editController", {
	        /** editController */
	        get: function () {
	            return this._editController;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "topIndex", {
	        /** topIndex */
	        get: function () {
	            return this._topIndex;
	        },
	        set: function (value) {
	            //value = Math.max(0, Math.min(value, this.itemCount - this._layoutManager._fixedRows - 1, this._vscrollBar ? this._vscrollBar.maxPosition : 0));
	            value = Math.max(0, Math.min(value, this.itemCount - 1));
	            if (value != this._topIndex) {
	                this._topIndex = value;
	                this.refreshView();
	                this.closePopups();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "topItem", {
	        /** topItem */
	        get: function () {
	            return this._topIndex + this.layoutManager.fixedItemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "leftPos", {
	        /** leftPos */
	        get: function () {
	            return this._leftPos;
	        },
	        set: function (value) {
	            //value = isNaN(parseInt(value)) ? this.leftPos() : parseInt(value);
	            value = Math.max(0, Math.min(value, this._hscrollBar ? this._hscrollBar["_maxPosition"] : 0));
	            if (value != this._leftPos) {
	                this._leftPos = value;
	                // TODO: 마우스 스크롤 시 data 변경이 없다면 전체 layout() 대신 contentPane만 이동 시키고 
	                //       scrollbar만 변경시킨다. (_doPrepareRender 참조)
	                //this.refreshView();
	                this._horzScrolled = true;
	                this.invalidate();
	                this.closePopups();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "leftCol", {
	        /** leftCol */
	        get: function () {
	            return this._layoutManager.firstCol;
	        },
	        set: function (value) {
	            var lm = this._layoutManager;
	            value = Math.max(lm.fixedColCount, Math.min(value, lm.columnCount - 1));
	            this.leftPos = lm.getColumnBounds(value).x;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridBase.prototype, "filtering", {
	        /** filtering */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridBase.prototype.addFeedbackElement = function (view) {
	        if (view && !this._feedbackLayer.contains(view)) {
	            this._feedbackLayer.addChild(view);
	            return true;
	        }
	    };
	    GridBase.prototype.removeFeedbackElement = function (view) {
	        var idx = this._feedbackLayer.indexOf(view);
	        if (idx >= 0) {
	            this._feedbackLayer.removeChildAt(idx);
	            return true;
	        }
	        return false;
	    };
	    GridBase.prototype.getColumn = function (index) {
	        return this._activeLayout.getColumn(index);
	    };
	    GridBase.prototype.getVisibleColumn = function (index) {
	        return this._activeLayout.getVisible(index);
	    };
	    GridBase.prototype.setColumns = function (columns) {
	        this._columns.setColumns(columns);
	        this._columnMap = {};
	        for (var i = this._columns.count - 1; i >= 0; i--) {
	            var col = this._columns.getColumn(i);
	            this._columnMap[col["$_hash"]] = col;
	        }
	        this._columnsReset();
	    };
	    GridBase.prototype.invalidateColumn = function (column) {
	        if (this._columnLock <= 0) {
	            this._resetColumnIndices(column);
	        }
	        if (!this._columnsDirty) {
	            this._columnsDirty = true;
	            this.refreshView();
	        }
	    };
	    GridBase.prototype.invalidateColumns = function () {
	        if (this._columnLock <= 0) ;
	        if (!this._columnsDirty) {
	            this._columnsDirty = true;
	            this.refreshView();
	        }
	    };
	    GridBase.prototype.invalidate = function () {
	        this._container && this._container.invalidate(false);
	    };
	    GridBase.prototype.invalidateLayout = function () {
	        if (!this._updateLock) {
	            _super.prototype.invalidateLayout.call(this);
	        }
	    };
	    GridBase.prototype.refreshView = function () {
	        if (!this._loading) {
	            this.invalidateLayout();
	            this.topIndex = this.topIndex; //, this._filterRunning);
	            this.leftPos = this.leftPos;
	            //this.setFocusedIndex(this.focusedIndex(), true);
	        }
	    };
	    GridBase.prototype.resetGrid = function () {
	        this._resetting = true;
	        this.topIndex = 0;
	        this.leftPos = 0;
	        //this.setFocusedIndex(this.getIndex(0, this.getFirstColumn()), true);
	        this.refreshView();
	    };
	    GridBase.prototype.getFirstCell = function () {
	        if (this.itemCount > 0) {
	            var index = 0;
	            for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	                if (this.getItem(i) instanceof GridItem_1.GridRow) {
	                    index = i;
	                    break;
	                }
	            }
	            return new CellIndex_1.CellIndex(this, index >= 0 ? index : 0, this.getFirstColumn());
	        }
	        return null;
	    };
	    GridBase.prototype.$_setEditFocused = function (value, e) {
	        // var hasCommit = false;
	        // if (!value && !this.$_editFocused && (e.type == "focusout" || e.type == "blur")) {
	        //  	var options = this.editOptions();
	        //  	var editor = this._editController._editor;
	        //  	if (editor && editor.isListing && editor.isListing()) {
	        //  		hasCommit = false;
	        //  	} else if (options._gridExitWhenCommit && (this.isItemEdited() ||this.isItemEditing())) {
	        //     			hasCommit = true;
	        //    	}	    	
	        // }    		
	        if (value != this.$_editFocused) {
	            this.$_editFocused = value;
	            if (value) {
	                var index = this.focusedIndex;
	                if (!index || !this.isValid(index)) {
	                    index = this.getFirstCell();
	                    index && this.setFocusedIndex(index);
	                }
	            }
	        }
	        value && e.type == "focusin" && Utils_1.Utils.isAncestorOf(this._container["_container"], e.target) && Utils_1.Utils.$_setActiveGrid(this);
	        // if (hasCommit) {
	        // 	this.commit(false,true);
	        // }
	    };
	    GridBase.prototype.getItem = function (index) {
	        return this._itemProvider.getItem(index);
	    };
	    GridBase.prototype.getIndicatorIndex = function (item) {
	        return item.index;
	    };
	    GridBase.prototype.getImage = function (imageUrl) {
	        return null;
	    };
	    GridBase.prototype.getIndex = function (itemIndex, column) {
	        if (itemIndex === void 0) { itemIndex = -1; }
	        if (column === void 0) { column = null; }
	        return new CellIndex_1.CellIndex(this, itemIndex, column);
	    };
	    GridBase.prototype.getCellIndex = function (cell, index) {
	        var row = cell.parentElement["$_row"];
	        var col = this.columnByCell(cell);
	        return index != null ? index.set(row, col) : new CellIndex_1.CellIndex(this, row, col);
	    };
	    GridBase.prototype.getHandler = function () {
	        return null;
	    };
	    GridBase.prototype.getDataColumns = function (visibleOnly) {
	        if (visibleOnly === void 0) { visibleOnly = true; }
	        return this._activeLayout.getDataColumns(visibleOnly);
	    };
	    GridBase.prototype.optionsChanged = function (options) {
	        this.refreshView();
	    };
	    GridBase.prototype.scrollRow = function (delta) {
	        var oldTop = this.topIndex;
	        this.topIndex = oldTop + delta;
	        delta = this.topIndex - oldTop;
	    };
	    GridBase.prototype.closeFilterSelector = function () {
	        //this._filterSelector.hide();
	    };
	    GridBase.prototype.closePopups = function () {
	        if (!this.filtering) ;
	        //this._popupMenuManager.close();
	        //this._editController.closeList();
	    };
	    GridBase.prototype.columnByHash = function (hash) {
	        return this._columnMap[hash];
	    };
	    GridBase.prototype.columnByCell = function (cell) {
	        return this._columnMap[cell["$_col"]];
	    };
	    GridBase.prototype.columnByName = function (name) {
	        return this._activeLayout.columnByName(name);
	    };
	    GridBase.prototype.columnByField = function (field) {
	        return this._activeLayout.columnByField(field);
	    };
	    GridBase.prototype.getHorzColumns = function (start, count) {
	        return this._activeLayout.getHorzColumns(start, count);
	    };
	    GridBase.prototype.getGroupLevel = function (field) {
	        return -1;
	    };
	    GridBase.prototype.isGroupedColumn = function (column) {
	        return false;
	    };
	    GridBase.prototype.setFocus = function () {
	        this._editController.setFocus(true);
	        // if ($$_activeGrid !== this) {
	        // 	$_setActiveGrid(this);
	        // }
	    };
	    GridBase.prototype.registerImageList = function (images) {
	        if (images && images.name && !this._imageLists.hasOwnProperty(images.name)) {
	            this._imageLists[images.name] = images;
	            this.$_assignImageList(images, false);
	        }
	    };
	    GridBase.prototype.unregisterImageList = function (images) {
	        if (images && images.name && this._imageLists.hasOwnProperty(images.name)) {
	            delete this._imageLists[images.name];
	            this.$_assignImageList(images, true);
	        }
	    };
	    GridBase.prototype.getImageList = function (imagesName) {
	        return imagesName && this._imageLists[imagesName];
	    };
	    GridBase.prototype.getListImage = function (images, index) {
	        if (images instanceof ImageList_1.ImageList) {
	            return images.getImage(index);
	        }
	        else if (images) {
	            images = this._imageLists[images];
	            return images ? images.getImage(index) : null;
	        }
	    };
	    GridBase.prototype.$_assignImageList = function (images, clear) {
	        var columns = this.getDataColumns();
	        for (var i = 0, cnt = columns.length; i < cnt; i++) {
	            var col = columns[i];
	            // if (col.imageList == images.name) {
	            // 	col._images = clear ? null : images;
	            // }
	        }
	    };
	    GridBase.prototype.getFirstColumn = function () {
	        return this._activeLayout.getFirstColumn();
	    };
	    GridBase.prototype.collectColumns = function (columnsOnly, visibleOnly, ordered) {
	        //const columns = [];
	        //this._rootColumn.collectColumns(columns, columnsOnly, visibleOnly, ordered);
	        //return columns;
	        return this._activeLayout.collectColumns(columnsOnly, visibleOnly, ordered);
	    };
	    GridBase.prototype.collectDataColumns = function (c1, c2) {
	        return this._activeLayout.collectDataColumns(c1, c2);
	    };
	    GridBase.prototype.isValid = function (index) {
	        return index && index.grid === this &&
	            index.itemIndex >= 0 && index.itemIndex < this.itemCount &&
	            index.column && index.column.grid === this;
	    };
	    GridBase.prototype.clearSelection = function () {
	        var idx = this.focusedIndex;
	        this._selections.clear();
	        if (this.isValid(idx) && this.itemCount > 0 && this.visibleColumnCount > 0) {
	            this._selections.add(idx, idx, this._displayOptions.selectionStyle);
	        }
	    };
	    GridBase.prototype.setFocusedIndex = function (value, select, focus) {
	        if (select === void 0) { select = true; }
	        if (focus === void 0) { focus = false; }
	        if (!this._focusing) {
	            this._focusing = true;
	            try {
	                this.$_doSetFocusedIndex(value, select, focus);
	            }
	            finally {
	                this._focusing = false;
	            }
	        }
	    };
	    GridBase.prototype.getTableView = function (cell) {
	        return this._tableViews[cell.parentElement["$_view"]];
	    };
	    GridBase.prototype.getBodyView = function (cell) {
	        return this.getTableView(cell);
	    };
	    GridBase.prototype.getCellType = function (cell) {
	        var view = this._tableViews[cell.parentElement["$_view"]];
	        if (view instanceof GridBodyElement_1.GridBodyElement)
	            return Types.TableCellType.DATA;
	        if (view instanceof HeaderElement_1.HeaderElement)
	            return Types.TableCellType.HEADER;
	        if (view instanceof FooterElement_1.FooterElement)
	            return Types.TableCellType.FOOTER;
	        if (view instanceof RowIndicatorElement_1.RowIndicatorElement)
	            return Types.TableCellType.INDICATOR;
	        if (view instanceof StateBarElement_1.StateBarElement)
	            return Types.TableCellType.STATE;
	        if (view instanceof CheckBarElement_1.CheckBarElement)
	            return Types.TableCellType.CHECK;
	        return null;
	    };
	    GridBase.prototype.pointToIndex = function (x, y, clipped) {
	        var index = CellIndex_1.CellIndex.temp(this, -1, null);
	        if (clipped) {
	            this._layoutManager.mouseToIndex(x, y, index);
	        }
	        else {
	            this._layoutManager.mouseToIndexEx(x, y, index);
	        }
	        return index;
	    };
	    GridBase.prototype.getEditCellBounds = function (index) {
	        var lm = this.layoutManager;
	        var room = lm.getMergedCell(index);
	        {
	            return $_INVISIBLE_EDIT_BOUNDS.clone();
	        }
	    };
	    GridBase.prototype.getEditBounds = function (index) {
	        var lm = this.layoutManager;
	        var room = lm.getMergedCell(index);
	        var cellView = this._bodyView.getCellView(lm, index);
	        if (cellView) {
	            //const r = lm.getItemBounds(cellView.parentElement["$_row"]);
	            var r = lm.getCellBounds(index);
	            r = this._bodyView.boundsByContainer(r);
	            return r;
	        }
	        else {
	            return $_INVISIBLE_EDIT_BOUNDS.clone();
	        }
	        /*
	        const view = this.getCellView(room ? this._mergeView : null, index, index.isFixedCol());

	        if (view) {
	            var r = view.getBounds();
	            r.x = r.y = 0;
	            if (view instanceof DataCellElement) {
	                r.width -= view.getButtonsWidth();
	                view._isLeftImageButton && (r.x += view.getLeftButtonsWidth())
	            }
	            r = view.boundsByContainer(r);
	            if (room) {
	                var i = index.itemIndex();
	                if (i >= lm.topIndex() + lm.fixedRowCount() && i < lm.topIndex() + lm.itemCount() + lm.fixedRowCount()) {
	                    var r1 = lm.itemBounds(view._topIndex);
	                    var r2 = lm.itemBounds(index.I() - this._topIndex);
	                    r.y += r2.y - r1.y;
	                    r.height = r2.height;
	                } else {
	                    r = $_INVISIBLE_EDIT_BOUNDS.clone();
	                }
	            }
	            return r;
	        } else {
	            return $_INVISIBLE_EDIT_BOUNDS.clone();
	        }
	        */
	    };
	    GridBase.prototype.getCellView = function (owner, index, fixed, rightFixed) {
	        // var item, idx;
	        // var column = index._column;
	        // fixed = fixed || column.isFixed();
	        // rightFixed = rightFixed || column.isRightFixed();
	        // if (owner == null || owner instanceof GridBodyElement) {
	        // 	item = index.item();
	        // 	if (item && item.isEditable()) {
	        // 		idx = item.index();
	        // 		var rowView = rightFixed ? this._rfixedBodyView.findRowView(idx) : 
	        // 		                       fixed ? this._fixedBodyView.findRowView(idx) :
	        // 					                   this._bodyView.findRowView(idx);
	        // 		if (rowView && rowView.isVisible()) {
	        // 			return rowView.findCell(column);
	        // 		}
	        // 	}
	        // } else if (owner === this._rowGroupView) {
	        // 	return this._rowGroupView.getCellView(index, !!fixed, !!rightFixed);
	        // } else if (owner instanceof GridMergeElement) {
	        //     var mergeView = rightFixed ? this._rfixedMergeView : fixed ? this._fixedMergeView : this._mergeView;
	        // 	return  mergeView.getCellView(index);
	        // } else if (owner === this._mergeHeaderLayer) {
	        // 	return this._mergeHeaderLayer.getCellView(index);
	        // }
	        return null;
	    };
	    GridBase.prototype.getFocusedCellView = function (index) {
	        var lm = this.layoutManager;
	        var item = index.item;
	        var merged = item && item.merged;
	        var fixed = index.colFixed;
	        var rfixed = index.rightFixed;
	        var grouped = item instanceof GridItem_1.GroupItemImpl;
	        if (item instanceof GridItem_1.GroupItemImpl) {
	            return null;
	        }
	        else {
	            var bodyView = rfixed ? this._rightBodyView : fixed ? this._fixedBodyView : this._bodyView;
	            return bodyView.getCellView(lm, index);
	        }
	        // var cell = isGroupItem ? null : 
	        // 				rfixed ? this.getCellView(this._rfixedMergeView, index, true) : 
	        //                  fixed ? this.getCellView(this._fixedMergeView, index, true) : null;
	        // if (!cell && !fixed && !isGroupItem) {
	        // 	cell = this.getCellView(this._mergeView, index, false);
	        // } 
	        // if (!cell && merged) {
	        // 	cell = this.getCellView(this._mergeHeaderLayer, index);
	        // } 
	        // if (!cell) {
	        // 	cell = this.getCellView(null, index, fixed);
	        // }
	        // if (!cell && !merged) {
	        // 	cell = this.getCellView(this._rowGroupView, index, false);
	        //     if (!cell) {
	        //         cell = this.getCellView(this._rowGroupView, index, true);
	        //     }
	        // }
	        // return cell;
	    };
	    GridBase.prototype.isFocusedRow = function (itemIndex) {
	        return this._focusedIndex.itemIndex == itemIndex;
	    };
	    GridBase.prototype.isFocusedColumn = function (column) {
	        return this._focusedIndex.column === column;
	    };
	    GridBase.prototype.pasteFromClipboard = function (text, e) {
	    };
	    GridBase.prototype.copyToClipboard = function () {
	    };
	    GridBase.prototype.isEditing = function (index) {
	        return this._editController.editing && (!index || CellIndex_1.CellIndex.areEquals(index, this._editController.editIndex));
	    };
	    GridBase.prototype.isItemEditing = function (item) {
	        item = item || this.focusedIndex.item;
	        return item && (this.itemSource instanceof EditableItemProvider_1.EditableItemProvider) && this.itemSource.isEditing(item);
	    };
	    GridBase.prototype.isItemEdited = function (item) {
	        item = item || this.focusedIndex.item;
	        return item && (this.itemSource instanceof EditableItemProvider_1.EditableItemProvider) && this.itemSource.isEdited(item);
	    };
	    GridBase.prototype.getEditValue = function (editor, index, editResult) {
	        //this._doGetEditValue(index, editResult);
	    };
	    GridBase.prototype.editorCommit = function (editor, index, oldValue, newValue) {
	        return this._doCellCommit(index, oldValue, newValue);
	    };
	    GridBase.prototype._doCellCommit = function (index, oldValue, newValue) {
	        return this._fireEditCommit(index, oldValue, newValue);
	    };
	    GridBase.prototype.editorActivated = function (editor) {
	        //this.activeTool && this.activeTool.editorActivated(editor);
	    };
	    GridBase.prototype.validateCellCommit = function (index, value) {
	        // if (this.editOptions.validateOnEdited) {
	        // 	this.$_validateCellValue(index, value);
	        // }
	    };
	    GridBase.prototype.getCellEditable = function (index) {
	        // var dataRow = index.dataRow();
	        // var column = index.column().$_hash;
	        // return this.itemSource().getCellEditable(dataRow, column);
	        return true;
	    };
	    GridBase.prototype.getCellReadOnly = function (index) {
	        // var dataRow = index.dataRow();
	        // var column = index.column().$_hash;
	        // return this.itemSource().getCellReadOnly(dataRow, column);
	        return false;
	    };
	    GridBase.prototype.canWrite = function (index) {
	        var can = this._editOptions.editable && this.isValid(index) && (this.visibleColumnCount > 0)
	            && index.item.canEdit() && !!index.dataColumn
	            && (this.fixedOptions.rowEditable || index.itemIndex >= this.layoutManager.fixedItemCount);
	        return can;
	    };
	    GridBase.prototype.canEdit = function (index) {
	        var cellEditable = true; // this.getCellEditable(index);
	        {
	            return this.canWrite(index) && cellEditable;
	        }
	        return this.canWrite(index) && index.dataColumn.editable;
	    };
	    GridBase.prototype.canUpdate = function (item, field) {
	        return this.editOptions.canUpdate() &&
	            (this.visibleColumnCount > 0) && this.itemSource && this.itemSource.canUpdate(item, field);
	    };
	    GridBase.prototype.canAppend = function () {
	        var rs = this.itemSource;
	        var can = !this.isEditing() && this.editOptions.canAppend() && (this.visibleColumnCount > 0) && rs && rs.canAppend();
	        if (can) {
	            try {
	                if (!this._fireRowInserting(rs.itemCount, -1)) {
	                    return false;
	                }
	            }
	            catch (e) {
	                alert(e.message || e);
	                return false;
	            }
	        }
	        return can;
	    };
	    GridBase.prototype.canInsert = function (item, shift, ctrl) {
	        var rs = this.itemSource;
	        var can = !this.isEditing() && this._doCanInsert(item, shift, ctrl) && this.editOptions.canInsert() && (this.visibleColumnCount > 0) && rs && rs.canInsert(item);
	        if (can) {
	            try {
	                if (!this._fireRowInserting(item.index + (shift ? 1 : 0), -1)) {
	                    return false;
	                }
	            }
	            catch (e) {
	                alert(e.message || e);
	                return false;
	            }
	        }
	        return can;
	    };
	    GridBase.prototype._doCanInsert = function (item, shift, ctrl) {
	        return true;
	    };
	    GridBase.prototype.canDelete = function (item) {
	        var rs = this.itemSource;
	        return this.editOptions.canDelete() && (this.visibleColumnCount > 0) &&
	            rs && (this.isItemEditing(item) || rs.canDelete(item));
	    };
	    GridBase.prototype.canCommit = function (item) {
	        return this.isItemEditing(item) && (this.isItemEdited() || this.editOptions.commitWhenNoEdit);
	    };
	    GridBase.prototype.canCancel = function (item) {
	        return this.isItemEditing(item);
	    };
	    GridBase.prototype.edit = function (index) {
	        if (!index) {
	            index = this.focusedIndex;
	        }
	        if (!this.isValid(index) || !(this.itemSource instanceof EditableItemProvider_1.EditableItemProvider)) {
	            return false;
	        }
	        if (index.dataColumn && !this.canUpdate(index.item, index.dataField)) {
	            return false;
	        }
	        return this.itemSource.edit(index.item);
	    };
	    GridBase.prototype.insertAt = function (itemIndex, shift) {
	        return this.insert(this.getItem(itemIndex), shift);
	    };
	    GridBase.prototype.insert = function (item, shift, ctrl) {
	        if (shift === void 0) { shift = false; }
	        if (ctrl === void 0) { ctrl = false; }
	        if (!item) {
	            item = this.focusedIndex ? this.focusedIndex.item : null;
	        }
	        if (!item) {
	            return false;
	        }
	        var rs = this.itemSource;
	        if (rs instanceof EditableItemProvider_1.EditableItemProvider && this.canInsert(item, shift, ctrl)) {
	            var defaults = this.$_getInsertDefaults(null);
	            this._cancelDummy();
	            return rs.insert(item, defaults, shift, ctrl);
	        }
	        return false;
	    };
	    GridBase.prototype.append = function () {
	        var rs = this.itemSource;
	        if (rs instanceof EditableItemProvider_1.EditableItemProvider && rs.dataSource && this.canAppend()) {
	            var defaults = this.$_getInsertDefaults(null);
	            this._cancelDummy();
	            return rs.append(defaults);
	        }
	        return false;
	    };
	    GridBase.prototype._appendDummy = function () {
	        var options = this._editOptions;
	        if (options.displayEmptyEditRow && options.appendable) ;
	    };
	    GridBase.prototype._cancelDummy = function () {
	        // this._items.cancelDummy();
	    };
	    GridBase.prototype.canShowEditor = function (index, attrs) {
	        if (this.isValid(index)) {
	            // this._tmpIndex.assign(index);
	            // return this._fireShowEditor(this._tmpIndex, attrs);
	            return true;
	        }
	        return false;
	    };
	    GridBase.prototype.hideEditor = function () {
	        this._editController.closeList(false);
	        this._editController.hideEditor();
	    };
	    GridBase.prototype.reprepareEditor = function () {
	        this._editController.reprepareEditor(this.focusedIndex);
	    };
	    GridBase.prototype.showEditor = function (index, append, dropdown) {
	        if (append === void 0) { append = false; }
	        if (dropdown === void 0) { dropdown = false; }
	        index = index || this.focusedIndex;
	        if (this._editController.showEditor(index, dropdown)) {
	            append && this._editController.caretToLast();
	            return true;
	        }
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridBase.prototype._getCssSelector = function () {
	        return "";
	    };
	    Object.defineProperty(GridBase.prototype, "container", {
	        get: function () {
	            return this._container;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridBase.prototype._createDelegate = function () {
	        return new GridDelegate_1.GridDelegate(this);
	    };
	    GridBase.prototype._createLayoutManager = function () {
	        return new GridLayoutManager_1.GridLayoutManager(this);
	    };
	    GridBase.prototype._createEditController = function () {
	        //return _isMobile() ? new MobileEditController(this) : new DefaultEditController(this);
	        return new EditControllers.DefaultEditController(this);
	    };
	    GridBase.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        var css = dom.style;
	        css.setProperty("overflow", "hidden", "important");
	    };
	    GridBase.prototype.setRect = function (r) {
	        var changed = r.width != this.width || r.height != this.height;
	        _super.prototype.setRect.call(this, r);
	        // TODO: Container 크기 변경 시 그리드 크기가 변경되지 않는 문제.
	        changed && (this["_dirty"] = true);
	    };
	    GridBase.prototype._doDraw = function (element) {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridBase.prototype._doCreateOtherElements = function () {
	    };
	    GridBase.prototype._createSidePane = function () {
	        return null;
	    };
	    GridBase.prototype.isSidePaneVisible = function () {
	        return false;
	    };
	    GridBase.prototype._createBodyView = function (body) {
	        return new GridBodyElement_1.GridBodyElement(body);
	    };
	    GridBase.prototype._createFixedBodyView = function (body) {
	        return new GridBodyElement_1.FixedBodyElement(body);
	    };
	    GridBase.prototype._createRightBodyView = function (body) {
	        return new GridBodyElement_1.RightBodyElement(body);
	    };
	    GridBase.prototype._createGridPanel = function () {
	        return new GridPanel_1.GridPanel(this);
	    };
	    GridBase.prototype._createGridFooter = function () {
	        return new GridFooter_1.GridFooter(this);
	    };
	    GridBase.prototype._initStyles = function () {
	    };
	    GridBase.prototype._columnsReset = function () {
	        this._resetColumnIndices();
	        this._activeLayout["_columnsChanged"](null);
	    };
	    GridBase.prototype._columnVisibleChanged = function (column) {
	        this._activeLayout["_columnsChanged"](null);
	    };
	    GridBase.prototype._resetColumnIndices = function (column) {
	        if (column === void 0) { column = null; }
	        if (column) {
	            column["_resetIndices"](this);
	        }
	        else {
	            this._columns.resetIndices();
	        }
	        this.clearSelection();
	    };
	    GridBase.prototype._cleanGridObjects = function () {
	        for (var i = 0, cnt = this._gridObjects.length; i < cnt; i++) {
	            this._gridObjects[i].clean();
	        }
	        //this._stylesDirty = false;
	    };
	    GridBase.prototype._visualObjectChanged = function (object) {
	    };
	    GridBase.prototype.$_summaryModeChanged = function () {
	        this._doSummaryModeChanged();
	    };
	    GridBase.prototype._doSummaryModeChanged = function () {
	    };
	    GridBase.prototype._addGridObject = function (obj) {
	        this._gridObjects.push(obj);
	    };
	    GridBase.prototype.addElement = function (view) {
	        this._rootElement.addChild(view);
	    };
	    GridBase.prototype.$_prepareRender = function (bounds) {
	        this._doPrepareRender(bounds);
	    };
	    GridBase.prototype._doPrepareRender = function (bounds) {
	        if (this._horzScrolled) {
	            try {
	                var lm = this._layoutManager;
	                lm.setLeftPos(bounds, this._leftPos);
	                this._leftPos = lm.leftPos;
	                this._updateScrollBars(lm);
	                this._layoutSelectionViews();
	            }
	            finally {
	                this._horzScrolled = false;
	            }
	        }
	    };
	    GridBase.prototype.$_layout = function (bounds) {
	        this._doLayout(bounds);
	    };
	    GridBase.prototype._doLayout = function (bounds) {
	        var lm = this._layoutManager;
	        this._resetting = false;
	        try {
	            this.$_doLayout(lm, bounds);
	        }
	        finally {
	            if (this._loading) {
	                this._loading = false;
	            }
	        }
	        this._horzScrolled = false;
	        this._cleanGridObjects();
	    };
	    GridBase.prototype.$_doLayout = function (lm, bounds) {
	        var r = bounds.clone();
	        var sw = this._displayOptions.vscrollBar ? this._scrollBarWidth : 0;
	        var sh = this._displayOptions.hscrollBar ? this._scrollBarHeight : 0;
	        this._activeLayout.prepareLayout(this);
	        lm.measure(r, this._leftPos, this._topIndex, sw, sh);
	        var leftPos = this._leftPos = lm.leftPos;
	        var topIndex = this._topIndex = lm.topIndex;
	        lm.layout(r);
	        this._updateScrollBars(lm, r);
	        this._layoutSelectionViews();
	        this._layouted = true;
	    };
	    GridBase.prototype._updateScrollBars = function (lm, r) {
	        if (lm.hscrollBar) {
	            var hMax = lm.bodyBounds.width;
	            var hPage = Math.min(lm.scrollWidth);
	            this._hscrollBar.setProperties(0, hMax, hPage);
	            this._hscrollBar.setPosition(lm.leftPos);
	            this._hscrollBar.visible = true;
	            //console.log("LEFT POS = " + this.leftPos + ", " + "SPOS = " + this._hscrollBar.pos);
	        }
	        else if (this._hscrollBar) {
	            this._hscrollBar.setProperties(0, 0, 0);
	            this._hscrollBar.setPosition(0);
	            this._hscrollBar.visible = false;
	        }
	        if (lm.vscrollBar) {
	            var itemCount = this.itemCount;
	            var vMax = itemCount - lm.fixedItemCount;
	            var vPage = Math.min(lm.fullItemCount, itemCount - lm.topIndex);
	            this._vscrollBar.setProperties(0, vMax, vPage);
	            this._vscrollBar.setPosition(lm.topIndex);
	            this._vscrollBar.visible = true;
	        }
	        else if (this._vscrollBar) {
	            this._vscrollBar.setProperties(0, 0, 0);
	            this._vscrollBar.setPosition(0);
	            this._vscrollBar.visible = false;
	        }
	        this._container && this._container.defaultTool.layoutChanged();
	        if (r) {
	            this._layoutScrollBars(lm, r);
	        }
	    };
	    GridBase.prototype._layoutScrollBars = function (lm, r) {
	        //this._scrollLayer.setBounds(r.x, r.y, r.width, r.height);
	        var sw = this._displayOptions.vscrollBar ? this._scrollBarWidth : 0;
	        var sh = this._displayOptions.hscrollBar ? this._scrollBarHeight : 0;
	        var hbar = this._hscrollBar;
	        var vbar = this._vscrollBar;
	        if (lm.hscrollBar) {
	            hbar.setBounds(r.x, r.bottom - sh, r.width - (lm.vscrollBar ? sw : 0), sh);
	            hbar.layoutContent();
	        }
	        if (lm.vscrollBar) {
	            vbar.setBounds(r.right - sw, r.y, sw, r.height - (lm.hscrollBar ? sh : 0));
	            vbar.layoutContent();
	        }
	        if (this._scrollEdge.visible = lm.vscrollBar && lm.hscrollBar) {
	            this._scrollEdge.setBounds(r.right - sw, r.bottom - sh, sw, sh);
	        }
	    };
	    GridBase.prototype._columnMergeRuleChanged = function (column) {
	        this._populateMerges();
	        this.refreshView();
	    };
	    GridBase.prototype._canMerge = function () {
	        return false;
	    };
	    GridBase.prototype._populateMerges = function () {
	        if (!this._canMerge()) {
	            return;
	        }
	        var columns = this.getHorzColumns();
	        for (var i = 0, cnt = columns.length; i < cnt; i++) {
	            var col = columns[i];
	            if (col && col.canMerge()) {
	                var merges = col.stateFor(ColumnMerge.ColumnMergeManager.MERGE_ROOMS);
	                if (!merges) {
	                    merges = new ColumnMerge.ColumnMergeManager(col);
	                    col.setState(ColumnMerge.ColumnMergeManager.MERGE_ROOMS, merges);
	                }
	                merges.clear();
	                if (col instanceof DataColumn_1.DataColumn && col.mergeGrouped) {
	                    var level = this.getGroupLevel(col.dataIndex);
	                    if (level > 0) {
	                        merges.initialize(ColumnMerge.RowGroupMergeRule.INIT_COUNT);
	                    }
	                }
	                else {
	                    merges.initialize(ColumnMerge.ColumnMergeRule.INIT_COUNT);
	                }
	            }
	        }
	    };
	    GridBase.prototype._doRowGroupMergeModeChanged = function () {
	    };
	    GridBase.prototype._addSelectionView = function (item) {
	        this._selectionLayer.addView(item);
	    };
	    GridBase.prototype._clearSelectionViews = function () {
	        this._selectionLayer.clearViews();
	    };
	    GridBase.prototype._layoutSelectionViews = function () {
	        if (!this._layouted || this._resetting) {
	            return;
	        }
	        this._selectionLayer.layout();
	    };
	    GridBase.prototype.$_doSetFocusedIndex = function (value, select, focus) {
	        if (!value) {
	            return false;
	        }
	        if (!this.isValid(value)) {
	            value = value.clone();
	            value.normalize(this);
	        }
	        if (!this.isValid(value)) {
	            var ds = this.dataSource;
	            if (!ds || ds.rowCount == 0 || this.itemCount == 0) {
	                this._focusedIndex.itemIndex = -1;
	                this._focusedIndex.column = this.getFirstColumn();
	            }
	            // if (ds && ds.rowCount > 0 && this.itemCount > 0) {
	            // } else {
	            // 	return false;	
	            // }
	            return false;
	        }
	        if (CellIndex_1.CellIndex.areEquals(value, this._focusedIndex)) {
	            return true;
	        }
	        var options = this._editOptions;
	        var oldIndex = this._focusedIndex.clone();
	        // if (this._changingMode === ChangingMode.BEFORE_EDITCOMMIT && !this._fireCurrentChanging(oldIndex, value)) {
	        //     return false;
	        // }
	        var rs = this.itemSource;
	        var tool = this.container.activeTool;
	        var lm = this.layoutManager;
	        if (!this._editController.focusedIndexChanging()) {
	            return false;
	        }
	        // if (this._changingMode === ChangingMode.NORMAL && !this._fireCurrentChanging(oldIndex, value)) {
	        //     return false;
	        // }
	        var item = oldIndex.item;
	        if (rs && value.itemIndex != oldIndex.itemIndex) {
	            try {
	                if (item) {
	                    switch (item.itemState) {
	                        case GridItem_1.ItemState.INSERTING:
	                            if (!this.commit(options.forceInsert, true)) {
	                                this.cancel(true);
	                                return false;
	                            }
	                            break;
	                        case GridItem_1.ItemState.APPENDING:
	                            if (!this.commit(options.forceAppend, true)) {
	                                this.cancel(true);
	                                return false;
	                            }
	                            break;
	                        case GridItem_1.ItemState.UPDATING:
	                            if (!this.commit(this.isEditing() && options.commitWhenNoEdit, true)) {
	                                this.cancel(true);
	                                return false;
	                            }
	                            break;
	                    }
	                }
	            }
	            catch (err) {
	                if (err instanceof Validation.ValidationError) {
	                    err = this._fireValidationFail(item.index, err.column, err);
	                    err ? alert(options.showOnlyValidationMessage && err.userMessage ? err.userMessage : err.toString()) : null;
	                    return false;
	                }
	                if (err instanceof Validation.AbortError) {
	                    return false;
	                }
	                throw err;
	            }
	        }
	        else if (item && this.isItemEditing(item) && options.validateOnExit) {
	            // this.$_validateCellValue(oldIndex, oldIndex.value);
	            this.invalidateLayout();
	        }
	        tool.focusedIndexChanging(value);
	        if (this.isValid(oldIndex)) ;
	        this._focusedIndex.assign(value);
	        if (rs instanceof EditableItemProvider_1.EditableItemProvider) ;
	        this._editController.focusedIndexChanged(oldIndex, value);
	        tool.focusedIndexChanged(oldIndex, value);
	        if (this.isValid(this._focusedIndex)) ;
	        if (select) {
	            this.clearSelection();
	        }
	        if (this.isValid(this._focusedIndex)) {
	            if (this._rowIndicatorView.visible) {
	                this._rowIndicatorView.refresh(this);
	            }
	            if (this._headerView.visible) {
	                this._headerView.refresh(this);
	            }
	            if (this._fixedHeaderView.visible) {
	                this._fixedHeaderView.refresh(this);
	            }
	            if (this._rightHeaderView.visible) {
	                this._rightHeaderView.refresh(this);
	            }
	        }
	        var force = !CellIndex_1.CellIndex.areEquals(this._focusedIndex, lm["_prevFocused"]);
	        if (focus || force) {
	            this.$_makeFocusIndexVisible(force);
	        }
	        // this._fireCurrentChanged(this._shadowIndex.assign(this._focusedIndex));
	        // this.isValid(oldIndex) && oldIndex.item() instanceof GridRow && this.$_refreshRow(oldIndex._itemIndex);
	        // this.isValid(this._focusedIndex) && this._focusedIndex.item() instanceof GridRow && this.$_refreshRow(this._focusedIndex._itemIndex);
	        // if (!this.$_checkCurrentRow()) {
	        //     this.$_checkLastCellCommit(oldIndex);
	        // }
	        return true;
	    };
	    GridBase.prototype.$_makeFocusIndexVisible = function (force) {
	        if (this.isValid(this._focusedIndex)) {
	            this.makeCellVisible(this._focusedIndex, force);
	        }
	    };
	    GridBase.prototype.makeCellVisible = function (index, force) {
	        if (force === void 0) { force = false; }
	        if (force) {
	            this.layoutManager.makeCellVisible(index);
	            this.invalidateLayout();
	        }
	        else if (this.isValid(index)) {
	            if (!this.layoutManager.cellIsVisible(index)) {
	                this.layoutManager.makeCellVisible(index);
	                this.invalidateLayout();
	            }
	        }
	        else if (index && index.column) {
	            this.layoutManager.makeCellVisible(index);
	            this.invalidateLayout();
	        }
	    };
	    GridBase.prototype.cancelEditor = function (hideEditor) {
	        hideEditor = arguments.length > 0 ? hideEditor : true;
	        this._editController.cancelEditor(hideEditor);
	    };
	    GridBase.prototype.itemEditCancel = function () {
	        //return this._fireItemEditCancel(this._itemProvider._editingItem);
	        return true;
	    };
	    GridBase.prototype.cancel = function (focus) {
	        if (focus === void 0) { focus = false; }
	        var editController = this.editController;
	        if (this.isEditing()) {
	            editController.cancelEditor(true);
	            editController.invalidateEditor();
	        }
	        var index = this.focusedIndex;
	        var rs = this.itemSource;
	        if (this.isValid(index) && rs.isEditing(index.item)) {
	            var dataId = index.dataId;
	            index = index.clone();
	            rs.cancel();
	            // if (this._validationManager._userValidations && dataId > -1) {
	            // 	this._validationManager.checkValidateCells(index.itemIndex());
	            // 	this._setColumnErrors(index.item());
	            // }
	            editController["_prepareEditor"](editController["_editIndex"]); // insert/append중인경우 editor에 값이 없다. 이것을 다시 채워준다.
	            index.normalize(this);
	            this.setFocusedIndex(index);
	            if (focus) {
	                this.$_makeFocusIndexVisible(false);
	            }
	            return true;
	        }
	        return false;
	    };
	    GridBase.prototype.commitEditor = function (hideEditor) {
	        if (hideEditor === void 0) { hideEditor = true; }
	        this.editController.commitEditor(hideEditor, false);
	    };
	    GridBase.prototype.commit = function (force, raiseFailError) {
	        if (raiseFailError === void 0) { raiseFailError = false; }
	        var index = this.focusedIndex;
	        if (!this.isValid(index)) {
	            return false;
	        }
	        var rs = Utils_1.Utils.cast(this.itemSource, EditableItemProvider_1.EditableItemProvider);
	        if (!rs) {
	            return false;
	        }
	        if (this.isEditing()) {
	            this.editController.commitEditor(true, false);
	            this.editController.invalidateEditor();
	        }
	        var item = index.item;
	        if (rs.isEditing(item) && (force || rs.isEdited(item))) {
	            var inserting = GridItem_1.ItemState_isInserting(item.itemState);
	            // try {
	            // 	this._validationManager.validateRow(item, inserting);
	            // 	this.$_validateRow(item, inserting);
	            // } catch (err) {
	            // 	if (err instanceof ValidationError && err.column && err.column.setError) {
	            // 		err.column.setError(err.message || err);
	            // 		err.column.setErrorLevel(err.level || ValidationLevel.ERROR);
	            // 	}
	            // 	throw err;
	            // }
	            if (!rs.commit()) {
	                if (raiseFailError) {
	                    throw new Validation.AbortError("Commit failed.");
	                }
	                return false;
	            }
	            return true;
	        }
	        return false;
	    };
	    GridBase.prototype.editorCancel = function (editor, index) {
	        //this._doCellCancel(index);
	    };
	    GridBase.prototype.editorCanceled = function () {
	        this.activeTool.resetFocused();
	    };
	    GridBase.prototype._editorStarted = function (editor, index) {
	        if (this.edit(index)) ;
	    };
	    GridBase.prototype._editorChange = function (editor, index, value) {
	        this._fireEditChange(index, value); //, text);
	    };
	    GridBase.prototype._editorSearch = function (editor, index, text) {
	        // this._fireEditSearch(index, text);
	    };
	    GridBase.prototype._searchCellButtonClick = function (editor, index, text) {
	        // return this._fireSearchCellButtonClick(index, text);
	        return true;
	    };
	    GridBase.prototype.$_getFieldDefaults = function (ds) {
	        function getDefault(grid, dataIndex) {
	            for (var i = 0; i < grid.columnCount; i++) {
	                var column = grid.getColumn(i);
	                if (column instanceof DataColumn_1.DataColumn && column.dataIndex == dataIndex) {
	                    var field = column.getField();
	                    var value = field && field.defaultValue;
	                    return value;
	                }
	            }
	            return undefined;
	        }
	        var flds = this.dataSource.fieldCount;
	        var values = [];
	        for (var i = 0; i < flds; i++) {
	            values.push(undefined);
	        }
	        for (var i = 0; i < flds; i++) {
	            var value = getDefault(this, i);
	            value && (values[i] = value);
	        }
	        return values;
	    };
	    GridBase.prototype.$_getColumnDefaults = function (defaults) {
	        for (var i = 0, cnt = this.columnCount; i < cnt; i++) {
	            var column = this.getColumn(i);
	            if (column instanceof DataColumn_1.DataColumn) {
	                var defValue = column.defaultValue;
	                defValue != null && (defaults[column.dataIndex] = column.defaultValue);
	            }
	        }
	    };
	    GridBase.prototype.$_getItemDefaults = function (item, defaults) {
	    };
	    GridBase.prototype.$_readDefaultValues = function (defaults) {
	    };
	    GridBase.prototype.$_getInsertDefaults = function (item) {
	        var defaults = this.$_getFieldDefaults(this.itemSource.dataSource);
	        this.$_getColumnDefaults(defaults);
	        this.$_getItemDefaults(null, defaults);
	        this.$_readDefaultValues(defaults);
	        return defaults;
	    };
	    GridBase.prototype._clearColumnErrors = function () {
	        // function clearErrors(group) {
	        // 	for (var i = 0, cnt = group.count(); i < cnt; i++) {
	        // 		var dc = group.getItem(i);
	        // 		if (dc instanceof DataColumn) {
	        // 			dc.setError(null);
	        // 		} else if (dc instanceof ColumnGroup) {
	        // 			clearErrors(dc);
	        // 		}
	        // 	}
	        // }
	        // clearErrors(this._rootColumn);
	    };
	    GridBase.prototype._setColumnErrors = function (item) {
	        // function setErrors(errData, group) {
	        // 	for (var i = 0, cnt = group.count(); i < cnt; i++) {
	        // 		var dc = group.getItem(i);
	        // 		if (dc instanceof DataColumn) {
	        // 			var err = errData[dc.dataIndex()];
	        // 			if (err) {
	        // 				dc.setError(err.message);
	        // 				dc.setErrorLevel(err.level)
	        // 			}
	        // 		} else if (dc instanceof ColumnGroup) {
	        // 			setErrors(errData, dc);
	        // 		}
	        // 	}
	        // }
	        // var errData = this._validationManager._validateCellList && this._validationManager._validateCellList[item.dataId()];
	        // if (!errData) {return}
	        // setErrors(errData, this._rootColumn);
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    GridBase.prototype._fireCurrentChanging = function (oldIndex, newIndex) {
	        return this.fireConfirmEvent(GridBase.CURRENT_CHANGING, oldIndex, newIndex);
	    };
	    GridBase.prototype._fireCurrentChanged = function (newIndex) {
	        this.fireEvent(GridBase.CURRENT_CHANGED, newIndex);
	    };
	    GridBase.prototype._fireCurrentRowChanged = function (oldRow, newRow) {
	        this.fireEvent(GridBase.CURRENT_ROW_CHANGED, oldRow, newRow);
	    };
	    GridBase.prototype._fireValidateCell = function (index, inserting, value) {
	        this.fireEvent(GridBase.VALIDATE_CELL, index, inserting, value);
	    };
	    GridBase.prototype._fireValidateRow = function (item, inserting, values) {
	        this.fireEvent(GridBase.VALIDATE_ROW, item, inserting, values);
	    };
	    GridBase.prototype._fireValidationFail = function (itemIndex, column, err) {
	        this.fireObjectEvent(GridBase.VALIDATION_FAIL, itemIndex, column, err);
	    };
	    GridBase.prototype._fireColumnHeaderClicked = function (column, rightClicked, event) {
	        this.fireEvent(GridBase.COLUMN_HEADER_CLICKED, column, rightClicked, event);
	    };
	    GridBase.prototype._fireColumnHeaderImageClicked = function (column) {
	        this.fireEvent(GridBase.COLUMN_HEADER_IMAGE_CLICKED, column);
	    };
	    GridBase.prototype._fireColumnHeaderDblClicked = function (column) {
	        this.fireEvent(GridBase.COLUMN_HEADER_DBL_CLICKED, column);
	    };
	    GridBase.prototype._fireColumnCheckedChanged = function (column) {
	        this.fireEvent(GridBase.COLUMN_CHECKED_CHANGED, column);
	    };
	    GridBase.prototype._fireFooterCellClicked = function (column) {
	        this.fireEvent(GridBase.FOOTER_CELL_CLICKED, column);
	    };
	    GridBase.prototype._fireFooterCellDblClicked = function (column) {
	        this.fireEvent(GridBase.FOOTER_CELL_DBL_CLICKED, column);
	    };
	    GridBase.prototype._fireHeaderSummaryCellClicked = function (column) {
	        this.fireEvent(GridBase.HEADERSUMMARY_CELL_CLICKED, column);
	    };
	    GridBase.prototype._fireHeaderSummaryCellDblClicked = function (column) {
	        this.fireEvent(GridBase.HEADERSUMMARY_CELL_DBL_CLICKED, column);
	    };
	    GridBase.prototype._fireCheckBarHeadClicked = function () {
	        this.fireEvent(GridBase.CHECK_BAR_HEAD_CLICKED);
	    };
	    GridBase.prototype._fireCheckBarFootClicked = function () {
	        this.fireEvent(GridBase.CHECK_BAR_FOOT_CLICKED);
	    };
	    GridBase.prototype._fireIndicatorCellClicked = function (index) {
	        this.fireEvent(GridBase.INDICATOR_CELL_CLICKED, index);
	    };
	    GridBase.prototype._fireStateBarCellClicked = function (index) {
	        this.fireEvent(GridBase.STATE_BAR_CELL_CLICKED, index);
	    };
	    GridBase.prototype._fireRowGroupHeadClicked = function () {
	        this.fireEvent(GridBase.ROWGROUP_HEAD_CLICKED);
	    };
	    GridBase.prototype._fireRowGroupFootClicked = function () {
	        this.fireEvent(GridBase.ROWGROUP_FOOT_CLICKED);
	    };
	    GridBase.prototype._fireRowGroupHeaderFooterClicked = function (kind, index) {
	        this.fireEvent(GridBase.ROWGROUP_HEADER_FOOTER_CLICKED, kind, index);
	    };
	    GridBase.prototype._fireRowGroupBarClicked = function (index) {
	        this.fireEvent(GridBase.ROWGROUP_BAR_CLICKED, index);
	    };
	    GridBase.prototype._fireCheckBarFootDblClicked = function () {
	        this.fireEvent(GridBase.CHECK_BAR_FOOT_DBL_CLICKED);
	    };
	    GridBase.prototype._fireIndicatorCellDblClicked = function (index) {
	        this.fireEvent(GridBase.INDICATOR_CELL_DBL_CLICKED, index);
	    };
	    GridBase.prototype._fireStateBarCellDblClicked = function (index) {
	        this.fireEvent(GridBase.STATE_BAR_CELL_DBL_CLICKED, index);
	    };
	    GridBase.prototype._fireRowGroupHeadDblClicked = function () {
	        this.fireEvent(GridBase.ROWGROUP_HEAD_DBL_CLICKED);
	    };
	    GridBase.prototype._fireRowGroupFootDblClicked = function () {
	        this.fireEvent(GridBase.ROWGROUP_FOOT_DBL_CLICKED);
	    };
	    GridBase.prototype._fireRowGroupHeaderFooterDblClicked = function (kind, index) {
	        this.fireEvent(GridBase.ROWGROUP_HEADER_FOOTER_DBL_CLICKED, kind, index);
	    };
	    GridBase.prototype._fireRowGroupBarDblClicked = function (index) {
	        this.fireEvent(GridBase.ROWGROUP_BAR_DBL_CLICKED, index);
	    };
	    GridBase.prototype._firePanelClicked = function () {
	        this.fireEvent(GridBase.PANEL_CLICKED);
	    };
	    GridBase.prototype._firePanelDblClicked = function () {
	        this.fireEvent(GridBase.PANEL_DBL_CLICKED);
	    };
	    GridBase.prototype._fireRowGroupPanelClicked = function (column) {
	        this.fireEvent(GridBase.ROWGROUP_PANEL_CLICKED, column);
	    };
	    GridBase.prototype._fireRowGroupPanelDblClicked = function (column) {
	        this.fireEvent(GridBase.ROWGROUP_PANEL_DBL_CLICKED, column);
	    };
	    GridBase.prototype._fireBodyEmptyClicked = function () {
	        this.fireEvent(GridBase.BODY_EMPTY_CLICKED);
	    };
	    GridBase.prototype._fireBodyEmptyDblClicked = function () {
	        this.fireEvent(GridBase.BODY_EMPTY_DBL_CLICKED);
	    };
	    GridBase.prototype._fireMenuItemClicked = function (menuItem, index) {
	        this.fireEvent(GridBase.MENU_ITEM_CLICKED, menuItem, index);
	    };
	    GridBase.prototype._fireContextMenuPopup = function (x, y, eltName) {
	        return this.fireConfirmEvent(GridBase.CONTEXT_MENU_POPUP, x, y, eltName);
	    };
	    GridBase.prototype._fireContextMenuItemClicked = function (menuItem, index) {
	        this.fireEvent(GridBase.CONTEXT_MENU_ITEM_CLICKED, menuItem, index);
	    };
	    GridBase.prototype._fireCellButtonClicked = function (index) {
	        this._buttonClicked = true;
	        this.fireEvent(GridBase.CELL_BUTTON_CLICKED, index);
	    };
	    GridBase.prototype._fireEditButtonClicked = function (index) {
	        // this._buttonClicked = true;
	        this.fireEvent(GridBase.EDIT_BUTTON_CLICKED, index);
	    };
	    GridBase.prototype._fireImageButtonClicked = function (index, buttonIndex, name) {
	        this._buttonClicked = true;
	        this.fireEvent(GridBase.IMAGE_BUTTON_CLICKED, index, buttonIndex, name);
	    };
	    GridBase.prototype._fireScrollToBottom = function () {
	        this.fireEvent(GridBase.SCROLL_TO_BOTTOM);
	    };
	    GridBase.prototype._fireTopIndexChanged = function (itemIndex) {
	        this.fireEvent(GridBase.TOPITEMINDEX_CHANGED, itemIndex);
	    };
	    GridBase.prototype._fireDataCellClicked = function (index) {
	        var editOptions = this.editOptions;
	        var except = editOptions.exceptDataClickWhenButton;
	        if (except && this._buttonClicked) ;
	        else {
	            this.fireEvent(GridBase.DATA_CELL_CLICKED, index);
	        }
	    };
	    GridBase.prototype._fireDataCellDblClicked = function (index) {
	        this.fireEvent(GridBase.DATA_CELL_DBL_CLICKED, index);
	    };
	    GridBase.prototype._fireRowsDeleting = function (rows) {
	        return this.fireConfirmEvent(GridBase.ROWS_DELETING, rows);
	    };
	    GridBase.prototype._fireRowInserting = function (itemIndex, dataRow) {
	        return this.fireConfirmEvent(GridBase.ROW_INSERTING, itemIndex, dataRow);
	    };
	    GridBase.prototype._fireItemCommit = function (itemIndex, dataRow) {
	        this.fireEvent(GridBase.ITEM_COMMIT);
	    };
	    GridBase.prototype._fireSelectionChanged = function () {
	    };
	    GridBase.prototype._fireSelectionAdded = function (item) {
	    };
	    GridBase.prototype._fireSelectionRemoved = function () {
	    };
	    GridBase.prototype._fireSelectionCleared = function () {
	    };
	    GridBase.prototype._fireSelectionResized = function (item) {
	    };
	    GridBase.prototype._fireSelectionEnded = function (item) {
	    };
	    GridBase.prototype._fireUpdateStarted = function (item, appending) {
	        this.fireEvent(GridBase.UPDATE_STARTED, item);
	    };
	    GridBase.prototype._fireInsertStarted = function (item, appending) {
	        this.fireEvent(GridBase.INSERT_STARTED, item, appending);
	    };
	    GridBase.prototype._fireShowEditor = function (index, attrs) {
	        //return this.fireConfirmEvent(static readonly SHOW_EDITOR, index, attrs);
	    };
	    GridBase.prototype._fireHideEditor = function (index) {
	        //return this.fireEvent(static readonly HIDE_EDITOR, index);
	    };
	    GridBase.prototype._fireEditChange = function (index, value) {
	        this.fireEvent(GridBase.EDIT_CHANGE, index, value);
	    };
	    GridBase.prototype._fireGetEditValue = function (index, editResult) {
	        this.fireEvent(GridBase.GET_EDIT_VALUE, index, editResult);
	    };
	    GridBase.prototype._fireEditCommit = function (index, oldValue, newValue) {
	        return this.fireConfirmEvent(GridBase.EDIT_COMMIT, index, oldValue, newValue);
	    };
	    GridBase.prototype._fireEditCanceled = function (index) {
	        this.fireEvent(GridBase.EDIT_CANCELED, index);
	    };
	    GridBase.prototype._fireItemEditCancel = function (item) {
	        return this.fireConfirmEvent(GridBase.ITEM_EDIT_CANCEL, item);
	    };
	    GridBase.prototype._fireItemEditCanceled = function (item) {
	        this.fireEvent(GridBase.ITEM_EDIT_CANCELED, item);
	    };
	    GridBase.prototype._fireEditSearch = function (index, text) {
	        this.fireEvent(GridBase.EDIT_SEARCH, index, text);
	    };
	    GridBase.prototype._fireSearchCellButtonClick = function (index, text) {
	        this.fireObjectEvent(GridBase.SEARCH_BUTTON_CLICK, index, text);
	    };
	    GridBase.prototype._fireCellEdited = function (item, field) {
	        this.fireEvent(GridBase.CELL_EDITED, item, field);
	    };
	    GridBase.prototype._fireEditRowChanged = function (item, field, oldValue, newValue) {
	        this.fireEvent(GridBase.EDIT_ROW_CHANGED, item, field, oldValue, newValue);
	    };
	    GridBase.prototype._fireEditItemPasted = function (item, fields, oldValues, newValues) {
	        this.fireEvent(GridBase.EDIT_ROW_PASTED, item, fields, oldValues, newValues);
	    };
	    GridBase.prototype._fireItemsPasted = function (items) {
	        this.fireEvent(GridBase.ROWS_PASTED, items);
	    };
	    GridBase.prototype._fireItemChecked = function (item) {
	        this.fireEvent(GridBase.ITEM_CHECKED, item, item.checked);
	    };
	    GridBase.prototype._fireItemsChecked = function (items, checked) {
	        this.fireEvent(GridBase.ITEMS_CHECKED, items, checked);
	    };
	    GridBase.prototype._fireItemAllChecked = function (checked) {
	        this.fireEvent(GridBase.ITEM_ALL_CHECKED, checked);
	    };
	    GridBase.prototype._fireErrorClicked = function (cell, error) {
	        this.fireEvent(GridBase.ERROR_CLICKED, error);
	    };
	    GridBase.prototype._fireSorting = function (fields, directions) {
	        return this.fireConfirmEvent(GridBase.SORTING, fields, directions);
	    };
	    GridBase.prototype._fireFiltering = function () {
	        return this.fireConfirmEvent(GridBase.FILTERING);
	    };
	    GridBase.prototype._fireFilterActionClicked = function (action, x, y) {
	        this.fireEvent(GridBase.FILTER_ACTION_CLICKED, action, x, y);
	    };
	    GridBase.prototype._fireKeyDown = function (key, ctrl, shift, alt) {
	        return this.fireConfirmEvent(GridBase.KEY_DOWN, key, ctrl, shift, alt);
	    };
	    GridBase.prototype._fireKeyPress = function (key) {
	        this.fireEvent(GridBase.KEY_PRESS, key);
	    };
	    GridBase.prototype._fireKeyUp = function (key, ctrl, shift, alt) {
	        this.fireEvent(GridBase.KEY_UP, key, ctrl, shift, alt);
	    };
	    GridBase.prototype._fireShowTooltip = function (index, value) {
	        this.fireObjectEvent(GridBase.SHOW_TOOLTIP, index, value);
	    };
	    GridBase.prototype._fireShowHeaderTooltip = function (column, value) {
	        this.fireObjectEvent(GridBase.SHOW_HEADER_TOOLTIP, column, value);
	    };
	    GridBase.prototype._fireColumnPropertyChanged = function (column, property, value) {
	        this.fireEvent(GridBase.COLUMN_PROPERTY_CHANGED, column, property, value);
	    };
	    GridBase.prototype._fireShowInnerDragCursor = function (cells) {
	        this.fireObjectEvent(GridBase.SHOW_INNER_DRAG_CURSOR, cells);
	    };
	    GridBase.prototype._fireInnerDragStart = function (cells) {
	        this.fireConfirmEvent(GridBase.INNER_DRAG_START, cells);
	    };
	    GridBase.prototype._fireInnerDragOver = function (index, cells) {
	        // return this.fireConfirmEvent(GridBase.INNER_DRAG_OVER, index, cells);
	        this.fireObjectEvent(GridBase.INNER_DRAG_OVER, index, cells);
	    };
	    GridBase.prototype._fireInnerDrop = function (index, cells) {
	        return this.fireConfirmEvent(GridBase.INNER_DROP, index, cells);
	    };
	    GridBase.prototype._fireGridActivated = function () {
	        //return this.fireEvent(static readonly GRID_ACTIVATED);
	    };
	    GridBase.prototype._fireApplyCallback = function () {
	        var args = Array.prototype.slice.call(arguments, 0);
	        args.splice(0, 1, GridBase.APPLY_CALLBACK);
	        this.fireEvent.apply(this, args);
	    };
	    GridBase.prototype._firePaste = function (index, e) {
	        this.fireConfirmEvent(GridBase.PASTE, index, e);
	    };
	    GridBase.prototype._firePasted = function () {
	        this.fireEvent(GridBase.PASTED);
	    };
	    // //-------------------------------------------------------------------------
	    // // ImageListListener
	    // //-------------------------------------------------------------------------
	    // onImageListImageLoaded(images: ImageList, index: number): void {
	    // 	const img = images.getImage(index);
	    // 	console.log(images.name + "'s image loaded at " + index + " [" + img.width + "," + img.height + "]");
	    // 	this.invalidateLayout();
	    // }
	    //-------------------------------------------------------------------------
	    // ScrollBar event handlers
	    //-------------------------------------------------------------------------
	    GridBase.prototype.onScrollBarScrolled = function (bar, eventType, delta, position) {
	        var options = this.displayOptions;
	        if (bar.vertical) {
	            var t = this.topIndex;
	            switch (eventType) {
	                case ScrollBar_1.ScrollEventType.LINE:
	                    this.scrollRow(delta);
	                    return;
	                case ScrollBar_1.ScrollEventType.PAGE:
	                    t = this.topIndex + delta * bar["_page"];
	                    break;
	                case ScrollBar_1.ScrollEventType.THUMB_TRACK:
	                    // var scrollDuration = options.scrollDuration;
	                    // if (options.liveScroll || (this._scrolledTime > 0 && getTimer() - this._scrolledTime > scrollDuration)) {
	                    // 	this.setTopIndex(position);
	                    // 	this._scrolledTime = 0;
	                    // } else {
	                    // 	this._vscrollBar.setPosition(position, true);
	                    // 	if (scrollDuration > 0 && this._scrolledTime == 0)
	                    // 		this._scrolledTime = getTimer();
	                    // }
	                    t = position;
	                    break;
	                default:
	                    t = position;
	                    break;
	            }
	            if (t != this.topIndex) {
	                this.topIndex = t;
	            }
	        }
	        else {
	            var p = this.leftPos;
	            switch (eventType) {
	                case ScrollBar_1.ScrollEventType.LINE:
	                    p = this.leftPos + delta * 8, true;
	                    break;
	                case ScrollBar_1.ScrollEventType.PAGE:
	                    // 	if (this._layoutManager) { 
	                    // 		this.setLeftPos(this._layoutManager.scrollToNextColumn(), true);
	                    // 	} else {
	                    // 		this.setLeftPos(this.leftPos() + bar._page, true);
	                    // 	}
	                    // 	break;
	                    // case ScrollEventType.PAGE_LEFT:
	                    // 	if (this._layoutManager) { 
	                    // 		this.setLeftPos(this._layoutManager.scrollToPrevColumn(), true);
	                    // 	} else {
	                    // 		this.setLeftPos(this.leftPos() - bar._page, true);
	                    // 	}
	                    break;
	                case ScrollBar_1.ScrollEventType.THUMB_TRACK:
	                    // var scrollDuration = options.hscrollDuration();
	                    // if (options.isHorizLiveScroll() || (this._scrolledTime > 0 && getTimer() - this._scrolledTime > scrollDuration)) {
	                    // 	this.setLeftPos(position, false);
	                    // 	this._horzScrolling = false;
	                    // 	this._scrolledTime = 0;
	                    // } else {
	                    // 	this._hscrollBar.setPosition(position, true);
	                    // 	if (scrollDuration > 0 && this._scrolledTime == 0) {
	                    // 		this._scrolledTime = getTimer();
	                    // 	}
	                    // }
	                    p = position;
	                    break;
	                default:
	                    p = position;
	                    break;
	            }
	            if (p != this.leftPos) {
	                this.leftPos = p;
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // ItemProvider event handlers
	    //-------------------------------------------------------------------------
	    GridBase.prototype.onItemProviderReset = function (rs) {
	        //_trace(">> onItemProviderReset");
	        this.hideEditor();
	        this._dataChanged = true;
	        //this._resetColumnIndicies();
	        this._populateMerges();
	        this.resetGrid();
	        //this.$_syncHeadCheck([], undefined);
	        //this._shadowDom && this._itemProvider && this._shadowDom.setItemProvider(this._itemProvider);
	    };
	    GridBase.prototype.onItemProviderRefresh = function (rs) {
	        //_trace(">> onItemProviderRefresh");
	        this.hideEditor();
	        this._dataChanged = true;
	        //this._resetColumnIndicies();
	        this._populateMerges();
	        this.refreshView();
	        //this._syncHeadCheck && this.$_syncHeadCheck([], undefined);
	        //this._shadowDom && this._itemProvider && this._shadowDom.setItemProvider(this._itemProvider);
	    };
	    GridBase.prototype.onItemProviderRefreshClient = function (rs) {
	        //Utils.trace(">> onItemProviderRefreshClient");
	        this.hideEditor();
	        this._dataChanged = true;
	        //this._resetColumnIndicies();
	        this._populateMerges();
	        this.refreshView();
	        // this._syncHeadCheck && this.$_syncHeadCheck([], undefined);
	        // this._shadowDom && this._itemProvider && this._shadowDom.setItemProvider(this._itemProvider);
	    };
	    GridBase.prototype.onItemProviderItemInserted = function (rs, item) {
	        //_trace(">> onItemProviderItemInserted: " + item.dataRow());
	        this.hideEditor();
	        this._dataChanged = true;
	        this._syncHeadCheck = true;
	        this._populateMerges();
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderItemDeleted = function (rs, item) {
	        //_trace(">> onItemProviderItemDeleted: " + item.dataRow());
	        this.hideEditor();
	        this._dataChanged = true;
	        this._syncHeadCheck = true;
	        this._populateMerges();
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderItemUpdated = function (rs, item) {
	        //_trace(">> onItemProviderItemUpdated: " + item.dataRow());
	        this.hideEditor();
	        this._dataChanged = true;
	        this._updateRows ? this._updateRows.push(item.dataId) : (this._updateRows = [item.dataId]);
	        this._populateMerges();
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderCheckableChanged = function (rs, item) {
	        //_trace(">> onItemProviderCheckableChanged: " + item.dataRow() + ", " + item.isCheckable());
	        this.refreshView();
	        //this.$_syncHeadCheck([], undefined);
	    };
	    GridBase.prototype.onItemProviderItemChecked = function (rs, item) {
	        //_trace(">> onItemProviderItemChecked: " + item.dataRow() + ", " + item.isChecked());
	        this.refreshView();
	        this._fireItemChecked(item);
	    };
	    GridBase.prototype.onItemProviderItemsChecked = function (rs, items, checked) {
	        //_trace(">> onItemProviderItemsChecked: " + items.length + " items, " + checked);
	        this.refreshView();
	        this._fireItemsChecked(items, checked);
	    };
	    GridBase.prototype.onItemProviderItemAllChecked = function (rs, checked) {
	        //_trace(">> onItemProviderItemAllChecked: " + checked);
	        this.refreshView();
	        this._fireItemAllChecked(checked);
	    };
	    GridBase.prototype.onItemProviderItemCheckChanged = function (rs, items, checked) {
	        //_trace(">> onItemProviderItemCheckChanged: " + checked);
	        //this.$_syncHeadCheck(items, checked);
	    };
	    GridBase.prototype.onItemProviderRowStateChanged = function (itemProvider, item) {
	        //_trace(">> onItemProviderRowStateChanged: " + item.dataRow());
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderRowStatesChanged = function (itemProvider, items) {
	        //_trace(">> onItemProviderRowStatesChanged");
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderRowStatesCleared = function (itemProvider) {
	        //_trace(">> onItemProviderRowStatesCleared");
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderSort = function (itemProvider, fields, directions) {
	        //_trace(">> onItemProviderSort");
	        this.refreshView();
	    };
	    GridBase.prototype.onItemProviderSorted = function (itemProvider) {
	        //_trace(">> onItemProviderSorted");
	        this.refreshView();
	        this.fireEvent(GridBase.SORTING_CHANGED);
	        //this._shadowDom && this._itemProvider && this._shadowDom.reset();
	    };
	    GridBase.prototype.onItemProviderFilterAdded = function (itemProvider) {
	        //_trace(">> onItemProviderFilterAdded");
	    };
	    GridBase.prototype.onItemProviderFilterRemoved = function (itemProvider) {
	        //_trace(">> onItemProviderFilterRemoved");
	    };
	    GridBase.prototype.onItemProviderFilterCleared = function (itemProvider) {
	        //_trace(">> onItemProviderFilterCleared");
	    };
	    GridBase.prototype.onItemProviderFilterAllCleared = function (itemProvider) {
	        //_trace("onItemProviderFilterAllCleared");
	    };
	    GridBase.prototype.onItemProviderFiltered = function (itemProvider, filterCollection, filter) {
	        this.refreshView();
	        //!this._loading && this.$_syncHeadCheck([], undefined);	// filter의 경우 refresh이후에 이벤트가 발생 주의해서 처리.
	        this.fireEvent(GridBase.FILTERING_CHANGED, filterCollection, filter);
	        //this._shadowDom && this._itemProvider && this._shadowDom.reset();
	    };
	    GridBase.prototype.$_focusEditItem = function (item) {
	        var index = this.getIndex(item.index, this.focusedIndex ? this.focusedIndex.column : null);
	        if (!index.column && this.visibleColumnCount > 0) {
	            index["_column"] = this.getVisibleColumn(0);
	        }
	        this.setFocusedIndex(index, true);
	        this.makeCellVisible(this.focusedIndex);
	    };
	    GridBase.prototype.onItemEditUpdateStarted = function (rs, item) {
	        //this._clearColumnErrors();
	        //this._setColumnErrors(item)
	        this.refreshView();
	        this._fireUpdateStarted(item, false);
	    };
	    GridBase.prototype.onItemEditAppendStarted = function (rs, item) {
	        this.hideEditor();
	        this.reprepareEditor();
	        this._clearColumnErrors();
	        this._populateMerges();
	        this.refreshView();
	        this.$_focusEditItem(item);
	        this._fireInsertStarted(item, true);
	    };
	    GridBase.prototype.onItemEditInsertStarted = function (itemProvider, item) {
	        this.hideEditor();
	        this.reprepareEditor();
	        this._clearColumnErrors();
	        this._populateMerges();
	        this.refreshView();
	        this.$_focusEditItem(item);
	        this._fireInsertStarted(item, false);
	    };
	    GridBase.prototype.onItemEditCellEdited = function (rs, item, field) {
	        this.refreshView();
	        !this._cellUpdateEventLock && this._fireCellEdited(item, field);
	    };
	    GridBase.prototype.onItemEditCellUpdated = function (rs, item, field, oldValue, newValue) {
	        this.refreshView();
	        !this._cellUpdateEventLock && this._fireEditRowChanged(item, field, oldValue, newValue);
	    };
	    GridBase.prototype.onItemEditCommitting = function (rs, item) {
	    };
	    GridBase.prototype.onItemEditCommitted = function (rs, item) {
	        this._appendDummy();
	        this.hideEditor();
	        this.refreshView();
	    };
	    GridBase.prototype.onItemEditCanceled = function (rs) {
	        this._appendDummy();
	        this.hideEditor();
	        this._populateMerges();
	        this.refreshView();
	        this._fireItemEditCanceled(rs["_editingItem"]);
	    };
	    GridBase.prototype.onItemEditCommitRequest = function (rs) {
	        this.commit(false);
	    };
	    GridBase.prototype.onItemEditCancelReuqest = function (rs) {
	        this.cancel();
	    };
	    //-------------------------------------------------------------------------
	    // LookupSourceProvider event handlers
	    //-------------------------------------------------------------------------
	    GridBase.prototype.onLookupSourceProviderChanged = function (provider) {
	        this.refreshView();
	    };
	    //-------------------------------------------------------------------------
	    // SelectionManager event handlers
	    //-------------------------------------------------------------------------
	    GridBase.prototype.onSelectionChanged = function (manager) {
	        this._fireSelectionChanged();
	    };
	    GridBase.prototype.onSelectionAdded = function (manager, item) {
	        this._addSelectionView(item);
	        this._layoutSelectionViews();
	        this._fireSelectionAdded(item);
	        this._fireSelectionChanged();
	    };
	    GridBase.prototype.onSelectionRemoved = function (manager) {
	        this._fireSelectionRemoved();
	        this._fireSelectionChanged();
	    };
	    GridBase.prototype.onSelectionCleared = function (manager) {
	        this._clearSelectionViews();
	        this._fireSelectionCleared();
	        this._fireSelectionChanged();
	    };
	    GridBase.prototype.onSelectionResized = function (manager, item) {
	        this._layoutSelectionViews();
	        this._fireSelectionResized(item);
	        this._fireSelectionChanged();
	    };
	    GridBase.prototype.onSelectionEnded = function (manager, item) {
	        this._fireSelectionEnded(item);
	    };
	    //-------------------------------------------------------------------------
	    // MenuItem event handlers
	    //-------------------------------------------------------------------------
	    GridBase.prototype.onMenuItemClick = function (menuItem, index) {
	        this._fireContextMenuItemClicked(menuItem, index);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    GridBase.CURRENT_CHANGING = "onGridBaseCurrentChanging";
	    GridBase.CURRENT_CHANGED = "onGridBaseCurrentChanged";
	    GridBase.CURRENT_ROW_CHANGED = "onGridBaseCurrentRowChanged";
	    GridBase.VALIDATE_CELL = "onGridBaseValidateCell";
	    GridBase.VALIDATE_ROW = "onGridBaseValidateRow";
	    GridBase.VALIDATION_FAIL = "onGridBaseValidationFail";
	    GridBase.COLUMN_HEADER_CLICKED = "onGridBaseColumnHeaderClicked";
	    GridBase.COLUMN_HEADER_IMAGE_CLICKED = "onGridBaseColumnHeaderImageClicked";
	    GridBase.COLUMN_HEADER_DBL_CLICKED = "onGridBaseColumnHeaderDblClicked";
	    GridBase.COLUMN_CHECKED_CHANGED = "onGridBaseColumnCheckedChanged";
	    GridBase.FOOTER_CELL_CLICKED = "onGridBaseFooterCellClicked";
	    GridBase.FOOTER_CELL_DBL_CLICKED = "onGridBaseFooterCellDblClicked";
	    GridBase.HEADERSUMMARY_CELL_CLICKED = "onGridBaseHeaderSummaryCellClicked";
	    GridBase.HEADERSUMMARY_CELL_DBL_CLICKED = "onGridBaseHeaderSummaryCellDblClicked";
	    GridBase.CHECK_BAR_HEAD_CLICKED = "onGridBaseCheckBarHeadClicked";
	    GridBase.CHECK_BAR_FOOT_CLICKED = "onGridBaseCheckBarFootClicked";
	    GridBase.INDICATOR_CELL_CLICKED = "onGridBaseIndicatorCellClicked";
	    GridBase.STATE_BAR_CELL_CLICKED = "onGridBaseStateBarCellClicked";
	    GridBase.ROWGROUP_HEAD_CLICKED = "onGridBaseRowGroupHeadClicked";
	    GridBase.ROWGROUP_FOOT_CLICKED = "onGridBaseRowGroupFootClicked";
	    GridBase.ROWGROUP_BAR_CLICKED = "onGridBaseRowGroupBarClicked";
	    GridBase.ROWGROUP_HEADER_FOOTER_CLICKED = "onGridBaseRowGroupHeaderFooterClicked";
	    GridBase.CHECK_BAR_FOOT_DBL_CLICKED = "onGridBaseCheckBarFootDblClicked";
	    GridBase.INDICATOR_CELL_DBL_CLICKED = "onGridBaseIndicatorCellDblClicked";
	    GridBase.STATE_BAR_CELL_DBL_CLICKED = "onGridBaseStateBarCellDblClicked";
	    GridBase.ROWGROUP_HEAD_DBL_CLICKED = "onGridBaseRowGroupHeadDblClicked";
	    GridBase.ROWGROUP_FOOT_DBL_CLICKED = "onGridBaseRowGroupFootDblClicked";
	    GridBase.ROWGROUP_BAR_DBL_CLICKED = "onGridBaseRowGroupBarDblClicked";
	    GridBase.ROWGROUP_HEADER_FOOTER_DBL_CLICKED = "onGridBaseRowGroupHeaderFooterDblClicked";
	    GridBase.PANEL_CLICKED = "onGridBasePanelClicked";
	    GridBase.PANEL_DBL_CLICKED = "onGridBasePanelDblClicked";
	    GridBase.ROWGROUP_PANEL_CLICKED = "onGridBaseRowGroupPanelClicked";
	    GridBase.ROWGROUP_PANEL_DBL_CLICKED = "onGridBaseRowGroupPanelDblClicked";
	    GridBase.BODY_EMPTY_CLICKED = "onGridBaseBodyEmptyClicked";
	    GridBase.BODY_EMPTY_DBL_CLICKED = "onGridBaseBodyEmptyDblClicked";
	    GridBase.MENU_ITEM_CLICKED = "onGridBaseMenuItemClicked";
	    GridBase.CONTEXT_MENU_POPUP = "onGridBaseContextMenuPopup";
	    GridBase.CONTEXT_MENU_ITEM_CLICKED = "onGridBaseContextMenuItemClicked";
	    GridBase.CELL_BUTTON_CLICKED = "onGridBaseCellButtonClicked";
	    GridBase.IMAGE_BUTTON_CLICKED = "onGridBaseImageButtonClicked";
	    GridBase.EDIT_BUTTON_CLICKED = "onGridBaseEditButtonClicked";
	    GridBase.CLICKABLE_CELL_CLICKED = "onGridBaseClickableCellClicked";
	    GridBase.SCROLL_TO_BOTTOM = "onGridBaseScrollToBottom";
	    GridBase.TOPITEMINDEX_CHANGED = "onGridBaseTopItemIndexChanged";
	    GridBase.DATA_CELL_CLICKED = "onGridBaseDataCellClicked";
	    GridBase.DATA_CELL_DBL_CLICKED = "onGridBaseDataCellDblClicked";
	    GridBase.ROWS_DELETING = "onGridBaseRowsDeleting";
	    GridBase.ROW_INSERTING = "onGridBaseRowInserting";
	    GridBase.ITEM_COMMIT = "onGridBaseItemCommit";
	    GridBase.SELECTION_ADDED = "onGridBaseSelectionAdded";
	    GridBase.SELECTION_CHANGED = "onGridBaseSelectionChanged";
	    GridBase.SELECTION_REMOVED = "onGridBaseSelectionRemoved";
	    GridBase.SELECTION_CLEARED = "onGridBaseSelectionCleared";
	    GridBase.SELECTION_RESIZED = "onGridBaseSelectionResized";
	    GridBase.SELECTION_ENDED = "onGridBaseSelectionEnded";
	    GridBase.INSERT_STARTED = "onGridBaseInsertStarted";
	    GridBase.UPDATE_STARTED = "onGridBaseUpdateStarted";
	    GridBase.SHOW_EDITOR = "onGridBaseShowEditor";
	    GridBase.HIDE_EDITOR = "onGridBaseHideEditor";
	    GridBase.EDIT_CHANGE = "onGridBaseEditChange";
	    GridBase.GET_EDIT_VALUE = "onGridBaseGetEditValue";
	    GridBase.EDIT_COMMIT = "onGridBaseEditCommit";
	    GridBase.EDIT_CANCELED = "onGridBaseEditCanceled";
	    GridBase.ITEM_EDIT_CANCELED = "onGridBaseItemEditCanceled";
	    GridBase.ITEM_EDIT_CANCEL = "onGridBaseItemEditCancel";
	    GridBase.EDIT_SEARCH = "onGridBaseEditSearch";
	    GridBase.SEARCH_BUTTON_CLICK = "onGridBaseSearchCellButtonClick";
	    GridBase.CELL_EDITED = "onGridBaseCellEdited";
	    GridBase.EDIT_ROW_CHANGED = "onGridBaseEditRowChanged";
	    GridBase.EDIT_ROW_PASTED = "onGridBaseEditRowPasted";
	    GridBase.ROWS_PASTED = "onGridBaseRowsPasted";
	    GridBase.ITEM_CHECKED = "onGridBaseItemChecked";
	    GridBase.ITEMS_CHECKED = "onGridBaseItemsChecked";
	    GridBase.ITEM_ALL_CHECKED = "onGridBaseItemAllChecked";
	    GridBase.ERROR_CLICKED = "onGridBaseErrorClicked";
	    GridBase.SORTING = "onGridBaseSorting";
	    GridBase.SORTING_CHANGED = "onGridBaseSortingChanged";
	    GridBase.FILTERING = "onGridBaseFiltering";
	    GridBase.FILTERING_CHANGED = "onGridBaseFilteringChanged";
	    GridBase.FILTER_ACTION_CLICKED = "onGridBaseFilterActionClicked";
	    GridBase.KEY_PRESS = "onGridBaseKeyPress";
	    GridBase.KEY_DOWN = "onGridBaseKeyDown";
	    GridBase.KEY_UP = "onGridBaseKeyUp";
	    GridBase.SHOW_TOOLTIP = "onGridBaseShowTooltip";
	    GridBase.SHOW_HEADER_TOOLTIP = "onGridBaseShowHeaderTooltip";
	    GridBase.COLUMN_PROPERTY_CHANGED = "onGridBaseColumnPropertyChanged";
	    GridBase.SHOW_INNER_DRAG_CURSOR = "onGridBaseShowInnerDragCursor";
	    GridBase.INNER_DRAG_START = "onGridBaseInnerDragStart";
	    GridBase.INNER_DRAG_OVER = "onGridBaseInnerDragOver";
	    GridBase.INNER_DROP = "onGridBaseInnerDrop";
	    GridBase.GRID_ACTIVATED = "onGridBaseGridActivated";
	    GridBase.APPLY_CALLBACK = "onGridBaseApplyCallback";
	    GridBase.RUN_CALLBACK = "onApplyCallback";
	    GridBase.GET_HANDLER = "getHandler";
	    GridBase.PASTE = "onGridBasePaste";
	    GridBase.PASTED = "onGridBasePasted";
	    return GridBase;
	}(VisualElement_1.LayerElement));
	exports.GridBase = GridBase;
	});

	unwrapExports(GridBase_1);
	var GridBase_2 = GridBase_1.GridBase;

	var ColumnFilter_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// ColumnFilter.ts
	// 2019. 07. 05. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });




	var ColumnFilter = /** @class */ (function (_super) {
	    __extends(ColumnFilter, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnFilter(criteria) {
	        var _this = _super.call(this) || this;
	        _this._active = false;
	        _this._visible = true;
	        _this.criteria = criteria;
	        return _this;
	    }
	    ColumnFilter.prototype.dispose = function () {
	        this._criteria = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ColumnFilter.prototype, "name", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** name */
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            this._name = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "criteria", {
	        /** criteria */
	        get: function () {
	            return this._criteria;
	        },
	        set: function (value) {
	            if (value != this._criteria) {
	                this._criteria = value;
	                this.criteriaChanged();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "text", {
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            this._text = value;
	            this.changed();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "description", {
	        /** description */
	        get: function () {
	            return this._description;
	        },
	        set: function (value) {
	            this._description = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "active", {
	        /** active */
	        get: function () {
	            return this._active;
	        },
	        set: function (value) {
	            if (value != this._active) {
	                this._active = value;
	                this.changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "visible", {
	        /** visible */
	        get: function () {
	            return this._visible;
	        },
	        set: function (value) {
	            this._visible = value;
	            this.changed();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilter.prototype, "tag", {
	        /** tag */
	        get: function () {
	            return this._tag;
	        },
	        set: function (value) {
	            this._tag = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnFilter.prototype.toString = function () {
	        return this._text || this._name;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnFilter.prototype.changed = function () {
	        this.fireEvent(ColumnFilter.CHANGED);
	    };
	    ColumnFilter.prototype.criteriaChanged = function () {
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ColumnFilter.CHANGED = "onColumnFilterChanged";
	    return ColumnFilter;
	}(EventAware_1.EventAware));
	exports.ColumnFilter = ColumnFilter;
	var ColumnFilterRun = /** @class */ (function (_super) {
	    __extends(ColumnFilterRun, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnFilterRun(model) {
	        var _this = _super.call(this, model.criteria) || this;
	        _this._model = model;
	        _this.parse();
	        return _this;
	    }
	    ColumnFilterRun.prototype.dispose = function () {
	        this._exprNode = null;
	        this._model = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnFilterRun.prototype.prepare = function (runtime, dataSource) {
	        runtime.setDataSource(dataSource);
	    };
	    ColumnFilterRun.prototype.select = function (runtime, item, field) {
	        if (this._exprNode) {
	            runtime.setData(item, field);
	            return this._exprNode.evaluate(runtime);
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnFilterRun.prototype.criteriaChanged = function () {
	        this.parse();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnFilterRun.prototype.parse = function () {
	        if (this.criteria) {
	            this._exprNode = Expression.ExpressionParser.Default.parse(this.criteria, null);
	            // if (this._exprNode instanceof FunctionExpressionNode) {
	            // 	this._exprNode.evaluate = this._evaluate.bind(this);
	            // }
	        }
	        else {
	            this._exprNode = null;
	        }
	    };
	    return ColumnFilterRun;
	}(ColumnFilter));
	exports.ColumnFilterRun = ColumnFilterRun;
	var ColumnFilterCollection = /** @class */ (function (_super) {
	    __extends(ColumnFilterCollection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnFilterCollection(owner) {
	        var _this = _super.call(this) || this;
	        _this._items = [];
	        _this._names = {};
	        _this._updating = false;
	        _this._nextId = 1;
	        _this._owner = owner;
	        return _this;
	    }
	    ColumnFilterCollection.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(ColumnFilterCollection.prototype, "count", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** count */
	        get: function () {
	            return this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilterCollection.prototype, "activeCount", {
	        /** activeCount */
	        get: function () {
	            var cnt = 0;
	            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
	                var f = _a[_i];
	                if (f.active) {
	                    cnt++;
	                }
	            }
	            return cnt;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilterCollection.prototype, "items", {
	        /** items */
	        get: function () {
	            return this._items.slice();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColumnFilterCollection.prototype, "isVisible", {
	        /** visible */
	        get: function () {
	            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
	                var f = _a[_i];
	                if (f.visible) {
	                    return true;
	                }
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnFilterCollection.prototype.getItem = function (index) {
	        return this._items[index];
	    };
	    ColumnFilterCollection.prototype.itemByName = function (name) {
	        return this._names[name];
	    };
	    ColumnFilterCollection.prototype.indexOf = function (name) {
	        for (var i = this._items.length - 1; i >= 0; i--) {
	            if (this._items[i].name == name) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    ColumnFilterCollection.prototype.getActiveItems = function (active) {
	        var items = [];
	        for (var i = this._items.length - 1; i >= 0; i--) {
	            if (this._items[i].active == active) {
	                items.push(this._items[i]);
	            }
	        }
	        return items;
	    };
	    ColumnFilterCollection.prototype.assignFrom = function (source) {
	        if (source === this) {
	            return;
	        }
	        var cleared = this.clear(false);
	        if (source) {
	            var src = source instanceof Array ? source : [source];
	            var cnt = src.length;
	            for (var i = 0; i < cnt; i++) {
	                source = src[i];
	                if (source && source.name) {
	                    this.$_checkName(source.name);
	                    var filter = new ColumnFilter(null);
	                    filter.assignFrom(source);
	                    this._items.push(filter);
	                    this._names[source.name] = filter;
	                    filter.addListener(this);
	                }
	            }
	        }
	        if (cleared || this.count > 0) {
	            this.changed(null);
	        }
	    };
	    ColumnFilterCollection.prototype.clear = function (fireEvent) {
	        if (fireEvent === void 0) { fireEvent = true; }
	        var cnt = this._items.length;
	        if (cnt > 0) {
	            for (var i = 0; i < cnt; i++) {
	                this._items[i].removeListener(this);
	            }
	            this._items.length = 0;
	            this._names = {};
	            fireEvent && this.changed(null);
	            return true;
	        }
	        return false;
	    };
	    ColumnFilterCollection.prototype.add = function (filter, apply) {
	        if (apply === void 0) { apply = true; }
	        var f = Utils_1.Utils.cast(filter, ColumnFilter);
	        if (f) {
	            if (this._items.indexOf(f) < 0 && f.name) {
	                this.$_checkName(f.name);
	            }
	        }
	        else if (filter && filter.name) {
	            this.$_checkName(filter.name);
	            f = new ColumnFilter(null);
	            f.assignFrom(filter);
	        }
	        this._items.push(f);
	        this._names[f.name] = f;
	        f.addListener(this);
	        apply && this.changed(null);
	    };
	    ColumnFilterCollection.prototype.addAll = function (filters, overwrite) {
	        if (!(filters instanceof Array) && filters) {
	            filters = [filters];
	        }
	        if (filters && filters.length > 0) {
	            var cnt = 0;
	            var len = filters.length;
	            for (var i = 0; i < len; i++) {
	                var filter = Utils_1.Utils.cast(filters[i], ColumnFilter);
	                if (filter) {
	                    if (this._items.indexOf(filter) < 0 && filter.name) {
	                        if (!overwrite) {
	                            this.$_checkName(filter.name);
	                        }
	                    }
	                }
	                else if (filters[i] && filters[i].name) {
	                    if (!overwrite) {
	                        this.$_checkName(filters[i].name);
	                    }
	                    filter = new ColumnFilter(null);
	                    filter.assignFrom(filters[i]);
	                }
	                var idx = this.indexOf(filter.name);
	                if (idx >= 0) {
	                    if (this._items[idx]) {
	                        this._items[idx].removeListener(this);
	                    }
	                    this._items[idx] = filter;
	                }
	                else {
	                    this._items.push(filter);
	                }
	                filter.addListener(this);
	                this._names[filter.name] = filter;
	                cnt++;
	            }
	            if (cnt > 0) {
	                this.changed(null);
	            }
	        }
	    };
	    ColumnFilterCollection.prototype.remove = function (filterName) {
	        if (!filterName) {
	            return;
	        }
	        for (var i = this._items.length - 1; i >= 0; i--) {
	            var filter = this._items[i];
	            if (filter.name == filterName) {
	                this._items.splice(i, 1);
	                delete this._names[filter.name];
	                filter.removeListener(this);
	                this.changed(null);
	                return true;
	            }
	        }
	        return false;
	    };
	    ColumnFilterCollection.prototype.removeItems = function (filterNames) {
	        if (!filterNames) {
	            return;
	        }
	        var cnt = 0;
	        for (var i = filterNames.length - 1; i >= 0; i--) {
	            var j = this.indexOf(filterNames[i]);
	            if (j >= 0) {
	                var filter = this._items[j];
	                this._items.splice(j, 1);
	                delete this._names[filter.name];
	                filter.removeListener(this);
	                cnt++;
	            }
	        }
	        if (cnt > 0) {
	            this.changed(null);
	        }
	    };
	    ColumnFilterCollection.prototype.activateItems = function (filterNames, active) {
	        if (!filterNames) {
	            return;
	        }
	        var cnt = 0;
	        this._updating = true;
	        try {
	            for (var i = filterNames.length - 1; i >= 0; i--) {
	                var filter = this._names[filterNames[i]];
	                if (filter && filter.active != active) {
	                    filter["_active"] = active;
	                    cnt++;
	                }
	            }
	        }
	        finally {
	            this._updating = false;
	        }
	        if (cnt > 0) {
	            this.changed(null);
	        }
	    };
	    ColumnFilterCollection.prototype.activateAll = function (active) {
	        var dirty = false;
	        this._updating = true;
	        try {
	            for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	                var filter = this._items[i];
	                if (filter.active != active) {
	                    filter["_active"] = active;
	                    dirty = true;
	                }
	            }
	        }
	        finally {
	            this._updating = false;
	        }
	        if (dirty) {
	            this.changed(null);
	        }
	    };
	    ColumnFilterCollection.prototype.hideFilters = function (filterNames, hide) {
	        if (!filterNames) {
	            return;
	        }
	        for (var i = 0, cnt = filterNames.length; i < cnt; i++) {
	            var filter = this._names[filterNames[i]];
	            if (filter) {
	                filter.visible = !hide;
	            }
	        }
	    };
	    ColumnFilterCollection.prototype.hideAllFilters = function (hide) {
	        for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	            var filter = this._items[i];
	            filter && (filter.visible = !hide);
	        }
	    };
	    ColumnFilterCollection.prototype.toggleItems = function (filterNames) {
	        if (!filterNames) {
	            return;
	        }
	        var cnt = 0;
	        this._updating = true;
	        try {
	            for (var i = filterNames.length - 1; i >= 0; i--) {
	                var filter = this._names[filterNames[i]];
	                if (filter) {
	                    filter["_active"] = !filter.active;
	                    cnt++;
	                }
	            }
	        }
	        finally {
	            this._updating = false;
	        }
	        if (cnt > 0) {
	            this.changed(null);
	        }
	    };
	    ColumnFilterCollection.prototype.toggleAll = function () {
	        var dirty = false;
	        this._updating = true;
	        try {
	            for (var i = 0, cnt = this._items.length; i < cnt; i++) {
	                var filter = this._items[i];
	                filter["_active"] = !filter.active;
	                dirty = true;
	            }
	        }
	        finally {
	            this._updating = false;
	        }
	        if (dirty) {
	            this.changed(null);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnFilterCollection.prototype.changed = function (filter) {
	        if (!this._updating) {
	            this.fireEvent(ColumnFilter.CHANGED, filter);
	        }
	    };
	    ColumnFilterCollection.prototype.$_checkName = function (name) {
	        if (this._names.hasOwnProperty(name)) {
	            throw new Error("Column filter already existes: " + name);
	        }
	    };
	    ColumnFilterCollection.prototype.$_userFilterAdd = function (filter, apply) {
	        var f = filter instanceof ColumnFilter ? filter : null;
	        if (!f) {
	            this.$_checkName(filter.name);
	            f = new ColumnFilter(null);
	            f.assignFrom(filter);
	        }
	        this.add(f, apply);
	        return f;
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    ColumnFilterCollection.prototype.onColumnFilterChanged = function (filter) {
	        this.changed(filter);
	    };
	    ColumnFilterCollection.prototype.onColumnFilterSelectorChanged = function () {
	        this.changed(null);
	    };
	    ColumnFilterCollection.prototype.onColumnFilterUserAdd = function (selector, filter, apply) {
	        // if (!filter || !filter.criteria || !filter.text) {
	        // 	return;
	        // }
	        // filter.name = filter.name || "$userFilter_"+(this._nextId++);
	        // return this.$_userFilterAdd(filter, apply);
	    };
	    return ColumnFilterCollection;
	}(EventAware_1.EventAware));
	exports.ColumnFilterCollection = ColumnFilterCollection;
	var ColumnFilterRuntime = /** @class */ (function (_super) {
	    __extends(ColumnFilterRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnFilterRuntime() {
	        var _this = _super.call(this) || this;
	        _this._field = -1;
	        _this._fieldCount = 0;
	        return _this;
	    }
	    ColumnFilterRuntime.prototype.dispose = function () {
	        this._item = this._ds = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ColumnFilterRuntime.prototype.setDataSource = function (ds) {
	        this._ds = ds;
	        this._fieldCount = this._ds ? this._ds.fieldCount : 0;
	    };
	    ColumnFilterRuntime.prototype.setData = function (item, field) {
	        this._item = item;
	        this._field = field;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnFilterRuntime.prototype.isIdentifier = function (token) {
	        token = token.toLowerCase();
	        if (ColumnFilterRuntime.IDENTS.hasOwnProperty(token)) {
	            return ColumnFilterRuntime.IDENTS[token];
	        }
	        return _super.prototype.isIdentifier.call(this, token);
	    };
	    ColumnFilterRuntime.prototype.evaluateIdentifier = function (idKey) {
	        switch (idKey) {
	            case ColumnFilterRuntime.ID_VALUE:
	                return this._item.getData(this._field);
	            case ColumnFilterRuntime.ID_STATE:
	                switch (this._item.rowState) {
	                    case RowState_1.RowState.CREATED:
	                        return "c";
	                    case RowState_1.RowState.UPDATED:
	                        return "u";
	                    case RowState_1.RowState.DELETED:
	                        return "d";
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        return "x";
	                }
	                return undefined;
	            case ColumnFilterRuntime.ID_CHANGED_CELL:
	                // update 인경우만 가능하다.
	                var dataRow = this._item.dataRow;
	                var dataField = this._field;
	                return dataField >= 0 && this._item.rowState == RowState_1.RowState.UPDATED && this._ds.isDataChanged(dataRow, dataField);
	            case ColumnFilterRuntime.ID_FIELD:
	                return this._field;
	            case ColumnFilterRuntime.ID_MAX:
	                return 0;
	            case ColumnFilterRuntime.ID_MIN:
	                return 0;
	            case ColumnFilterRuntime.ID_MEAN:
	                return 0;
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier key: " + idKey);
	    };
	    ColumnFilterRuntime.prototype.evaluateIndexerI = function (idKey, index) {
	        if (this._item) {
	            if (idKey == ColumnFilterRuntime.ID_VALUE || idKey == ColumnFilterRuntime.ID_VALUES) {
	                if (index < 0 || index >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field index out of bounds:" + index);
	                }
	                return this._item.getData(index);
	            }
	            throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	        }
	        else {
	            return undefined;
	        }
	    };
	    ColumnFilterRuntime.prototype.evaluateIndexerS = function (idKey, index, capitalized) {
	        if (idKey == ColumnFilterRuntime.ID_VALUE || idKey == ColumnFilterRuntime.ID_VALUES) {
	            if (this._ds) {
	                var idx = capitalized ? this._ds.getFieldIndexC(index) : this._ds.getFieldIndex(index);
	                if (idx < 0 || idx >= this._fieldCount) {
	                    throw new Expression.ExpressionEvaluationError("Data field is not exists:" + index);
	                }
	                return this._item.getData(idx);
	            }
	            else {
	                return undefined;
	            }
	        }
	        throw new Expression.ExpressionEvaluationError("Invalid identifier indexer: " + idKey);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    ColumnFilterRuntime.ID_VALUE = 0;
	    ColumnFilterRuntime.ID_FIELD = 1;
	    ColumnFilterRuntime.ID_VALUES = 2;
	    ColumnFilterRuntime.ID_STATE = 3;
	    ColumnFilterRuntime.ID_CHANGED_CELL = 4;
	    ColumnFilterRuntime.ID_MAX = 10;
	    ColumnFilterRuntime.ID_MIN = 11;
	    ColumnFilterRuntime.ID_MEAN = 12;
	    ColumnFilterRuntime.IDENTS = {
	        value: ColumnFilterRuntime.ID_VALUE,
	        field: ColumnFilterRuntime.ID_FIELD,
	        values: ColumnFilterRuntime.ID_VALUES,
	        state: ColumnFilterRuntime.ID_STATE,
	        changedcell: ColumnFilterRuntime.ID_CHANGED_CELL,
	        min: ColumnFilterRuntime.ID_MAX,
	        max: ColumnFilterRuntime.ID_MIN,
	        mean: ColumnFilterRuntime.ID_MEAN,
	    };
	    return ColumnFilterRuntime;
	}(Expression.ExpressionRuntime));
	exports.ColumnFilterRuntime = ColumnFilterRuntime;
	});

	unwrapExports(ColumnFilter_1);
	var ColumnFilter_2 = ColumnFilter_1.ColumnFilter;
	var ColumnFilter_3 = ColumnFilter_1.ColumnFilterRun;
	var ColumnFilter_4 = ColumnFilter_1.ColumnFilterCollection;
	var ColumnFilter_5 = ColumnFilter_1.ColumnFilterRuntime;

	var CellStyle = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// CellStyle.ts
	// 2019. 07. 05. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var CellStyleMap = /** @class */ (function (_super) {
	    __extends(CellStyleMap, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellStyleMap(provider) {
	        var _this = _super.call(this) || this;
	        _this._styleMap = [];
	        _this._owner = provider;
	        return _this;
	    }
	    CellStyleMap.prototype.dispose = function () {
	        this._styleMap = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellStyleMap.prototype, "isEmpty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._styleMap.length == 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellStyleMap.prototype.setCellStyle = function (row, field, style) {
	        if (field < 0) {
	            this._styleMap[row] = style;
	        }
	        else {
	            var oldStyle = this._styleMap[row];
	            if (oldStyle) {
	                if (oldStyle instanceof Array) {
	                    oldStyle[field] = style;
	                }
	                else {
	                    var cnt = this._owner.dataSource.fieldCount;
	                    var styles_1 = [];
	                    for (var i = 0; i < cnt; i++) {
	                        styles_1[i] = oldStyle;
	                    }
	                    this._styleMap[row] = styles_1;
	                }
	            }
	            var styles = this._styleMap[row];
	            if (!styles) {
	                styles = [];
	            }
	            styles[field] = style;
	            this._styleMap[row] = styles;
	        }
	    };
	    CellStyleMap.prototype.setCellStyles = function (provider, rows, fieldMap) {
	        function setArray(self, ds, rows, fields) {
	            var cnt = rows.length;
	            var flds = Math.min(fields.length, ds.fieldCount);
	            for (var r = 0; r < cnt; r++) {
	                var vals = rows[r];
	                if (vals instanceof Array) {
	                    for (var f = 0; f < flds; f++) {
	                        var fld = fields[f];
	                        if (fld >= 0) {
	                            var style = null; //provider.getStyle(vals[fld]);
	                            if (style) {
	                                self.setCellStyle(r, f, style);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        function setObjects(self, rows, fields) {
	            for (var r = 0, cnt = rows.length; r < cnt; r++) {
	                var row = rows[r];
	                if (row) {
	                    for (var f in fields) {
	                        var fld = fields[f];
	                        var style = null; // provider.getStyle(row[f]);
	                        if (style) {
	                            self.setCellStyle(r, fld, style);
	                        }
	                    }
	                }
	            }
	        }
	        if (!rows || rows.length < 1 || !fieldMap) {
	            return;
	        }
	        var ds = this._owner.dataSource;
	        var fldCount = ds.fieldCount;
	        var fields = fieldMap;
	        if (fields instanceof Array) {
	            fields = fields.concat();
	            var cnt = Math.min(fldCount, fields.length);
	            for (var i = 0; i < cnt; i++) {
	                var fld = Math.floor(fields[i]);
	                if (isNaN(fld) || fld < 0) {
	                    fields[i] = -1;
	                }
	                else {
	                    fields[i] = fld;
	                }
	            }
	            setArray(this, ds, rows, fields);
	        }
	        else {
	            var fields_1 = [];
	            for (var f in fieldMap) {
	                var v = fieldMap[f];
	                var fld = !isNaN(v) ? Math.floor(v) : ds.getFieldIndex(v);
	                if (fld >= 0 && fld < fldCount) {
	                    fields_1[f] = fld;
	                }
	            }
	            setObjects(this, rows, fields_1);
	        }
	    };
	    CellStyleMap.prototype.removeCellStyle = function (style) {
	        for (var r = 0, cnt = this._styleMap.length; r < cnt; r++) {
	            var styles = this._styleMap[r];
	            if (styles instanceof Array) {
	                for (var i = styles.length - 1; i >= 0; i--) {
	                    if (styles[i] === style) {
	                        styles[i] = null;
	                    }
	                }
	            }
	            else {
	                if (this._styleMap[r] === style) {
	                    delete this._styleMap[r];
	                }
	            }
	        }
	    };
	    CellStyleMap.prototype.clearCellStyles = function () {
	        this._styleMap = [];
	    };
	    CellStyleMap.prototype.checkCellStyle = function (dataRow, field) {
	        var style = this._styleMap[dataRow];
	        if (style instanceof Array) {
	            return !!style[field];
	        }
	        else {
	            return !!style;
	        }
	    };
	    CellStyleMap.prototype.getCellStyle = function (dataRow, field) {
	        var style = this._styleMap[dataRow];
	        if (style instanceof Array) {
	            return style[field];
	        }
	        else {
	            return style;
	        }
	    };
	    CellStyleMap.prototype.connect = function (provider) {
	    };
	    CellStyleMap.prototype.disconnect = function () {
	    };
	    CellStyleMap.prototype.clearRows = function () {
	        this._styleMap = [];
	    };
	    CellStyleMap.prototype.setRows = function () {
	        if (this._owner.dataSource) {
	            this._styleMap.length = Math.min(this._styleMap.length, this._owner.dataSource.rowCount);
	        }
	    };
	    CellStyleMap.prototype.setRowCount = function (newCount) {
	        this._styleMap.length = newCount;
	    };
	    CellStyleMap.prototype.insertRow = function (row) {
	        this._styleMap.splice(row, 0, null);
	    };
	    CellStyleMap.prototype.insertRows = function (row, count) {
	        for (var i = 0; i < count; i++) {
	            this._styleMap.splice(row, 0, null);
	        }
	    };
	    CellStyleMap.prototype.removeRow = function (row) {
	        this._styleMap.splice(row, 1);
	    };
	    CellStyleMap.prototype.removeRows = function (rows) {
	        for (var i = rows.length - 1; i >= 0; i--) {
	            this._styleMap.splice(rows[i], 1);
	        }
	    };
	    CellStyleMap.prototype.updateRow = function () {
	    };
	    CellStyleMap.prototype.updateRows = function (row, count) {
	    };
	    CellStyleMap.prototype.setValue = function (row, field) {
	    };
	    CellStyleMap.prototype.moveRow = function (row, newRow) {
	        var styles = this._styleMap.splice(row, 1);
	        this._styleMap.splice(newRow, 0, styles[0]);
	    };
	    CellStyleMap.prototype.moveRows = function (row, count, newRow) {
	        var styles = this._styleMap.splice(row, count);
	        for (var i = 0; i < count; i++) {
	            this._styleMap.splice(newRow + i, 0, styles[i]);
	        }
	    };
	    return CellStyleMap;
	}(DataTag_1.DataTag));
	exports.CellStyleMap = CellStyleMap;
	var CellEditableMap = /** @class */ (function (_super) {
	    __extends(CellEditableMap, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellEditableMap(provider) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._editableMap = [];
	        return _this;
	    }
	    CellEditableMap.prototype.dispose = function () {
	        this._editableMap = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellEditableMap.prototype, "isEmpty", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._editableMap.length == 0 && !this._editableMap[-1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CellEditableMap.prototype.setReadOnly = function (row, column, value) {
	        var map = this._editableMap[row] = this._editableMap[row] || [];
	        map[column] = map[column] || {};
	        map[column]._readOnly = value;
	    };
	    CellEditableMap.prototype.setEditable = function (row, column, value) {
	        var map = this._editableMap[row] = this._editableMap[row] || [];
	        map[column] = map[column] || {};
	        map[column]._editable = value;
	    };
	    CellEditableMap.prototype.getReadOnly = function (row, column) {
	        var map = this._editableMap[row] && this._editableMap[row][column];
	        return map && map._readOnly;
	    };
	    CellEditableMap.prototype.getEditable = function (row, column) {
	        var map = this._editableMap[row] && this._editableMap[row][column];
	        return map && map._editable;
	    };
	    CellEditableMap.prototype.setCursor = function (row, column, value) {
	        var map = this._editableMap[row] = this._editableMap[row] || [];
	        map[column] = map[column] || {};
	        map[column]._cursor = value;
	    };
	    CellEditableMap.prototype.getCursor = function (row, column) {
	        var map = this._editableMap[row] && this._editableMap[row][column];
	        return map && map._cursor;
	    };
	    CellEditableMap.prototype.setEditor = function (row, column, value) {
	        var map = this._editableMap[row] = this._editableMap[row] || [];
	        map[column] = map[column] || {};
	        map[column]._editor = value;
	    };
	    CellEditableMap.prototype.getEditor = function (row, column, value) {
	        var map = this._editableMap[row] && this._editableMap[row][column];
	        return map && map._editor;
	    };
	    CellEditableMap.prototype.removeEditableMap = function (row, column) {
	        if (row == null) {
	            return;
	        }
	        column = arguments.length < 2 ? -1 : column;
	        if (column < 0) {
	            delete this._editableMap[row];
	        }
	        else {
	            var map = this._editableMap[row];
	            map && (delete map[column]);
	        }
	    };
	    CellEditableMap.prototype.clearEditableMap = function () {
	        if (this._editableMap.length === 0 && this._editableMap[-1] == null) {
	            return false;
	        }
	        this._editableMap = [];
	        return true;
	    };
	    CellEditableMap.prototype.getWritable = function (row, column) {
	        var readOnly = this.getReadOnly(row, column);
	        var editable = this.getEditable(row, column);
	        return !readOnly && editable;
	    };
	    CellEditableMap.prototype.connect = function (ds) {
	    };
	    CellEditableMap.prototype.disconnect = function () {
	    };
	    // grid render시 초기화 하기 때문에 dataProvider의 변경은 관리하지 않는다.
	    CellEditableMap.prototype.clearRows = function () {
	        //return this.clearEditableMap();
	    };
	    CellEditableMap.prototype.setRows = function () {
	    };
	    CellEditableMap.prototype.setRowCount = function (newCount) {
	    };
	    CellEditableMap.prototype.insertRow = function (row) {
	    };
	    CellEditableMap.prototype.insertRows = function (row, count) {
	    };
	    CellEditableMap.prototype.removeRow = function (row) {
	    };
	    CellEditableMap.prototype.removeRows = function (rows) {
	    };
	    CellEditableMap.prototype.updateRow = function () {
	    };
	    CellEditableMap.prototype.updateRows = function (row, count) {
	    };
	    CellEditableMap.prototype.setValue = function (row, field) {
	    };
	    CellEditableMap.prototype.moveRow = function (row, newRow) {
	    };
	    CellEditableMap.prototype.moveRows = function (row, count, newRow) {
	    };
	    return CellEditableMap;
	}(DataTag_1.DataTag));
	exports.CellEditableMap = CellEditableMap;
	});

	unwrapExports(CellStyle);
	var CellStyle_1 = CellStyle.CellStyleMap;
	var CellStyle_2 = CellStyle.CellEditableMap;

	var DefaultItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DefaultItemProvider.ts
	// 2019. 07. 05. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });










	var CheckableExpressionRuntime = /** @class */ (function (_super) {
	    __extends(CheckableExpressionRuntime, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CheckableExpressionRuntime() {
	        return _super.call(this) || this;
	    }
	    return CheckableExpressionRuntime;
	}(Runtimes.DataRowExpressionRuntime));
	exports.CheckableExpressionRuntime = CheckableExpressionRuntime;
	var ItemCheckableTag = /** @class */ (function (_super) {
	    __extends(ItemCheckableTag, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ItemCheckableTag(owner, expression) {
	        var _this = _super.call(this) || this;
	        _this._runtime = new CheckableExpressionRuntime();
	        _this._owner = owner;
	        _this._exprNode = Expression.ExpressionParser.Default.parse(expression, ["value", "values"]);
	        _this._runtime = new CheckableExpressionRuntime();
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    ItemCheckableTag.clearCheckables = function (items) {
	        for (var i = items.itemCount; i--;) {
	            items.getItem(i)["_setCheckable"](true);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ItemCheckableTag.prototype.connect = function (ds) {
	        this._runtime.setDataSource(ds);
	    };
	    ItemCheckableTag.prototype.disconnect = function () {
	    };
	    ItemCheckableTag.prototype.clearRows = function () {
	        ItemCheckableTag.clearCheckables(this._owner);
	    };
	    ItemCheckableTag.prototype.setRows = function () {
	        var rows = this._owner["_rows"];
	        for (var i = rows.length; i--;) {
	            var item = rows[i];
	            this.$_setCheckable(item);
	        }
	    };
	    ItemCheckableTag.prototype.insertRow = function (row) {
	        var item = this._owner.getItemOfRow(row);
	        this.$_setCheckable(item);
	    };
	    ItemCheckableTag.prototype.insertRows = function (row, count) {
	        for (var i = 0; i < count; i++) {
	            var item = this._owner.getItemOfRow(row + i);
	            if (item instanceof GridItem_1.GridItem) {
	                this.$_setCheckable(item);
	            }
	        }
	    };
	    ItemCheckableTag.prototype.updateRow = function (row) {
	        var item = this._owner.getItemOfRow(row);
	        this.$_setCheckable(item);
	    };
	    ItemCheckableTag.prototype.updateRows = function (row, count) {
	        for (var i = 0; i < count; i++) {
	            var item = this._owner.getItemOfRow(row + i);
	            if (item instanceof GridItem_1.GridItem) {
	                this.$_setCheckable(item);
	            }
	        }
	    };
	    ItemCheckableTag.prototype.changeStates = function (rows) {
	        if (rows) {
	            for (var i = rows.length; i--;) {
	                var item = this._owner.getItemOfRow(rows[i]);
	                if (item instanceof GridItem_1.GridItem) {
	                    this.$_setCheckable(item);
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ItemCheckableTag.prototype.$_setCheckable = function (item) {
	        this._runtime.setItem(item);
	        item["_setCheckable"](this._exprNode.evaluate(this._runtime));
	    };
	    return ItemCheckableTag;
	}(DataTag_1.DataTag));
	var DefaultItemProvider = /** @class */ (function (_super) {
	    __extends(DefaultItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DefaultItemProvider(indexing) {
	        var _this = _super.call(this, indexing) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._sortMode = Types.SortMode.AUTO;
	        _this._filterMode = Types.FilterMode.AUTO;
	        _this._filterOr = false;
	        _this._checkableExpression = null;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._dataSource = null;
	        _this._rows = [];
	        _this._filteredItems = [];
	        _this._pageItems = [];
	        _this._sortedItems = [];
	        _this._pubItems = _this._rows;
	        _this._items = _this._rows;
	        _this._distinctRows = [];
	        _this._cellStyles = new CellStyle.CellStyleMap(_this);
	        _this._editableMap = new CellStyle.CellEditableMap(_this);
	        _this._rowCount = 0;
	        _this._fixedCount = 0;
	        _this._fixedSorting = false;
	        _this._maxItemCount = 0;
	        _this._itemCount = 0;
	        _this._pubCount = 0;
	        _this._filtered = false;
	        _this._filtering = false;
	        _this._filters = [];
	        _this._filterRuntime = new ColumnFilter_1.ColumnFilterRuntime();
	        _this._filterLock = 0;
	        _this._fixedFiltering = false;
	        _this._sorted = false;
	        _this._sortFields = [];
	        _this._sortDirections = [];
	        _this._sortCases = [];
	        _this._labelComparer = {};
	        _this._sorter = null;
	        _this._defSorter = null;
	        _this._paging = false;
	        _this._pagingSource = Types.PagingSource.ROWS;
	        _this._pageSize = 10;
	        _this._pageCount = -1;
	        _this._pageStartIndex = -1;
	        _this._currPage = 0;
	        _this._pageStart = 0;
	        _this._summaryMode = Types.SummaryMode.AGGREGATE;
	        _this._summaryMap = null;
	        _this._checkableTag = null;
	        return _this;
	    }
	    DefaultItemProvider.prototype.dispose = function () {
	        this.dataSource = null;
	        this._rows = null;
	        this._pubItems = null;
	        this._items = null;
	        this._filteredItems = null;
	        this._pageItems = null;
	        this._sortedItems = null;
	        this._distinctRows = null;
	        this._filters = null;
	        this._sortFields = null;
	        this._sortDirections = null;
	        this._sortCases = null;
	        this._summaryMap = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(DefaultItemProvider.prototype, "isFilterOr", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** filterOr */
	        get: function () {
	            return this._filterOr;
	        },
	        set: function (value) {
	            if (value != this._filterOr) {
	                this._filterOr = value;
	                this.$_buildItems();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "isFiltered", {
	        /** filtered */
	        get: function () {
	            return this._filtered;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "isSorted", {
	        /** sorted */
	        get: function () {
	            return this._sorted;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "isPaging", {
	        /** paging */
	        get: function () {
	            return this._paging;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "pageStartIndex", {
	        /** pageStartIndex */
	        get: function () {
	            return this._pageStart;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "sorter", {
	        /** sorter */
	        get: function () {
	            return this._sorter || this._defSorter;
	        },
	        set: function (value) {
	            this._sorter = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "summaryMode", {
	        /** summaryMode */
	        set: function (value) {
	            if (value != this._summaryMode) {
	                this._summaryMode = value;
	                this.$_resetSummary();
	                this.$_buildItems();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "sortMode", {
	        /** sortMode */
	        get: function () {
	            return this._sortMode;
	        },
	        set: function (value) {
	            this._sortMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "filterMode", {
	        /** filterMode */
	        get: function () {
	            return this._filterMode;
	        },
	        set: function (value) {
	            this._filterMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "checkableExpression", {
	        /** checkableExpression */
	        get: function () {
	            return this._checkableExpression;
	        },
	        set: function (value) {
	            if (value != this._checkableExpression) {
	                this._checkableExpression = value;
	                if (this._checkableTag) {
	                    this._checkableTag.disconnect();
	                    this._checkableTag = null;
	                }
	                if (value) {
	                    this._checkableTag = new ItemCheckableTag(this, value);
	                    if (this._dataSource) {
	                        this._checkableTag.connect(this._dataSource);
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "labelComparer", {
	        /** labelComparer */
	        get: function () {
	            return this._labelComparer;
	        },
	        set: function (value) {
	            this._labelComparer = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    DefaultItemProvider.prototype.getFieldDomain = function (field) {
	        var rows = this._rows;
	        var cnt = rows.length;
	        var values = [];
	        var prev = undefined;
	        for (var i = 0; i < cnt; i++) {
	            var curr = this._dataSource.getValue(i, field);
	            if (curr != prev && values.indexOf(curr) < 0) {
	                values.push(curr);
	            }
	            prev = curr;
	        }
	        return values;
	    };
	    DefaultItemProvider.prototype.beginFilter = function () {
	        this._filterLock++;
	    };
	    DefaultItemProvider.prototype.endFilter = function (apply, filterCollection, filter) {
	        if (apply === void 0) { apply = true; }
	        if (filterCollection === void 0) { filterCollection = null; }
	        if (filter === void 0) { filter = null; }
	        if (this._filterLock > 0) {
	            this._filterLock = Math.max(0, this._filterLock - 1);
	            if (this._filterLock == 0 && apply) {
	                this.applyFilters(true, filterCollection, filter);
	            }
	        }
	    };
	    DefaultItemProvider.prototype.hasFilter = function (field) {
	        var filters = this._filters[field];
	        return filters && filters.length > 0;
	    };
	    DefaultItemProvider.prototype.addFilter = function (field, refFilter) {
	        var criteria = refFilter && refFilter.criteria;
	        if (field >= 0) {
	            this._fireFilterAdded(field, criteria);
	            var filters = this._filters[field];
	            if (!filters) {
	                filters = [];
	                this._filters[field] = filters;
	            }
	            var filter = new ColumnFilter_1.ColumnFilterRun(refFilter);
	            filters.push(filter);
	            this.applyFilters();
	            return filter;
	        }
	    };
	    DefaultItemProvider.prototype.removeFilter = function (field, filter) {
	        if (this._filtered && this._filters[field]) {
	            this._fireFilterRemoved(field, filter);
	            var filters = this._filters[field];
	            var i = filters.indexOf(filter);
	            if (i >= 0) {
	                filters.splice(i, 1);
	                this.applyFilters();
	            }
	        }
	    };
	    DefaultItemProvider.prototype.clearFilters = function (field) {
	        if (this._filtered && this._filters[field]) {
	            this._fireFilterCleared(field);
	            var filters = this._filters[field];
	            if (filters.length > 0) {
	                filters.length = 0;
	                delete this._filters[field];
	                this.applyFilters();
	            }
	        }
	    };
	    DefaultItemProvider.prototype.clearAllFilters = function () {
	        if (this._filtered) {
	            this._fireFilterAllCleared();
	            this._filters = [];
	            this.applyFilters();
	        }
	    };
	    DefaultItemProvider.prototype.hasFilters = function () {
	        var cnt = this._filters.length;
	        for (var i = 0; i < cnt; i++) {
	            var filters = this._filters[i];
	            if (filters && filters.length > 0) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DefaultItemProvider.prototype.applyFilters = function (fireEvent, filterCollection, filter) {
	        if (fireEvent === void 0) { fireEvent = true; }
	        if (filterCollection === void 0) { filterCollection = null; }
	        if (filter === void 0) { filter = null; }
	        if (this._filterLock > 0) {
	            return;
	        }
	        this.$_buildItems();
	        try {
	            if (fireEvent) {
	                this._fireRefresh();
	            }
	        }
	        finally {
	            this._fireFiltered(filterCollection, filter);
	        }
	    };
	    DefaultItemProvider.prototype.orderBy = function (fields, directions, cases, fireEvent) {
	        if (fields === void 0) { fields = null; }
	        if (directions === void 0) { directions = null; }
	        if (cases === void 0) { cases = null; }
	        if (fireEvent === void 0) { fireEvent = true; }
	        this._fireSort(fields, directions, cases);
	        this._sortFields = [];
	        this._sortDirections = [];
	        this._sortCases = [];
	        var cnt = fields ? fields.length : 0;
	        var len = directions ? directions.length : 0;
	        var clen = cases ? cases.length : 0;
	        for (var i = 0; i < len; i++) {
	            //!_included(directions[i], SortDirection.ASCENDING, SortDirection.DESCENDING) && (directions[i] = SortDirection.ASCENDING);
	        }
	        for (var i = 0; i < cnt; i++) {
	            this._sortFields.push(fields[i]);
	            if (len > i) {
	                this._sortDirections.push(directions[i]);
	            }
	            else if (len > 0) {
	                this._sortDirections.push(directions[len - 1]);
	            }
	            else {
	                this._sortDirections.push(Types.SortDirection.ASCENDING);
	            }
	            if (clen > i) {
	                this._sortCases.push(cases[i]);
	            }
	            else if (clen > 0) {
	                this._sortCases.push(cases[clen - 1]);
	            }
	            else {
	                this._sortCases.push(Types.SortCase.SENSITIVE);
	            }
	        }
	        this._sorted = this.$_checkSorted();
	        this.$_buildItems();
	        try {
	            if (fireEvent) {
	                this._fireRefresh();
	            }
	        }
	        finally {
	            this._fireSorted();
	        }
	    };
	    DefaultItemProvider.prototype.getSortFields = function () {
	        return this._sortFields.slice();
	    };
	    DefaultItemProvider.prototype.getSortDirections = function () {
	        return this._sortDirections.slice();
	    };
	    DefaultItemProvider.prototype.getSortCases = function () {
	        return this._sortCases.concat();
	    };
	    DefaultItemProvider.prototype.setPaging = function (paging, pageSize, pageCount, source) {
	        if (pageSize === void 0) { pageSize = 10; }
	        if (pageCount === void 0) { pageCount = -1; }
	        if (source === void 0) { source = null; }
	        pageSize = Math.max(pageSize, 1);
	        pageCount = Math.max(pageCount, -1);
	        if (paging != this._paging || pageSize != this._pageSize || pageCount != this._pageCount || source != this._pagingSource) {
	            this._currPage = 0;
	            this._paging = paging;
	            this._pagingSource = source;
	            this._pageSize = pageSize;
	            this._pageCount = pageCount;
	            this.$_buildItems();
	            this._fireRefresh();
	        }
	    };
	    Object.defineProperty(DefaultItemProvider.prototype, "page", {
	        get: function () {
	            return this._paging ? this._currPage : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultItemProvider.prototype.setPage = function (newPage, startIndex) {
	        if (newPage === void 0) { newPage = 0; }
	        if (startIndex === void 0) { startIndex = -1; }
	        if (this._paging) {
	            newPage = Math.max(0, Math.min(this.pageCount - 1, newPage));
	            startIndex = Math.max(-1, startIndex);
	            if (newPage != this._currPage || startIndex != this._pageStartIndex) {
	                this._currPage = newPage;
	                this._pageStartIndex = startIndex;
	                this.$_buildPage();
	                this._fireRefresh();
	            }
	        }
	    };
	    Object.defineProperty(DefaultItemProvider.prototype, "pageCount", {
	        get: function () {
	            if (this._paging) {
	                if (this._pageCount >= 0) {
	                    return this._pageCount;
	                }
	                else {
	                    return Math.floor((this._dataSource.rowCount + this._pageSize - 1) / this._pageSize);
	                }
	            }
	            else {
	                return 0;
	            }
	        },
	        set: function (value) {
	            if (this._paging) {
	                value = Math.max(-1, value);
	                if (value != this._pageCount) {
	                    this._pageCount = value;
	                    this.$_buildPage();
	                    this._fireRefresh();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultItemProvider.prototype.getCheckedRows = function (allRows) {
	        var cnt = allRows ? this._dataSource.rowCount : this.itemCount;
	        var rows = [];
	        for (var i = 0; i < cnt; i++) {
	            var item = allRows ? this._rows[i] : this._pubItems[i];
	            if (item.checked) {
	                rows.push(item.dataRow);
	            }
	        }
	        return rows;
	    };
	    DefaultItemProvider.prototype.resetCheckables = function () {
	        for (var i = this._rows.length; i--;) {
	            this._rows[i]["_setCheckable"](true);
	        }
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.applyCheckables = function () {
	        if (this._checkableTag) {
	            this._checkableTag.setRows();
	        }
	        else {
	            ItemCheckableTag.clearCheckables(this);
	        }
	        this._fireRefresh();
	    };
	    Object.defineProperty(DefaultItemProvider.prototype, "dataSource", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._dataSource;
	        },
	        set: function (value) {
	            if (value !== this._dataSource) {
	                this.$_clearRows();
	                if (this._dataSource) {
	                    this._dataSource.removeTag(this._cellStyles);
	                    this._dataSource.removeTag(this._editableMap);
	                    this._checkableTag && this._checkableTag.disconnect();
	                    this._dataSource.removeListener(this);
	                }
	                this._dataSource = value;
	                if (this._dataSource) {
	                    this._checkableTag && this._checkableTag.connect(this._dataSource);
	                    this.$_buildRows();
	                    this._dataSource.addListener(this);
	                    this._dataSource.addTag(this._cellStyles);
	                    this._dataSource.addTag(this._editableMap);
	                }
	                // if (!this._destroying) {
	                this.$_resetSummary();
	                this._fireReset();
	                // }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "itemCount", {
	        get: function () {
	            return this._pubCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "fixedCount", {
	        get: function () {
	            return this._fixedCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultItemProvider.prototype, "maxItemCount", {
	        get: function () {
	            return this._maxItemCount;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._maxItemCount) {
	                this._maxItemCount = value;
	                this._refreshItems();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultItemProvider.prototype._hideDeletedChanged = function () {
	        this.$_buildItems();
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.getItem = function (index) {
	        if (index < 0 || index >= this._pubCount) {
	            return null;
	        }
	        return this._pubItems[index];
	    };
	    DefaultItemProvider.prototype.getItems = function (index, count) {
	        return this._pubItems.slice(index, index + count);
	    };
	    DefaultItemProvider.prototype.getIndexOfRow = function (dataRow) {
	        if (dataRow >= 0 && dataRow < this._rows.length) {
	            var row = this._rows[dataRow];
	            return row && this._pubItems.indexOf(row) >= 0 ? row.index : -1;
	            // return this._rows[dataRow]._index;
	        }
	        return -1;
	    };
	    DefaultItemProvider.prototype.getItemOfRow = function (dataRow, force) {
	        if (force === void 0) { force = false; }
	        if (dataRow >= 0 && dataRow < this._rows.length) {
	            var item = this._rows[dataRow];
	            return item.index >= 0 || force ? item : null;
	        }
	        return null;
	    };
	    DefaultItemProvider.prototype._refreshItems = function () {
	        var saveExtents = {};
	        this.$_saveExtents(saveExtents);
	        this.$_clearRows();
	        this.$_buildRows(saveExtents);
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.setFixed = function (count, sorting, filtering) {
	        count = Math.max(0, count);
	        if (count != this._fixedCount || sorting != this._fixedSorting || filtering != this._filtering) {
	            this._fixedCount = count;
	            this._fixedSorting = sorting;
	            this._fixedFiltering = filtering;
	            this.$_buildItems();
	            this._fireRefresh();
	        }
	    };
	    DefaultItemProvider.prototype.exchange = function (index1, index2) {
	        if (index1 == index2) {
	            return;
	        }
	        if (!this._sorted && !this._filtered) {
	            if (index1 < 0 || index1 >= this._rows.length) {
	                throw new Error("index1 is out of bounds: " + index1);
	            }
	            if (index2 < 0 || index2 >= this._rows.length) {
	                throw new Error("index2 is out of bounds: " + index1);
	            }
	            var t = this._rows[index1];
	            this._rows[index1] = this._rows[index2];
	            this._rows[index2] = t;
	        }
	    };
	    DefaultItemProvider.prototype.clearDisplayLevels = function () {
	        var rows = this._rows;
	        var cnt = rows.length;
	        for (var i = 0; i < cnt; i++) {
	            rows[i]["_displayLevel"] = -1;
	        }
	    };
	    DefaultItemProvider.prototype.getAllItems = function () {
	        return this._pubItems.slice();
	    };
	    DefaultItemProvider.prototype.hasCellStyle = function () {
	        return !this._cellStyles.isEmpty;
	    };
	    DefaultItemProvider.prototype.setCellStyle = function (row, field, style) {
	        this._cellStyles.setCellStyle(row, field, style);
	    };
	    DefaultItemProvider.prototype.setCellStyles = function (provider, rows, fieldMap) {
	        this._cellStyles.setCellStyles(provider, rows, fieldMap);
	    };
	    DefaultItemProvider.prototype.removeCellStyle = function (style) {
	        this._cellStyles.removeCellStyle(style);
	    };
	    DefaultItemProvider.prototype.clearCellStyles = function () {
	        this._cellStyles.clearCellStyles();
	    };
	    DefaultItemProvider.prototype.checkCellStyle = function (dataRow, field) {
	        return this._cellStyles.checkCellStyle(dataRow, field);
	    };
	    DefaultItemProvider.prototype.getCellStyle = function (dataRow, field) {
	        return this._cellStyles.getCellStyle(dataRow, field);
	    };
	    DefaultItemProvider.prototype.setCellEditable = function (dataRow, column, value) {
	        this._editableMap.setEditable(dataRow, column, value);
	    };
	    DefaultItemProvider.prototype.setCellReadOnly = function (dataRow, column, value) {
	        this._editableMap.setReadOnly(dataRow, column, value);
	    };
	    DefaultItemProvider.prototype.getCellEditable = function (dataRow, column) {
	        return this._editableMap.getEditable(dataRow, column);
	    };
	    DefaultItemProvider.prototype.getCellReadOnly = function (dataRow, column) {
	        return this._editableMap.getReadOnly(dataRow, column);
	    };
	    DefaultItemProvider.prototype.setCellCursor = function (dataRow, column, value) {
	        return this._editableMap.setCursor(dataRow, column, value);
	    };
	    DefaultItemProvider.prototype.getCellCursor = function (dataRow, column) {
	        return this._editableMap.getCursor(dataRow, column);
	    };
	    DefaultItemProvider.prototype.setCellEditor = function (dataRow, column, value) {
	        return this._editableMap.setEditor(dataRow, column, value);
	    };
	    DefaultItemProvider.prototype.getCellEditor = function (dataRow, column) {
	        return this._editableMap.getEditor(dataRow, column, undefined);
	    };
	    DefaultItemProvider.prototype.clearEditableMap = function () {
	        return this._editableMap.clearEditableMap();
	    };
	    DefaultItemProvider.prototype.getNumber = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.count : this.itemCount;
	    };
	    DefaultItemProvider.prototype.getSum = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.sum : NaN;
	    };
	    DefaultItemProvider.prototype.getMax = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.max : NaN;
	    };
	    DefaultItemProvider.prototype.getMin = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.min : NaN;
	    };
	    DefaultItemProvider.prototype.getAvg = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.avg : NaN;
	    };
	    DefaultItemProvider.prototype.getVar = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.vars : NaN;
	    };
	    DefaultItemProvider.prototype.getVarp = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.varsp : NaN;
	    };
	    DefaultItemProvider.prototype.getStdev = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? Math.sqrt(fs.vars) : NaN;
	    };
	    DefaultItemProvider.prototype.getStdevp = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? Math.sqrt(fs.varsp) : NaN;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    DefaultItemProvider.prototype.$_saveExtents = function (exts) {
	        for (var i = 0, cnt = this._rows.length; i < cnt; i++) {
	            var row = this._rows[i];
	            row.dataRowId >= 0 && (exts[row.dataRowId] = row["_extents"]);
	        }
	    };
	    DefaultItemProvider.prototype.$_clearRows = function () {
	        this._rows.length = 0;
	        this._filteredItems.length = 0;
	        this._filtered = false;
	        this._sorted = false;
	        this._sortedItems.length = 0;
	        this._pubItems = this._rows;
	        this.$_clearDistincts();
	    };
	    DefaultItemProvider.prototype.$_clearIndicies = function () {
	        for (var i = this._rows.length; i--;) {
	            this._rows[i]["_index"] = -1;
	        }
	    };
	    DefaultItemProvider.prototype.$_clearDistincts = function () {
	        for (var i = this._distinctRows.length; i--;) {
	            this._distinctRows[i] = null;
	        }
	        this._distinctRows.length = 0;
	    };
	    DefaultItemProvider.prototype.$_buildRows = function (saveExtents) {
	        if (saveExtents === void 0) { saveExtents = null; }
	        var ds = this._dataSource;
	        if (!ds) {
	            return;
	        }
	        this._filtered = this.$_checkFiltered();
	        this._sorted = this.$_checkSorted();
	        this._rowCount = ds.rowCount;
	        if (!this._filtered && !this._paging && this.maxItemCount > 0) {
	            this._rowCount = Math.min(this._rowCount, this.maxItemCount);
	        }
	        this._rows = new Array(this._rowCount);
	        for (var i = 0, cnt = this._rows.length; i < cnt; i++) {
	            var row = this._rows[i] = this.$_createRow(i);
	            saveExtents && saveExtents.hasOwnProperty(row.dataId) && (row["_extents"] = saveExtents[row.dataId]);
	        }
	        this.$_buildItems();
	        this._checkableTag && this._checkableTag.setRows();
	    };
	    DefaultItemProvider.prototype.$_resetCounts = function () {
	        if (this._filtered) {
	            this._pubCount = this._itemCount = this._items.length;
	        }
	        else {
	            this._pubCount = this._itemCount = this._rowCount = this._rows.length;
	        }
	    };
	    DefaultItemProvider.prototype.$_buildItems = function (noFilter, noSort) {
	        if (noFilter === void 0) { noFilter = false; }
	        if (noSort === void 0) { noSort = false; }
	        var maxCount = this.maxItemCount > 0 ? this.maxItemCount : this._rows.length;
	        var hideDataRow = this._dataSource.hideCount();
	        this._rowCount = this._rows.length;
	        this._pubItems = this._items = this._rows;
	        this._pubCount = this._itemCount = this._rows.length;
	        this._filtered = this.$_checkFiltered();
	        this._sorted = this.$_checkSorted();
	        if (this._filtered || this._paging) {
	            this.$_clearIndicies();
	        }
	        if (this._filtered) {
	            this._filteredItems.length = 0;
	            if (this.hideDeleted || hideDataRow > 0) {
	                for (var i = 0; i < this._rowCount; i++) {
	                    var row = this._rows[i];
	                    var state = this._dataSource.getRowState(this._rows[i].dataRow);
	                    var hide = false; //this._dataSource.isHideDataRow(this._rows[i].dataRow);
	                    if (this.hideDeleted && RowState_1.isDeletedState(state) || hide) {
	                        row["_index"] = -1;
	                    }
	                    else {
	                        row["_index"] = 0;
	                    }
	                }
	            }
	            else {
	                for (var i = 0; i < this._rowCount; i++) {
	                    this._rows[i]["_index"] = 0;
	                }
	            }
	            var fixedCount = this.fixedCount;
	            var exceptFiltering = (fixedCount > 0) && !this._fixedFiltering;
	            var nMax = this._rows.length;
	            if (!noFilter) {
	                for (var i = 0, len = this._filters.length; i < len; i++) {
	                    var filters = this._filters[i];
	                    if (filters) {
	                        for (var c = 0; c < filters.length; c++) {
	                            filters[c].prepare(this._filterRuntime, this._dataSource);
	                        }
	                    }
	                }
	            }
	            if (!this._paging) {
	                nMax = Math.min(nMax, maxCount);
	            }
	            var cnt = 0;
	            for (var i = 0; i < this._rowCount && cnt < nMax; i++) {
	                var row = this._rows[i];
	                if (row.index >= 0) {
	                    if (noFilter || exceptFiltering && cnt < fixedCount) {
	                        this._filteredItems.push(row);
	                        cnt++;
	                    }
	                    else {
	                        var selected = !this._filterOr; // filterOr 선택된 filter중 하나라도 만족하면 select;
	                        var fltCnt = 0;
	                        for (var y = 0, len = this._filters.length; y < len; y++) {
	                            var filters = this._filters[y];
	                            filters && fltCnt++;
	                            if (this._filterOr) {
	                                if (filters && this.$_select(filters, row, y)) {
	                                    selected = true;
	                                    break;
	                                }
	                            }
	                            else {
	                                if (filters && !this.$_select(filters, row, y)) {
	                                    selected = false;
	                                    break;
	                                }
	                            }
	                        }
	                        if (selected || fltCnt === 0) {
	                            this._filteredItems.push(row);
	                            cnt++;
	                        }
	                    }
	                }
	            }
	            this._pubItems = this._items = this._filteredItems;
	            this._pubCount = this._itemCount = this._items.length;
	        }
	        else {
	            this._filteredItems.length = 0;
	        }
	        if (this._sorted) {
	            if (noSort) {
	                var items = this._sortedItems;
	                for (var i = items.length; i--;) {
	                    if (items[i].index < 0) {
	                        items.splice(i, 1);
	                    }
	                }
	            }
	            else {
	                this.$_sortRows();
	            }
	            this._pubItems = this._sortedItems;
	        }
	        else {
	            this._sortedItems.length = 0;
	        }
	        if (this._paging) {
	            this.$_buildPageItems();
	        }
	        this.$_clearSummary();
	        this._resetItemIndicies(0);
	    };
	    DefaultItemProvider.prototype.$_buildPageItems = function () {
	        var items = this._sorted ? this._sortedItems : this._filtered ? this._filteredItems : this._items;
	        this._pageItems.length = 0;
	        var i = this._pageStart = this._pageStartIndex >= 0 ? this._pageStartIndex : this._currPage * this._pageSize;
	        var itemCount = items.length;
	        var maxCount = this.maxItemCount > 0 ? this.maxItemCount : itemCount;
	        var cnt = Math.min(this._pageSize, maxCount);
	        for (; i < itemCount && cnt > 0; i++, cnt--) {
	            this._pageItems.push(items[i]);
	        }
	        this._pubItems = this._pageItems;
	        this._pubCount = this._pubItems.length;
	    };
	    DefaultItemProvider.prototype.$_buildPage = function () {
	        this.$_clearIndicies();
	        this.$_buildPageItems();
	        this._resetItemIndicies(0);
	    };
	    DefaultItemProvider.prototype.$_sortRows = function () {
	        var rows = this._items.length;
	        this._sortedItems = this._items.concat();
	        if (this._fixedCount > 0 && !this._fixedSorting) {
	            this.$_sort(0, this._fixedCount, rows - 1);
	        }
	        else {
	            this.$_sort(0, 0, rows - 1);
	        }
	    };
	    DefaultItemProvider.prototype.$_sort = function (level, startIndex, endIndex) {
	        this.$_sortLevel(level, startIndex, endIndex);
	    };
	    DefaultItemProvider.prototype.$_sortLevel = function (level, startIndex, endIndex) {
	        if (startIndex >= endIndex) {
	            return;
	        }
	        var ds = this._dataSource;
	        var fld = this._sortFields[level];
	        var field = ds.getField(fld);
	        if (field) {
	            var ascending = this._sortDirections[level] != Types.SortDirection.DESCENDING;
	            var ignoreCase = this._sortCases[level] == Types.SortCase.INSENSITIVE;
	            var t = field.dataType;
	            var equalFunc = void 0;
	            var compFunc = field._comparer ? field._comparer : ds.getDataComparer(field.index) ? ds.getDataComparer(field.index) : this._labelComparer[field.index];
	            if (!compFunc) {
	                switch (t) {
	                    case Types.ValueType.DATETIME:
	                    case Types.ValueType.NUMBER:
	                        compFunc = ds.compareNumbers.bind(ds);
	                        break;
	                    case Types.ValueType.BOOLEAN:
	                        compFunc = ds.compareBools.bind(ds);
	                        break;
	                    case Types.ValueType.OBJECT:
	                        compFunc = ds.compareObjects.bind(ds);
	                        break;
	                    default:
	                        compFunc = ignoreCase ? ds.compareTexts.bind(ds) : ds.compareValues.bind(ds);
	                        break;
	                }
	            }
	            if (t == Types.ValueType.TEXT && ignoreCase) {
	                equalFunc = ds.equalTexts.bind(ds);
	            }
	            else {
	                equalFunc = ds.equalValues.bind(ds);
	            }
	            this.$_sortRange(fld, ascending, ignoreCase, compFunc, startIndex, endIndex, level + 1 == this._sortFields.length);
	            if (level + 1 < this._sortFields.length) {
	                var i = startIndex, pi = i, items = this._sortedItems;
	                while (i < endIndex) {
	                    i++;
	                    if (!equalFunc(fld, items[i].dataRow, items[i - 1].dataRow)) {
	                        this.$_sortLevel(level + 1, pi, i - 1);
	                        pi = i;
	                    }
	                }
	                if (pi < endIndex) {
	                    this.$_sortLevel(level + 1, pi, endIndex);
	                }
	            }
	        }
	    };
	    DefaultItemProvider.prototype.$_sortRange = function (field, ascending, ignoreCase, compFunc, left, right, checkRow) {
	        var items = this._sortedItems;
	        do {
	            var i = left;
	            var j = right;
	            var row = Math.floor((left + right) / 2);
	            var m = items[row].dataRow;
	            var r = void 0, v = void 0;
	            do {
	                if (ascending) {
	                    while (i <= j) {
	                        r = items[i].dataRow;
	                        v = compFunc(field, m, r);
	                        if (v == 0 && checkRow)
	                            v = m - r;
	                        if (v <= 0)
	                            break;
	                        i++;
	                    }
	                    while (i <= j) {
	                        r = items[j].dataRow;
	                        v = compFunc(field, m, r);
	                        if (v == 0 && checkRow)
	                            v = m - r;
	                        if (v >= 0)
	                            break;
	                        j--;
	                    }
	                }
	                else {
	                    while (i <= j) {
	                        r = items[i].dataRow;
	                        v = compFunc(field, m, r);
	                        if (v == 0 && checkRow)
	                            v = r - m;
	                        if (v >= 0)
	                            break;
	                        i++;
	                    }
	                    while (i <= j) {
	                        r = items[j].dataRow;
	                        v = compFunc(field, m, r);
	                        if (v == 0 && checkRow)
	                            v = r - m;
	                        if (v <= 0)
	                            break;
	                        j--;
	                    }
	                }
	                if (i <= j) {
	                    if (i != j) {
	                        var t = items[i];
	                        items[i] = items[j];
	                        items[j] = t;
	                    }
	                    i++;
	                    j--;
	                }
	            } while (i <= j);
	            if (left < j) {
	                this.$_sortRange(field, ascending, ignoreCase, compFunc, left, j, checkRow);
	            }
	            left = i;
	        } while (left < right);
	    };
	    DefaultItemProvider.prototype.$_createRow = function (row) {
	        var item = new GridItem_1.GridRow(row);
	        this.attachItem(item);
	        item["_dataRowId"] = item.dataId;
	        return item;
	    };
	    DefaultItemProvider.prototype.$_createAllRow = function () {
	        for (var i = 0; i < this._rowCount; i++) {
	            if (!this._rows[i]) {
	                this._rows[i] = this.$_createRow(i);
	            }
	        }
	    };
	    DefaultItemProvider.prototype.$_resetSummary = function () {
	        this._summaryMap = [];
	    };
	    DefaultItemProvider.prototype.$_clearSummary = function () {
	        if (this._summaryMap) {
	            for (var i = this._summaryMap.length - 1; i >= 0; i--) {
	                this._summaryMap[i] && this._summaryMap[i].clear();
	            }
	        }
	    };
	    DefaultItemProvider.prototype.$_getSummary = function (field) {
	        var fs = this._summaryMap[field];
	        if (!fs) {
	            var ds = this._dataSource;
	            if (ds && ds.canSummarize(field)) {
	                fs = new FieldSummary_1.FieldSummary(field);
	                this._summaryMap[field] = fs;
	            }
	        }
	        if (fs && fs.count == 0 && this.itemCount > 0) {
	            this.$_summarize(fs);
	        }
	        return fs;
	    };
	    DefaultItemProvider.prototype.$_summarize = function (fld) {
	        var ds = this._dataSource;
	        if (ds) {
	            if (this._filtered) {
	                var cnt = this._items.length;
	                var rows = new Array(cnt);
	                for (var i = 0; i < cnt; i++) {
	                    rows[i] = this._pubItems[i].dataRow;
	                }
	                ds.summarizeRange(fld, rows, this._summaryMode == Types.SummaryMode.STATISTICAL);
	            }
	            else {
	                ds.summarize(fld, this._summaryMode == Types.SummaryMode.STATISTICAL);
	            }
	        }
	    };
	    DefaultItemProvider.prototype.$_needSort = function () {
	        return this._sorted && this._sortMode == Types.SortMode.AUTO;
	    };
	    DefaultItemProvider.prototype.$_needFilter = function () {
	        return this._filtered && this._filterMode == Types.FilterMode.AUTO;
	    };
	    DefaultItemProvider.prototype.$_checkFiltered = function () {
	        if (this._dataSource) {
	            this._filters.length = this._dataSource.fieldCount;
	            return this.hasFilters() || (this.hideDeleted && this._dataSource.deletedCount > 0) || (this._dataSource.hideCount > 0);
	        }
	        return false;
	    };
	    DefaultItemProvider.prototype.$_select = function (filters, item, field) {
	        var cnt = filters.length;
	        for (var i = 0; i < cnt; i++) {
	            if (filters[i].select(this._filterRuntime, item, field)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DefaultItemProvider.prototype.$_checkSorted = function () {
	        for (var i = this._sortFields.length - 1; i >= 0; i--) {
	            if (this._sortFields[i] > this._dataSource.fieldCount) {
	                this._sortFields.splice(i, 1);
	                this._sortDirections.splice(i, 1);
	                this._sortCases.splice(i, 1);
	            }
	        }
	        return this._sortFields && this._sortFields.length > 0;
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    DefaultItemProvider.prototype.onDataProviderDisposed = function (ds) {
	        ds.removeTag(this._cellStyles);
	        ds.removeTag(this._editableMap);
	        this._checkableTag && this._checkableTag.disconnect();
	        this.$_clearRows();
	        this.$_resetSummary();
	        this._fireReset();
	        this.dataSource = null;
	    };
	    DefaultItemProvider.prototype.onDataProviderReset = function (ds) {
	        this.$_clearRows();
	        this.$_buildRows();
	        this.$_resetSummary();
	        this._fireReset();
	    };
	    DefaultItemProvider.prototype.onDataProviderRefresh = function (ds) {
	        this._refreshItems();
	    };
	    DefaultItemProvider.prototype.onDataProviderRefreshClient = function (ds) {
	        this._fireRefreshClient();
	    };
	    DefaultItemProvider.prototype.onDataProviderRowCountChanged = function (ds, newCount) {
	        this._fireRefreshClient();
	    };
	    DefaultItemProvider.prototype.onDataProviderRowInserting = function (ds, row, values) {
	        return true;
	    };
	    DefaultItemProvider.prototype.onDataProviderRowInserted = function (ds, row, itemIndex) {
	        var rows = this._rows;
	        var posRow = row < rows.length ? rows[row] : null;
	        var item = this.$_createRow(row);
	        rows.splice(row, 0, item);
	        for (var i = row, cnt = rows.length; i < cnt; i++) {
	            rows[i]["_dataRow"] = i;
	        }
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            if (this._filtered) {
	                var items = this._filteredItems;
	                row = itemIndex != null ? itemIndex : Math.max(0, posRow ? items.indexOf(posRow) : items.length);
	                items.splice(row, 0, item);
	            }
	            if (this._sorted) {
	                var items = this._sortedItems;
	                row = itemIndex != null ? itemIndex : Math.max(0, posRow ? items.indexOf(posRow) : items.length);
	                // row = Math.max(0, posRow ? items.indexOf(posRow) : items.length);
	                items.splice(row, 0, item);
	            }
	            this.$_clearSummary();
	            this.$_resetCounts();
	            this._resetItemIndicies(this._sorted ? 0 : row);
	        }
	        this._checkableTag && this._checkableTag.insertRow(item);
	        this._fireItemInserted(item);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsInserted = function (ds, row, count, itemIndex) {
	        if (count < 0) {
	            return;
	        }
	        var rows = this._rows;
	        var posRow = row < rows.length ? rows[row] : null;
	        var list = [];
	        var item;
	        for (var i = 0; i < count; i++) {
	            list.push(item = this.$_createRow(row + i));
	            rows.splice(row + i, 0, item);
	        }
	        var cnt = rows.length;
	        for (var i = row; i < cnt; i++) {
	            rows[i]["_dataRow"] = i;
	        }
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            if (this._filtered) {
	                var items = this._filteredItems;
	                row = itemIndex != null ? itemIndex : Math.max(0, posRow ? items.indexOf(posRow) : items.length);
	                for (var i = 0; i < list.length; i++) {
	                    items.splice(row + i, 0, list[i]);
	                }
	            }
	            if (this._sorted) {
	                var items = this._sortedItems;
	                row = itemIndex != null ? itemIndex : Math.max(0, posRow ? items.indexOf(posRow) : items.length);
	                for (var i = 0; i < list.length; i++) {
	                    items.splice(row + i, 0, list[i]);
	                }
	            }
	            this.$_clearSummary();
	            this.$_resetCounts();
	            this._resetItemIndicies(row);
	        }
	        this._checkableTag && this._checkableTag.insertRows(row, count);
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.onDataProviderRowRemoving = function (ds, row) {
	        return true;
	    };
	    DefaultItemProvider.prototype.$_silentRemoveRow = function (item) {
	        if (this._filtered) {
	            var items = this._filteredItems;
	            var r = items.indexOf(item);
	            r >= 0 && items.splice(r, 1);
	        }
	        if (this._sorted) {
	            var items = this._sortedItems;
	            var r = items.indexOf(item);
	            r >= 0 && items.splice(r, 1);
	        }
	        this.$_clearSummary();
	        this.$_resetCounts();
	        this._resetItemIndicies(0);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowRemoved = function (ds, rowIndex) {
	        var rows = this._rows;
	        var item = rows[rowIndex];
	        rows.splice(rowIndex, 1);
	        for (var i = rows.length - 1; i >= rowIndex; i--) {
	            rows[i]["_dataRow"] = i;
	        }
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_silentRemoveRow(item);
	        }
	        this._fireItemDeleted(item);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsRemoving = function (ds, rows) {
	        return true;
	    };
	    DefaultItemProvider.prototype.$_silentRemoveRows = function (list) {
	        var i, items, item, row;
	        if (this._filtered) {
	            items = this._filteredItems;
	            for (i = 0; i < list.length; i++) {
	                item = list[i];
	                row = items.indexOf(item);
	                row >= 0 && items.splice(row, 1);
	            }
	        }
	        if (this._sorted) {
	            items = this._sortedItems;
	            for (i = 0; i < list.length; i++) {
	                item = list[i];
	                row = items.indexOf(item);
	                row >= 0 && items.splice(row, 1);
	            }
	        }
	        this.$_clearSummary();
	        this.$_resetCounts();
	        this._resetItemIndicies(0);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsRemoved = function (ds, rows) {
	        if (!rows || rows.length < 1) {
	            return;
	        }
	        if (rows.length > 1) {
	            rows.sort(function (v1, v2) {
	                return v1 - v2;
	            });
	        }
	        var items = this._rows;
	        var row = rows[0];
	        var list = [];
	        for (var i = rows.length - 1; i >= 0; i--) {
	            list.push(items[rows[i]]);
	            items.splice(rows[i], 1);
	        }
	        for (var i = this._rows.length - 1; i >= row; i--) {
	            items[i]["_dataRow"] = i;
	        }
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_silentRemoveRows(list);
	        }
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.onDataProviderRowUpdating = function (ds, row, values) {
	        return true;
	    };
	    DefaultItemProvider.prototype.onDataProviderRowUpdated = function (ds, row) {
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_clearSummary();
	        }
	        this._checkableTag && this._checkableTag.updateRow(this._rows[row]);
	        this._rows[row] && this._fireItemUpdated(this._rows[row]);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsUpdated = function (ds, row, count) {
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_clearSummary();
	        }
	        this._checkableTag && this._checkableTag.updateRows(row, count);
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.onDataProviderValueChanging = function (ds, row, field, value) {
	        return true;
	    };
	    DefaultItemProvider.prototype.onDataProviderValueChanged = function (ds, row, field) {
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_clearSummary();
	        }
	        this._checkableTag && this._checkableTag.updateRow(this._rows[row]);
	        this._rows[row] && this._fireItemUpdated(this._rows[row]);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowMoving = function (ds, row, newRow) {
	        return true;
	    };
	    DefaultItemProvider.prototype.onDataProviderRowMoved = function (ds, row, newRow) {
	        var rows = this._rows;
	        var len = rows.length;
	        row = Math.min(row, newRow);
	        for (var i = row; i < len; i++) {
	            rows[i]["_dataRow"] = i;
	        }
	        if (this._sorted || this._paging || this.hideDeleted) {
	            this.$_buildItems();
	            this._resetItemIndicies(0);
	        }
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsMoving = function (ds, row, count, newRow) {
	        return true;
	    };
	    DefaultItemProvider.prototype.onDataProviderRowsMoved = function (ds, row, count, newRow) {
	        this._refreshItems();
	    };
	    DefaultItemProvider.prototype.onDataProviderStateChanged = function (ds, row) {
	        if (this.hideDeleted) {
	            var item = this._rows[row];
	            if (RowState_1.isDeletedState(item.rowState)) {
	                if (this.$_needFilter() || this.$_needSort() || this._paging) {
	                    this.$_buildItems();
	                }
	                else {
	                    if ((this.$_checkFiltered() && (!this._filteredItems || this._filteredItems.length <= 0)) || (this.isSorted && (!this._sortedItems || this._sortedItems.length <= 0))) {
	                        this.$_buildItems(true, true);
	                    }
	                    else {
	                        this.$_silentRemoveRow(item);
	                    }
	                    // this.$_buildItems(true,true);
	                }
	                this._fireRefresh();
	            }
	        }
	        this._checkableTag && this._checkableTag.updateRow(this._rows[row]);
	        this._fireRowStateChanged(this._rows[row]);
	    };
	    DefaultItemProvider.prototype.onDataProviderRowHided = function (ds, rows, hide) {
	        // this._filtered = this.$_checkFiltered();
	        // if (hide) {
	        //     if (this.$_needFilter() || this.$_needSort() || this._paging) {
	        //         this.$_buildItems();  
	        //     } else {// 최초 dataLoad후 filter, sort가 되지 않은 상태.
	        //         if ((this.$_checkFiltered() && (!this._filteredItems || this._filteredItems.length <= 0)) || ( this.isSorted() && (!this._sortedItems || this._sortedItems.length <= 0))) {
	        //             this.$_buildItems(true,true);   
	        //         } else {
	        //             var list = this.getItemsByRows(rows);
	        //             this.$_silentRemoveRows(list);
	        //         }
	        //     }
	        //     this._fireRefresh();
	        // } else {
	        //     this.refreshItems();
	        // }
	    };
	    DefaultItemProvider.prototype.onDataProviderStatesChanged = function (ds, rows) {
	        if (this.hideDeleted) {
	            var deleted = false;
	            var i, cnt, r, list;
	            for (i = 0, cnt = rows.length; i < cnt; i++) {
	                r = rows[i];
	                r = this._rows[r];
	                if (RowState_1.isDeletedState(r.rowState)) {
	                    deleted = true;
	                    break;
	                }
	            }
	            if (deleted) {
	                if (this.$_needFilter() || this.$_needSort() || this._paging) {
	                    this.$_buildItems(); // filter,sort를 하거나 paging인경우 item을 다시 만든다.
	                }
	                else {
	                    if ((this.$_checkFiltered() && (!this._filteredItems || this._filteredItems.length <= 0)) || (this.isSorted && (!this._sortedItems || this._sortedItems.length <= 0))) {
	                        this.$_buildItems(true, true);
	                    }
	                    else {
	                        list = this.getItemsByRows(rows);
	                        this.$_silentRemoveRows(list);
	                    }
	                    // this.$_buildItems(true,true); //
	                }
	                this._fireRefresh();
	            }
	        }
	        this._checkableTag && this._checkableTag.changeStates(rows);
	        this._fireRowStatesChanged(this.getItemsByRows(rows));
	    };
	    DefaultItemProvider.prototype.onDataProviderRestoreRows = function (ds, rows) {
	        if (this.$_needFilter() || this.$_needSort() || this._paging) {
	            this.$_buildItems();
	        }
	        else {
	            this.$_clearSummary();
	        }
	        this._checkableTag && this._checkableTag.changeStates(rows);
	        this._fireRowStatesChanged(this.getItemsByRows(rows));
	        this._fireRefresh();
	    };
	    DefaultItemProvider.prototype.onDataProviderStatesCleared = function (ds) {
	        if (this._pubCount != ds.rowCount) {
	            this._refreshItems();
	        }
	        this._fireRowStatesCleared();
	    };
	    return DefaultItemProvider;
	}(ItemProvider_1.ItemProvider));
	exports.DefaultItemProvider = DefaultItemProvider;
	});

	unwrapExports(DefaultItemProvider_1);
	var DefaultItemProvider_2 = DefaultItemProvider_1.CheckableExpressionRuntime;
	var DefaultItemProvider_3 = DefaultItemProvider_1.DefaultItemProvider;

	var GroupedItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GroupedItemPovider.ts
	// 2019. 07. 11. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	/**
	    mergeMode에서는 expandedAdornments가 both인경우 header, footer 모두 존재
	                                            header인경우 header만 존재
	                                            summary인경우 footer가 위에 존재
	                                            footer인경우 footer가 아래에 존재
	                                            none인경우 header, footer가 없다.
	                    collapsedAdornments가 both인경우 header, footer모두 존재
	                                            header인경우 header만 존재
	                                            summary, footer인경우 footer만 존재.
	                                            none일수는 없다.
	    normalMode expandedAdornments가 both인경우 header, footer모두 존재
	                                    header인경우 header만 존재.
	                                    footer인경우는 존재하지 않는다.
	                                    summary인경우 footer가 위에 있으면서 expander를 가진다.
	                collapseAdornments가 both 인경우 header, footer존재
	                                    header인경우 header만 존재
	                                    footer, summary인경우 footer만 있으면서 footer가 expander를 가진다.
	                expandedAdornments, collapsedAdornments모두 none을 가질수 없다.
	*/
	var GroupedVisibleItems = /** @class */ (function (_super) {
	    __extends(GroupedVisibleItems, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupedVisibleItems(rs) {
	        var _this = _super.call(this) || this;
	        _this._fixedCount = 0;
	        _this._items = [];
	        _this._list = [];
	        _this._rs = rs;
	        return _this;
	    }
	    GroupedVisibleItems.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GroupedVisibleItems.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedVisibleItems.prototype, "count", {
	        get: function () {
	            return this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedVisibleItems.prototype, "fixedCount", {
	        get: function () {
	            return this._fixedCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedVisibleItems.prototype, "items", {
	        get: function () {
	            return this._items.slice();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GroupedVisibleItems.prototype.getItem = function (index) {
	        return this._items[index];
	    };
	    GroupedVisibleItems.prototype.clear = function (items) {
	        if (items === void 0) { items = null; }
	        var rs = this._rs;
	        items = items ? items : this._items;
	        for (var i = 0, cnt = items.length; i < cnt; i++) {
	            var item = items[i];
	            item["_parent"] = rs["_rootItem"];
	            if (item instanceof GridItem_1.GroupItemImpl && item["_children"]) {
	                this.clear(item["_children"]);
	            }
	        }
	        items.splice(0, items.length);
	    };
	    GroupedVisibleItems.prototype.expand = function (group, recursive, setFlag, level) {
	        this.$_expandItem(group, recursive, setFlag, level);
	        return true;
	    };
	    GroupedVisibleItems.prototype.collapse = function (group, recursive) {
	        var rs = this._rs;
	        var items = this._items;
	        group["_expanded"] = false;
	        if (rs.mergeMode) {
	            var idx = group.index;
	            if (idx >= 0) {
	                items.splice(idx, 1);
	                group["_index"] = -1;
	            }
	            else {
	                idx = this.$_firstIndex(group, rs.expandedAdornments == Types.RowGroupAdornments.SUMMARY);
	                idx < 0 && (idx = this.$_firstIndex(group));
	            }
	            while (idx < items.length) {
	                var item = items[idx];
	                if (!item.isDescendantOf(group)) {
	                    break;
	                }
	                items.splice(idx, 1);
	                item["_index"] = -1;
	                if (recursive && (item instanceof GridItem_1.GroupItem || item instanceof RowGroup_1.MergedGroupFooter)) {
	                    var pItem = item instanceof GridItem_1.GroupItem ? item : item instanceof RowGroup_1.MergedGroupFooter && item.parent["_expanded"] ? item.parent : null;
	                    pItem && (pItem["_expanded"] = false);
	                }
	            }
	            switch (rs.collapsedAdornments) {
	                case Types.RowGroupAdornments.BOTH:
	                    group["_index"] = idx;
	                    items.splice(idx, 0, group);
	                    items.splice(idx + 1, 0, group.footer);
	                    break;
	                case Types.RowGroupAdornments.FOOTER:
	                case Types.RowGroupAdornments.SUMMARY:
	                    items.splice(idx, 0, group.footer);
	                    break;
	                case Types.RowGroupAdornments.HEADER:
	                default:
	                    group["_index"] = idx;
	                    items.splice(idx, 0, group);
	                    break;
	            }
	        }
	        else {
	            var idx = group.index;
	            if (idx >= 0) {
	                items.splice(idx, 1);
	                group["_index"] = -1;
	            }
	            else {
	                var footer = group.footer;
	                idx = footer.index;
	                items.splice(idx, 1);
	                footer["_index"] = -1;
	            }
	            while (idx < items.length) {
	                var item = items[idx];
	                if (!item.isDescendantOf(group)) {
	                    break;
	                }
	                items.splice(idx, 1);
	                item["_index"] = -1;
	                if (recursive && (item instanceof GridItem_1.GroupItem || item instanceof GridItem_1.GroupFooter)) {
	                    var pItem = item instanceof GridItem_1.GroupItem ? item : item instanceof GridItem_1.GroupFooter && item.parent["_expanded"] ? item.parent : null;
	                    pItem && (pItem["_expanded"] = false);
	                }
	            }
	            switch (rs.collapsedAdornments) {
	                case Types.RowGroupAdornments.BOTH:
	                    group["_index"] = idx;
	                    items.splice(idx, 0, group);
	                    var footer = group.footer;
	                    footer["_index"] = idx;
	                    footer["_expandable"] = false;
	                    items.splice(idx + 1, 0, group.footer);
	                    break;
	                case Types.RowGroupAdornments.FOOTER:
	                case Types.RowGroupAdornments.SUMMARY:
	                    footer = group.footer;
	                    footer["_index"] = idx;
	                    footer["_expandable"] = true;
	                    items.splice(idx, 0, footer);
	                    break;
	                case Types.RowGroupAdornments.HEADER:
	                default:
	                    group["_index"] = idx;
	                    items.splice(idx, 0, group);
	                    break;
	            }
	        }
	        return true;
	    };
	    GroupedVisibleItems.prototype.getNext = function (item) {
	        if (item != null && item.visible && item.index < this.count - 1) {
	            return this._items[item.index + 1];
	        }
	        return null;
	    };
	    GroupedVisibleItems.prototype.getPrior = function (item) {
	        if (item != null && item.visible && item.index > 0) {
	            return this._items[item.index - 1];
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GroupedVisibleItems.prototype.$_collectChildren = function (parent, list, recursive, setFlag, level) {
	        var cb = this._rs.createFooterCallback;
	        if (setFlag && parent) {
	            parent["_setExpanded"](true);
	        }
	        if (this._rs.mergeMode) {
	            if (!(parent instanceof ItemProvider_1.RootItem)) {
	                if (this._rs.expandedAdornments == Types.RowGroupAdornments.HEADER || this._rs.expandedAdornments == Types.RowGroupAdornments.BOTH) {
	                    list.push(parent);
	                }
	                else if (this._rs.expandedAdornments == Types.RowGroupAdornments.SUMMARY) ;
	            }
	            for (var i = 0, cnt = parent.count; i < cnt; i++) {
	                var item = parent.getItem(i);
	                if (item instanceof GridItem_1.GroupItem) {
	                    var group = item;
	                    if (recursive && (!level || group.level <= level) || group.expanded) {
	                        this.$_collectChildren(group, list, recursive, setFlag, level);
	                    }
	                    else {
	                        switch (this._rs.collapsedAdornments) {
	                            case Types.RowGroupAdornments.BOTH:
	                                list.push(group);
	                                group.footer && list.push(group.footer);
	                                break;
	                            case Types.RowGroupAdornments.SUMMARY:
	                            case Types.RowGroupAdornments.FOOTER:
	                                list.push(group.footer);
	                                break;
	                            case Types.RowGroupAdornments.HEADER:
	                            default:
	                                list.push(group);
	                                break;
	                            /*
	                            case ROWGROUPADORNMENTS.NONE:
	                                list.push(group.firstItem());
	                                break;
	                            */
	                        }
	                    }
	                }
	                else if (item != parent.footer) {
	                    list.push(item);
	                }
	            }
	            if (!(parent instanceof ItemProvider_1.RootItem) &&
	                (this._rs.expandedAdornments == Types.RowGroupAdornments.FOOTER || this._rs.expandedAdornments == Types.RowGroupAdornments.BOTH)) {
	                //(!fc || fc(this._rs._handler, $$_getItemProxy(parent, true))) ? list.push(parent.footer()) : parent._hasFooter = false;
	                list.push(parent.footer);
	            }
	        }
	        else {
	            if (!(parent instanceof ItemProvider_1.RootItem)) {
	                if (this._rs.expandedAdornments == Types.RowGroupAdornments.SUMMARY) {
	                    var footer = parent.footer;
	                    footer["_expandable"] = true;
	                    list.push(footer);
	                }
	                else {
	                    list.push(parent);
	                }
	            }
	            for (var i = 0, cnt = parent.count; i < cnt; i++) {
	                var item = parent.getItem(i);
	                if (item instanceof GridItem_1.GroupItem) {
	                    var group = item;
	                    if (recursive && (!level || group.level <= level) || group.expanded) {
	                        this.$_collectChildren(group, list, recursive, setFlag, level);
	                    }
	                    else {
	                        switch (this._rs.collapsedAdornments) {
	                            case Types.RowGroupAdornments.HEADER:
	                                list.push(group);
	                                break;
	                            case Types.RowGroupAdornments.FOOTER:
	                            case Types.RowGroupAdornments.SUMMARY:
	                                var footer = group.footer;
	                                footer["_expandable"] = true;
	                                list.push(footer);
	                                break;
	                            case Types.RowGroupAdornments.BOTH:
	                            default:
	                                list.push(group);
	                                if (group.footer) {
	                                    var footer_1 = group.footer;
	                                    footer_1["_expandable"] = false;
	                                    list.push(group.footer);
	                                }
	                                break;
	                        }
	                    }
	                }
	                else if (!(item instanceof GridItem_1.GroupFooter)) { // footer는 제일 마지막에
	                    list.push(item);
	                }
	            }
	            if (!(parent instanceof ItemProvider_1.RootItem)) {
	                if (this._rs.expandedAdornments == Types.RowGroupAdornments.BOTH) {
	                    var footer = parent.footer;
	                    footer["_expandable"] = (parent["_expanded"] || parent.visible) ? false : true;
	                    list.push(footer);
	                }
	            }
	        }
	    };
	    GroupedVisibleItems.prototype.$_expandItem = function (group, recursive, setFlag, level) {
	        var idx;
	        if (group instanceof ItemProvider_1.RootItem) {
	            idx = this._fixedCount;
	        }
	        else if (this._rs.mergeMode) {
	            /*
	             * 현재, collapsed 상태에서만 여기가 호출된다고 가정한다.
	             * group item 이 포함되지 않는 경우가 있다.
	             * collapsed style 별로 기존 아이템들을 제거한다.
	             */
	            switch (this._rs.collapsedAdornments) {
	                case Types.RowGroupAdornments.BOTH:
	                    idx = group.index;
	                    this._items.splice(idx, 2);
	                    break;
	                case Types.RowGroupAdornments.FOOTER:
	                case Types.RowGroupAdornments.SUMMARY:
	                    idx = group.footer.index;
	                    this._items.splice(idx, 1);
	                    break;
	                case Types.RowGroupAdornments.HEADER:
	                default:
	                    idx = group.index;
	                    this._items.splice(idx, 1);
	                    break;
	            }
	            if (setFlag) {
	                group["_index"] = -1;
	            }
	        }
	        else {
	            switch (this._rs.collapsedAdornments) {
	                case Types.RowGroupAdornments.BOTH:
	                    idx = group.index;
	                    this._items.splice(idx, 2);
	                    break;
	                case Types.RowGroupAdornments.FOOTER:
	                case Types.RowGroupAdornments.SUMMARY:
	                    idx = group.footer.index;
	                    this._items.splice(idx, 1);
	                    break;
	                case Types.RowGroupAdornments.HEADER:
	                    idx = group.index;
	                    this._items.splice(idx, 1);
	                    break;
	            }
	            // if (this._rs.collapsedAdornments() == RowGroupAdornments.FOOTER) {
	            // 	idx = group.footer().index();
	            // 	_items.splice(idx,1);
	            // } else {
	            // 	idx = group.index();
	            // 	 * 현재, collapsed 상태에서만 여기가 호출된다고 가정한다.
	            // 	 * 기존 group header와 footer를 제거한다.
	            // 	_items.splice(idx, 1);
	            // 	let collapsedAdornment = this._rs.collapsedAdornments();
	            // 	if (collapsedAdornment == RowGroupAdornments.BOTH || collapsedAdornment == RowGroupAdornments.FOOTER) {
	            // 		_items.splice(idx, 1);
	            // 	}
	            // }
	            if (setFlag) {
	                group["_index"] = -1;
	            }
	        }
	        this._list.splice(0, this._list.length);
	        this.$_collectChildren(group, this._list, recursive, setFlag, level);
	        for (var i = 0, cnt = this._list.length; i < cnt; i++) {
	            this._items.splice(idx + i, 0, this._list[i]);
	        }
	    };
	    GroupedVisibleItems.prototype.$_firstIndex = function (group, isSummary) {
	        if (isSummary === void 0) { isSummary = false; }
	        var idx = group.index;
	        if (idx >= 0) {
	            return idx;
	        }
	        if (isSummary) {
	            idx = group.footer.index;
	            if (idx >= 0) {
	                return idx;
	            }
	            for (var i = 0, cnt = group.count; i < cnt; i++) {
	                var g = Utils_1.Utils.cast(group.getItem(i), GridItem_1.GroupItem);
	                if (g) {
	                    idx = this.$_firstIndex(g, isSummary);
	                }
	                if (idx >= 0) {
	                    return idx;
	                }
	            }
	            return -1;
	        }
	        for (var i = 0, cnt = group.count; i < cnt; i++) {
	            var item = group.getItem(i);
	            if (item.index >= 0) {
	                return item.index;
	            }
	            var g = Utils_1.Utils.cast(item, GridItem_1.GroupItem);
	            if (g) {
	                idx = this.$_firstIndex(g);
	                if (idx >= 0) {
	                    return idx;
	                }
	            }
	        }
	        return -1;
	    };
	    GroupedVisibleItems.prototype.$_clearAndInit = function (source, fixedCount) {
	        this.clear();
	        if (source) {
	            this._fixedCount = Math.min(fixedCount, source.itemCount);
	            for (var i = 0; i < this._fixedCount; i++) {
	                this._items.push(source.getItem(i));
	            }
	        }
	        else {
	            this._fixedCount = 0;
	        }
	    };
	    GroupedVisibleItems.prototype.$_resetIndices = function (fromIndex) {
	        if (fromIndex === void 0) { fromIndex = 0; }
	        for (var i = fromIndex, cnt = this._items.length; i < cnt; i++) {
	            this._items[i]["_index"] = i;
	        }
	    };
	    return GroupedVisibleItems;
	}(Base_1.Base));
	var GroupInfo = /** @class */ (function () {
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupInfo(startIndex, endIndex) {
	        this.startIndex = startIndex;
	        this.endIndex = endIndex;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        this.level = 0;
	        this.children = [];
	    }
	    return GroupInfo;
	}());
	var GroupedItemProvider = /** @class */ (function (_super) {
	    __extends(GroupedItemProvider, _super);
	    //private _groupList: { [key: number]: GroupItem};
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupedItemProvider(source, indexing) {
	        var _this = _super.call(this, source, indexing) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._treeMode = false;
	        _this._expandedAdornments = Types.RowGroupAdornments.BOTH;
	        _this._collapsedAdornments = Types.RowGroupAdornments.HEADER;
	        _this._expandWhenGrouping = false;
	        _this._mergeMode = false;
	        _this._summaryMode = Types.SummaryMode.AGGREGATE;
	        _this._groupSorting = true;
	        _this._sortDirection = Types.SortDirection.ASCENDING;
	        _this._summarizing = false;
	        _this._grouped = false;
	        return _this;
	    }
	    GroupedItemProvider.prototype.dispose = function () {
	        //this._groupList = null;
	        this._visibleItems.dispose();
	        this._visibleItems = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GroupedItemProvider.prototype, "treeMode", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** treeMode */
	        get: function () {
	            return this._treeMode;
	        },
	        set: function (value) {
	            this._treeMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "expandedAdornments", {
	        /** expandedAdornments */
	        get: function () {
	            return this._expandedAdornments;
	        },
	        set: function (value) {
	            if (value != this._expandedAdornments) {
	                this._expandedAdornments = value;
	                if (this.grouped) {
	                    this._populateItems();
	                    this._fireRefresh();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "collapsedAdornments", {
	        /** collapsedAdornments */
	        get: function () {
	            return this._collapsedAdornments;
	        },
	        set: function (value) {
	            if (value != this._collapsedAdornments) {
	                this._collapsedAdornments = value;
	                if (this.grouped) {
	                    this._populateItems();
	                    this._fireRefresh();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "createFooterCallback", {
	        /** createFooterCallback */
	        get: function () {
	            return this._createFooterCallback;
	        },
	        set: function (value) {
	            if (value != this._createFooterCallback) {
	                this._createFooterCallback = value;
	                if (this.grouped) {
	                    this._populateItems();
	                    this._fireRefresh();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "expandWhenGrouping", {
	        /** expandWhenGrouping */
	        get: function () {
	            return this._expandWhenGrouping;
	        },
	        set: function (value) {
	            this._expandWhenGrouping = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "mergeMode", {
	        /** mergeMode */
	        get: function () {
	            return this._mergeMode;
	        },
	        set: function (value) {
	            if (value != this._mergeMode) {
	                this._mergeMode = value;
	                if (!value) {
	                    this._clearDisplayLevels();
	                }
	                this._populateItems();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "summaryMode", {
	        /** summaryMode */
	        get: function () {
	            return this._summaryMode;
	        },
	        set: function (value) {
	            if (value != this._summaryMode) {
	                this._summaryMode = value;
	                this._populateItems();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "grouped", {
	        /** grouped */
	        get: function () {
	            return this._grouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupedItemProvider.prototype, "groupCount", {
	        // get groupList(): { [key: number]: GroupItem} {
	        // 	return this._groupList;
	        // }
	        get: function () {
	            return this._groupFields ? this._groupFields.length : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GroupedItemProvider.prototype.canGrouping = function (fields) {
	        return this.fireGrouping(fields);
	    };
	    GroupedItemProvider.prototype.groupBy = function (fields) {
	        this.groupByMode(fields, this._mergeMode);
	    };
	    GroupedItemProvider.prototype.groupByMode = function (fields, mergeMode) {
	        this._mergeMode = mergeMode;
	        this._groupFields = fields ? fields.concat() : null;
	        if (!mergeMode) {
	            this._clearDisplayLevels();
	        }
	        this._populateItems();
	        try {
	            this._fireRefresh();
	        }
	        finally {
	            this.fireGrouped(fields);
	        }
	    };
	    GroupedItemProvider.prototype.isGroupedField = function (field) {
	        if (this._groupFields) {
	            for (var i = this._groupFields.length; i--;) {
	                if (this._groupFields[i] == field) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    GroupedItemProvider.prototype.getGroupLevel = function (field) {
	        if (this._groupFields && field >= 0) {
	            for (var i = this._groupFields.length; i--;) {
	                if (this._groupFields[i] == field) {
	                    return i + 1;
	                }
	            }
	        }
	        return 0;
	    };
	    Object.defineProperty(GroupedItemProvider.prototype, "groupedFields", {
	        get: function () {
	            return this._groupFields ? this._groupFields.concat() : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GroupedItemProvider.prototype.expand = function (group, recursive, force, level) {
	        if (group && (!group.expanded || force)) {
	            this.fireExpand(group);
	            if (group.expanded) {
	                this._visibleItems.collapse(group, false);
	            }
	            if (this._visibleItems.expand(group, recursive, true, level)) {
	                this._resetItemIndicies(group.index);
	                try {
	                    this._fireRefresh();
	                }
	                finally {
	                    this.fireExpanded(group);
	                }
	            }
	        }
	    };
	    // 상위 group이 접혀있는 경우 하위 그룹도 접혀있는 상태로 만들기 위해서 사용한다.
	    // 반드시 상위 group이 접혀있어야 한다.
	    GroupedItemProvider.prototype.$_collapseChild = function (group, recursive, force) {
	        for (var i = 0, cnt = group.count; i < cnt; i++) {
	            var child = group.getItem(i);
	            if (child instanceof GridItem_1.GroupItemImpl) {
	                child["_expanded"] = false;
	                this.$_collapseChild(child, recursive, force);
	            }
	        }
	    };
	    GroupedItemProvider.prototype.collapse = function (group, recursive, force) {
	        if (!group || !group.expanded) {
	            if (group && recursive && force) {
	                this.$_collapseChild(group, recursive, force);
	            }
	            return;
	        }
	        this.fireCollapse(group);
	        if (this._visibleItems.collapse(group, recursive)) {
	            this._resetItemIndicies(group.index);
	            try {
	                this._fireRefresh();
	            }
	            finally {
	                this.fireCollapsed(group);
	            }
	        }
	    };
	    GroupedItemProvider.prototype.findItem = function (fields, values, options, startIndex, endIndex) {
	        var ds = this.dataSource;
	        if (!ds) {
	            return -1;
	        }
	        var rows = this.itemCount;
	        if (rows < 1) {
	            return -1;
	        }
	        var flds = Math.min(fields.length, values.length);
	        if (flds < 1) {
	            return -1;
	        }
	        var all = !options || options.allFields;
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var dateConvert = null;
	        var fieldTypes = [];
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(rows - 1, endIndex);
	        for (var c = 0; c < flds; c++) {
	            fieldTypes[c] = ds.getField(fields[c]).dataType;
	        }
	        for (var i = startIndex; i <= endIndex; i++) {
	            var item = this.$_getItem(i);
	            var found = item.dataRow >= 0;
	            if (found) {
	                for (var c = 0; c < flds; c++) {
	                    var v = item.getData(fields[c]);
	                    switch (fieldTypes[c]) {
	                        case Types.ValueType.DATETIME:
	                        case Types.ValueType.DATE:
	                            if (values[c] instanceof Date) {
	                                found = $$_compareTextValue(values[c], v, sensitive, partial);
	                            }
	                            else {
	                                if (!dateConvert) {
	                                    var fmt = /[.]/.test(values[c]) ? "yyyy.MM.dd" : /[/]/.test(values[c]) ? "yyyy/MM/dd" : /[-]/.test(values[c]) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                    dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                }
	                                found = $$_compareTextValue(values[c], v ? dateConvert.getText(v) : v, sensitive, partial);
	                            }
	                            break;
	                        default:
	                            found = $$_compareTextValue(values[c], v, sensitive, partial);
	                            break;
	                    }
	                    if (found && !all) {
	                        return i;
	                    }
	                    if (!found && all) {
	                        break;
	                    }
	                }
	            }
	            if (found) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    GroupedItemProvider.prototype.findCell = function (fields, value, options, startIndex, endIndex, startFieldIndex) {
	        var ds = this.dataSource;
	        if (!ds) {
	            return null;
	        }
	        var rows = this.itemCount;
	        if (rows < 1) {
	            return null;
	        }
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var fldCount = this.dataSource.fieldCount;
	        var fldLen = fields.length;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < fldCount; c++) {
	            fieldTypes[c] = ds.getField(c).dataType;
	        }
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(rows - 1, endIndex);
	        startFieldIndex = Math.max(0, startFieldIndex);
	        if (startFieldIndex >= fields.length) {
	            startIndex++;
	            startFieldIndex = 0;
	        }
	        for (var i = startIndex; i <= endIndex; i++) {
	            var item = this.$_getItem(i);
	            if (item.dataRow >= 0) {
	                var c = (i > startIndex) ? 0 : startFieldIndex;
	                for (; c < fldLen; c++) {
	                    var f = fields[c];
	                    if (f >= 0 && f < fldCount) {
	                        var v = item.getData(f);
	                        var found = false;
	                        switch (fieldTypes[f]) {
	                            case Types.ValueType.DATETIME:
	                            case Types.ValueType.DATE:
	                                if (value instanceof Date) {
	                                    found = $$_compareTextValue(value, v, sensitive, partial);
	                                }
	                                else {
	                                    if (!dateConvert) {
	                                        var fmt = /[.]/.test(value) ? "yyyy.MM.dd" : /[/]/.test(value) ? "yyyy/MM/dd" : /[-]/.test(value) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                        dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                    }
	                                    found = $$_compareTextValue(value, v ? dateConvert.getText(v) : v, sensitive, partial);
	                                }
	                                break;
	                            default:
	                                found = $$_compareTextValue(value, v, sensitive, partial);
	                                break;
	                        }
	                        if (found) {
	                            return {
	                                itemIndex: i,
	                                fieldIndex: f,
	                                searchFieldIndex: c
	                            };
	                        }
	                    }
	                }
	            }
	        }
	        return null;
	    };
	    Object.defineProperty(GroupedItemProvider.prototype, "itemCount", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._grouped ? this._visibleItems.count : this.source.itemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GroupedItemProvider.prototype.getItem = function (index) {
	        if (this.grouped) {
	            if (index >= 0 && index < this._visibleItems.count) {
	                return this._visibleItems.getItem(index);
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return this.source.getItem(index);
	        }
	    };
	    GroupedItemProvider.prototype.getItems = function (index, count) {
	        if (this.grouped) {
	            var vitems = this._visibleItems;
	            var items = [];
	            var end = Math.min(vitems.count, index + count - 1);
	            for (var i = index; i < end; i++) {
	                var item = vitems.getItem(i);
	                items.push(item);
	            }
	            return items;
	        }
	        else {
	            return this.source.getItems(index, count);
	        }
	    };
	    GroupedItemProvider.prototype.getAllItems = function () {
	        if (this.grouped) {
	            var items = new GroupedVisibleItems(this);
	            items.expand(this.rootItem, true, false, 0);
	            return items.items;
	        }
	        else if (this.source) {
	            return this.source.getAllItems();
	        }
	        else {
	            return null;
	        }
	    };
	    GroupedItemProvider.prototype.getIndexOfRow = function (dataRow) {
	        if (this.grouped) {
	            var vitems = this._visibleItems;
	            for (var i = 0, cnt = vitems.count; i < cnt; i++) {
	                if (vitems.getItem(i).dataRow == dataRow) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	        else {
	            return this.source.getIndexOfRow(dataRow);
	        }
	    };
	    GroupedItemProvider.prototype.getItemOfRow = function (dataRow) {
	        if (this.grouped) {
	            var vitems = this._visibleItems;
	            for (var i = 0, cnt = vitems.count; i < cnt; i++) {
	                var item = vitems.getItem(i);
	                if (item.dataRow == dataRow) {
	                    return item;
	                }
	            }
	            return null;
	        }
	        else {
	            return this.source.getItemOfRow(dataRow);
	        }
	    };
	    GroupedItemProvider.prototype._initialize = function () {
	        _super.prototype._initialize.call(this);
	        this._visibleItems = new GroupedVisibleItems(this);
	    };
	    GroupedItemProvider.prototype._clearItems = function () {
	        this._visibleItems.clear();
	        this.rootItem.clear();
	        //this._groupList = {};
	    };
	    GroupedItemProvider.prototype._populateItems = function () {
	        this.$_populateItems(false);
	    };
	    GroupedItemProvider.prototype._resetItemIndicies = function (fromIndex) {
	        if (this.isIndexing && this.grouped) {
	            this._visibleItems["$_resetIndices"](fromIndex);
	        }
	        else {
	            _super.prototype._resetItemIndicies.call(this, fromIndex);
	        }
	    };
	    GroupedItemProvider.prototype._clearChecked = function () {
	        if (this.grouped) {
	            this.$_checkChildren(this.rootItem, false, false, false);
	        }
	        else {
	            _super.prototype._clearChecked.call(this);
	        }
	        this._editItem && this._editItem["_setChecked"](false);
	    };
	    GroupedItemProvider.prototype.checkAll = function (checked, visibleOnly, checkableOnly, checkEvent, groupCheckable) {
	        if (this._editItem) {
	            if (checkableOnly) {
	                this._editItem.checkable && this._editItem["_setChecked"](checked);
	            }
	            else {
	                this._editItem["_setChecked"](checked);
	            }
	        }
	        if (visibleOnly || !this.grouped) {
	            _super.prototype.checkAll.call(this, checked, visibleOnly, checkableOnly, checkEvent, groupCheckable);
	        }
	        else {
	            var cnt = this._visibleItems.fixedCount;
	            if (cnt > 0) {
	                if (checkableOnly) {
	                    for (var i = cnt; i--;) {
	                        var item = this.getItem(i);
	                        item.checkable && item["_setChecked"](checked);
	                    }
	                }
	                else {
	                    for (var i = cnt; i--;) {
	                        this.getItem(i)["_setChecked"](checked);
	                    }
	                }
	            }
	            this.$_checkChildren(this.rootItem, checked, checkableOnly, groupCheckable);
	            this._fireItemCheckChanged(null, checked);
	            checkEvent ? this._fireItemAllChecked(checked) : this._fireRefreshClient();
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    // dataRowId의 경우 해당 row가 삭제되기 전까지는 값을 유지한다.
	    GroupedItemProvider.prototype.$_saveExpand = function (parent, map) {
	        for (var i = 0, cnt = parent.count; i < cnt; i++) {
	            var child = parent.getItem(i);
	            if (child instanceof GridItem_1.GroupItemImpl || child instanceof RowGroup_1.MergedGroupHeader) ;
	        }
	    };
	    GroupedItemProvider.prototype.$_restoreExpand = function (parent, map) {
	        for (var i = 0, cnt = parent.count; i < cnt; i++) {
	            var child = parent.getItem(i);
	            if (child instanceof GridItem_1.GroupItemImpl || child instanceof RowGroup_1.MergedGroupHeader) ;
	        }
	    };
	    GroupedItemProvider.prototype.$_populateItems = function (saveExpand) {
	        var expandMap = {};
	        var srcCount = this.source.itemCount;
	        var root = this["_rootItem"];
	        saveExpand && srcCount > 0 && root && this.$_saveExpand(root, expandMap);
	        this._clearItems();
	        if (!this.source) {
	            return;
	        }
	        if (this._groupFields) {
	            var fieldCount = this.dataSource.fieldCount;
	            for (var i = this._groupFields.length - 1; i >= 0; i--) {
	                if (this._groupFields[i] >= fieldCount) {
	                    this._groupFields.splice(i, 1);
	                }
	            }
	            this._grouped = this._groupFields.length > 0;
	        }
	        else {
	            this._grouped = false;
	        }
	        if (this._grouped && srcCount > 0) {
	            this.$_buildGroupItems(srcCount);
	            saveExpand && this.$_restoreExpand(root, expandMap);
	            this.$_resetVisibleItems();
	        }
	    };
	    GroupedItemProvider.prototype.$_checkChildren = function (p, checked, checkableOnly, groupCheckable) {
	        for (var i = 0, cnt = p.count; i < cnt; i++) {
	            var item = p.getItem(i);
	            if (item) {
	                if (checkableOnly) {
	                    (groupCheckable || item instanceof GridItem_1.DataItem) && item.checkable && item["_setChecked"](checked);
	                }
	                else {
	                    item["_setChecked"](checked);
	                }
	            }
	            if (item instanceof GridItem_1.GroupItem) {
	                this.$_checkChildren(item, checked, checkableOnly, groupCheckable);
	            }
	        }
	    };
	    GroupedItemProvider.prototype.$_getItem = function (index) {
	        return this._grouped ? this._visibleItems.getItem(index) : this.source.getItem(index);
	    };
	    GroupedItemProvider.prototype.$_resetVisibleItems = function () {
	        this._visibleItems["$_clearAndInit"](this.source, this.fixedCount);
	        if (this.source) {
	            if (this.source.itemCount > this._visibleItems.fixedCount) {
	                this._visibleItems.expand(this.rootItem, false, false, 0);
	            }
	        }
	        this._resetItemIndicies(0);
	    };
	    GroupedItemProvider.prototype.$_buildGroupItems = function (sourceCount) {
	        if (sourceCount > this.fixedCount) {
	            var ginfo = new GroupInfo(this.fixedCount, sourceCount - 1);
	            this.$_buildGroups(ginfo, this.source, this._groupFields);
	            //this._groupList = {};
	            this.$_buildItems(this.rootItem, ginfo, this._groupFields);
	            if (this.mergeMode) {
	                this._clearDisplayLevels();
	                this.$_resetDisplayLevels(this.rootItem);
	            }
	        }
	    };
	    GroupedItemProvider.prototype.$_resetDisplayLevels = function (group) {
	        for (var i = 0, cnt = group.count; i < cnt; i++) {
	            var g = Utils_1.Utils.cast(group.getItem(i), GridItem_1.GroupItem);
	            if (g) {
	                var row = Utils_1.Utils.cast(g.firstItem, GridItem_1.GridRow);
	                if (row && row._displayLevel < 0) {
	                    row._displayLevel = g.level;
	                }
	                this.$_resetDisplayLevels(g);
	            }
	        }
	    };
	    GroupedItemProvider.prototype.$_buildGroups = function (parent, source, groupFields) {
	        if (groupFields.length <= parent.level) {
	            return;
	        }
	        var startIndex = parent.startIndex;
	        var endIndex = parent.endIndex;
	        if (endIndex < startIndex) {
	            return;
	        }
	        var level = parent.level + 1;
	        var field = groupFields[parent.level];
	        var fld = this.dataSource.getField(field);
	        var ginfo = new GroupInfo(startIndex, startIndex);
	        ginfo.level = level;
	        parent.children.push(ginfo);
	        var priorVal = source.getItem(startIndex).getData(field);
	        for (var i = startIndex + 1; i <= endIndex; i++) {
	            var val = source.getItem(i).getData(field);
	            if (!fld.equalValues(val, priorVal)) {
	                if (ginfo) {
	                    ginfo.endIndex = i - 1;
	                }
	                ginfo = new GroupInfo(i, i);
	                ginfo.level = level;
	                parent.children.push(ginfo);
	            }
	            priorVal = val;
	        }
	        if (ginfo) {
	            ginfo.endIndex = endIndex;
	        }
	        for (var i = 0, cnt = parent.children.length; i < cnt; i++) {
	            this.$_buildGroups(parent.children[i], source, groupFields);
	        }
	    };
	    GroupedItemProvider.prototype.$_buildItems = function (parent, info, groupFields) {
	        var mergeMode = this.mergeMode;
	        var cnt = info.children.length;
	        if (cnt > 0) {
	            var field = groupFields[info.level];
	            for (var i = 0; i < cnt; i++) {
	                var group = mergeMode ? new RowGroup_1.MergedGroupHeader(field) : new GridItem_1.GroupItemImpl(field);
	                //this._groupList[group.id] = group;
	                group["_setExpanded"](this.expandWhenGrouping);
	                parent.add(group);
	                this.$_buildItems(group, info.children[i], groupFields);
	            }
	        }
	        else {
	            var rows = info.endIndex - info.startIndex + 1;
	            var items = this.source.getItems(info.startIndex, rows);
	            parent.addAll(items);
	            this._incDescendents(parent, rows);
	        }
	        var level = parent.level;
	        if (level > 0) { // excepts root
	            var footer = mergeMode ? new RowGroup_1.MergedGroupFooter() : new GridItem_1.GroupFooter();
	            parent.add(footer);
	        }
	    };
	    GroupedItemProvider.prototype.$_setEditItem = function (item) {
	        this._editItem = item;
	    };
	    GroupedItemProvider.prototype.$_setDummyEditItem = function (item) {
	        this["_dummyEditItem"] = item;
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    GroupedItemProvider.prototype.fireGrouping = function (fields) {
	        return this.fireConfirmEvent(GroupedItemProvider.GROUPING, fields);
	    };
	    GroupedItemProvider.prototype.fireGrouped = function (fields) {
	        this.fireEvent(GroupedItemProvider.GROUPED);
	    };
	    GroupedItemProvider.prototype.fireExpand = function (group) {
	        this.fireEvent(GroupedItemProvider.EXPAND, group);
	    };
	    GroupedItemProvider.prototype.fireExpanded = function (group) {
	        this.fireEvent(GroupedItemProvider.EXPANDED, group);
	    };
	    GroupedItemProvider.prototype.fireCollapse = function (group) {
	        this.fireEvent(GroupedItemProvider.COLLAPSE, group);
	    };
	    GroupedItemProvider.prototype.fireCollapsed = function (group) {
	        this.fireEvent(GroupedItemProvider.COLLAPSED, group);
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    GroupedItemProvider.prototype.onItemProviderRefresh = function (rs) {
	        if (this.grouped) {
	            this.$_populateItems(true);
	            this._fireRefresh();
	        }
	        else {
	            this._resetItemIndicies(0);
	            _super.prototype.onItemProviderRefresh.call(this, rs);
	        }
	    };
	    GroupedItemProvider.prototype.onItemProviderItemInserted = function (rs, item) {
	        if (this.grouped) {
	            this.$_populateItems(true);
	            this._fireRefresh();
	        }
	        else {
	            this._resetItemIndicies(0);
	            _super.prototype.onItemProviderItemInserted.call(this, rs, item);
	        }
	    };
	    GroupedItemProvider.prototype.onItemProviderItemDeleted = function (rs, item) {
	        if (this.grouped) {
	            this.$_populateItems(true);
	            this._fireRefresh();
	        }
	        else {
	            this._resetItemIndicies(0);
	            _super.prototype.onItemProviderItemDeleted.call(this, rs, item);
	        }
	    };
	    GroupedItemProvider.prototype.onItemProviderItemUpdated = function (rs, item) {
	        if (this.grouped) {
	            this.$_populateItems(true);
	            this._fireRefresh();
	        }
	        else {
	            this._resetItemIndicies(0);
	            _super.prototype.onItemProviderItemUpdated.call(this, rs, item);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    GroupedItemProvider.GROUPING = "onGroupedItemProviderGrouping";
	    GroupedItemProvider.GROUPED = "onGroupedItemProviderGrouped";
	    GroupedItemProvider.EXPAND = "onGroupedItemProviderExpand";
	    GroupedItemProvider.EXPANDED = "onGroupedItemProviderExpanded";
	    GroupedItemProvider.COLLAPSE = "onGroupedItemProviderCollapse";
	    GroupedItemProvider.COLLAPSED = "onGroupedItemProviderCollapsed";
	    return GroupedItemProvider;
	}(ItemProvider_1.ProxyItemProvider));
	exports.GroupedItemProvider = GroupedItemProvider;
	var $$_compareTextValue = function (v1, v2, caseSensitive, partialMatch) {
	    if (v1 === v2) {
	        return true;
	    }
	    var s1 = String(v1);
	    var s2 = v2 == null ? undefined : String(v2);
	    if (!s1 && !s2) {
	        return true;
	    }
	    if (!s1 || !s2) {
	        return false;
	    }
	    if (!caseSensitive) {
	        s1 = s1.toLowerCase();
	        s2 = s2.toLowerCase();
	    }
	    if (partialMatch) {
	        return s2.indexOf(s1) >= 0;
	    }
	    else {
	        return s1 == s2;
	    }
	};
	});

	unwrapExports(GroupedItemProvider_1);
	var GroupedItemProvider_2 = GroupedItemProvider_1.GroupedItemProvider;

	var GridSummarizer = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridSummarizer.ts
	// 2019. 07. 11. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var DefaultSummarizer = /** @class */ (function (_super) {
	    __extends(DefaultSummarizer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DefaultSummarizer(provider) {
	        var _this = _super.call(this) || this;
	        _this._rs = provider;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // GridSummarizer
	    //-------------------------------------------------------------------------
	    DefaultSummarizer.prototype.getCount = function (field) {
	        return this._rs.itemCount;
	    };
	    DefaultSummarizer.prototype.getSum = function (field) {
	        return this._rs.getSum(field);
	    };
	    DefaultSummarizer.prototype.getMax = function (field) {
	        return this._rs.getMax(field);
	    };
	    DefaultSummarizer.prototype.getMin = function (field) {
	        return this._rs.getMin(field);
	    };
	    DefaultSummarizer.prototype.getAvg = function (field) {
	        return this._rs.getAvg(field);
	    };
	    DefaultSummarizer.prototype.getVar = function (field) {
	        return this._rs.getVar(field);
	    };
	    DefaultSummarizer.prototype.getVarp = function (field) {
	        return this._rs.getVarp(field);
	    };
	    DefaultSummarizer.prototype.getStdev = function (field) {
	        return this._rs.getStdev(field);
	    };
	    DefaultSummarizer.prototype.getStdevp = function (field) {
	        return this._rs.getStdevp(field);
	    };
	    DefaultSummarizer.prototype.getDataCount = function (field) {
	        throw new Error("Not implented.");
	        //return this._rs.itemCount;
	    };
	    DefaultSummarizer.prototype.getDataSum = function (field) {
	        throw new Error("Not implented.");
	        //return this._rs.getSum(field);
	    };
	    return DefaultSummarizer;
	}(Base_1.Base));
	exports.DefaultSummarizer = DefaultSummarizer;
	});

	unwrapExports(GridSummarizer);
	var GridSummarizer_1 = GridSummarizer.DefaultSummarizer;

	var GridItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridItemPovider.ts
	// 2019. 07. 11. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var GridItemProvider = /** @class */ (function (_super) {
	    __extends(GridItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridItemProvider(indexing) {
	        var _this = _super.call(this, null, indexing) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._groupSorting = true;
	        _this._groupSortDirection = Types.SortDirection.ASCENDING;
	        _this._groupSortCase = Types.SortCase.SENSITIVE;
	        _this._rs = new DefaultItemProvider_1.DefaultItemProvider(false);
	        _this._rs.addListener(_this);
	        _this._groupedProvider = new GroupedItemProvider_1.GroupedItemProvider(_this._rs, false);
	        _this.source = _this._groupedProvider;
	        _this._summarizer = new GridSummarizer.DefaultSummarizer(_this._rs);
	        return _this;
	    }
	    GridItemProvider.prototype.dispose = function () {
	        this.source = null;
	        this._rs.removeListener(this);
	        this._rs.dispose();
	        this._rs = null;
	        this._groupedProvider.dispose();
	        this._groupedProvider = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridItemProvider.prototype, "hideDeleted", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** hideDeleted */
	        get: function () {
	            return this._rs.hideDeleted;
	        },
	        set: function (value) {
	            this._rs.hideDeleted = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "inclusiveFiltering", {
	        /** inclusiveFiltering */
	        get: function () {
	            return this._rs.isFilterOr;
	        },
	        set: function (value) {
	            this._rs.isFilterOr = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "summaryMode", {
	        /** summaryMode */
	        get: function () {
	            return this._rs.summaryMode;
	        },
	        set: function (value) {
	            this._rs.summaryMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "groupSummaryMode", {
	        /** groupSummaryMode */
	        get: function () {
	            return this._groupedProvider.summaryMode;
	        },
	        set: function (value) {
	            this._groupedProvider.summaryMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "mergeMode", {
	        /** isMergeMode */
	        get: function () {
	            return this._groupedProvider.mergeMode;
	        },
	        set: function (value) {
	            this._groupedProvider.mergeMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "sortMode", {
	        /** sortMode */
	        get: function () {
	            return this._rs.sortMode;
	        },
	        set: function (value) {
	            this._rs.sortMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "filterMode", {
	        /** filterMode */
	        get: function () {
	            return this._rs.filterMode;
	        },
	        set: function (value) {
	            this._rs.filterMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "grouped", {
	        /** grouped */
	        get: function () {
	            return this._groupedProvider.grouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "mergedGrouped", {
	        /** mergedGrouped */
	        get: function () {
	            return this._groupedProvider.grouped && this._groupedProvider.mergeMode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "groupLevels", {
	        /** groupList */
	        // get groupList(): any {
	        // 	return this._groupedProvider.groupList;
	        // }
	        /** groupLevels */
	        get: function () {
	            return this._groupedProvider.groupCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "groupByFieldCount", {
	        get: function () {
	            return this._groupedProvider.groupCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "groupByFields", {
	        /** groupByFields */
	        get: function () {
	            return this._groupedProvider.groupedFields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "expandWhenGrouping", {
	        /** expandWhenGrouping */
	        set: function (value) {
	            this._groupedProvider.expandWhenGrouping = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridItemProvider.prototype, "summarizer", {
	        /** summarizer */
	        get: function () {
	            return this._summarizer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridItemProvider.prototype.canGrouping = function (fields) {
	        return this._groupedProvider.canGrouping(fields);
	    };
	    GridItemProvider.prototype.getFieldDomain = function (field) {
	        return this._rs.getFieldDomain(field);
	    };
	    GridItemProvider.prototype.isFiltered = function (field) {
	        return field != null ? this._rs.hasFilter(field) : this._rs.hasFilters();
	    };
	    GridItemProvider.prototype.addFilter = function (field, refFiter) {
	        this._rs.addFilter(field, refFiter);
	    };
	    GridItemProvider.prototype.removeFilter = function (field, filter) {
	        this._rs.removeFilter(field, filter);
	    };
	    GridItemProvider.prototype.clearFilters = function (field) {
	        this._rs.clearFilters(field);
	    };
	    GridItemProvider.prototype.clearAllFilters = function () {
	        this._rs.clearAllFilters();
	    };
	    GridItemProvider.prototype.beginFiltering = function () {
	        this._rs.beginFilter();
	    };
	    GridItemProvider.prototype.endFiltering = function (filterCollection, filter) {
	        this._rs.endFilter(true, filterCollection, filter);
	    };
	    GridItemProvider.prototype.setHideDeletedRows = function (value) {
	        this._rs.hideDeleted = value;
	    };
	    GridItemProvider.prototype.orderBy = function (fields, directions, cases) {
	        if (this._groupedProvider.grouped && this._groupSorting) {
	            var len = directions ? directions.length : 0;
	            var clen = cases ? cases.length : 0;
	            var groupFields = this._groupedProvider.groupedFields;
	            var groupDirs = this._rs.getSortDirections();
	            var groupCases = this._rs.getSortCases();
	            var list = [];
	            for (var i = 0, cnt = groupFields.length; i < cnt; i++) {
	                list.push(groupFields[i]);
	            }
	            for (var i = 0, cnt = fields.length; i < cnt; i++) {
	                var fld = fields[i];
	                var g = list.indexOf(fld);
	                var dir = void 0;
	                var c = void 0;
	                if (len > i) {
	                    dir = directions[i];
	                }
	                else if (len > 0) { // 바로 앞의 것을 따라간다.
	                    dir = directions[len - 1];
	                }
	                else {
	                    dir = Types.SortDirection.ASCENDING;
	                }
	                if (clen > i) {
	                    c = cases[i];
	                }
	                else if (clen > 0) {
	                    c = cases[clen - 1];
	                }
	                else {
	                    c = Types.SortCase.SENSITIVE;
	                }
	                if (g < 0) {
	                    list.push(fld);
	                    groupDirs[list.length - 1] = dir;
	                    groupCases[list.length - 1] = c;
	                }
	                else {
	                    groupDirs[g] = dir;
	                    groupCases[g] = c;
	                }
	            }
	            groupFields = list;
	            this._rs.orderBy(groupFields, groupDirs, groupCases);
	        }
	        else {
	            this._rs.orderBy(fields, directions, cases);
	        }
	    };
	    GridItemProvider.prototype.getSortFields = function () {
	        return this._rs.getSortFields();
	    };
	    GridItemProvider.prototype.getSortDirections = function () {
	        return this._rs.getSortDirections();
	    };
	    GridItemProvider.prototype.getSortCases = function () {
	        return this._rs.getSortCases();
	    };
	    Object.defineProperty(GridItemProvider.prototype, "labelComparer", {
	        get: function () {
	            return this._rs.labelComparer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridItemProvider.prototype.setLabelComparer = function (comparer) {
	        this._rs.labelComparer = comparer;
	    };
	    GridItemProvider.prototype.groupBy = function (fields, sorting, direction, textCase) {
	        if (sorting === void 0) { sorting = true; }
	        if (direction === void 0) { direction = Types.SortDirection.ASCENDING; }
	        if (textCase === void 0) { textCase = Types.SortCase.SENSITIVE; }
	        if ((!fields || fields.length < 1) && !this._groupedProvider.grouped) {
	            return;
	        }
	        if (!this._groupedProvider.canGrouping(fields)) {
	            return;
	        }
	        this._groupSorting = sorting;
	        this._groupSortDirection = direction;
	        if (sorting) { // && fields && fields.length > 0) {
	            this._rs.orderBy(fields, [direction], [textCase], false);
	        }
	        this._groupedProvider.groupBy(fields);
	    };
	    GridItemProvider.prototype.groupByMode = function (fields, mergeMode) {
	        if (this._groupSorting) { // && fields && fields.length > 0) {
	            this._rs.orderBy(fields, [this._groupSortDirection], [this._groupSortCase], false);
	        }
	        if (!this._groupedProvider.canGrouping(fields)) {
	            return;
	        }
	        this._groupedProvider.groupByMode(fields, mergeMode);
	    };
	    GridItemProvider.prototype.addGroupBy = function (index, field) {
	        var fields;
	        var dirs = [this._groupSortDirection];
	        if (this._groupedProvider.groupCount < 1) {
	            fields = [field];
	        }
	        else {
	            fields = this._groupedProvider.groupedFields;
	            fields.splice(index, 0, field);
	        }
	        if (!this._groupedProvider.canGrouping(fields)) {
	            return;
	        }
	        if (this._groupSorting) {
	            this._rs.orderBy(fields, dirs, null, false);
	        }
	        this._groupedProvider.groupBy(fields);
	    };
	    GridItemProvider.prototype.removeGroupBy = function (field, includeLower) {
	        if (!this._groupedProvider.grouped) {
	            return;
	        }
	        var idx = -1;
	        var fields = this._groupedProvider.groupedFields;
	        var cnt = fields.length;
	        var rcnt = 0;
	        for (var i = cnt - 1; i >= 0; i--) {
	            rcnt++;
	            if (fields[i] == field) {
	                idx = i;
	                break;
	            }
	        }
	        if (idx >= 0) {
	            fields.splice(idx, includeLower ? rcnt : 1);
	            if (!this._groupedProvider.canGrouping(fields)) {
	                return;
	            }
	            if (this._groupSorting) {
	                this._rs.orderBy(fields, [this._groupSortDirection], null, false);
	            }
	            this._groupedProvider.groupBy(fields);
	        }
	        else {
	            if (!this._groupedProvider.canGrouping(null)) {
	                return;
	            }
	            if (this._groupSorting) {
	                this._rs.orderBy(null, null, null, false);
	            }
	        }
	    };
	    GridItemProvider.prototype.isGroupedField = function (field) {
	        return this._groupedProvider.isGroupedField(field);
	    };
	    GridItemProvider.prototype.getGroupLevel = function (field) {
	        return this._groupedProvider.getGroupLevel(field);
	    };
	    Object.defineProperty(GridItemProvider.prototype, "isGroupSorting", {
	        // setGroupedStyle(expandedAdornments, collapsedAdornments, createFooterCallback, handler) {
	        // 	this._groupedProvider._handler = handler;
	        // 	this._groupedProvider.setExpandedAdornments(expandedAdornments);
	        // 	this._groupedProvider.setCollapsedAdornments(collapsedAdornments);
	        // 	this._groupedProvider.setCreateFooterCallback(createFooterCallback);
	        // }
	        set: function (value) {
	            this._groupSorting = value;
	            this._groupedProvider["_groupSorting"] = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridItemProvider.prototype.expand = function (group, recursive, force, level) {
	        this._groupedProvider.expand(group, recursive, force, level);
	    };
	    GridItemProvider.prototype.collapse = function (group, recursive, force) {
	        this._groupedProvider.collapse(group, recursive, force);
	    };
	    GridItemProvider.prototype.setPaging = function (paging, pageSize, pageCount, pageSource) {
	        this._rs.setPaging(paging, pageSize, pageCount, pageSource);
	    };
	    Object.defineProperty(GridItemProvider.prototype, "page", {
	        get: function () {
	            return this._rs.page;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridItemProvider.prototype.setPage = function (value, startRow) {
	        this._rs.setPage(value, startRow);
	    };
	    Object.defineProperty(GridItemProvider.prototype, "pageCount", {
	        get: function () {
	            return this._rs.pageCount;
	        },
	        set: function (value) {
	            this._rs.pageCount = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridItemProvider.prototype.getDisplayItemIndex = function (item) {
	        return this._rs.isPaging ? item.index + this._rs.pageStartIndex : item.index;
	    };
	    GridItemProvider.prototype.getCheckedRows = function (allRows) {
	        return this._rs.getCheckedRows(allRows);
	    };
	    Object.defineProperty(GridItemProvider.prototype, "checkableExpression", {
	        set: function (expr) {
	            this._rs.checkableExpression = expr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridItemProvider.prototype.resetCheckables = function () {
	        this._rs.resetCheckables();
	    };
	    GridItemProvider.prototype.applyCheckables = function () {
	        this._rs.applyCheckables();
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridItemProvider.prototype.getAllItems = function () {
	        return this._groupedProvider.getAllItems();
	    };
	    // getPagingAllItems(): GridItem[] {
	    // 	let rs = this._itemProvider;
	    // 	return rs.isSorted ? rs._sortedItems.slice() : rs._items.slice();
	    // }
	    GridItemProvider.prototype.findItem = function (fields, values, options, startIndex, endIndex) {
	        return this._groupedProvider.findItem(fields, values, options, startIndex, endIndex);
	    };
	    GridItemProvider.prototype.findCell = function (fields, value, options, startIndex, endIndex, startFieldIndex) {
	        return this._groupedProvider.findCell(fields, value, options, startIndex, endIndex, startFieldIndex);
	    };
	    GridItemProvider.prototype.checkItems = function (items, checked, checkEvent) {
	        this._groupedProvider.checkItems(items, checked, checkEvent);
	    };
	    GridItemProvider.prototype.checkItem = function (item, checked, exclusive, checkEvent) {
	        this._groupedProvider.checkItem(item, checked, exclusive, checkEvent);
	    };
	    GridItemProvider.prototype.checkAll = function (checked, visibleOnly, checkableOnly, checkEvent, groupCheckable) {
	        this._groupedProvider.checkAll(checked, visibleOnly, checkableOnly, checkEvent, groupCheckable);
	    };
	    GridItemProvider.prototype.hasCellStyle = function () {
	        return this._rs.hasCellStyle();
	    };
	    GridItemProvider.prototype.setCellStyle = function (row, field, style) {
	        this._rs.setCellStyle(row, field, style);
	    };
	    GridItemProvider.prototype.setCellStyles = function (rs, rows, fieldMap) {
	        this._rs.setCellStyles(rs, rows, fieldMap);
	    };
	    GridItemProvider.prototype.clearCellStyles = function () {
	        this._rs.clearCellStyles();
	    };
	    GridItemProvider.prototype.removeCellStyle = function (style) {
	        this._rs.removeCellStyle(style);
	    };
	    GridItemProvider.prototype.getCellStyle = function (dataRow, field) {
	        return this._rs.getCellStyle(dataRow, field);
	    };
	    GridItemProvider.prototype.checkCellStyle = function (dataRow, field) {
	        return this._rs.checkCellStyle(dataRow, field);
	    };
	    GridItemProvider.prototype.setCellEditable = function (dataRow, column, value) {
	        this._rs.setCellEditable(dataRow, column, value);
	    };
	    GridItemProvider.prototype.setCellReadOnly = function (dataRow, column, value) {
	        this._rs.setCellReadOnly(dataRow, column, value);
	    };
	    GridItemProvider.prototype.getCellEditable = function (dataRow, column) {
	        return this._rs.getCellEditable(dataRow, column);
	    };
	    GridItemProvider.prototype.getCellReadOnly = function (dataRow, column) {
	        return this._rs.getCellReadOnly(dataRow, column);
	    };
	    GridItemProvider.prototype.setCellCursor = function (dataRow, column, value) {
	        this._rs.setCellCursor(dataRow, column, value);
	    };
	    GridItemProvider.prototype.getCellCursor = function (dataRow, column) {
	        return this._rs.getCellCursor(dataRow, column);
	    };
	    GridItemProvider.prototype.setCellEditor = function (dataRow, column, value) {
	        this._rs.setCellEditor(dataRow, column, value);
	    };
	    GridItemProvider.prototype.getCellEditor = function (dataRow, column) {
	        return this._rs.getCellEditor(dataRow, column);
	    };
	    GridItemProvider.prototype.clearEditableMap = function () {
	        return this._rs.clearEditableMap();
	    };
	    GridItemProvider.prototype.getItemOfRow = function (dataRow, force) {
	        if (force === void 0) { force = false; }
	        return this._rs.getItemOfRow(dataRow, force);
	    };
	    GridItemProvider.prototype._doBeginUpdate = function (item) {
	        var editItem = _super.prototype._doBeginUpdate.call(this, item);
	        this._groupedProvider["$_setEditItem"](editItem);
	        return editItem;
	    };
	    GridItemProvider.prototype._doBeginAppendDummy = function () {
	        var dummyEditItem = _super.prototype._doBeginAppendDummy.call(this);
	        this._groupedProvider["$_setDummyEditItem"](dummyEditItem);
	        return dummyEditItem;
	    };
	    GridItemProvider.prototype._doBeginAppend = function (defaultValues) {
	        var editItem = _super.prototype._doBeginAppend.call(this, defaultValues);
	        this._groupedProvider["$_setEditItem"](editItem);
	        return editItem;
	    };
	    GridItemProvider.prototype._doBeginInsert = function (item, defaultValues, shift, ctrl) {
	        var editItem = _super.prototype._doBeginInsert.call(this, item, defaultValues, shift, ctrl);
	        this._groupedProvider["$_setEditItem"](editItem);
	        return editItem;
	    };
	    GridItemProvider.prototype._doCancelDummyEdit = function () {
	        _super.prototype._doCancelDummyEdit.call(this);
	        this._groupedProvider["$_setDummyEditItem"](null);
	    };
	    GridItemProvider.prototype._doCancelEdit = function (state, orgItem) {
	        _super.prototype._doCancelEdit.call(this, state, orgItem);
	        this._groupedProvider["$_setEditItem"](null);
	    };
	    GridItemProvider.prototype._doCommitEdit = function (state, orgItem) {
	        if (_super.prototype._doCommitEdit.call(this, state, orgItem)) {
	            this._groupedProvider["$_setEditItem"](null);
	            return true;
	        }
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------	
	    GridItemProvider.prototype.onGroupedItemProviderGrouping = function (rs, fields) {
	        return this.fireConfirmEvent(GroupedItemProvider_1.GroupedItemProvider.GROUPING, fields);
	    };
	    GridItemProvider.prototype.onGroupedItemProviderGrouped = function (rs) {
	        this.fireEvent(GroupedItemProvider_1.GroupedItemProvider.GROUPED);
	    };
	    GridItemProvider.prototype.onGroupedItemProviderExpand = function (rs, group) {
	        this.fireEvent(GroupedItemProvider_1.GroupedItemProvider.EXPAND, group);
	    };
	    GridItemProvider.prototype.onGroupedItemProviderExpanded = function (rs, group) {
	        this.fireEvent(GroupedItemProvider_1.GroupedItemProvider.EXPANDED, group);
	    };
	    GridItemProvider.prototype.onGroupedItemProviderCollapse = function (rs, group) {
	        this.fireEvent(GroupedItemProvider_1.GroupedItemProvider.COLLAPSE, group);
	    };
	    GridItemProvider.prototype.onGroupedItemProviderCollapsed = function (rs, group) {
	        this.fireEvent(GroupedItemProvider_1.GroupedItemProvider.COLLAPSED, group);
	    };
	    GridItemProvider.prototype.onItemProviderFilterAdded = function (rs, field, criteria) {
	        this._fireFilterAdded(field, criteria);
	    };
	    GridItemProvider.prototype.onItemProviderFilterRemoved = function (rs, field, filter) {
	        this._fireFilterRemoved(field, filter);
	    };
	    GridItemProvider.prototype.onItemProviderFilterCleared = function (rs, field) {
	        this._fireFilterCleared(field);
	    };
	    GridItemProvider.prototype.onItemProviderFilterAllCleared = function (rs) {
	        this._fireFilterAllCleared();
	    };
	    GridItemProvider.prototype.onItemProviderFiltered = function (rs) {
	        //this.fireFiltered(filterCollection, filter);
	    };
	    GridItemProvider.prototype.onItemProviderSort = function (rs, fields, directions) {
	        this._fireSort(fields, directions, null);
	    };
	    GridItemProvider.prototype.onItemProviderSorted = function (rs) {
	        this._fireSorted();
	    };
	    return GridItemProvider;
	}(EditableItemProvider_1.EditableItemProviderImpl));
	exports.GridItemProvider = GridItemProvider;
	});

	unwrapExports(GridItemProvider_1);
	var GridItemProvider_2 = GridItemProvider_1.GridItemProvider;

	var EditRequests = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// EditRequests.ts
	// 2019. 10. 01. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var GridEditRequest = /** @class */ (function (_super) {
	    __extends(GridEditRequest, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridEditRequest(owner) {
	        var _this = _super.call(this) || this;
	        _this._grid = owner;
	        return _this;
	    }
	    GridEditRequest.prototype.dispose = function () {
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridEditRequest.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GridEditRequest;
	}(VisualTool_1.EditRequest));
	exports.GridEditRequest = GridEditRequest;
	var CellRequest = /** @class */ (function (_super) {
	    __extends(CellRequest, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellRequest(index) {
	        var _this = _super.call(this, index.grid) || this;
	        _this._index = index;
	        return _this;
	    }
	    CellRequest.prototype.dispose = function () {
	        this._index.dispose();
	        this._index = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellRequest.prototype, "index", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** index */
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CellRequest;
	}(GridEditRequest));
	exports.CellRequest = CellRequest;
	var SelectRequest = /** @class */ (function (_super) {
	    __extends(SelectRequest, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectRequest(index, style) {
	        var _this = _super.call(this, index) || this;
	        _this._style = style;
	        return _this;
	    }
	    SelectRequest.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SelectRequest.prototype, "style", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** style */
	        get: function () {
	            return this._style;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectRequest.prototype, "manager", {
	        /** manager */
	        get: function () {
	            return this.grid.selections;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SelectRequest;
	}(CellRequest));
	exports.SelectRequest = SelectRequest;
	});

	unwrapExports(EditRequests);
	var EditRequests_1 = EditRequests.GridEditRequest;
	var EditRequests_2 = EditRequests.CellRequest;
	var EditRequests_3 = EditRequests.SelectRequest;

	var GridTool_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridTool.ts
	// 2019. 08. 08. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });














	var GridDragTracker = /** @class */ (function (_super) {
	    __extends(GridDragTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridDragTracker(grid, name) {
	        var _this = _super.call(this, grid.container, name) || this;
	        _this._grid = grid;
	        return _this;
	    }
	    GridDragTracker.prototype.dispose = function () {
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridDragTracker.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridDragTracker.prototype, "startWhenCreated", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GridDragTracker;
	}(DragTracker_1.DragTracker));
	exports.GridDragTracker = GridDragTracker;
	var FocusView = /** @class */ (function (_super) {
	    __extends(FocusView, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FocusView() {
	        return _super.call(this, "focusView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FocusView.prototype._getCssSelector = function () {
	        return "rg-focus";
	    };
	    FocusView.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        this.setImportantStyle("pointer-events", "none");
	        this.setImportantStyle("background", "none");
	    };
	    return FocusView;
	}(VisualElement_1.LayerElement));
	exports.FocusView = FocusView;
	var FocusMask = /** @class */ (function (_super) {
	    __extends(FocusMask, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function FocusMask() {
	        var _this = _super.call(this, "focusMask") || this;
	        _this._focusView = new FocusView();
	        _this.addChild(_this._focusView);
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    FocusMask.prototype.updateElement = function (dx, dy, width, height) {
	        this._focusView.setBounds(dx, 0, width, height);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    FocusMask.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        this.setImportantStyle("pointer-events", "none");
	        this.setImportantStyle("background", "none");
	        this.setImportantStyle("border", "none");
	        this.setImportantStyle("overflow", "hidden");
	    };
	    return FocusMask;
	}(VisualElement_1.LayerElement));
	var GridTool = /** @class */ (function (_super) {
	    __extends(GridTool, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridTool(owner, name) {
	        var _this = _super.call(this, owner, name) || this;
	        _this._focusMask = new FocusMask();
	        _this._grid = owner.gridView;
	        _this._skipIndex = _this._grid.getIndex();
	        _this.grid.addFeedbackElement(_this._focusMask);
	        return _this;
	    }
	    GridTool.prototype.dispose = function () {
	        //this.grid.removeFeedbackElement(this._focusView);
	        this._focusMask = null;
	        this._grid = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridTool.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this._grid;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridTool.prototype, "focused", {
	        /** focused */
	        get: function () {
	            return this._grid.focusedIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridTool.prototype.setFocused = function (value, select) {
	        var grid = this._grid;
	        if (grid.isValid(value)) {
	            var item = grid.getItem(value.itemIndex);
	            // if (!grid.isEditing() && item instanceof DummyEditItem) {
	            // 	grid.append();
	            // }
	            return this._grid.setFocusedIndex(value, select, true);
	        }
	    };
	    GridTool.prototype.layoutChanged = function () {
	        this.$_resetFocusedView();
	        this._doLayoutChanged();
	    };
	    GridTool.prototype.resetFocused = function () {
	        this.$_resetFocusedView();
	    };
	    GridTool.prototype.focusedIndexChanging = function (newIndex) {
	    };
	    GridTool.prototype.focusedIndexChanged = function (oldIndex, newIndex) {
	        this.$_resetFocusedView();
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridTool.prototype.isMouseEventTarget = function (elt) {
	        if (elt instanceof CellElement_1.CellElement) {
	            var table = elt.getAncestor(TableBaseElement_1.TableBaseElement);
	            if (table) {
	                var dom = table["getContentAt"](elt.index);
	                return dom == this.mouseEventTarget;
	            }
	        }
	        return _super.prototype.isMouseEventTarget.call(this, elt);
	    };
	    GridTool.prototype._doSetFocus = function () {
	        this.grid.editController.setFocus(true);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridTool.prototype._findTableCell = function (source) {
	        var elt = source || this.mouseEventTarget;
	        while (elt && !(elt instanceof HTMLTableCellElement)) {
	            elt = elt.parentElement;
	        }
	        if (elt instanceof HTMLTableCellElement) {
	            if (this.grid.getTableView(elt)) {
	                return elt;
	            }
	        }
	        return null;
	    };
	    GridTool.prototype._doLayoutChanged = function () {
	    };
	    GridTool.prototype.$_resetFocusedView = function () {
	        var grid = this._grid;
	        var lm = grid.layoutManager;
	        var options = grid.displayOptions;
	        var showInnerFocus = options.showInnerFocus;
	        var index = grid.focusedIndex;
	        var vis = false;
	        if (options.focusVisible && grid.isValid(index)) {
	            var cell = grid.getFocusedCellView(index);
	            if (cell) {
	                var bodyView = grid.getBodyView(cell);
	                var r = bodyView.getCellRect(cell);
	                r = bodyView.boundsByContainer(r);
	                // const fixed = lm.fixedColCount;
	                // const editing = grid.isEditing();
	                // const r = cell.boundsBy(grid);
	                // if (cell instanceof RowGroupFooterElement) {
	                // 	var r2 = lm._rowGroupBounds;
	                // 	var aw = r2.x + cell._level * grid.rowGroup().levelIndent();
	                // 	r.setLeft(aw);
	                // 	r.width = r2.width - grid.leftPos() - cell._level * grid.rowGroup().levelIndent();
	                // }
	                // if (cell instanceof MergedFooterElement) {
	                // 	// 해당 컬럼의 right
	                // 	var c = cell._level - 1;
	                // 	var x = lm.getColumnBounds(c).right() + lm.fixedBounds().x;
	                // 	var fixedWidth = lm.fixedWidth();
	                // 	var leftPos = grid.leftPos();
	                // 	var er = lm._editBarBounds;
	                // 	if (fixed > 0) {
	                // 		if (c >= fixed) {
	                // 			x = Math.max(x + fixedWidth - leftPos , fixedWidth+lm.fixedBounds().x);
	                // 		} else if (c == fixed - 1) {
	                // 			x = fixedWidth + lm.fixedBounds().x;
	                // 		}
	                // 	} else if (fixed == 0) {
	                // 		x -= leftPos;
	                // 	}
	                // 	r.x = x;
	                // 	r.width = er.width + er.x - x ;
	                // }
	                if (r.width > 0 && r.height > 0) {
	                    // if (grid._container.$_rich) {
	                    // 	r.x++;
	                    // 	r.y++;
	                    // }
	                    var dx = 0;
	                    var w = r.width;
	                    if (!index.colFixed && !index.rightFixed) {
	                        var tr = lm.fixedContentBounds;
	                        dx = Math.max(0, tr.right - r.x);
	                        w = Math.max(0, r.width - dx);
	                        tr = lm.rightContentBounds;
	                        var dw = r.right - tr.x;
	                        w -= dw;
	                    }
	                    if (w > 0) {
	                        this._focusMask.updateElement(-dx, 0, r.width, r.height);
	                        var tr = lm.footerBounds;
	                        var dy = Math.max(0, r.bottom - tr.y);
	                        r.width = w;
	                        r.x += dx;
	                        r.height = Math.max(0, r.height - dy);
	                        this._focusMask.setRect(r);
	                        vis = true;
	                    }
	                    // if (cell instanceof MergedDataCellElement) {
	                    // 	if (!this._innerFocusView) {
	                    // 		this._innerFocusView = new InnerFocusView(grid._dom, grid.displayOptions());
	                    // 		grid.addFocusElement(this._innerFocusView);
	                    // 	}
	                    // 	var r1 = lm.itemBounds(cell._topIndex);
	                    // 	var r2 = lm.itemBounds(index.I() - grid.topIndex());
	                    // 	cell.setInnerIndex(index.I() - cell.mergeRoom().headItem());
	                    // 	r.y += r2.y - r1.y;
	                    // 	r.height = r2.height;
	                    // 	if (!editing) {
	                    // 		r.x += 2;
	                    // 		r.y += 2;
	                    // 		r.width -= 5;
	                    // 		r.height -= 5;
	                    // 	}
	                    // 	if (showInnerFocus && this._innerFocusView) {
	                    // 		this._innerFocusView.setRect(r);
	                    // 		this._innerFocusView.setEditing(editing, cell.getButtonWidth ? cell.getButtonWidth() : 0, cell._isLeftImageButton);
	                    // 		inner = true;
	                    // 	}
	                    // }
	                    // if (inner) {
	                    // 	this._focusView.setEditing(false, 0);
	                    // } else {
	                    // 	this._focusView.setEditing(editing, cell.getButtonWidth ? cell.getButtonWidth() : 0, cell._isLeftImageButton);
	                    // }
	                }
	            }
	        }
	        // if (lm._gridBounds && options.isRowFocusVisible() && grid.isValid(index)) {
	        // 	var idx = index.I();
	        // 	var t = grid.topIndex();
	        // 	var fixed = lm.fixedItemCount();
	        // 	var itemCount = lm.itemCount();
	        // 	var fr;
	        // 	if (rowVis = idx < fixed || (idx >= t && idx <= t+itemCount)) {
	        // 		var y = fixed > 0 ? lm.fixedHeight() + grid.fixedOptions().rowBarHeight() : 0;
	        // 		var gr = lm.gridBounds(); 
	        // 		if (idx < fixed) {
	        // 			fr = lm.itemBounds(Math.max(0, idx));
	        // 		} else {
	        // 			fr = lm.itemBounds(Math.max(0, idx - t));
	        // 			fr.y = Math.max(fr.y, y);
	        // 		}
	        // 		fr.y += gr.y;
	        // 		fr.x = 0;
	        // 		fr.width = gr.x+gr.width;
	        // 		grid._container.$_rich && (fr.x++, fr.y++);
	        // 		this._rowFocusView.setRect(fr)
	        // 	}
	        // }
	        this._focusMask.visible = vis;
	        // this._rowFocusView.setVisible(rowVis);
	        // this._innerFocusView && this._innerFocusView.setVisible(inner);
	        if (this._focusMask.visible) ;
	        // if (this._rowFocusView.isVisible()) {
	        // 	grid._resetRowFocusMask();
	        // }
	        // if (options._rowHoverMask.isVisible()) {
	        // 	var hView = this._rowHoverView;
	        // 	if (hView && this._rowFocusView.isVisible() && (!hView.$_hoverRow || hView.$_hoverRow.itemIndex() == index.I())){
	        // 		hView.setVisible(false);
	        // 	} else {
	        // 		this._resetRowHoverView();
	        // 	} 
	        // }
	    };
	    GridTool.prototype._doCancel = function (grid) {
	        grid.closeFilterSelector();
	        if (grid.isEditing()) {
	            grid.cancelEditor(true);
	        }
	        else {
	            if (grid.itemEditCancel()) {
	                grid.cancel();
	            }
	        }
	    };
	    GridTool.prototype._doEnter = function (grid, options, focused) {
	        var editing = grid.isEditing();
	        if (editing && !options.enterToTab) {
	            grid.commitEditor(true);
	        }
	        else {
	            var index = focused.clone();
	            var skip = options.skipReadOnly;
	            var skipCell = options.skipReadOnlyCell;
	            if (!grid.isValid(index)) {
	                index.normalize(grid);
	            }
	            else if (options.enterToNextRow && index.itemIndex < grid.itemCount - 1) {
	                index.down();
	                if (skipCell && this._checkReadOnly(index)) {
	                    if (!this._skipReadOnlyCell(index, 1)) {
	                        index.assign(focused);
	                    }
	                }
	            }
	            else if ((!editing || options.enterToTab) && options.crossWhenExitLast && (index.isLast || options.skipReadOnly && index.isEditableLast()) && index.itemIndex < grid.itemCount - 1) {
	                index.down();
	                index.home();
	                skip && this.$_skipReadOnly(index, 1);
	            }
	            else if ((!editing || options.enterToTab) && options.commitWhenExitLast && index.isLast) {
	                try {
	                    grid.commit(options.commitWhenNoEdit);
	                }
	                catch (err) {
	                    if (err instanceof Validation.ValidationError) {
	                        err = grid["_fireValidationFail"](index.item.index, err.column, err);
	                        err ? alert(options.showOnlyValidationMessage && err.userMessage ? err.userMessage : err.toString()) : null;
	                    }
	                    throw err;
	                }
	                if (options.appendWhenExitLast) {
	                    grid.append();
	                    if (grid.isItemEditing()) {
	                        index.down();
	                        index.home();
	                    }
	                }
	            }
	            else if (options.enterToTab && (grid.isEditing() || this._checkReadOnly(index))) {
	                if (grid.isEditing()) {
	                    grid.commitEditor(true);
	                }
	                index.next();
	                if (skip && !this.$_skipReadOnly(index, 1)) {
	                    index.assign(focused);
	                }
	            }
	            else if (!options.enterToEdit) {
	                index.next();
	                if (skip && !this.$_skipReadOnly(index, 1)) {
	                    index.assign(focused);
	                }
	            }
	            if (!CellIndex_1.CellIndex.areEquals(index, focused)) {
	                this.setFocused(index, true);
	            }
	            else if (grid.isValid(index) && options.enterToEdit) {
	                if (!grid.isEditing() && focused && focused.dataColumn && !this._checkReadOnly(focused)) {
	                    grid.showEditor(focused);
	                }
	            }
	        }
	        return true;
	    };
	    GridTool.prototype._checkReadOnly = function (index) {
	        var grid = this.grid;
	        if (!grid.isValid(index)) {
	            return true;
	        }
	        var column = index.dataColumn;
	        var readOnly = false; //grid.getCellWritable(index);
	        {
	            return !readOnly;
	        }
	        // const row = ItemState.isInserting(index.item().itemState()) ? -1 : index.dataRow();
	        // const style = _cast(grid.itemSource().getCellStyle(row, index.dataField()), DataCellStyle);
	        // if (style) {
	        // 	editable = style.isEditable();
	        // 	readOnly = style.isReadOnly();
	        // 	if (editable != null || readOnly != null) {
	        // 		return !((editable == null || editable) && !readOnly);
	        // 	}
	        // }
	        return !column.isWritable();
	    };
	    GridTool.prototype.checkReadOnly = function (index) {
	        return this._checkReadOnly(index);
	    };
	    GridTool.prototype.$_skipReadOnly = function (index, dx) {
	        var grid = this.grid;
	        var moved = false;
	        if (grid.editOptions.skipReadOnly) {
	            var idx = this._skipIndex;
	            idx.assign(index);
	            moved = !this._checkReadOnly(idx);
	            if (!moved) {
	                if (dx > 0) {
	                    while (idx.next()) {
	                        if (!this._checkReadOnly(idx)) {
	                            index.assign(idx);
	                            moved = true;
	                            break;
	                        }
	                    }
	                }
	                else {
	                    while (idx.prev()) {
	                        if (!this._checkReadOnly(idx)) {
	                            index.assign(idx);
	                            moved = true;
	                            break;
	                        }
	                    }
	                }
	            }
	        }
	        return moved;
	    };
	    GridTool.prototype.skipReadOnly = function (index, dx) {
	        return this.$_skipReadOnly(index, dx);
	    };
	    GridTool.prototype._skipReadOnlyCell = function (index, dx, limit) {
	        var grid = this.grid;
	        var col = index.dataColumn;
	        var hasVertical = false; //col.checkGroupExist(ColumnGroupOrientation.VERTICAL);
	        var moved = !col.isWritable() && !hasVertical;
	        if (!moved && grid.editOptions.skipReadOnlyCell) {
	            var idx = this._skipIndex;
	            idx.assign(index);
	            moved = !this._checkReadOnly(idx);
	            // if (!moved) {
	            // 	if (dx > 0) {
	            // 		while (idx.lower(grid.isItemEditing(idx.item))) {
	            // 			if (idx.itemIndex == -1 || !this.$_checkReadOnly(idx)) {
	            // 				index.assign(idx);
	            // 				moved = true;
	            // 				break;
	            // 			}
	            // 			if (CellIndex.areEquals(idx, limit)) {
	            // 				moved = false;
	            // 				break;
	            // 			}
	            // 		}
	            // 	} else {
	            // 		while (idx.upper(grid.isItemEditing(idx.item))) {
	            // 			if (idx.itemIndex == -1 || !this.$_checkReadOnly(idx)) {
	            // 				index.assign(idx);
	            // 				moved = true;
	            // 				break;
	            // 			}
	            // 			if (CellIndex.areEquals(idx, limit)) {
	            // 				moved = false;
	            // 				break;
	            // 			}
	            // 		}
	            // 	}
	            // }
	        }
	        return moved;
	    };
	    GridTool.prototype._commitCancel = function (item, options) {
	        var grid = this.grid;
	        try {
	            switch (item.itemState) {
	                case GridItem_1.ItemState.INSERTING:
	                    if (!grid.commit(options.forceInsert)) {
	                        grid.cancel(true);
	                    }
	                    return true;
	                case GridItem_1.ItemState.APPENDING:
	                    if (!grid.commit(options.forceAppend)) {
	                        grid.cancel(true);
	                    }
	                    return true;
	                case GridItem_1.ItemState.UPDATING:
	                    if (!grid.commit(options.commitWhenNoEdit)) {
	                        grid.cancel(true);
	                    }
	                    return true;
	            }
	        }
	        catch (err) {
	            if (err instanceof Validation.ValidationError) {
	                err = grid._fireValidationFail(item.index, err.column, err);
	                err ? alert(options.showOnlyValidationMessage && err.userMessage ? err.userMessage : err.toString()) : null;
	                return false;
	            }
	            if (err instanceof Validation.AbortError) {
	                return false;
	            }
	            throw err;
	        }
	        return false;
	    };
	    return GridTool;
	}(VisualTool_1.VisualTool));
	exports.GridTool = GridTool;
	var RowHoverView = /** @class */ (function (_super) {
	    __extends(RowHoverView, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowHoverView() {
	        var _this = _super.call(this, "rowHoverView") || this;
	        _this.visible = false;
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowHoverView.prototype._getCssSelector = function () {
	        return "rg-rowhover";
	    };
	    RowHoverView.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        this.setImportantStyle("pointer-events", "none");
	    };
	    return RowHoverView;
	}(VisualElement_1.LayerElement));
	exports.RowHoverView = RowHoverView;
	var GridSelectionTool = /** @class */ (function (_super) {
	    __extends(GridSelectionTool, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridSelectionTool(owner, name) {
	        var _this = _super.call(this, owner, name) || this;
	        _this._rowHoverView = new RowHoverView();
	        _this.grid.addFeedbackElement(_this._rowHoverView);
	        return _this;
	    }
	    GridSelectionTool.prototype.dispose = function () {
	        this._clickCell = null;
	        this._clickElement = null;
	        //this.grid.removeFeedbackElement(this._rowHoverView);
	        this._rowHoverView = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridSelectionTool.prototype._doMouseDown = function (x, y, ctrl, shift, button) {
	        var grid = this.grid;
	        //this._hideTooltip();
	        grid.closePopups();
	        //grid._buttonClicked = false;		
	        //this._scrollTool.stop();
	        var clickCell = this._clickCell = null;
	        var clickElement = this._clickElement = null;
	        if (button == 0 || grid.displayOptions.rightClickable) {
	            clickCell = this._clickCell = this._findTableCell();
	            clickElement = this._clickElement = this.findElementAt(x, y, false);
	            if (clickCell != null) {
	                var request = this._getEditRequest(this.mouseEventTarget, x, y, ctrl, shift);
	                var view = grid.getTableView(clickCell);
	                if (view instanceof GridBodyElement_1.GridBodyElement) {
	                    var idx = grid.getCellIndex(clickCell);
	                    console.log("(" + clickCell.parentElement["$_row"] + ", " + grid.columnByHash(clickCell["$_col"]) + ") cell clicked at " + clickCell.parentElement["$_idx"]);
	                    grid.setFocusedIndex(idx, true);
	                }
	                if (button == 0) {
	                    var tracker = this._getDragTracker(request, x, y);
	                    this.dragTracker = tracker;
	                }
	            }
	        }
	        //this._clickHandle = null;
	        //this._rightClicked = button > 1 ? true : false;
	        // if (button == 0 || grid.displayOptions().isRightClickable()) {
	        //     clickElement = this._clickElement = this.findElementAt(x, y, false);
	        //     if (this._scrollTool.start(clickElement, x, y)) return;
	        //     this._clickHandle = _cast(clickElement, HandleElement);
	        //     clickCell = this._clickCell = _cast(clickElement, CellElement);
	        //     this._clickPos.set(x, y);
	        //     if (this._clickHandle) {
	        //         if (this._clickHandle.isClickable()) {
	        //             this.$_handleClicked(this._clickHandle);
	        //             return;
	        //         }
	        //     }
	        // }
	        // if (clickCell instanceof DataCellElement && this.$_checkAppending(grid.focusedIndex(), true, clickCell)) {
	        // 	this._clickElement = null;
	        // 	this._clickCell = null;
	        // 	return;
	        // }
	    };
	    /** 그리드 밖에서도 호출된다. */
	    GridSelectionTool.prototype._doMouseUp = function (x, y) {
	        var elt = this.findElementAt(x, y, false);
	        //console.log("MOUSE UP: " + elt);
	    };
	    /** 그리드 밖에서 마우스를 놓으면 호출되지 않는다. */
	    GridSelectionTool.prototype._doClick = function (x, y, ctrl, shift, button) {
	        var grid = this.grid;
	        var elt = this.findElementAt(x, y, false);
	        var cell = this._findTableCell();
	        //console.log("CLICK: " + elt);
	        // if (elt == this._clickElement) {
	        //     if (elt instanceof CheckBarCellElement && this.isMouseEventTarget(elt)) {
	        //         this._checkCellClicked(elt, shift);
	        //     }
	        // }
	        if (cell = this._clickCell) {
	            if (this.grid.getCellType(cell) == Types.TableCellType.CHECK) {
	                this._checkCellClicked2(cell, shift);
	            }
	            else {
	                var renderer = CellRenderers.DataCellRenderer.getRendererStyle(cell);
	                if (renderer === CellRenderers.LinkCellRenderer.STYLE) {
	                    var cb = grid.linkCellClickedCallback;
	                    if (cb) {
	                        var index = grid.getCellIndex(cell);
	                        cb.call(grid, grid, index);
	                    }
	                }
	            }
	        }
	    };
	    GridSelectionTool.prototype._doDblClick = function (x, y) {
	        var grid = this.grid;
	        var index = this.focused;
	        var cell = this._findTableCell();
	        var elt = this.findElementAt(x, y, false);
	        //console.log("DOUBLE CLICK: " + elt);
	        if (cell == this._clickCell) {
	            console.log("DOUBLE CLICK CELL: " + cell);
	            var cellType = grid.getCellType(cell);
	            if (cellType == Types.TableCellType.DATA) {
	                var clickIndex = grid.getCellIndex(cell);
	                if (CellIndex_1.CellIndex.areEquals(clickIndex, index)) {
	                    grid.showEditor(clickIndex);
	                }
	            }
	        }
	    };
	    GridSelectionTool.prototype._doMouseWheel = function (event) {
	        var grid = this.grid;
	        var options = grid.displayOptions;
	        if (options.wheelEnabled) {
	            var isHorz = event.shiftKey || (Utils_1.Utils.isChrome && event["wheelDeltaX"]) || (Utils_1.Utils.isFirefox && event["axis"] == 1) || (Utils_1.Utils.isOpera && event["wheelDeltaX"]);
	            isHorz = isHorz && options.wheelScrollHorz !== 0;
	            if (isHorz) ;
	            else {
	                var top_1 = grid.topIndex;
	                // const curScroll = Date.now();
	                var wheelScrollLines = Math.abs(options.wheelScrollLines);
	                wheelScrollLines = !!wheelScrollLines ? wheelScrollLines : 3;
	                if (options.wheelAccelDelay > 0) ;
	                // this._prevScroll = curScroll;
	                grid.topIndex = grid.topIndex + (event["wheelDelta"] > 0 ? -wheelScrollLines : wheelScrollLines);
	                //grid.topIndex = grid.topIndex - event["wheelDelta"];
	                return !options.wheelEventPropagate || (top_1 != grid.topIndex);
	            }
	        }
	        return false;
	    };
	    GridSelectionTool.prototype._doKeyDown = function (key, ctrl, shift, alt, event) {
	        var grid = this.grid;
	        var options = grid.editOptions;
	        var lm = grid.layoutManager;
	        var skip = options.skipReadOnly;
	        var skipCell = options.skipReadOnlyCell;
	        var focused = grid.focusedIndex;
	        var index = focused.clone();
	        //const verticalStep = options.verticalMovingStep
	        var isMac = Utils_1.Utils.isMac;
	        if (key == Types.Keys.ESCAPE) {
	            grid.closePopups();
	            this._doCancel(grid);
	        }
	        else if (key == Types.Keys.ENTER) {
	            return this._doEnter(grid, options, index);
	        }
	        else if (key == Types.Keys.INSERT) {
	            if (options.appendWhenInsertKey || grid.itemCount == 0) {
	                grid.append();
	            }
	            else {
	                grid.insert(index.item, shift, ctrl);
	            }
	        }
	        else if (Utils_1.Utils.included(key, Types.Keys.HOME, Types.Keys.END, Types.Keys.RIGHT, Types.Keys.LEFT, Types.Keys.DOWN, Types.Keys.UP, Types.Keys.PAGEDOWN, Types.Keys.PAGEUP)) {
	            var itemCount = grid.itemCount;
	            if (key == Types.Keys.DOWN && itemCount == 0) {
	                grid.append();
	                return;
	            }
	            switch (key) {
	                case Types.Keys.LEFT:
	                    if (!index.column) {
	                        index.column = grid.getVisibleColumn(0);
	                    }
	                    else if (index.column.displayIndex > 0) {
	                        index.column = grid.getVisibleColumn(index.column.displayIndex - 1);
	                    }
	                    break;
	                case Types.Keys.HOME:
	                    index.column = grid.getVisibleColumn(0);
	                    break;
	                case Types.Keys.RIGHT:
	                    if (!index.column) {
	                        index.column = grid.getVisibleColumn(0);
	                    }
	                    else if (index.column.displayIndex < grid.visibleColumnCount - 1) {
	                        index.column = grid.getVisibleColumn(index.column.displayIndex + 1);
	                    }
	                    break;
	                case Types.Keys.END:
	                    index.column = grid.getVisibleColumn(grid.visibleColumnCount - 1);
	                    break;
	                case Types.Keys.UP:
	                    if (index.itemIndex < 0) {
	                        index.itemIndex = 0;
	                    }
	                    else if (index.itemIndex > 0) {
	                        index.itemIndex--;
	                    }
	                    break;
	                case Types.Keys.PAGEUP:
	                    if (index.itemIndex < 0) {
	                        index.itemIndex = 0;
	                    }
	                    else if (index.itemIndex > 0) {
	                        index.itemIndex -= lm.fullItemCount;
	                    }
	                    break;
	                case Types.Keys.DOWN:
	                    try {
	                        if (index.itemIndex == itemCount - 1 && (index.isBottom)) { // || verticalStep == VerticalMovingStep.ROW)) {
	                            if (index.isBottom) {
	                                if (this._commitCancel(index.item, options))
	                                    return true;
	                            }
	                            grid.append();
	                            //appending = true;
	                            if (ctrl && isMac) {
	                                index.last();
	                            }
	                            else {
	                                index.down(grid.isItemEditing(index.item));
	                            }
	                        }
	                        else {
	                            if (ctrl && isMac) {
	                                index.last();
	                            }
	                            else if (ctrl) {
	                                grid.topIndex = grid.topIndex + 1;
	                                return true;
	                            }
	                            else {
	                                index.down(grid.isItemEditing(index.item));
	                            }
	                        }
	                    }
	                    finally {
	                        if (skipCell && this._checkReadOnly(index)) {
	                            if (!this._skipReadOnlyCell(index, 1)) {
	                                index.assign(focused);
	                            }
	                        }
	                    }
	                    break;
	                case Types.Keys.PAGEDOWN:
	                    if (index.itemIndex < 0) {
	                        index.itemIndex = 0;
	                    }
	                    else if (index.itemIndex < grid.itemCount - 1) {
	                        index.itemIndex += lm.fullItemCount;
	                    }
	                    break;
	            }
	            grid.setFocusedIndex(index, true, true);
	            return true;
	        }
	        return _super.prototype._doKeyDown.call(this, key, ctrl, shift, alt, event);
	    };
	    GridSelectionTool.prototype._doKeyPress = function (key) {
	        //this.grid._fireKeyPress(key);
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridSelectionTool.prototype._getEditRequest = function (source, x, y, ctrl, shift) {
	        var grid = this.grid;
	        var options = grid.displayOptions;
	        var mode = options.selectionMode;
	        var style = options.selectionStyle;
	        var cell = this._findTableCell(source);
	        if (cell instanceof HTMLTableCellElement) {
	            var cellType = grid.getCellType(cell);
	            if (cellType == Types.TableCellType.INDICATOR) {
	                if (grid.rowIndicator.selectable && mode != Selections.SelectionMode.NONE && style != Selections.SelectionStyle.NONE && !Selections.isSingleSelectionStyle(style)) {
	                    return new EditRequests.SelectRequest(grid.getIndex(grid.rowIndicatorView.getCellIndex(cell)), Selections.SelectionStyle.ROWS);
	                }
	            }
	            else if (cellType == Types.TableCellType.HEADER) {
	                if (ctrl) {
	                    if (grid.rowIndicator.selectable && mode != Selections.SelectionMode.NONE && style != Selections.SelectionStyle.NONE && !Selections.isSingleSelectionStyle(style)) {
	                        return new EditRequests.SelectRequest(grid.getIndex(-1, grid.headerView.getCellColumn(cell)), Selections.SelectionStyle.COLUMNS);
	                    }
	                }
	            }
	            else if (cellType == Types.TableCellType.DATA) {
	                if (mode != Selections.SelectionMode.NONE && style != Selections.SelectionStyle.NONE && !Selections.isSingleSelectionStyle(style)) {
	                    var idx = grid.getCellIndex(cell);
	                    if (grid.selections.count > 0 && shift) {
	                        return new EditRequests.SelectRequest(idx, grid.selections.itemStyle);
	                    }
	                    return new EditRequests.SelectRequest(idx, style);
	                }
	                this.grid.displayOptions.selectionStyle;
	            }
	        }
	        return null;
	    };
	    GridSelectionTool.prototype._getDragTracker = function (request, x, y) {
	        if (request instanceof EditRequests.SelectRequest) {
	            switch (request.style) {
	                case Selections.SelectionStyle.ROWS:
	                    return new RowsSelectTracker(request, x, y);
	                case Selections.SelectionStyle.COLUMNS:
	                    return new ColumnsSelectTracker(request, x, y);
	                case Selections.SelectionStyle.BLOCK:
	                    return new BlockSelectTracker(request, x, y);
	            }
	        }
	        return null;
	    };
	    // protected _checkCellClicked(cell: CheckBarCellElement, shift: boolean): void {
	    //     //console.log("CLICK CHECKBOX: " + cell);
	    //     const grid = this.grid;
	    //     if (grid.editOptions.checkable) {
	    //         const bar = grid.checkBar;
	    //         const item = cell.item;
	    //         if (item.checkable && (bar.showGroup || item.dataRow >= 0)) {
	    //             const box = cell["_cellDom"] as HTMLInputElement;
	    //             //grid.makeItemVisible(item.index);
	    //             grid.itemSource.checkItem(item, box.checked, bar.exclusive, true);
	    //         }
	    //     }
	    // }
	    GridSelectionTool.prototype._checkCellClicked2 = function (cell, shift) {
	        //console.log("CLICK CHECKBOX: " + cell);
	        var grid = this.grid;
	        if (grid.editOptions.checkable) {
	            var bar = grid.checkBar;
	            var item = grid.getItem(cell.parentElement["$_row"]);
	            if (item.checkable && (bar.showGroup || item.dataRow >= 0)) {
	                var box = grid.checkBarView.getCheckBox(cell);
	                if (box) {
	                    //grid.makeItemVisible(item.index);
	                    grid.itemSource.checkItem(item, box.checked, bar.exclusive, true);
	                }
	            }
	        }
	    };
	    return GridSelectionTool;
	}(GridTool));
	exports.GridSelectionTool = GridSelectionTool;
	var SelectTracker = /** @class */ (function (_super) {
	    __extends(SelectTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SelectTracker(request, name, x, y) {
	        var _this = _super.call(this, request.index.grid, name) || this;
	        _this._request = request;
	        _this._currX = x;
	        _this._currY = y;
	        return _this;
	    }
	    SelectTracker.prototype.dispose = function () {
	        this._request.dispose();
	        this._request = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(SelectTracker.prototype, "startWhenCreated", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            // if (this._request.cell() instanceof GroupFooterCellElement ||
	            // 	this._request.cell() instanceof RowGroupHeaderCellElement) {
	            // 	return false;
	            // } else {
	            // 	return true;
	            // }
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectTracker.prototype._doEnded = function () {
	        var item = this._getItem();
	    };
	    return SelectTracker;
	}(GridDragTracker));
	exports.SelectTracker = SelectTracker;
	var BlockSelectTracker = /** @class */ (function (_super) {
	    __extends(BlockSelectTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function BlockSelectTracker(request, x, y) {
	        var _this = _super.call(this, request, "blockSelectTracker", x, y) || this;
	        _this._timer = null;
	        _this._rowPrevLoop = 0;
	        _this._rowLoop = 0;
	        _this._colPrevLoop = 0;
	        _this._colLoop = 0;
	        _this._interval = 0;
	        return _this;
	    }
	    BlockSelectTracker.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    BlockSelectTracker.prototype._getItem = function () {
	        return this._item;
	    };
	    BlockSelectTracker.prototype._doStart = function (eventTarget, x, y, shift) {
	        var grid = this.grid;
	        var manager = grid.selections;
	        var lm = grid.layoutManager;
	        var idx = this._request.index;
	        if (lm.isMergedCell(idx)) {
	            idx = grid.pointToIndex(x, y, true);
	        }
	        manager.itemStyle = Selections.SelectionStyle.BLOCK;
	        if (shift) {
	            this._item = manager.count > 0 && manager.getItem(0);
	        }
	        else {
	            manager.clear();
	            this._item = manager.add(idx, idx, Selections.SelectionStyle.BLOCK);
	        }
	        return Boolean(this._item);
	    };
	    BlockSelectTracker.prototype._doDrag = function (eventTarget, x, y) {
	        if (this._item) {
	            var grid = this.grid;
	            var lm = grid.layoutManager;
	            this._currX = x; // = grid.containerToGridX(x);
	            this._currY = y; // = grid.containerToGridY(y);
	            if (y > lm.footerBounds.y || y < lm.gridBounds.y || x < lm.gridBounds.x || x > lm.clientRect.right) {
	                this.$_startTimer();
	            }
	            else {
	                this.$_stopTimer();
	                var index = this.grid.pointToIndex(x, y, true);
	                if (index.column && index.itemIndex >= 0) {
	                    this._item.resizeTo(index);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    BlockSelectTracker.prototype._doEnded = function () {
	        this.$_stopTimer();
	        _super.prototype._doEnded.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    BlockSelectTracker.prototype.$_startTimer = function () {
	        if (!this._timer) {
	            this._rowLoop = this._rowPrevLoop = this._colLoop = this._colPrevLoop = 0;
	            this._timer = setInterval(this.$_timerHandler.bind(this), 30);
	            this._grid.selections.lock();
	        }
	    };
	    BlockSelectTracker.prototype.$_stopTimer = function () {
	        if (this._timer) {
	            clearInterval(this._timer);
	            this._timer = null;
	            this._grid.selections.unlock();
	        }
	    };
	    BlockSelectTracker.prototype.$_timerHandler = function () {
	        var grid = this._grid;
	        var x = this._currX;
	        var y = this._currY;
	        var lm = grid.layoutManager;
	        var cx = 0;
	        var cy = 0;
	        if (y > lm.footerBounds.y) {
	            cy = Math.max(0, Math.min(3, (y - lm.footerBounds.y) / 40));
	            this._interval = 4 - cy;
	            this._rowLoop++;
	        }
	        else if (y < lm.gridBounds.y) {
	            cy = Math.max(0, Math.min(3, (lm.gridBounds.y - y) / 40));
	            this._interval = 4 - cy;
	            this._rowLoop++;
	        }
	        if (x > lm.clientRect.right) {
	            cx = Math.max(0, Math.min(3, (x - lm.clientRect.right) / 40));
	            this._interval = 4 - cx;
	            this._colLoop++;
	        }
	        else if (x < lm.gridBounds.x) {
	            cx = Math.max(0, Math.min(3, (lm.gridBounds.x - x) / 40));
	            this._interval = 4 - cx;
	            this._colLoop++;
	        }
	        var scrolled = false;
	        var cnt = Math.max(cx, cy);
	        if (cnt > 0) {
	            this._interval = 4 - Math.max(cx, cy);
	        }
	        if (this._rowLoop - this._rowPrevLoop >= this._interval) {
	            this._rowPrevLoop = this._rowLoop;
	            if (y > lm.footerBounds.y) {
	                if (grid.topItem + lm.fullItemCount < grid.itemCount) {
	                    grid.topIndex = grid.topIndex + 1;
	                    scrolled = true;
	                }
	            }
	            else if (y < lm.gridBounds.y) {
	                if (grid.topItem > lm.fixedItemCount) {
	                    grid.topIndex = grid.topIndex - 1;
	                    scrolled = true;
	                }
	            }
	        }
	        if (!scrolled) {
	            if (this._colLoop - this._colPrevLoop >= this._interval * 2) {
	                this._colPrevLoop = this._colLoop;
	                if (x > lm.clientRect.right) {
	                    grid.leftCol = grid.leftCol + 1;
	                    scrolled = true;
	                }
	                else if (x < lm.gridBounds.left && grid.leftPos > 0) {
	                    grid.leftCol = grid.leftCol - 1;
	                    scrolled = true;
	                }
	            }
	        }
	        if (scrolled) {
	            var index = grid.pointToIndex(x, y, false);
	            if (index.column) {
	                index.itemIndex = Math.min(Math.max(0, index.itemIndex, grid.topIndex), grid.itemCount - 1);
	                this._item.resizeTo(index);
	            }
	        }
	    };
	    return BlockSelectTracker;
	}(SelectTracker));
	exports.BlockSelectTracker = BlockSelectTracker;
	var RowsSelectTracker = /** @class */ (function (_super) {
	    __extends(RowsSelectTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowsSelectTracker(request, x, y) {
	        var _this = _super.call(this, request, "rowsSelectTracker", x, y) || this;
	        _this._timer = null;
	        _this._prevLoop = 0;
	        _this._loop = 0;
	        _this._colPrevLoop = 0;
	        _this._colLoop = 0;
	        _this._interval = 0;
	        return _this;
	    }
	    RowsSelectTracker.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowsSelectTracker.prototype._getItem = function () {
	        return this._item;
	    };
	    RowsSelectTracker.prototype._doStart = function (eventTarget, x, y, shift) {
	        var grid = this.grid;
	        var manager = grid.selections;
	        var lm = grid.layoutManager;
	        var idx = this._request.index;
	        if (lm.isMergedCell(idx)) {
	            idx = grid.pointToIndex(x, y, true);
	        }
	        manager.itemStyle = Selections.SelectionStyle.ROWS;
	        if (shift) {
	            this._item = manager.count > 0 && manager.getItem(0);
	        }
	        else {
	            manager.clear();
	            this._item = manager.add(idx, idx, Selections.SelectionStyle.ROWS);
	        }
	        return Boolean(this._item);
	    };
	    RowsSelectTracker.prototype._doDrag = function (eventTarget, x, y) {
	        if (this._item) {
	            var grid = this.grid;
	            var lm = grid.layoutManager;
	            this._currX = x; // = grid.containerToGridX(x);
	            this._currY = y; // = grid.containerToGridY(y);
	            if (y > lm.footerBounds.y || y < lm.gridBounds.y || x < 0 || x > lm.clientRect.right) {
	                this.$_startTimer();
	            }
	            else {
	                this.$_stopTimer();
	                var index = this.grid.pointToIndex(x, y, false);
	                if (index.itemIndex >= 0) {
	                    this._item.resizeTo(index);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    RowsSelectTracker.prototype._doEnded = function () {
	        this.$_stopTimer();
	        _super.prototype._doEnded.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowsSelectTracker.prototype.$_startTimer = function () {
	        if (!this._timer) {
	            this._loop = this._prevLoop = this._colLoop = this._colPrevLoop = 0;
	            this._interval = 1;
	            this._timer = setInterval(this.$_timerHandler.bind(this), 30);
	            this._grid.selections.lock();
	        }
	    };
	    RowsSelectTracker.prototype.$_stopTimer = function () {
	        if (this._timer) {
	            clearInterval(this._timer);
	            this._timer = null;
	            this._grid.selections.unlock();
	        }
	    };
	    RowsSelectTracker.prototype.$_timerHandler = function () {
	        var grid = this._grid;
	        var x = this._currX;
	        var y = this._currY;
	        var lm = grid.layoutManager;
	        var cnt;
	        if (y > lm.footerBounds.y) {
	            cnt = Math.max(0, Math.min(3, (y - lm.footerBounds.y) / 40));
	            this._interval = 4 - cnt;
	            this._loop++;
	        }
	        else if (y < lm.gridBounds.y) {
	            cnt = Math.max(0, Math.min(3, (lm.gridBounds.y - y) / 40));
	            this._interval = 4 - cnt;
	            this._loop++;
	        }
	        if (this._loop - this._prevLoop >= this._interval) {
	            this._prevLoop = this._loop;
	            if (y > lm.footerBounds.y) {
	                grid.topIndex = grid.topIndex + 1;
	            }
	            else if (y < lm.gridBounds.y) {
	                grid.topIndex = grid.topIndex - 1;
	            }
	            var index = grid.pointToIndex(this._currX, this._currY, false); // 이 함수가 한 칸씩 밀어준다.
	            index.itemIndex = Math.min(Math.max(0, index.itemIndex, grid.topIndex), grid.itemCount - 1);
	            this._item.resizeTo(index);
	        }
	        else {
	            if (x > lm.clientRect.right) {
	                cnt = Math.max(0, Math.min(3, (x - lm.clientRect.right) / 40));
	                this._interval = 4 - cnt;
	                this._colLoop++;
	            }
	            else if (x < 0) {
	                cnt = Math.max(0, Math.min(3, (lm.gridBounds.x - x) / 40));
	                this._interval = 4 - cnt;
	                this._colLoop++;
	            }
	            if (this._colLoop - this._colPrevLoop >= this._interval * 2) {
	                this._colPrevLoop = this._colLoop;
	                if (x > lm.clientRect.right) {
	                    grid.leftCol = grid.leftCol + 1;
	                }
	                else if (x < lm.gridBounds.x && grid.leftPos > 0) {
	                    grid.leftCol = grid.leftCol - 1;
	                }
	                var index = grid.pointToIndex(this._currX, this._currY, false);
	                if (index.itemIndex >= 0) {
	                    index.itemIndex = Math.min(Math.max(0, index.itemIndex, grid.topIndex), grid.itemCount - 1);
	                    this._item.resizeTo(index);
	                }
	            }
	        }
	    };
	    return RowsSelectTracker;
	}(SelectTracker));
	exports.RowsSelectTracker = RowsSelectTracker;
	var ColumnsSelectTracker = /** @class */ (function (_super) {
	    __extends(ColumnsSelectTracker, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ColumnsSelectTracker(request, x, y) {
	        var _this = _super.call(this, request, "columnsSelectTracker", x, y) || this;
	        _this._timer = null;
	        _this._prevLoop = 0;
	        _this._loop = 0;
	        _this._rowPrevLoop = 0;
	        _this._rowLoop = 0;
	        _this._interval = 0;
	        return _this;
	    }
	    ColumnsSelectTracker.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    ColumnsSelectTracker.prototype._getItem = function () {
	        return this._item;
	    };
	    ColumnsSelectTracker.prototype._doStart = function (eventTarget, x, y, shift) {
	        var grid = this.grid;
	        var manager = grid.selections;
	        var lm = grid.layoutManager;
	        var idx = this._request.index;
	        if (lm.isMergedCell(idx)) {
	            idx = grid.pointToIndex(x, y, true);
	        }
	        manager.itemStyle = Selections.SelectionStyle.ROWS;
	        if (shift) {
	            this._item = manager.count > 0 && manager.getItem(0);
	        }
	        else {
	            manager.clear();
	            this._item = manager.add(idx, idx, Selections.SelectionStyle.COLUMNS);
	        }
	        return Boolean(this._item);
	    };
	    ColumnsSelectTracker.prototype._doDrag = function (eventTarget, x, y) {
	        if (this._item) {
	            var grid = this.grid;
	            var lm = grid.layoutManager;
	            this._currX = x; // = grid.containerToGridX(x);
	            this._currY = y; // = grid.containerToGridY(y);
	            if (x < lm.gridBounds.x || x > lm.clientRect.right || y > lm.footerBounds.y || y < 0) {
	                this.$_startTimer();
	            }
	            else {
	                this.$_stopTimer();
	                var index = this.grid.pointToIndex(x, y, false);
	                if (index.column != null) {
	                    this._item.resizeTo(index);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    ColumnsSelectTracker.prototype._doEnded = function () {
	        this.$_stopTimer();
	        _super.prototype._doEnded.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ColumnsSelectTracker.prototype.$_startTimer = function () {
	        if (!this._timer) {
	            this._loop = this._prevLoop = this._rowLoop = this._rowPrevLoop = 0;
	            this._interval = 1;
	            this._timer = setInterval(this.$_timerHandler.bind(this), 30);
	            this._grid.selections.lock();
	        }
	    };
	    ColumnsSelectTracker.prototype.$_stopTimer = function () {
	        if (this._timer) {
	            clearInterval(this._timer);
	            this._timer = null;
	            this._grid.selections.unlock();
	        }
	    };
	    ColumnsSelectTracker.prototype.$_timerHandler = function () {
	        var grid = this._grid;
	        var x = this._currX;
	        var y = this._currY;
	        var lm = grid.layoutManager;
	        var cnt;
	        if (x > lm.clientRect.right) {
	            cnt = Math.max(0, Math.min(3, (x - lm.clientRect.right) / 40));
	            this._interval = 4 - cnt;
	            this._loop++;
	        }
	        else if (x < lm.gridBounds.x) {
	            cnt = Math.max(0, Math.min(3, (lm.gridBounds.x - x) / 40));
	            this._interval = 4 - cnt;
	            this._loop++;
	        }
	        if (this._loop - this._prevLoop >= this._interval * 2) {
	            this._prevLoop = this._loop;
	            if (x > lm.clientRect.right) {
	                grid.leftCol = grid.leftCol + 1;
	            }
	            else if (x < lm.gridBounds.x && grid.leftPos > 0) {
	                grid.leftCol = grid.leftCol - 1;
	            }
	            var index = grid.pointToIndex(this._currX, this._currY, false);
	            if (index.column) {
	                this._item.resizeTo(index);
	            }
	        }
	        else {
	            if (y > lm.footerBounds.y) {
	                cnt = Math.max(0, Math.min(3, (y - lm.footerBounds.y) / 40));
	                this._interval = 4 - cnt;
	                this._rowLoop++;
	            }
	            else if (y < 0) {
	                cnt = Math.max(0, Math.min(3, (lm.gridBounds.y - y) / 40));
	                this._interval = 4 - cnt;
	                this._rowLoop++;
	            }
	            if (this._rowLoop - this._rowPrevLoop >= this._interval) {
	                this._rowPrevLoop = this._rowLoop;
	                if (y > lm.footerBounds.y) {
	                    grid.topIndex = grid.topIndex + 1;
	                }
	                else if (y < lm.gridBounds.y) {
	                    grid.topIndex = grid.topIndex - 1;
	                }
	                var index = grid.pointToIndex(this._currX, this._currY, false);
	                if (index.column) {
	                    this._item.resizeTo(index);
	                }
	            }
	        }
	    };
	    return ColumnsSelectTracker;
	}(SelectTracker));
	exports.ColumnsSelectTracker = ColumnsSelectTracker;
	});

	unwrapExports(GridTool_1);
	var GridTool_2 = GridTool_1.GridDragTracker;
	var GridTool_3 = GridTool_1.FocusView;
	var GridTool_4 = GridTool_1.GridTool;
	var GridTool_5 = GridTool_1.RowHoverView;
	var GridTool_6 = GridTool_1.GridSelectionTool;
	var GridTool_7 = GridTool_1.SelectTracker;
	var GridTool_8 = GridTool_1.BlockSelectTracker;
	var GridTool_9 = GridTool_1.RowsSelectTracker;
	var GridTool_10 = GridTool_1.ColumnsSelectTracker;

	var HandleElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// HandleElement.ts
	// 2019. 09. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var HandleElement = /** @class */ (function (_super) {
	    __extends(HandleElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HandleElement(owner, name) {
	        if (name === void 0) { name = null; }
	        var _this = _super.call(this, name) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._clickable = false;
	        _this._owner = owner;
	        return _this;
	    }
	    HandleElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(HandleElement.prototype, "owner", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** owner */
	        get: function () {
	            return this._owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandleElement.prototype, "clickable", {
	        /** clickable */
	        get: function () {
	            return this._clickable;
	        },
	        set: function (value) {
	            if (value != this._clickable) {
	                this._clickable = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    HandleElement.prototype._getCssSelector = function () {
	        return "";
	    };
	    HandleElement.prototype._doDraw = function (dom) {
	    };
	    HandleElement.prototype._hoverChanged = function () {
	        this.invalidate();
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    HandleElement.prototype._changed = function () {
	        this.invalidate();
	    };
	    return HandleElement;
	}(VisualElement_1.VisualElement));
	exports.HandleElement = HandleElement;
	var CellHandle = /** @class */ (function (_super) {
	    __extends(CellHandle, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CellHandle(cellView, name) {
	        if (name === void 0) { name = null; }
	        return _super.call(this, cellView, name) || this;
	    }
	    CellHandle.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(CellHandle.prototype, "cellView", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** cellView */
	        get: function () {
	            return this.owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CellHandle;
	}(HandleElement));
	exports.CellHandle = CellHandle;
	});

	unwrapExports(HandleElement_1);
	var HandleElement_2 = HandleElement_1.HandleElement;
	var HandleElement_3 = HandleElement_1.CellHandle;

	var RowGroupElement_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridElement.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });














	var RowGroupHeadCellElement = /** @class */ (function (_super) {
	    __extends(RowGroupHeadCellElement, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupHeadCellElement() {
	        return _super.call(this, "rowGroupHeadCellView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupHeadCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = "";
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupHeadCellElement.prototype._doRender = function (dom) {
	    };
	    return RowGroupHeadCellElement;
	}(CellElement_1.SelectableCellElement));
	var RowGroupHeadElement = /** @class */ (function (_super) {
	    __extends(RowGroupHeadElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupHeadElement() {
	        var _this = _super.call(this, null, "rowGroupHeadView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._levels = 0;
	        return _this;
	    }
	    RowGroupHeadElement.prototype.dispose = function () {
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupHeadElement.prototype.prepare = function (levels) {
	        this._levels = levels;
	        while (this._cells.length < levels) {
	            var cell = new RowGroupHeadCellElement();
	            this._cells.push(cell);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupHeadElement.prototype._getCssSelector = function () {
	        return "rg-rowgroup-head";
	    };
	    RowGroupHeadElement.prototype._getCellSelector = function (td) {
	        return "rg-rowgroup-head-cell";
	    };
	    RowGroupHeadElement.prototype._doPrepareTableExtents = function (lm) {
	        if (this._levels > 0) {
	            var w = this.width / this._levels;
	            for (var i = 0; i < this._levels; i++) {
	                this._cells[i].width = w;
	            }
	        }
	    };
	    RowGroupHeadElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    RowGroupHeadElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var count = this._levels;
	        while (this.childCount < count) {
	            this.addChild(this._cells[this.childCount]);
	        }
	        while (this.childCount > count) {
	            this.removeLast();
	        }
	    };
	    RowGroupHeadElement.prototype._doRender = function (dom) {
	    };
	    RowGroupHeadElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    RowGroupHeadElement.prototype._getColumnCount = function (lm, row) {
	        return this._levels;
	    };
	    RowGroupHeadElement.prototype._getColumnWidth = function (lm, col) {
	        return this._cells[col].width;
	    };
	    return RowGroupHeadElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.RowGroupHeadElement = RowGroupHeadElement;
	var RowGroupFootCellElement = /** @class */ (function (_super) {
	    __extends(RowGroupFootCellElement, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupFootCellElement() {
	        return _super.call(this, "rowGroupFootCellView") || this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupFootCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = "";
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupFootCellElement.prototype._doRender = function (dom) {
	    };
	    return RowGroupFootCellElement;
	}(CellElement_1.SelectableCellElement));
	var RowGroupFootElement = /** @class */ (function (_super) {
	    __extends(RowGroupFootElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupFootElement() {
	        var _this = _super.call(this, null, "rowGroupFootView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._levels = 0;
	        return _this;
	    }
	    RowGroupFootElement.prototype.dispose = function () {
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupFootElement.prototype.prepare = function (levels) {
	        this._levels = levels;
	        while (this._cells.length < levels) {
	            var cell = new RowGroupFootCellElement();
	            this._cells.push(cell);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupFootElement.prototype._getCssSelector = function () {
	        return "rg-rowgroup-foot";
	    };
	    RowGroupFootElement.prototype._getCellSelector = function (td) {
	        return "rg-rowgroup-foot-cell";
	    };
	    RowGroupFootElement.prototype._doPrepareTableExtents = function (lm) {
	        if (this._levels > 0) {
	            var w = this.width / this._levels;
	            for (var i = 0; i < this._levels; i++) {
	                this._cells[i].width = w;
	            }
	        }
	    };
	    RowGroupFootElement.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    RowGroupFootElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var count = this._levels;
	        while (this.childCount < count) {
	            this.addChild(this._cells[this.childCount]);
	        }
	        while (this.childCount > count) {
	            this.removeLast();
	        }
	    };
	    RowGroupFootElement.prototype._doRender = function (dom) {
	    };
	    RowGroupFootElement.prototype._getRowCount = function (lm) {
	        return 1;
	    };
	    RowGroupFootElement.prototype._getColumnCount = function (lm, row) {
	        return this._levels;
	    };
	    RowGroupFootElement.prototype._getColumnWidth = function (lm, col) {
	        return this._cells[col].width;
	    };
	    return RowGroupFootElement;
	}(TableBaseElement_1.SimpleTableElement));
	exports.RowGroupFootElement = RowGroupFootElement;
	var RowGroupExpandHandle = /** @class */ (function (_super) {
	    __extends(RowGroupExpandHandle, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupExpandHandle(cellView) {
	        var _this = _super.call(this, cellView, "rowGroupExpandHandle") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._expanded = false;
	        _this.clickable = true;
	        return _this;
	    }
	    Object.defineProperty(RowGroupExpandHandle.prototype, "expanded", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expanded */
	        get: function () {
	            return this._expanded;
	        },
	        set: function (value) {
	            if (value != this._expanded) {
	                this._expanded = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupExpandHandle.prototype._createDom = function () {
	        return document.createElement("img");
	    };
	    RowGroupExpandHandle.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        dom.style.position = "";
	        //dom.style.display = "inline-block";
	    };
	    RowGroupExpandHandle.prototype._getCssSelector = function () {
	        return "";
	    };
	    RowGroupExpandHandle.prototype._getCssDisplay = function () {
	        return "";
	    };
	    RowGroupExpandHandle.prototype._doDraw = function (dom) {
	        dom.src = this._expanded ? "images/expanded.png" : "images/collapsed.png";
	    };
	    return RowGroupExpandHandle;
	}(HandleElement_1.CellHandle));
	exports.RowGroupExpandHandle = RowGroupExpandHandle;
	var RowGroupBarCellElement = /** @class */ (function (_super) {
	    __extends(RowGroupBarCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupBarCellElement() {
	        var _this = _super.call(this, "rowGroupBarCell") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._level = 0;
	        _this._expander = new RowGroupExpandHandle(_this);
	        _this.addChild(_this._expander);
	        return _this;
	    }
	    Object.defineProperty(RowGroupBarCellElement.prototype, "level", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** level */
	        get: function () {
	            return this._level;
	        },
	        set: function (value) {
	            this._level = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupBarCellElement.prototype.updateCell = function (grid, model, dom) {
	        _super.prototype.updateCell.call(this, grid, model, dom);
	        var item = model.item;
	        if (item instanceof GridItem_1.GroupItemImpl && item.level == this.bar.l) {
	            dom.appendChild(this._expander["_dom"]);
	            // TODO 아이콘 크기에 맞게 표시되도록 개선할 것!
	            this._expander.setBounds(1, 1, 13, 13);
	            this._expander.expanded = item.expanded;
	            this._expander.visible = true;
	        }
	        else {
	            this._expander.visible = false;
	        }
	        dom.style.paddingTop = "2px";
	    };
	    RowGroupBarCellElement.prototype.validate = function () {
	        _super.prototype.validate.call(this);
	        var dom = this._expander["_dom"];
	        dom && dom.parentElement && dom.parentElement.removeChild(dom);
	    };
	    return RowGroupBarCellElement;
	}(CellElement_1.CellElement));
	var RowGroupBarContainer = /** @class */ (function (_super) {
	    __extends(RowGroupBarContainer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupBarContainer() {
	        var _this = _super.call(this, null, "rowGroupBarContainer") || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = [];
	        _this._levels = 0;
	        _this._fixedCount = 0;
	        _this._bars = [];
	        return _this;
	    }
	    RowGroupBarContainer.prototype.dispose = function () {
	        this._cells = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupBarContainer.prototype.prepare = function (grid, levels) {
	        this._levels = levels;
	    };
	    RowGroupBarContainer.prototype.getLevelIndent = function (level) {
	        return level * this.width / this._levels;
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupBarContainer.prototype._getCssSelector = function () {
	        return "rg-rowgroup-bar";
	    };
	    RowGroupBarContainer.prototype._getCellSelector = function (td) {
	        return "rg-rowgroup-bar-cell";
	    };
	    RowGroupBarContainer.prototype._prepareCellContent = function (cell) {
	        var elt = document.createElement("div");
	        return elt;
	    };
	    RowGroupBarContainer.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var rowGroup = grid.rowGroup;
	        var wLevel = this.width / this._levels;
	        var bars = this._bars;
	        var count = bars.length;
	        var topIndex = lm.topIndex;
	        var fixedCount = this._fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var view;
	        while (this.childCount < count) {
	            if (this._cells.length > 0) {
	                view = this._cells.pop();
	            }
	            else {
	                view = this._createCell();
	            }
	            this.addChild(view);
	        }
	        while (this.childCount > count) {
	            view = this.removeLast();
	            view.validate();
	            this._cells.push(view);
	        }
	        for (var i = 0; i < count; i++) {
	            var bar = bars[i];
	            view = this.getChild(i);
	            var r = bar.tr1;
	            var row = !fixed ? r + topIndex : (r < fixedCount) ? r : r - 1 + topIndex;
	            var index = CellIndex_1.CellIndex.temp(grid, row);
	            var cell = rowGroup.getBarCell(index);
	            var rc = lm.getItemBounds(bar.r);
	            view.bar = bar;
	            view.level = bar.c + 1;
	            view.updateCell(grid, cell, this.getCellContent(r, bar.c));
	            rc.x = wLevel * bar.c;
	            rc.width = wLevel;
	            view.setRect(rc);
	        }
	    };
	    RowGroupBarContainer.prototype._doRender = function (target) {
	    };
	    RowGroupBarContainer.prototype._doPrepareTableRows = function (lm, body) {
	        _super.prototype._doPrepareTableRows.call(this, lm, body);
	        this.$_layoutBars(lm, body);
	    };
	    RowGroupBarContainer.prototype._getColumnCount = function (lm, row) {
	        return this._levels;
	    };
	    RowGroupBarContainer.prototype._getColumnWidth = function (lm, col) {
	        return this.width / this._levels;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupBarContainer.prototype._createCell = function () {
	        return new RowGroupBarCellElement();
	    };
	    RowGroupBarContainer.prototype.$_calcLevels = function (grid, level, index, top, count) {
	        var levels = new Array();
	        for (var i = index; i < count; i++) {
	            levels.push(grid.getItem(top + i).level);
	        }
	        var p = -1;
	        var n = 0;
	        for (var i = 0; i < levels.length; i++) {
	            var lev = levels[i];
	            if (lev < level) {
	                levels[i] = 1;
	                if (p >= 0) {
	                    levels[p] = n;
	                    p = -1;
	                    n = 0;
	                }
	            }
	            else if (lev == level) {
	                if (p >= 0) {
	                    levels[p] = n;
	                }
	                p = i;
	                n = 1;
	            }
	            else {
	                if (p < 0) {
	                    p = i;
	                }
	                else {
	                    levels[i] = -1;
	                }
	                n++;
	            }
	        }
	        if (p >= 0) {
	            levels[p] = n;
	        }
	        return levels;
	    };
	    RowGroupBarContainer.prototype.$_layoutBars = function (lm, body) {
	        var grid = lm.grid;
	        var fixedCount = lm.fixedItemCount;
	        var top = lm.topIndex;
	        var rows = body.children;
	        var rowCount = rows.length; // + (fixedRows > 0 ? 1 : 0);
	        var bars = this._bars = [];
	        if (rowCount < 1)
	            return;
	        var colCount = rows[0].children.length;
	        for (var c = 0; c < colCount; c++) {
	            var level = c + 1;
	            var i = 0;
	            if (fixedCount > 0) {
	                for (; i <= fixedCount; i++) {
	                    var tr = rows[i];
	                    var td = tr.children[c];
	                    td.style.display = "";
	                    td.removeAttribute("rowSpan");
	                }
	            }
	            if (i < rowCount) {
	                var dy_1 = fixedCount ? 1 : 0;
	                var levels = this.$_calcLevels(grid, level, i - dy_1, top, rowCount - dy_1);
	                for (var n = 0; i < rowCount; i++, n++) {
	                    var tr = rows[i];
	                    var td = tr.children[c];
	                    var lev = levels[n];
	                    if (lev > 0) {
	                        var r = top + i - dy_1;
	                        var item = grid.getItem(r);
	                        if (lev > 1 || item instanceof GridItem_1.GroupItemImpl && item.level == level) {
	                            td.rowSpan = lev;
	                            td.style.display = "";
	                            bars.push({ r: r - top, tr1: i, tr2: i + lev - 1, c: c, l: level });
	                        }
	                        else {
	                            td.removeAttribute("rowSpan");
	                            td.style.display = "";
	                        }
	                    }
	                    else {
	                        td.style.display = "none";
	                    }
	                }
	            }
	        }
	        bars.sort(function (b1, b2) {
	            return b1.r - b2.r;
	        });
	    };
	    return RowGroupBarContainer;
	}(TableBaseElement_1.DataTableElement));
	exports.RowGroupBarContainer = RowGroupBarContainer;
	var RowGroupBarPane = /** @class */ (function (_super) {
	    __extends(RowGroupBarPane, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupBarPane() {
	        var _this = _super.call(this, "rowGroupBarPane") || this;
	        _this._barContainer = new RowGroupBarContainer();
	        _this.addChild(_this._barContainer);
	        _this._footView = new RowGroupFootElement();
	        _this.addChild(_this._footView);
	        _this._headView = new RowGroupHeadElement();
	        _this.addChild(_this._headView);
	        return _this;
	    }
	    RowGroupBarPane.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupBarPane.prototype, "levelCount", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this.grid.layoutManager.rowGroupLevels;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupBarPane.prototype.getLevelIndent = function (level) {
	        return this._barContainer.getLevelIndent(level);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupBarPane.prototype._doMeasure = function (grid, hintWidth, hintHeight) {
	        var levels = this.levelCount;
	        // this._prepareHeads();
	        // this._prepareFoots();
	        // this._prepareSummarys();
	        // this._prepareBars();
	        this._headView.prepare(levels);
	        this._footView.prepare(levels);
	        this._barContainer.prepare(grid, levels);
	        return new Size_1.Size(this.levelCount * grid.rowGroup.levelIndent, hintHeight);
	    };
	    RowGroupBarPane.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var r = lm.headBounds;
	        if (this._headView.visible = !r.isEmpty) {
	            this._headView.setBounds(0, r.y, this.width, r.height);
	            this._headView.layoutContent(lm);
	        }
	        r = lm.footBounds;
	        if (this._footView.visible = !r.isEmpty) {
	            this._footView.setBounds(0, r.y, this.width, r.height);
	            this._footView.layoutContent(lm);
	        }
	        r = lm.indicatorBounds;
	        this._barContainer.setBounds(0, r.y, this.width, r.height);
	        this._barContainer.layoutContent(lm);
	    };
	    return RowGroupBarPane;
	}(ContentPane_1.DataContentPane));
	exports.RowGroupBarPane = RowGroupBarPane;
	var RowGroupPane = /** @class */ (function (_super) {
	    __extends(RowGroupPane, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupPane() {
	        return _super.call(this, "rowGroupPane") || this;
	    }
	    RowGroupPane.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    return RowGroupPane;
	}(ContentPane_1.DataContentPane));
	exports.RowGroupPane = RowGroupPane;
	var RowGroupHeaderCellElement = /** @class */ (function (_super) {
	    __extends(RowGroupHeaderCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupHeaderCellElement() {
	        return _super.call(this, "rowGroupHeaderCellView") || this;
	    }
	    RowGroupHeaderCellElement.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupHeaderCellElement.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupHeaderCellElement.prototype._createDom = function () {
	        return document.createElement("div");
	    };
	    RowGroupHeaderCellElement.prototype._beforeDraw = function (dom) {
	    };
	    RowGroupHeaderCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        this["_dom"].textContent = model.text;
	    };
	    return RowGroupHeaderCellElement;
	}(CellElement_1.CellElement));
	exports.RowGroupHeaderCellElement = RowGroupHeaderCellElement;
	var RowGroupHeaderElement = /** @class */ (function (_super) {
	    __extends(RowGroupHeaderElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupHeaderElement() {
	        var _this = _super.call(this, "rowGroupHeaderView") || this;
	        _this._visIndex = -1;
	        _this._cellView = new RowGroupHeaderCellElement();
	        _this.addChild(_this._cellView);
	        return _this;
	    }
	    RowGroupHeaderElement.prototype.dispose = function () {
	        this._item = null;
	        this._cellView = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupHeaderElement.prototype, "item", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** item */
	        get: function () {
	            return this._item;
	        },
	        set: function (value) {
	            this._item = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupHeaderElement.prototype._getCssSelector = function () {
	        return "rg-rowgroup-header";
	    };
	    RowGroupHeaderElement.prototype._doDraw = function (dom) {
	        //dom.style.background = "#ffff0033";
	    };
	    RowGroupHeaderElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        this._cellView.updateCell(grid, grid.rowGroup.getHeaderCell(this._item), null);
	        this._cellView.setBounds(0, 0, this.width, this.height);
	    };
	    return RowGroupHeaderElement;
	}(GridElement_1.GridElement));
	exports.RowGroupHeaderElement = RowGroupHeaderElement;
	var RowGroupFooterCellElement = /** @class */ (function (_super) {
	    __extends(RowGroupFooterCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupFooterCellElement() {
	        var _this = _super.call(this, "rowGroupFooterCellView") || this;
	        _this._textVisible = true;
	        return _this;
	    }
	    Object.defineProperty(RowGroupFooterCellElement.prototype, "text", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** text */
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            if (value != this._text) {
	                this._text = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupFooterCellElement.prototype, "textVisible", {
	        /** textVisible */
	        get: function () {
	            return this._textVisible;
	        },
	        set: function (value) {
	            if (value != this._textVisible) {
	                this._textVisible = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupFooterCellElement.prototype, "value", {
	        /** value */
	        get: function () {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RowGroupFooterCellElement.prototype, "error", {
	        /** error */
	        get: function () {
	            return this._error;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupFooterCellElement.prototype._doPrepareValue = function (grid, model) {
	        _super.prototype._doPrepareValue.call(this, grid, model);
	        this._value = model.value;
	        this._error = model.error;
	        var col = model.index.dataColumn;
	        var s = "";
	        if (this._value !== undefined) {
	            if (model.index.column instanceof DataColumn_1.DataColumn && model.index.dataColumn.valueType == Types.ValueType.DATETIME) {
	                if (this._value instanceof Date && this.datetimeWriter) {
	                    s = this.datetimeWriter.getText(this._value);
	                }
	                else {
	                    s = model.text;
	                }
	            }
	            else {
	                var v = Number(this._value);
	                if (!isNaN(v) && this.numberFormatter) {
	                    s = this.numberFormatter.format(v);
	                }
	                else if (this._value) {
	                    s = this._value;
	                }
	                else {
	                    s = model.text;
	                }
	            }
	        }
	        else {
	            s = model.text;
	        }
	        this._text = s;
	        this._error = model.error;
	    };
	    RowGroupFooterCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        dom.textContent = this._text;
	    };
	    return RowGroupFooterCellElement;
	}(CellElement_1.ValueCellElement));
	exports.RowGroupFooterCellElement = RowGroupFooterCellElement;
	var RowGroupFooterElement = /** @class */ (function (_super) {
	    __extends(RowGroupFooterElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupFooterElement() {
	        var _this = _super.call(this, "rowGroupFooterView") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._cells = {};
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupFooterElement.prototype._doLayoutContent = function (lm) {
	        var grid = lm.grid;
	        var rowGroup = grid.rowGroup;
	        var tr = this._getTableRow(this._domIndex);
	        tr.className = "rg-rowgroup-footer";
	        this.$_prepareCells(grid, rowGroup, lm, this._getStartCol(lm), this._getEndCol(lm));
	        this.$_layoutCells(grid, rowGroup, lm, this._getStartCol(lm), this._getEndCol(lm));
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupFooterElement.prototype._getTableRow = function (row) {
	        return this.parent["$_getTableRow"](row);
	    };
	    RowGroupFooterElement.prototype._getTableCell = function (col) {
	        return this.parent["$_getTableCell"](this._domIndex, col);
	    };
	    RowGroupFooterElement.prototype._getStartCol = function (lm) {
	        return lm.firstCol;
	    };
	    RowGroupFooterElement.prototype._getEndCol = function (lm) {
	        return lm.lastCol;
	    };
	    RowGroupFooterElement.prototype.$_prepareCell = function (grid, rowGroup, lm, col, room) {
	        var column = lm.getColumn(col);
	        var view = this._cells[column["$_hash"]];
	        if (!view) {
	            view = new RowGroupFooterCellElement();
	            this._cells[column["$_hash"]] = view;
	            this.addChild(view);
	        }
	        view.visible = !room || room.base() === col;
	        if (column instanceof GridColumn_1.ValueColumn) {
	            view.textVisible = !room || room.base() === col;
	        }
	        // var index = CellIndex.temp(grid, this.index(), column);
	        // var model = rowGroup.getFooterCell(index);
	        // view.updateCell(model);
	    };
	    RowGroupFooterElement.prototype.$_prepareCells = function (grid, rowGroup, lm, start, end) {
	        // const mergeManager = grid.groupFooterMergeManager;
	        // const merged = mergeManager.count() > 0;
	        // if (grid.columnLayoutChanged) {
	        // 	this.clear();
	        // 	this._cells = {};
	        // }
	        this.hideAll();
	        for (var i = start; i <= end; i++) {
	            var room = null; //merged && mergeManager.findRoom(this._level, i);
	            this.$_prepareCell(grid, rowGroup, lm, i, room);
	        }
	        // if (merged) {
	        // 	var rooms = mergeManager.getRoomNames(this._level);
	        // 	for (var i = 0; i < rooms.length; i++) {
	        // 		var room = mergeManager.getRoom(this._level, rooms[i]);
	        // 		if (room && ((start > room.base() && start <= room.last()) ||
	        // 			         (end   < room.base() && end   >= room.start()))) {
	        // 			this._prepareCell(lm, room.base(), room);
	        // 		}
	        // 	}
	        // }
	    };
	    RowGroupFooterElement.prototype._getBodyView = function () {
	        return this.parent["_bodyView"];
	    };
	    RowGroupFooterElement.prototype.$_layoutCells = function (grid, rowGroup, lm, start, end) {
	        var bodyView = this._getBodyView();
	        var spanned = bodyView.spanned;
	        var h = this.height;
	        for (var i = start; i <= end; i++) {
	            var col = i - start;
	            var column = lm.getColumn(i);
	            var view = this._cells[column["$_hash"]];
	            //view._shiftLeft = 0;
	            var r = lm.getColumnBounds(i);
	            r.height = h;
	            // if (merged && (room = mergeManager.findRoom(this._level, i))) {
	            // 	sr = lm.columnBounds(room.start());
	            // 	er = lm.columnBounds(room.last());
	            // 	r.width = er.right() - sr.x;
	            // 	r.x = sr.x;
	            // 	if (isChangeCellPos){
	            // 		if (start == room.start()) {
	            // 			r.width += w;
	            // 			view._shiftLeft = w;
	            // 		} else {
	            // 			r.x += w;
	            // 			view._shiftLeft = w;
	            // 		}
	            // 	}
	            // } else {
	            // 	if (isChangeCellPos) {
	            // 		if (i == start) {
	            // 			r.width += w;
	            // 			view._shiftLeft = w;
	            // 		} else {
	            // 			r.x += w;
	            // 		}
	            // 	}
	            // }
	            // if (!isFixed && !isRightFixed) {
	            // 	r.x -= leftPos;
	            // }
	            var index = CellIndex_1.CellIndex.temp(grid, this._item.index, column);
	            var model = rowGroup.getFooterCell(index);
	            var td = this._getTableCell(i - start);
	            if (spanned) {
	                var row = this._visIndex;
	                if (bodyView.isMerged(row, col)) {
	                    continue;
	                }
	            }
	            td.className = "rg-rowgroup-footer-cell";
	            view.updateCell(grid, model, td.lastElementChild);
	            view.setRect(r);
	            view.layoutContent(lm);
	        }
	        // if (merged) {
	        // 	var rooms = mergeManager.getRoomNames(this._level);
	        // 	for (var i = 0; i < rooms.length; i++) {
	        // 		var room = mergeManager.getRoom(this._level, rooms[i]);
	        // 		if (room && ((start > room.base() && start <= room.last()) ||
	        // 			         (end   < room.base() && end   >= room.start()))) {
	        // 			sr = lm.columnBounds(room.start());
	        // 			r = sr;	
	        // 			er = lm.columnBounds(room.last());	
	        // 			r.width = er.right() - sr.x;
	        // 			if (isChangeCellPos){
	        // 				if (start == room.start()) {
	        // 					r.width += w;
	        // 					view._shiftLeft = w;
	        // 				} else {
	        // 					r.x += w;
	        // 					view._shiftLeft = w;
	        // 				}
	        // 			}
	        // 			r.height = h;
	        // 			if (!isFixed && !isRightFixed) {
	        // 				r.x -= leftPos;
	        // 			}
	        // 			view = this._cells[lm.getColumn(room.base()).$_hash];
	        // 			view.setRect(r);
	        // 			view.layoutContent(lm);	
	        // 		}
	        // 	}		
	        // }
	    };
	    return RowGroupFooterElement;
	}(ItemElement_1.ItemElement));
	exports.RowGroupFooterElement = RowGroupFooterElement;
	var RowGroupFixedFooterElement = /** @class */ (function (_super) {
	    __extends(RowGroupFixedFooterElement, _super);
	    function RowGroupFixedFooterElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupFixedFooterElement.prototype._getTableRow = function (row) {
	        return this.parent["$_getFixedTableRow"](row);
	    };
	    RowGroupFixedFooterElement.prototype._getTableCell = function (col) {
	        return this.parent["$_getFixedTableCell"](this._domIndex, col);
	    };
	    RowGroupFixedFooterElement.prototype._getBodyView = function () {
	        return this.parent["_fixedView"];
	    };
	    RowGroupFixedFooterElement.prototype._getStartCol = function (lm) {
	        return 0;
	    };
	    RowGroupFixedFooterElement.prototype._getEndCol = function (lm) {
	        return lm.fixedColCount - 1;
	    };
	    return RowGroupFixedFooterElement;
	}(RowGroupFooterElement));
	exports.RowGroupFixedFooterElement = RowGroupFixedFooterElement;
	var RowGroupRightFooterElement = /** @class */ (function (_super) {
	    __extends(RowGroupRightFooterElement, _super);
	    function RowGroupRightFooterElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupRightFooterElement.prototype._getTableRow = function (row) {
	        return this.parent["$_getRightTableRow"](row);
	    };
	    RowGroupRightFooterElement.prototype._getTableCell = function (col) {
	        return this.parent["$_getRightTableCell"](this._domIndex, col);
	    };
	    RowGroupRightFooterElement.prototype._getBodyView = function () {
	        return this.parent["_rightView"];
	    };
	    RowGroupRightFooterElement.prototype._getStartCol = function (lm) {
	        return lm.columnCount - lm.rightColCount;
	    };
	    RowGroupRightFooterElement.prototype._getEndCol = function (lm) {
	        return lm.columnCount - 1;
	    };
	    return RowGroupRightFooterElement;
	}(RowGroupFooterElement));
	exports.RowGroupRightFooterElement = RowGroupRightFooterElement;
	var RowGroupElement = /** @class */ (function (_super) {
	    __extends(RowGroupElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RowGroupElement(name) {
	        var _this = _super.call(this, name || "rowGroupLayer") || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._headerPool = [];
	        _this._headerViews = [];
	        _this._footerPool = [];
	        _this._footerViews = [];
	        _this._fixedFooterPool = [];
	        _this._fixedFooterViews = [];
	        _this._rightFooterPool = [];
	        _this._rightFooterViews = [];
	        _this._indents = [];
	        return _this;
	    }
	    RowGroupElement.prototype.dispose = function () {
	        this._bodyView = this._fixedView = this._rightView = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(RowGroupElement.prototype, "grid", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** grid */
	        get: function () {
	            return this.getAncestor(GridView_1.GridView);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RowGroupElement.prototype.layout = function (lm) {
	        this._doPrepareContent(lm);
	        this._doLayoutContent(lm);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    RowGroupElement.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        var css = dom.style;
	        css.setProperty("overflow", "hidden", "important");
	        css.setProperty("pointer-events", "none", "important");
	    };
	    RowGroupElement.prototype._doDraw = function (dom) {
	        //dom.style.background = "#ffff0033";
	    };
	    RowGroupElement.prototype._doPrepareContent = function (lm) {
	        this.$_prepareHeaders(lm);
	    };
	    RowGroupElement.prototype.$_prepareIndents = function (lm) {
	        var indents = this._indents;
	        var levels = lm.rowGroupLevels + 1;
	        for (var i = 0; i < indents.length; i++) {
	            indents[i] = lm.getLevelIndent(i);
	        }
	        while (indents.length < levels) {
	            indents.push(lm.getLevelIndent(indents.length));
	        }
	        return indents;
	    };
	    RowGroupElement.prototype._doLayoutContent = function (lm) {
	        var indents = this.$_prepareIndents(lm);
	        var items = lm.getItems();
	        var itemCount = items.length;
	        var fixedCount = lm.fixedItemCount;
	        var fixed = fixedCount > 0;
	        var w = this.width;
	        var nHeader = 0;
	        var nFooter = 0;
	        for (var i = fixedCount; i < itemCount; i++) {
	            var item = items[i];
	            // gropu header
	            if (item instanceof GridItem_1.GroupItemImpl) {
	                var view = this._headerViews[nHeader++];
	                var r = lm.getItemBounds(i);
	                var indent = indents[item.level];
	                view.item = item;
	                view["_visIndex"] = i - fixedCount;
	                view.setBounds(indent, r.y, w - indent, r.height);
	                view.layoutContent(lm);
	            }
	            else if (item instanceof GridItem_1.GroupFooter) {
	                var tr = fixed ? i + 1 : i;
	                var vr = i - fixedCount;
	                if (this._fixedView) {
	                    var view_1 = this._fixedFooterViews[nFooter];
	                    view_1.updateItem(item, tr, vr);
	                    view_1.layoutContent(lm);
	                }
	                if (this._rightView) {
	                    var view_2 = this._rightFooterViews[nFooter];
	                    view_2.updateItem(item, tr, vr);
	                    view_2.layoutContent(lm);
	                }
	                var view = this._footerViews[nFooter++];
	                view.updateItem(item, tr, vr);
	                view.layoutContent(lm);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    RowGroupElement.prototype.$_prepareHeaders = function (lm) {
	        var items = lm.getItems();
	        var n = 0;
	        for (var i = lm.fixedItemCount, cnt = items.length; i < cnt; i++) {
	            if (items[i] instanceof GridItem_1.GroupItemImpl) {
	                n++;
	            }
	        }
	        while (this._headerViews.length < n) {
	            var view = this._headerPool.pop();
	            if (!view) {
	                view = new RowGroupHeaderElement();
	            }
	            this.addChild(view);
	            this._headerViews.push(view);
	        }
	        while (this._headerViews.length > n) {
	            var view = this._headerViews.pop();
	            this.removeChild(view);
	            this._headerPool.push(view);
	        }
	    };
	    /**
	     * GridViewLayoutManager에서 호출한다.
	     */
	    RowGroupElement.prototype.$_prepareGroupItems = function (lm, bodyView, fixedView, rightView) {
	        this._bodyView = bodyView;
	        this._fixedView = fixedView;
	        this._rightView = rightView;
	    };
	    /**
	     * GridViewLayoutManager에서 호출한다.
	     */
	    RowGroupElement.prototype.$_prepareGroupFooters = function (lm) {
	        var items = lm.getItems();
	        var n = 0;
	        for (var i = lm.fixedItemCount, cnt = items.length; i < cnt; i++) {
	            if (items[i] instanceof GridItem_1.GroupFooter) {
	                n++;
	            }
	        }
	        while (this._footerViews.length < n) {
	            var view = this._footerPool.pop();
	            if (!view) {
	                view = new RowGroupFooterElement();
	            }
	            this.addChild(view);
	            this._footerViews.push(view);
	        }
	        while (this._footerViews.length > n) {
	            var view = this._footerViews.pop();
	            this.removeChild(view);
	            this._footerPool.push(view);
	        }
	        if (this._fixedView) {
	            while (this._fixedFooterViews.length < n) {
	                var view = this._fixedFooterPool.pop();
	                if (!view) {
	                    view = new RowGroupFixedFooterElement();
	                }
	                this.addChild(view);
	                this._fixedFooterViews.push(view);
	            }
	            while (this._fixedFooterViews.length > n) {
	                var view = this._fixedFooterViews.pop();
	                this.removeChild(view);
	                this._fixedFooterPool.push(view);
	            }
	        }
	        if (this._rightView) {
	            while (this._rightFooterViews.length < n) {
	                var view = this._rightFooterPool.pop();
	                if (!view) {
	                    view = new RowGroupRightFooterElement();
	                }
	                this.addChild(view);
	                this._rightFooterViews.push(view);
	            }
	            while (this._rightFooterViews.length > n) {
	                var view = this._rightFooterViews.pop();
	                this.removeChild(view);
	                this._rightFooterPool.push(view);
	            }
	        }
	    };
	    RowGroupElement.prototype.$_getTableRow = function (row) {
	        return this._bodyView["_tbody"].children[row];
	    };
	    RowGroupElement.prototype.$_getTableCell = function (row, col) {
	        return this._bodyView["_tbody"].children[row].children[col];
	    };
	    RowGroupElement.prototype.$_getFixedTableRow = function (row) {
	        return this._fixedView["_tbody"].children[row];
	    };
	    RowGroupElement.prototype.$_getFixedTableCell = function (row, col) {
	        return this._fixedView["_tbody"].children[row].children[col];
	    };
	    RowGroupElement.prototype.$_getRightTableRow = function (row) {
	        return this._rightView["_tbody"].children[row];
	    };
	    RowGroupElement.prototype.$_getRightTableCell = function (row, col) {
	        return this._rightView["_tbody"].children[row].children[col];
	    };
	    return RowGroupElement;
	}(VisualElement_1.LayerElement));
	exports.RowGroupElement = RowGroupElement;
	});

	unwrapExports(RowGroupElement_1);
	var RowGroupElement_2 = RowGroupElement_1.RowGroupHeadElement;
	var RowGroupElement_3 = RowGroupElement_1.RowGroupFootElement;
	var RowGroupElement_4 = RowGroupElement_1.RowGroupExpandHandle;
	var RowGroupElement_5 = RowGroupElement_1.RowGroupBarContainer;
	var RowGroupElement_6 = RowGroupElement_1.RowGroupBarPane;
	var RowGroupElement_7 = RowGroupElement_1.RowGroupPane;
	var RowGroupElement_8 = RowGroupElement_1.RowGroupHeaderCellElement;
	var RowGroupElement_9 = RowGroupElement_1.RowGroupHeaderElement;
	var RowGroupElement_10 = RowGroupElement_1.RowGroupFooterCellElement;
	var RowGroupElement_11 = RowGroupElement_1.RowGroupFooterElement;
	var RowGroupElement_12 = RowGroupElement_1.RowGroupFixedFooterElement;
	var RowGroupElement_13 = RowGroupElement_1.RowGroupRightFooterElement;
	var RowGroupElement_14 = RowGroupElement_1.RowGroupElement;

	var GroupingOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GroupingOptions.ts
	// 2019. 08. 28. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var GroupingOptions = /** @class */ (function (_super) {
	    __extends(GroupingOptions, _super);
	    // private _toast: null,
	    // private _removeIncludeLower: false,
	    // private _removeButton: null,
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GroupingOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._enabled = true;
	        _this._prompt = "컬럼 헤더를 이 곳으로 끌어다 놓으면 그 컬럼으로 그룹핑합니다.";
	        _this._linear = false;
	        _this._expandWhenGrouping = true;
	        _this._summarizing = true;
	        _this._commitBeforeGrouping = true;
	        _this._commitBeforeExpand = true;
	        _this._commitBeforeCollapse = true;
	        _this._fixMergedColumns = true;
	        return _this;
	    }
	    GroupingOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GroupingOptions.prototype, "enabled", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** enabled */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            if (value != this._enabled) {
	                this._enabled = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "prompt", {
	        /** prompt */
	        get: function () {
	            return this._prompt;
	        },
	        set: function (value) {
	            if (value != this._prompt) {
	                this._prompt = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "linear", {
	        /** linear */
	        get: function () {
	            return this._linear;
	        },
	        set: function (value) {
	            if (value != this._linear) {
	                this._linear = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "expandWhenGrouping", {
	        /** expandWhenGrouping */
	        get: function () {
	            return this._expandWhenGrouping;
	        },
	        set: function (value) {
	            if (value != this._expandWhenGrouping) {
	                this._expandWhenGrouping = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "summarizing", {
	        /** summarizing */
	        get: function () {
	            return this._summarizing;
	        },
	        set: function (value) {
	            if (value != this._summarizing) {
	                this._summarizing = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "commitBeforeGrouping", {
	        /** commitBeforeGrouping */
	        get: function () {
	            return this._commitBeforeGrouping;
	        },
	        set: function (value) {
	            this._commitBeforeGrouping = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "commitBeforeExpand", {
	        /** commitBeforeExpand */
	        get: function () {
	            return this._commitBeforeExpand;
	        },
	        set: function (value) {
	            this._commitBeforeExpand = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "commitBeforeCollapse", {
	        /** commitBeforeCollapse */
	        get: function () {
	            return this._commitBeforeCollapse;
	        },
	        set: function (value) {
	            this._commitBeforeCollapse = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GroupingOptions.prototype, "fixMergedColumns", {
	        /** fixMergedColumns */
	        get: function () {
	            return this._fixMergedColumns;
	        },
	        set: function (value) {
	            this._fixMergedColumns = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GroupingOptions.prototype._changed = function () {
	        this.grid["_groupingOptionsChanged"](this);
	    };
	    return GroupingOptions;
	}(GridOptions.GridBaseOptions));
	exports.GroupingOptions = GroupingOptions;
	});

	unwrapExports(GroupingOptions_1);
	var GroupingOptions_2 = GroupingOptions_1.GroupingOptions;

	var GridView_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridView.ts
	// 2019. 07. 12. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });











	var GridView = /** @class */ (function (_super) {
	    __extends(GridView, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridView(container) {
	        var _this = _super.call(this, container) || this;
	        _this._rowGroupSummaryRuntime = new SummaryRuntimes.RowGroupSummaryRuntime();
	        _this._rs = _this._createItemSource();
	        _this.itemSource = _this._rs;
	        _this._groupingOptions = new GroupingOptions_1.GroupingOptions(_this);
	        _this._groupingOptionsChanged(_this._groupingOptions);
	        return _this;
	    }
	    GridView.prototype.dispose = function () {
	        this._rs.dispose();
	        this._rs = null;
	        _super.prototype.dispose.call(this);
	    };
	    GridView.prototype._doCreateOtherElements = function () {
	        this._groupView = new RowGroupElement_1.RowGroupElement();
	        this.addElement(this._groupView);
	    };
	    Object.defineProperty(GridView.prototype, "groupBarPane", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** groupBarPane */
	        get: function () {
	            return this._groupBarPane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "groupView", {
	        /** groupView */
	        get: function () {
	            return this._groupView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "groupingOptions", {
	        /** groupingOptions */
	        get: function () {
	            return this._groupingOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "paged", {
	        /** paged */
	        get: function () {
	            return this._rs.page >= 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "page", {
	        /** page */
	        get: function () {
	            return this._rs.page;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "pageCount", {
	        /** pageCount */
	        get: function () {
	            return this._rs.pageCount;
	        },
	        set: function (value) {
	            var old = this._rs.pageCount;
	            this._rs.pageCount = value;
	            if (this._rs.pageCount != old) {
	                this.$_firePageCountChanged(this._rs.pageCount);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "pageSorting", {
	        set: function (value) {
	            //this._rs.pageSorting = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rowGroupLevels", {
	        /** rowGroupLevels */
	        get: function () {
	            return this._rs.groupLevels;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rowGroupFields", {
	        /** rowGroupFields */
	        get: function () {
	            return this._rs.groupByFields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rowGrouped", {
	        /** rowGrouped */
	        get: function () {
	            return this._rs.grouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "mergedRowGrouped", {
	        /** mergedRowGrouped */
	        get: function () {
	            return this._rs.mergedGrouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rowGroupSummaryRuntime", {
	        /** rowGroupSummaryRuntime */
	        get: function () {
	            return this._rowGroupSummaryRuntime;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridView.prototype.isGrouped = function (column) {
	        return column && column.groupLevel > 0;
	    };
	    GridView.prototype.getGroupLevel = function (field) {
	        return this._rs.getGroupLevel(field);
	    };
	    GridView.prototype.groupByFieldNames = function (fieldNames, sorting, direction) {
	        if (direction === void 0) { direction = Types.SortDirection.ASCENDING; }
	        var ds = this.dataSource;
	        //const labelComparer = {};
	        if (ds && fieldNames && fieldNames.length > 0) {
	            var flds = [];
	            for (var i = 0; i < fieldNames.length; i++) {
	                var fname = fieldNames[i];
	                var fld = ds.getFieldIndex(fname);
	                if (fld >= 0) {
	                    //const columns = this.columnsByFieldName(fname);
	                    //const column = columns && columns.length == 1 && columns[0];
	                    //column instanceof DataColumn && column.isSortByLabel() && column.isLookupDisplay() && (labelComparer[fld] = new ColumnLabelComparer(column));
	                    flds.push(fld);
	                }
	            }
	            if (flds.length > 0) {
	                sorting = sorting === undefined ? this.rowGroup.sorting : sorting;
	                //this.setLabelComparer(labelComparer);
	                this.groupBy(flds, sorting, direction);
	            }
	        }
	        else {
	            //this.setLabelComparer(labelComparer);
	            this.ungroupBy();
	        }
	    };
	    GridView.prototype.groupBy = function (fields, sorting, direction) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        //this._toastManager.show(this.groupingOptions().toast(), true, function () {
	        this.$_doGroupBy(fields, sorting, direction);
	        //}.bind(this));
	    };
	    GridView.prototype.clearGroupBy = function () {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.groupBy(null, true, Types.SortDirection.ASCENDING);
	        //this._rs.groupSorting = this.rowGroup.sorting;
	        this.$_doRowGroupFooterMergeChanged();
	    };
	    GridView.prototype.ungroupBy = function () {
	        this.clearGroupBy();
	    };
	    GridView.prototype.addGroupBy = function (index, column) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        if (this.isGrouped(column)) {
	            return;
	        }
	        if (!column.visible) {
	            return;
	        }
	        // if (!column.isRoot && this.rowGroup.mergeMode) {
	        // 	return;
	        // }
	        if (column.dataIndex >= 0) {
	            //this._toastManager.show(this.groupingOptions().toast(), true, function () {
	            this.$_doAddGroupBy(index, column);
	            //}.bind(this));
	        }
	    };
	    GridView.prototype.removeGroupBy = function (column) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        if (!this.isGrouped(column)) {
	            return;
	        }
	        var includeLower = false; //this.groupingOptions().isRemoveIncludeLower();
	        //var labelComparer = this._items.getLabelComparer();
	        var fields = this._rs.groupByFields;
	        var dataIndex = column.dataIndex;
	        // if (includeLower) {
	        // 	for (var i = fields.length-1 ; i ; i--) {
	        // 		delete labelComparer[fields[i]];
	        // 		if (fields[i] == dataIndex) {
	        // 			break;
	        // 		}
	        // 	}
	        // } else {
	        // 	delete labelComparer[dataIndex];
	        // }
	        this._rs.removeGroupBy(dataIndex, includeLower);
	        fields = this._rs.groupByFields;
	        if (fields.length <= 0) ;
	        this.$_doRowGroupFooterMergeChanged();
	    };
	    GridView.prototype.expand = function (group, recursive, force, level) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.expand(group, recursive, force, level);
	    };
	    GridView.prototype.collapse = function (group, recursive, force) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.collapse(group, recursive, force);
	    };
	    GridView.prototype.isGroupedColumn = function (column) {
	        return column && column.dataIndex && this._rs.isGroupedField(column.dataIndex); // && column.root().displayIndex() < this._items.getGroupLevels();
	    };
	    Object.defineProperty(GridView.prototype, "summarizer", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rs.summarizer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridView.prototype._createSidePane = function () {
	        return this._groupBarPane = new RowGroupElement_1.RowGroupBarPane();
	    };
	    GridView.prototype.isSidePaneVisible = function () {
	        return this.rowGrouped && !this.mergedRowGrouped;
	    };
	    GridView.prototype._createLayoutManager = function () {
	        return new GridViewLayoutManager(this);
	    };
	    GridView.prototype._canMerge = function () {
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridView.prototype._createItemSource = function () {
	        var items = new GridItemProvider_1.GridItemProvider(true);
	        // items.summaryMode = this.summaryMode;
	        // items.rowGroupSummaryMode = this.rowGroup.summaryMode;
	        return items;
	    };
	    GridView.prototype.$_rowGroupChanged = function (options) {
	        this._rs.mergeMode = options.mergeMode;
	    };
	    GridView.prototype._groupingOptionsChanged = function (options) {
	        this._rs.expandWhenGrouping = options.expandWhenGrouping;
	    };
	    GridView.prototype.$_getVisibleRootByField = function (fld) {
	        var cnt = this.visibleColumnCount;
	        for (var i = 0; i < cnt; i++) {
	            var col = Utils_1.Utils.cast(this.getVisibleColumn(i), DataColumn_1.DataColumn);
	            if (col && col.dataIndex == fld) {
	                return col;
	            }
	        }
	        return null;
	    };
	    GridView.prototype.$_clearColumnMergeGrouped = function () {
	        this["_activeLayout"].clearMergeGrouped();
	    };
	    GridView.prototype._doRowGroupMergeModeChanged = function () {
	        _super.prototype._doRowGroupMergeModeChanged.call(this);
	        //this.rowGroupView() && this.rowGroupView().clearFooterViews();
	        this.$_clearColumnMergeGrouped();
	        if (this.rowGroup.mergeMode) {
	            var flds = this._rs.groupByFields;
	            if (flds && flds.length > 0) {
	                for (var i = flds.length - 1; i >= 0; i--) {
	                    var column = this.$_getVisibleRootByField(flds[i]);
	                    if (column) {
	                        column["$_setMergeGrouped"](true);
	                    }
	                    else {
	                        flds.splice(i, 1);
	                    }
	                }
	            }
	            if (flds && flds.length > 0) {
	                this._rs.groupByMode(flds, true);
	            }
	            else {
	                this._rs.groupByMode(null, true);
	            }
	        }
	        else {
	            this._rs.mergeMode = false;
	        }
	    };
	    GridView.prototype.$_doRowGroupFooterMergeChanged = function () {
	        //this._groupFooterMergeManager.buildRooms(this);
	    };
	    GridView.prototype.$_doGroupBy = function (fields, sorting, direction) {
	        var ds = this.dataSource;
	        var cnt;
	        this.$_clearColumnMergeGrouped();
	        if (ds && fields && (cnt = fields.length) > 0) {
	            var fieldCount = ds.fieldCount;
	            var flds = [];
	            for (var i = 0; i < cnt; i++) {
	                if (fields[i] >= 0 && fields[i] < fieldCount) {
	                    flds.push(fields[i]);
	                }
	            }
	            if (flds.length > 0) {
	                if (this.rowGroup.mergeMode) {
	                    for (var i = flds.length - 1; i >= 0; i--) {
	                        var column = this.$_getVisibleRootByField(flds[i]);
	                        if (column) {
	                            column["$_setMergeGrouped"](true);
	                        }
	                        else {
	                            flds.splice(i, 1);
	                        }
	                    }
	                }
	                if (flds.length > 0) {
	                    this._rs.groupBy(flds, sorting, direction);
	                }
	            }
	        }
	        else {
	            this._rs.groupBy(null, true, Types.SortDirection.ASCENDING);
	        }
	        this.$_doRowGroupFooterMergeChanged();
	    };
	    GridView.prototype.$_doAddGroupBy = function (index, column) {
	        var field = column.dataIndex;
	        column["$_setMergeGrouped"](this.rowGroup.mergeMode);
	        try {
	            // if (column.isSortByLabel() && column.isLookupDisplay()) {
	            // 	var labelComparer = this._items.getLabelComparer();
	            // 	if (!labelComparer[field]) {
	            // 		labelComparer[field] = new ColumnLabelComparer(column);
	            // 	}
	            // }
	            this._rs.addGroupBy(index, field);
	            this.$_doRowGroupFooterMergeChanged();
	        }
	        catch (err) {
	            column["$_setMergeGrouped"](false);
	            throw err;
	        }
	    };
	    GridView.prototype.$_clearGroupedIndices = function () {
	        for (var i = this.columnCount - 1; i >= 0; i--) {
	            var column = Utils_1.Utils.cast(this.getColumn(i), DataColumn_1.DataColumn);
	            if (column) {
	                column["$_setGroupLevel"](this._rs.getGroupLevel(-1));
	            }
	        }
	    };
	    GridView.prototype.$_setGroupedIndices = function () {
	        for (var i = this.columnCount - 1; i >= 0; i--) {
	            var column = Utils_1.Utils.cast(this.getColumn(i), DataColumn_1.DataColumn);
	            if (column) {
	                column["$_setGroupLevel"](this._rs.getGroupLevel(column.dataIndex));
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    GridView.prototype.$_firePageChanging = function (newPage) {
	        return this.fireConfirmEvent(GridView.PAGE_CHANGING, newPage);
	    };
	    GridView.prototype.$_firePageChanged = function (newPage) {
	        this.fireEvent(GridView.PAGE_CHANGED, newPage);
	    };
	    GridView.prototype.$_firePageCountChanged = function (newCount) {
	        this.fireEvent(GridView.PAGE_COUNT_CHANGED, newCount);
	    };
	    GridView.prototype.$_fireGrouping = function (fields) {
	        return this.fireConfirmEvent(GridView.GROUPING, fields);
	    };
	    GridView.prototype.$_fireGrouped = function () {
	        this.fireEvent(GridView.GROUPED);
	    };
	    GridView.prototype.$_fireExpanding = function (group) {
	        return this.fireConfirmEvent(GridView.EXPANDING, group);
	    };
	    GridView.prototype.$_fireExpanded = function (group) {
	        this.fireEvent(GridView.EXPANDED, group);
	    };
	    GridView.prototype.$_fireCollapsing = function (group) {
	        return this.fireConfirmEvent(GridView.COLLAPSING, group);
	    };
	    GridView.prototype.$_fireCollapsed = function (group) {
	        this.fireEvent(GridView.COLLAPSED, group);
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    GridView.prototype.onGroupedItemProviderGrouping = function (rs, fields) {
	        return this.$_fireGrouping(fields);
	    };
	    GridView.prototype.onGroupedItemProviderGrouped = function (rs) {
	        //this.selections().clear();
	        this.$_clearGroupedIndices();
	        var fields = this._rs.groupByFields;
	        if (fields && fields.length > 0) {
	            this.$_setGroupedIndices();
	        }
	        if (this.rowGroup.mergeMode) { // TODO: group item provider의 mergeMode만을 기준으로 해야 한다.
	            var cols = new Array();
	            var cnt = this.visibleColumnCount;
	            for (var i = 0; i < cnt; i++) {
	                var dcolumn = Utils_1.Utils.cast(this.getVisibleColumn(i), DataColumn_1.DataColumn);
	            }
	            cnt = cols.length;
	            cnt = this.visibleColumnCount;
	            for (var i = 0; i < cnt; i++) {
	                // dcolumn = _cast(this.getVisibleColumn(i), DataColumn);
	                // if (dcolumn && !dcolumn.isMergeGrouped()) {
	                //     merges = dcolumn.stateFor(ColumnMergeManager.MERGE_ROOMS);
	                //     if (merges) {
	                //         merges.clear();
	                //         merges.initialize(RowGroupMergeRule.INIT_COUNT);
	                //     }
	                // }
	            }
	        }
	        //this.$_syncHeadCheck([], undefined);
	        this.$_fireGrouped();
	    };
	    GridView.prototype.onGroupedItemProviderExpand = function (rs, group) {
	        return this.$_fireExpanding(group);
	    };
	    GridView.prototype.onGroupedItemProviderExpanded = function (rs, group) {
	        this.$_fireExpanded(group);
	    };
	    GridView.prototype.onGroupedItemProviderCollapse = function (rs, group) {
	        return this.$_fireCollapsing(group);
	    };
	    GridView.prototype.onGroupedItemProviderCollapsed = function (rs, group) {
	        this.$_fireCollapsed(group);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    GridView.PAGE_CHANGING = "onGridViewPageChanging";
	    GridView.PAGE_CHANGED = "onGridViewPageChanged";
	    GridView.PAGE_COUNT_CHANGED = "onGridViewPageCountChanged";
	    GridView.GROUPING = "onGridViewGrouping";
	    GridView.GROUPED = "onGridViewGrouped";
	    GridView.EXPANDING = "onGridViewExpanding";
	    GridView.EXPANDED = "onGridViewExpanded";
	    GridView.COLLAPSING = "onGridViewCollapsing";
	    GridView.COLLAPSED = "onGridViewCollapsed";
	    return GridView;
	}(GridBase_1.GridBase));
	exports.GridView = GridView;
	var GridViewLayoutManager = /** @class */ (function (_super) {
	    __extends(GridViewLayoutManager, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridViewLayoutManager(grid) {
	        return _super.call(this, grid) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    GridViewLayoutManager.prototype.getLevelIndent = function (level) {
	        var grid = this.grid;
	        if (this.mergedRowGrouped) {
	            var fixed = this.fixedColCount;
	            var w = 0;
	            for (var i = 0; i < level && i < fixed; i++) {
	                w += this.getFixedColumnWidth(i);
	            }
	            for (var i = fixed; i < level; i++) {
	                w += this.getColumnWidth(i - fixed);
	            }
	            if (!fixed) {
	                w -= this.leftPos;
	            }
	            else if (level > fixed) {
	                w = Math.max(this.fixedWidth, w + this.fixedBarWidth - this.leftPos);
	            }
	            else {
	                w += this.fixedBarWidth;
	            }
	            return w;
	        }
	        else {
	            return grid.groupBarPane.getLevelIndent(level);
	        }
	    };
	    Object.defineProperty(GridViewLayoutManager.prototype, "rowGrouped", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return !this.grid.rowGroup.mergeMode && this.grid.rowGrouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridViewLayoutManager.prototype, "mergedRowGrouped", {
	        get: function () {
	            return this.grid.rowGroup.mergeMode && this.grid.rowGrouped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridViewLayoutManager.prototype, "rowGroupLevels", {
	        get: function () {
	            return this.grid.rowGroupLevels;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridViewLayoutManager.prototype.$_groupView = function (merged) {
	        var grid = this.grid;
	        //return merged ? grid["_mergedGroupView"] : grid["_groupView"];
	        return grid["_groupView"];
	    };
	    /**
	     * layout없이 content만 이동할 때.
	     */
	    GridViewLayoutManager.prototype.setLeftPos = function (bounds, pos) {
	        _super.prototype.setLeftPos.call(this, bounds, pos);
	        var grid = this.grid;
	        var merged = grid.mergedRowGrouped;
	        var layer = this.$_groupView(merged);
	        if (layer.visible) {
	            // TODO: 최소 호출하도록 한다.
	            this.$_layoutRowGroupView(grid, layer);
	        }
	    };
	    GridViewLayoutManager.prototype._prepareItems = function () {
	        _super.prototype._prepareItems.call(this);
	        var grid = this.grid;
	        if (grid.rowGrouped) {
	            var merged = grid.mergedRowGrouped;
	            var layer = this.$_groupView(merged);
	            var body = this.contentBounds.isEmpty ? null : grid.bodyView;
	            var fixed = this.fixedContentBounds.isEmpty ? null : grid.fixedBodyView;
	            var right = this.rightContentBounds.isEmpty ? null : grid.rightBodyView;
	            layer["$_prepareGroupItems"](this, body, fixed, right);
	            layer["$_prepareGroupFooters"](this);
	        }
	    };
	    GridViewLayoutManager.prototype._doLayout = function (bounds) {
	        _super.prototype._doLayout.call(this, bounds);
	        var grid = this.grid;
	        var merged = grid.mergedRowGrouped;
	        var layer = this.$_groupView(merged);
	        this.$_groupView(!merged).visible = false;
	        if (layer.visible = grid.rowGrouped) {
	            this.$_layoutRowGroupView(grid, layer);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridViewLayoutManager.prototype.$_layoutRowGroupView = function (grid, view) {
	        var r = this.sideContentBounds.clone();
	        r.top = this.bodyBounds.y;
	        //r.right = Math.min(grid.layoutManager.gridBounds.right, grid.fixedOptions.rightFixed ? this.contentBounds.right : this.rightContentBounds.right);
	        r.right = grid.fixedOptions.rightFixed ? this.contentBounds.right : this.rightContentBounds.right;
	        r.bottom = Math.min(this.footBounds.y, this.bodyBounds.bottom);
	        view.setRect(r);
	        view.layout(this);
	    };
	    return GridViewLayoutManager;
	}(GridLayoutManager_1.GridLayoutManager));
	exports.GridViewLayoutManager = GridViewLayoutManager;
	var GridViewSelectionTool = /** @class */ (function (_super) {
	    __extends(GridViewSelectionTool, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridViewSelectionTool(owner) {
	        return _super.call(this, owner, "gridSelectionTool") || this;
	    }
	    GridViewSelectionTool.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridViewSelectionTool.prototype._doMouseDown = function (x, y, ctrl, shift, button) {
	        var grid = this.grid;
	        var elt = this.findElementAt(x, y, false);
	        if (elt instanceof RowGroupElement_1.RowGroupExpandHandle) {
	            var item = elt.cellView.item;
	            if (item instanceof GridItem_1.GroupItemImpl) {
	                if (item.expanded) {
	                    grid.collapse(item, false, false);
	                }
	                else {
	                    grid.expand(item, false, false, 0);
	                }
	            }
	            return;
	        }
	        _super.prototype._doMouseDown.call(this, x, y, ctrl, shift, button);
	    };
	    return GridViewSelectionTool;
	}(GridTool_1.GridSelectionTool));
	exports.GridViewSelectionTool = GridViewSelectionTool;
	});

	unwrapExports(GridView_1);
	var GridView_2 = GridView_1.GridView;
	var GridView_3 = GridView_1.GridViewLayoutManager;
	var GridView_4 = GridView_1.GridViewSelectionTool;

	var Globals = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// Globals.ts
	// 2019. 08. 02. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.$_doc = document;
	exports.$_win = window;
	exports.$_instanceOf = function (elt, clazz) {
	    return typeof (elt) === 'object' && Object.prototype.toString.call(elt).indexOf(clazz) >= 0;
	};
	exports.$_resetDocument = function (elt) {
	    exports.$_doc = elt.ownerDocument;
	    exports.$_win = exports.$_doc.defaultView;
	};
	});

	unwrapExports(Globals);
	var Globals_1 = Globals.$_doc;
	var Globals_2 = Globals.$_win;
	var Globals_3 = Globals.$_instanceOf;
	var Globals_4 = Globals.$_resetDocument;

	var VisualContainer_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// VisualContainer.ts
	// 2019. 07. 24. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });







	window.requestAnimationFrame = window.requestAnimationFrame || window["mozRequestAnimationFrame"] ||
	    window.webkitRequestAnimationFrame || window["msRequestAnimationFrame"] ||
	    function (render) { setTimeout(render, 10); };
	var RootElement = /** @class */ (function (_super) {
	    __extends(RootElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RootElement(name, container) {
	        var _this = _super.call(this, name) || this;
	        _this._contaner = container;
	        return _this;
	    }
	    Object.defineProperty(RootElement.prototype, "container", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._contaner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RootElement.prototype._getCssSelector = function () {
	        return undefined;
	    };
	    RootElement.prototype._doDraw = function (element) {
	    };
	    return RootElement;
	}(VisualElement_1.VisualElement));
	var _isFirefox = typeof window["InstallTrigger"] !== 'undefined'; // Firefox 1.0+
	var _isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
	var VisualContainer = /** @class */ (function (_super) {
	    __extends(VisualContainer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function VisualContainer(containerId) {
	        var _this = _super.call(this) || this;
	        _this._updateRequested = false;
	        _this._layoutNeeded = false;
	        _this._invalidated = false;
	        _this._captured = false;
	        _this._focusing = false;
	        _this._focusingTarget = null;
	        _this._hovered = null;
	        _this._currentX = 0;
	        _this._currentY = 0;
	        _this._rendered = 0;
	        _this._defaultCursor = Types.Cursor.AUTO;
	        _this._drawing = false;
	        _this._offsetX = 0;
	        _this._offsetY = 0;
	        _this._clicked = 0;
	        _this._clicket = 0;
	        _this._children = [];
	        // private _containerRender = this._render.bind(this);
	        _this._eventHandlers = {};
	        _this._eventNodes = [];
	        // this.$_prepareContextMenu();
	        // private _popupMenuManager = new PopupMenuManager(this).addListener(this);
	        _this._contextMenu = null;
	        // this.onContextMenuItemClicked = null;
	        _this._containerRender = _this._render.bind(_this);
	        _this._destroying = false;
	        _this._scrollTool = new ScrollBar_1.ScrollTool(_this);
	        _this._testWidth = NaN;
	        _this._testHeight = NaN;
	        _this.prepareContainer(containerId);
	        _this.invalidateLayout();
	        _this._registerEventHandlers(_this._containerDom);
	        _this.activeTool = _this._defaultTool = _this._createDefaultTool();
	        return _this;
	    }
	    VisualContainer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(VisualContainer.prototype, "activeTool", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** activeTool */
	        get: function () {
	            return this._activeTool;
	        },
	        set: function (value) {
	            value = value || this._defaultTool;
	            if (value != this._activeTool) {
	                var old = this._activeTool;
	                if (old) {
	                    old.deactivate();
	                }
	                this._activeTool = value;
	                if (value) {
	                    value.activate(old);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VisualContainer.prototype, "defaultTool", {
	        /** defaultTool */
	        get: function () {
	            return this._defaultTool;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    VisualContainer.prototype.findElementAt = function (x, y, hitTesting) {
	        return this._rootElement.findChildAt(x - this._rootElement["_x"], y - this._rootElement["_y"], hitTesting);
	    };
	    VisualContainer.prototype.setFocus = function () {
	        this._setFocusAndScroll(this._containerDom);
	    };
	    VisualContainer.prototype.updateNow = function () {
	        this._render(Utils_1.Utils.getTimer());
	    };
	    VisualContainer.prototype.toScreen = function (r) {
	        r.x += this._offsetX;
	        r.y += this._offsetY;
	        return r;
	    };
	    VisualContainer.prototype.getHtml = function () {
	        return this._containerDom.outerHTML;
	    };
	    VisualContainer.prototype.addElement = function (element) {
	        return this._rootElement.addChild(element);
	    };
	    VisualContainer.prototype.removeElement = function (element) {
	        return this._rootElement.removeChild(element);
	    };
	    VisualContainer.prototype.resetSize = function (callback) {
	        // let clientRect: any;
	        // try {
	        //     clientRect = this._container.getBoundingClientRect();
	        // } catch (e){
	        //     clientRect = new {width:this._container.clientWidth, height:this._container.clientHeight};
	        // };
	        // if (this._width != parseInt(clientRect.width) /*this._container.clientWidth*/ || this._height != parseInt(clientRect.height) /*this._container.clientHeight*/) {
	        //     if (this._defContext) {
	        //         this._width = parseInt(clientRect.width);
	        //         this._height = parseInt(clientRect.height);
	        //         this._canvas.width = parseInt(clientRect.width) * this._deviceScale;//this._container.clientWidth;
	        //         this._canvas.height = parseInt(clientRect.height) * this._deviceScale;//this._container.clientHeight;
	        //         this._defContext.resize(this._width, this._height);
	        //         if (this._contexts) {
	        //             for (var i = 0; i < this._contexts.length; i++) {
	        //                 this._contexts[i].resize(this._width, this._height);
	        //             }
	        //         }
	        //     }
	        //     this.invalidateLayout();
	        //     //trace("resized: " + this._width + ", " + this._height);
	        // } else {
	        //     this.invalidateLayout();
	        // }
	        // const rect = this._containerDom.getBoundingClientRect();
	        // this._width = rect.width;
	        // this._height = rect.height;
	        this.invalidateLayout();
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    VisualContainer.prototype.prepareContainer = function (id) {
	        if (!id) {
	            throw new Error("container is null!");
	        }
	        if (Globals.$_instanceOf(id, "HTMLDivElement")) {
	            this._containerDiv = id;
	            Globals.$_resetDocument(this._containerDiv);
	        }
	        else {
	            this._containerDiv = Globals.$_doc.getElementById(id);
	        }
	        if (!(Globals.$_instanceOf(this._containerDiv, "HTMLDivElement"))) {
	            throw new Error("Invalid grid container element: " + id);
	        }
	        var container = this._containerDom = Globals.$_doc.createElement("div");
	        this._container = this["_containerDom"]; // for 1.0 code
	        var css = container.style;
	        this._containerDiv.appendChild(container);
	        container.setAttribute('tabindex', '0');
	        css.position = "relative"; // 이 것 때문에...
	        css.width = "100%";
	        css.height = "100%";
	        // css.borderStyle = "none";
	        // css.borderWidth = "0px";
	        css.boxSizing = "border-box";
	        css.overflow = "hidden";
	        css["-webkit-touch-callout"] = "none";
	        css["-webkit-user-select"] = "none";
	        css["user-select"] = "none";
	        css["-webkit-tap-highlight-color"] = "rgba(0, 0, 0, 0)";
	        // const rect = container.getBoundingClientRect();
	        // this._width = rect.width;
	        // this._height = rect.height;
	        this._rootElement = this._createRootElement();
	        this._doPrepareContainer(container);
	    };
	    VisualContainer.prototype._doPrepareContainer = function (dom) {
	    };
	    VisualContainer.prototype._createRootElement = function () {
	        var elt = new RootElement("root", this);
	        this._containerDom.appendChild(elt["_dom"]);
	        return elt;
	    };
	    VisualContainer.prototype.invalidateLayout = function () {
	        if (!this._layoutNeeded) {
	            this._layoutNeeded = true;
	            this.invalidate(true);
	        }
	    };
	    VisualContainer.prototype.invalidate = function (force) {
	        if ((!this._updateRequested || !this._invalidated) && (force || !this._drawing)) {
	            window.requestAnimationFrame(this._containerRender);
	            this._updateRequested = true;
	            this._invalidated = true;
	        }
	    };
	    VisualContainer.prototype.invalidateElement = function (element) {
	        if (!this._drawing && !this._updateRequested) {
	            window.requestAnimationFrame(this._containerRender);
	            this._updateRequested = true;
	        }
	    };
	    VisualContainer.prototype._render = function (timestamp) {
	        if (this._destroying) {
	            return;
	        }
	        this._updateRequested = false;
	        this._offsetX = this._containerDom.offsetLeft;
	        this._offsetY = this._containerDom.offsetTop;
	        // let op = this._gridContainer.offsetParent;
	        // while (op) {
	        //     this._offsetX += op.offsetLeft;
	        //     this._offsetY += op.offsetTop;
	        //     op = op.offsetParent;
	        // }
	        this._drawing = true;
	        try {
	            this.$$_render(timestamp); //, null, 0, 0);
	            // if (this._resetSizeCallback) {
	            //     this._resetSizeCallback();
	            //     delete this._resetSizeCallback;
	            // }
	        }
	        finally {
	            this._drawing = false;
	            this._invalidated = false;
	        }
	    };
	    VisualContainer.prototype.$$_render = function (timestamp) {
	        var div = this._containerDom;
	        var x = 0; //div.clientLeft;
	        var y = 0; //div.clientTop;
	        var w = !isNaN(this._testWidth) ? this._testWidth : div.clientWidth;
	        var h = !isNaN(this._testHeight) ? this._testHeight : div.clientHeight;
	        this._layoutChildren(new Rectangle_1.Rectangle(x, y, w, h));
	        if (this._layoutNeeded) {
	            this._layoutNeeded = false;
	            this._doLayout(new Rectangle_1.Rectangle(x, y, w, h));
	        }
	        else {
	            this._doPrepareRender(new Rectangle_1.Rectangle(x, y, w, h));
	        }
	        this._doRenderHtml(new Rectangle_1.Rectangle(x, y, w, h));
	    };
	    VisualContainer.prototype._layoutChildren = function (bounds) {
	    };
	    VisualContainer.prototype._doLayout = function (bounds) {
	    };
	    VisualContainer.prototype._doPrepareRender = function (bounds) {
	    };
	    VisualContainer.prototype._doRenderHtml = function (bounds) {
	        this._doDrawContainer(bounds);
	        this._drawElement(this._rootElement);
	        this._validateChildren(this._rootElement);
	    };
	    VisualContainer.prototype._doDrawContainer = function (bounds) {
	    };
	    VisualContainer.prototype._drawElement = function (element) {
	        element.draw();
	        for (var i = 0, cnt = element.childCount; i < cnt; i++) {
	            var elt = element.getChild(i);
	            if (elt.visible) {
	                this._drawElement(elt);
	            }
	        }
	    };
	    VisualContainer.prototype._validateChildren = function (element) {
	        for (var i = 0, cnt = element.childCount; i < cnt; i++) {
	            var elt = element.getChild(i);
	            elt.validate();
	        }
	    };
	    VisualContainer.prototype._setFocusAndScroll = function (target) {
	        var parr = [];
	        if (target) {
	            if (!this._focusing) {
	                this._focusing = true;
	                this._focusingTarget = target;
	                try {
	                    var x = Utils_1.Utils.win.pageXOffset;
	                    var y = Utils_1.Utils.win.pageYOffset;
	                    if (Utils_1.Utils.isFirefox || Utils_1.Utils.isChrome || Utils_1.Utils.isOpera) {
	                        var p = this._containerDiv && this._containerDiv.parentElement;
	                        while (p && !(p instanceof HTMLBodyElement)) {
	                            parr.push({ element: p, st: p.scrollTop, sl: p.scrollLeft });
	                            p = p.parentElement;
	                        }
	                    }
	                    var isiFrame = self !== top;
	                    var topElement = void 0;
	                    var topX = void 0;
	                    var topY = void 0;
	                    if (isiFrame) {
	                        var p = self.frameElement;
	                        while (p) {
	                            if (p && p.tagName === "HTML") {
	                                topElement = p;
	                                topX = p.scrollLeft;
	                                topY = p.scrollTop;
	                                break;
	                            }
	                            p = p.parentElement;
	                        }
	                    }
	                    // target이 canvas이면 focus를 주지 않는다. 그럼 스크롤되지 않는다.
	                    target.setFocus ? target.setFocus() : target instanceof HTMLCanvasElement ? null : target.focus();
	                    if (Utils_1.Utils.win.pageXOffset != x || Utils_1.Utils.win.pageYOffset != y) {
	                        Utils_1.Utils.win.scrollTo(x, y);
	                    }
	                    if (Utils_1.Utils.isFirefox || Utils_1.Utils.isChrome || Utils_1.Utils.isOpera) {
	                        for (var i = parr.length; i--;) {
	                            if (parr[i].element.scrollTop != parr[i].st || parr[i].element.scrollLeft != parr[i].sl) {
	                                parr[i].element.scrollTop = parr[i].st;
	                                parr[i].element.scrollLeft = parr[i].sl;
	                            }
	                        }
	                    }
	                    if (isiFrame && topElement && (topX != topElement.scrollLeft || topY != topElement.scrollTop)) {
	                        topElement.scrollTo(topX, topY);
	                    }
	                }
	                finally {
	                    this._focusing = false;
	                    this._focusingTarget = null;
	                }
	            }
	            else if (target != this._focusingTarget) {
	                target.setFocus ? target.setFocus() : target instanceof HTMLCanvasElement ? null : target.focus();
	            }
	        }
	    };
	    VisualContainer.prototype._registerEventHandlers = function (container) {
	        var win = window;
	        container.style.cursor = this._defaultCursor;
	        this.$_addListener(win, "resize", this._resizeHandler.bind(this), false);
	        this.$_addListener(win, "mousemove", this._mouseMoveHandler.bind(this), false);
	        this.$_addListener(win, "mouseup", this._mouseUpHandler.bind(this), false);
	        this.$_addListener(win, "focus", this._focusHandlerFireFox.bind(this), true); // 이벤트가 발생한 객체에서만 발생하고 부모로 전달되지는 않는다.
	        this.$_addListener(win, "focusin", this._focusinHandler.bind(this), true); // 이벤트가 상위 객체로 전달된다.
	        this.$_addListener(container, "keydown", this._keyDownHandler.bind(this), false);
	        this.$_addListener(container, "keyup", this._keyUpHandler.bind(this), false);
	        this.$_addListener(container, "keypress", this._keyPressHandler.bind(this), false);
	        this.$_addListener(container, "click", this._clickHandler.bind(this), false);
	        this.$_addListener(container, "dblclick", this._dblclickHandler.bind(this), false);
	        this.$_addListener(container, "mousedown", this._mouseDownHandler.bind(this), false);
	        this.$_addListener(container, "mouseenter", this._mouseEnterHandler.bind(this), false);
	        this.$_addListener(container, "mouseleave", this._mouseLeaveHandler.bind(this), false);
	        this.$_addListener(container, "mouseover", this._mouseOverHandler.bind(this), false);
	        this.$_addListener(container, "focus", this._focusHandler.bind(this), false);
	        this.$_addListener(container, "blur", this._blurHandler.bind(this), false);
	        // this.$_addListener(canvas, "drop", this._dropHandler.bind(this), false);
	        this.$_addListener(container, "selectstart", this._selectstartHandler.bind(this), false);
	        // if (_isFirefox) {
	        //     canvas.addEventListener("DOMMouseScroll", this._mouseScrollHandler.bind(this), false);
	        // } else {
	        //     canvas.addEventListener("mousewheel", this._mouseWheelHandler.bind(this), false);
	        // }
	        if (_isFirefox) {
	            this.$_addListener(container, "DOMMouseScroll", this._mouseScrollHandler.bind(this), false);
	        }
	        else {
	            this.$_addListener(container, "mousewheel", this._mouseWheelHandler.bind(this), false);
	        }
	        {
	            container.addEventListener("touchstart", this._touchStartHandler.bind(this), false);
	            container.addEventListener("touchmove", this._touchMoveHandler.bind(this), false);
	            container.addEventListener("touchend", this._touchEndHandler.bind(this), false);
	            container.addEventListener("touchcancel", this._touchCancelHandler.bind(this), false);
	            container.addEventListener("touchleave", this._touchLeaveHandler.bind(this), false);
	        }
	    };
	    VisualContainer.prototype.$_addListener = function (node, event, handler, capture) {
	        if (!(node in this._eventHandlers)) {
	            this._eventHandlers[node] = {};
	        }
	        if (!(event in this._eventHandlers[node])) {
	            this._eventHandlers[node][event] = [];
	        }
	        this._eventHandlers[node][event].push([handler, capture]);
	        node.addEventListener(event, handler, capture);
	        if (this._eventNodes.indexOf(node) < 0) {
	            this._eventNodes.push(node);
	        }
	    };
	    VisualContainer.prototype.$_removeListener = function (node, event) {
	        if (node in this._eventHandlers) {
	            var handlers = this._eventHandlers[node];
	            if (event in handlers) {
	                var eventHandlers = handlers[event];
	                for (var i = eventHandlers.length; i--;) {
	                    var handler = eventHandlers[i];
	                    node.removeEventListener(event, handler[0], handler[1]);
	                }
	            }
	        }
	    };
	    VisualContainer.prototype.$_removeListenerAll = function (node) {
	        var nodes = node ? [node] : this._eventNodes;
	        for (var i = 0, cnt = nodes.length; i < cnt; i++) {
	            var elt = nodes[i];
	            if (elt in this._eventHandlers) {
	                var events = this._eventHandlers[elt];
	                for (var event in events) {
	                    var handlers = events[event];
	                    for (var j = handlers.length; j--;) {
	                        var handler = handlers[j];
	                        elt.removeEventListener(event, handler[0], handler[1]);
	                    }
	                }
	            }
	        }
	    };
	    VisualContainer.prototype._unloadHandler = function () {
	        var container = this._containerDom;
	        if (window.addEventListener) {
	            container.removeEventListener("keydown", this._keyDownHandler);
	            container.removeEventListener("keyup", this._keyUpHandler);
	            container.removeEventListener("keypress", this._keyPressHandler);
	            container.removeEventListener("click", this._clickHandler);
	            container.removeEventListener("dblclick", this._dblclickHandler);
	            container.removeEventListener("mousedown", this._mouseDownHandler);
	            container.removeEventListener("mouseenter", this._mouseEnterHandler);
	            container.removeEventListener("mouseleave", this._mouseLeaveHandler);
	            container.removeEventListener("mouseover", this._mouseOverHandler);
	            if (_isFirefox) {
	                container.removeEventListener("DOMMouseScroll", this._mouseScrollHandler);
	            }
	            else {
	                container.removeEventListener("mousewheel", this._mouseWheelHandler);
	            }
	            container.removeEventListener("focus", this._focusHandler);
	            container.removeEventListener("blur", this._blurHandler);
	            {
	                container.removeEventListener("touchstart", this._touchStartHandler);
	                container.removeEventListener("touchmove", this._touchMoveHandler);
	                container.removeEventListener("touchend", this._touchEndHandler);
	                container.removeEventListener("touchcancel", this._touchCancelHandler);
	                container.removeEventListener("touchleave", this._touchLeaveHandler);
	            }
	        }
	        // if (this.unloadProc) {
	        //     this.unloadProc();
	        // }
	        this._containerDiv = null;
	        this._containerDom = null;
	    };
	    VisualContainer.prototype._resizeHandler = function (event) {
	        // if (this._resizeDelay) {
	        // 	this._resizeTimer && clearTimeout(this._resizeTimer);
	        // 	this._resizeTimer = setTimeout(function() {this.resetSize()}.bind(this), this._resizeDelay);
	        // } else {
	        // 	this.resetSize();
	        // }
	        this.resetSize();
	    };
	    VisualContainer.prototype._keyDownHandler = function (event) {
	        if (this._activeTool) {
	            var ctrl = _isMac && event.metaKey || !_isMac && event.ctrlKey;
	            this._activeTool.keyDown(event.keyCode, event.ctrlKey, event.shiftKey, event.altKey, event);
	        }
	    };
	    VisualContainer.prototype._keyUpHandler = function (event) {
	        if (this._activeTool) {
	            var ctrl = _isMac && event.metaKey || !_isMac && event.ctrlKey;
	            this._activeTool.keyUp(event.keyCode, event.ctrlKey, event.shiftKey, event.altKey, event);
	        }
	    };
	    VisualContainer.prototype._keyPressHandler = function (event) {
	        if (this._activeTool) {
	            this._activeTool.keyPress(event.keyCode, event);
	        }
	    };
	    VisualContainer.prototype.toOffset = function (event) {
	        /*
	         event.mouseX = event.clientX - _offsetX;
	         event.mouseY = event.clientY - _offsetY;
	         */
	        var elt = this._containerDom; // event.target; // canvas로 간주하면 window로 이벤트 핸들링을 해도 동일하게 적용된다.
	        var r = elt.getBoundingClientRect();
	        event.mouseX = event.clientX - r.left;
	        event.mouseY = event.clientY - r.top;
	        return event;
	    };
	    VisualContainer.prototype._clickHandler = function (event) {
	        if (this._activeTool) {
	            this._activeTool.click(this.toOffset(event));
	        }
	    };
	    VisualContainer.prototype._dblclickHandler = function (event) {
	        if (this._activeTool) {
	            this._activeTool.dblclick(this.toOffset(event));
	        }
	    };
	    VisualContainer.prototype._mouseDownHandler = function (event) {
	        // 임시로...
	        this._containerDom.focus();
	        this.toOffset(event);
	        this._currentX = event["mouseX"];
	        this._currentY = event["mouseY"];
	        var elt = this.findElementAt(this._currentX, this._currentY, false);
	        var view = elt && elt.getAncestor(ScrollBar_1.ScrollBar);
	        if (view) {
	            this.activeTool = this._scrollTool;
	        }
	        else if (!this.activeTool) {
	            this.activeTool = this._defaultTool;
	        }
	        if (this._activeTool) {
	            this._activeTool["_mouseEventTarget"] = event.target instanceof HTMLElement ? event.target : null;
	            this._activeTool.mouseDown(event);
	        }
	        // this._popupMenuManager.close();
	        // if (event.target === this._canvas) {
	        //     $$_activeGrid != this._gridView && $_setActiveGrid(this._gridView);
	        //     this._canvas.setAttribute('tabindex', '0');
	        //     this._captured = true;
	        //     this.checkClicked(event.clientX - this._offsetX, event.clientY - this._offsetY);
	        //     this.toOffset(event);
	        //     this._currentX = event.mouseX;
	        //     this._currentY = event.mouseY;
	        //     if (this._activeTool) {
	        //         this._activeTool.mouseDown(event);
	        //     }
	        //     /*
	        //     _stopEvent(event);
	        //     */
	        //     if (_isIE && (!this._activeTool || this._activeTool.isEditing())) {
	        //         _stopEvent(event);
	        //     }
	        // }
	    };
	    VisualContainer.prototype._mouseMoveHandler = function (event) {
	        this.toOffset(event);
	        this._currentX = event["mouseX"];
	        this._currentY = event["mouseY"];
	        if (this._activeTool) {
	            this._activeTool["_mouseEventTarget"] = event.target instanceof HTMLElement ? event.target : null;
	            this._activeTool.mouseMove(event);
	        }
	        // var hovered = this._hovered;
	        // if (!this._captured && event.target !== this._canvas) {
	        //     if (hovered) {
	        //         hovered.setHovered(false);
	        //         // hovered instanceof HeaderCellElement && hovered.invalidate(true,true);
	        //         this._hovered = null;
	        //     }
	        //     if (this._activeTool) {
	        //         this._activeTool.mouseOutside();
	        //     }
	        //     return;
	        // }
	        // this.toOffset(event);
	        // var x = event.mouseX;
	        // var y = event.mouseY;
	        // if (x != this._currentX || y != this._currentY) { // 같은 위치여도 발생하고 있다.
	        //     this._currentX = x;
	        //     this._currentY = y;
	        //     var elt = this.findElementAt(x, y, true);
	        //     if (!this._activeTool || !this._activeTool.isDragging()) {
	        //         if (elt && elt.canHover() && elt != this._hovered ) {
	        //             if (hovered) {
	        //                 hovered.setHovered(false);
	        //                 // if (hovered instanceof HeaderCellHandle) {
	        //                 //     hovered.invalidate();
	        //                 //      if (!(elt instanceof HeaderCellHandle))
	        //                 //         hovered._owner.invalidate();
	        //                 // }
	        //             }
	        //             this._hovered = elt;
	        //             if (this._hovered && this._hovered._mouseEnabled) {
	        //                 this._hovered.setHovered(true);
	        //                 // if (this._hovered instanceof HeadrCellHandle) {
	        //                 //     this._hovered.invalidate();
	        //                 // }
	        //             }
	        //         }
	        //     }
	        // }
	        // if (this._activeTool) {
	        //     this._activeTool.mouseMove(event);
	        // }
	    };
	    VisualContainer.prototype._mouseUpHandler = function (event) {
	        this.toOffset(event);
	        this._currentX = event["mouseX"];
	        this._currentY = event["mouseY"];
	        if (this._activeTool) {
	            this._activeTool["_mouseEventTarget"] = event.target instanceof HTMLElement ? event.target : null;
	            this._activeTool.mouseUp(event);
	            if (this._activeTool instanceof ScrollBar_1.ScrollTool) {
	                this.activeTool = this._activeTool.previous;
	            }
	        }
	        // if (!this._captured && event.target !== this._gridContainer) {
	        //     return;
	        // }
	        // this._captured = false;
	        // if (this._activeTool) {
	        //     this._activeTool.mouseUp(this.toOffset(event));
	        // }
	    };
	    VisualContainer.prototype._mouseEnterHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.mouseEnter(this.toOffset(event));
	        // }
	    };
	    VisualContainer.prototype._mouseLeaveHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.mouseLeave(this.toOffset(event));
	        // }
	    };
	    VisualContainer.prototype._mouseOverHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.mouseLeave(this.toOffset(event));
	        // }
	    };
	    VisualContainer.prototype._mouseWheelHandler = function (event) {
	        if (this._activeTool) {
	            if (this._activeTool.mouseWheel(this.toOffset(event))) {
	                Utils_1.Utils.stopEvent(event);
	            }
	        }
	    };
	    VisualContainer.prototype._mouseScrollHandler = function (event) {
	        if (this._activeTool) {
	            event["wheelDelta"] = -event.detail;
	            if (this._activeTool.mouseWheel(this.toOffset(event))) {
	                Utils_1.Utils.stopEvent(event);
	            }
	        }
	    };
	    VisualContainer.prototype._focusHandler = function (event) {
	    };
	    VisualContainer.prototype._blurHandler = function (event) {
	    };
	    VisualContainer.prototype._selectstartHandler = function (event) {
	        // IE9에서 선택 드래깅되는 문제
	        return false;
	    };
	    VisualContainer.prototype._focusinHandler = function (event) {
	        if (event.target === this._containerDom) {
	            //!this._gridView._exiting && !_isMobile() &&this._activeTool && this._activeTool.setFocus();
	            this._activeTool && this._activeTool.setFocus();
	        }
	    };
	    VisualContainer.prototype._focusHandlerFireFox = function (event) {
	        // event.target instanceof HTMLCanvasElement && event.target == this._canvas && $_setActiveGrid(this._gridView);
	        // if (event.target === this._canvas) {
	        //     !this._gridView._exiting && !_isMobile() && this._activeTool && this._activeTool.setFocus();
	        // }
	    };
	    VisualContainer.prototype._focusoutHandler = function (event) {
	    };
	    VisualContainer.prototype._touchStartHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.touchStart(event);
	        // }
	    };
	    VisualContainer.prototype._touchMoveHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.touchMove(event);
	        // }
	    };
	    VisualContainer.prototype._touchEndHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.touchEnd(event);
	        // }
	    };
	    VisualContainer.prototype._touchCancelHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.touchCancel(event);
	        // }
	    };
	    VisualContainer.prototype._touchLeaveHandler = function (event) {
	        // if (this._activeTool) {
	        //     this._activeTool.touchEnd(event);
	        // }
	    };
	    VisualContainer.prototype.onMenuItemClick = function (menuItem) {
	        // this.onContextMenuItemClicked && this.onContextMenuItemClicked(this, menuItem);
	        // this.fireEvent(UIContainer.CONTEXT_MENU_ITEM_CLICKED, menuItem);
	    };
	    return VisualContainer;
	}(EventAware_1.EventAware));
	exports.VisualContainer = VisualContainer;
	});

	unwrapExports(VisualContainer_1);
	var VisualContainer_2 = VisualContainer_1.VisualContainer;

	var GridContainer_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// GridContainer.ts
	// 2019. 07. 26. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var GridContainer = /** @class */ (function (_super) {
	    __extends(GridContainer, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function GridContainer(containerId) {
	        return _super.call(this, containerId) || this;
	    }
	    GridContainer.prototype.dispose = function () {
	        this._gridView = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(GridContainer.prototype, "gridView", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** gridView */
	        get: function () {
	            return this._gridView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    GridContainer.prototype._doPrepareContainer = function (dom) {
	        dom.className = "realgrid rg-grid";
	        this._gridView = this._createGridView();
	        this.addElement(this._gridView);
	    };
	    GridContainer.prototype._createDefaultTool = function () {
	        return new GridView_1.GridViewSelectionTool(this);
	    };
	    GridContainer.prototype._doLayout = function (bounds) {
	        var r = bounds.clone();
	        this._gridView.setRect(r);
	        //this._feedbackView.setRect(r);
	        r.x = r.y = 0;
	        this._gridView["$_layout"](r);
	    };
	    GridContainer.prototype._doPrepareRender = function (bounds) {
	        var r = bounds.clone();
	        this._gridView.setRect(r);
	        r.x = r.y = 0;
	        this._gridView["$_prepareRender"](r);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    GridContainer.prototype._createGridView = function () {
	        return new GridView_1.GridView(this);
	    };
	    return GridContainer;
	}(VisualContainer_1.VisualContainer));
	exports.GridContainer = GridContainer;
	});

	unwrapExports(GridContainer_1);
	var GridContainer_2 = GridContainer_1.GridContainer;

	var SearchOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// SearchOptions.ts
	// 2019. 07. 04. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var SearchOptions = /** @class */ (function (_super) {
	    __extends(SearchOptions, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SearchOptions(config) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        _this.allFields = true;
	        _this.caseSensitive = false;
	        _this.partialMatch = false;
	        _this.regularExpression = false;
	        config && _this.extend(config);
	        return _this;
	    }
	    return SearchOptions;
	}(Base_1.Base));
	exports.SearchOptions = SearchOptions;
	var SearchCellOptions = /** @class */ (function (_super) {
	    __extends(SearchCellOptions, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function SearchCellOptions(config) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        _this.fields = null;
	        _this.caseSensitive = false;
	        _this.partialMatch = false;
	        _this.regularExpression = false;
	        _this.columns = null;
	        config && _this.extend(config);
	        return _this;
	    }
	    return SearchCellOptions;
	}(Base_1.Base));
	exports.SearchCellOptions = SearchCellOptions;
	});

	unwrapExports(SearchOptions_1);
	var SearchOptions_2 = SearchOptions_1.SearchOptions;
	var SearchOptions_3 = SearchOptions_1.SearchCellOptions;

	var LocalDataProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// FieldSummary.ts
	// 2019. 07. 03. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });








	var LocalDataProvider = /** @class */ (function (_super) {
	    __extends(LocalDataProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LocalDataProvider() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._points = [];
	        _this._nextPoint = 0;
	        _this._values = [];
	        _this._rowIds = [];
	        _this._rowStates = [];
	        _this._orgValues = null;
	        _this._needRestore = false;
	        _this._deletedCount = 0;
	        _this._nextRowId = 0;
	        return _this;
	    }
	    LocalDataProvider.prototype.dispose = function () {
	        this._values = null;
	        this._rowIds = null;
	        this._rowStates = null;
	        this._points = null;
	        this._orgValues = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    LocalDataProvider.prototype.getDataRow = function (rowId) {
	        return this._rowIds.indexOf(rowId);
	    };
	    Object.defineProperty(LocalDataProvider.prototype, "rowCount", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._values.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalDataProvider.prototype, "isSummarized", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalDataProvider.prototype, "deletedCount", {
	        get: function () {
	            return this._deletedCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LocalDataProvider.prototype.getRowId = function (row) {
	        return this._rowIds[row];
	    };
	    LocalDataProvider.prototype.$_internalInsertField = function (index, field) {
	        index = _super.prototype.$_internalInsertField.call(this, index, field);
	        if (index >= 0) {
	            var r, vals;
	            var rows = this._values.length;
	            for (r = 0; r < rows; r++) {
	                vals = this._values[r];
	                vals && vals.splice(index, 0, undefined);
	            }
	            if (this._orgValues) {
	                rows = Math.min(rows, this._orgValues.length);
	                for (r = 0; r < rows; r++) {
	                    vals = this._orgValues[r];
	                    vals && vals.splice(index, 0, undefined);
	                }
	            }
	        }
	        return index;
	    };
	    LocalDataProvider.prototype.$_internalClearFields = function () {
	        _super.prototype.$_internalClearFields.call(this);
	        this.$_clearRows();
	    };
	    LocalDataProvider.prototype.setRowCount = function (newCount, fillDefaults, defaultValues, rowState) {
	        if (fillDefaults === void 0) { fillDefaults = false; }
	        if (defaultValues === void 0) { defaultValues = null; }
	        if (rowState === void 0) { rowState = RowState_1.RowState.NONE; }
	        if (!this._checkClientState())
	            return;
	        var values = this._values;
	        var oldCount = values.length;
	        var count = Math.max(0, newCount);
	        if (count == oldCount) {
	            return;
	        }
	        var ids = this._rowIds;
	        var states = this._rowStates;
	        this.refreshFieldFormats();
	        values.length = ids.length = states.length = count;
	        if (this._orgValues && this._orgValues.length > count) {
	            this._orgValues.length = count;
	        }
	        if (count > oldCount && (fillDefaults || defaultValues)) {
	            var flds = this.fieldCount;
	            var defaults = defaultValues;
	            if (defaults && !(defaults instanceof Array)) {
	                defaults = this.objectToRow(defaults);
	            }
	            if (defaults && defaults.length < 1) {
	                defaults = null;
	            }
	            if (fillDefaults || defaults) {
	                var defCount = defaults ? Math.min(defaults.length, flds) : 0;
	                for (var i = oldCount; i < count; i++) {
	                    var vals = [];
	                    if (fillDefaults) {
	                        for (var j = 0; j < flds; j++) {
	                            var fld = this.getField(j);
	                            vals[j] = fld.defaultValue !== undefined ? fld.defaultValue : fld.nullValue;
	                        }
	                    }
	                    if (defCount > 0) {
	                        for (var j = 0; j < defCount; j++) {
	                            var v = defaults[j];
	                            if (v !== undefined) {
	                                vals[j] = this.getField(j).readValue(v);
	                            }
	                        }
	                    }
	                    values[i] = vals;
	                }
	            }
	        }
	        else if (count < oldCount && this._deletedCount > 0) {
	            for (var i = oldCount - 1; i >= count; i--) {
	                if (states[i] == RowState_1.RowState.DELETED || states[i] == RowState_1.RowState.CREATE_AND_DELETED) {
	                    this._deletedCount--;
	                }
	                states[i] = RowState_1.RowState.NONE;
	            }
	        }
	        rowState = (this.checkStates && rowState) ? rowState : RowState_1.RowState.NONE;
	        for (var i = oldCount; i < count; i++) {
	            states[i] = rowState;
	            ids[i] = this._nextRowId++;
	        }
	        // for (let i = this._hideRowIds.length-1; i >= 0; i--) {
	        // 	let j = this._hideRowIds[i];
	        // 	ids.indexOf(j) < 0 && this._hideRowIds.splice(i,1);
	        // }
	        this.tags.setRowCount(count);
	        this._fireRefresh();
	        this._fireRowCountChanged();
	    };
	    LocalDataProvider.prototype.$_clearRows = function () {
	        this._values.length = 0;
	        this._values = [];
	        this._rowIds.length = 0;
	        this._rowIds = [];
	        this._rowStates.length = 0;
	        this._rowStates = [];
	        // this._hideRowIds.length = 0;
	        // this._hideRowIds = [];
	        if (this._orgValues) {
	            this._orgValues.length = 0;
	            this._orgValues = [];
	        }
	        else {
	            this._orgValues = null;
	        }
	        this._deletedCount = 0;
	        this.tags.clearRows();
	    };
	    LocalDataProvider.prototype.clearRows = function () {
	        if (!this._checkClientState())
	            return;
	        this.$_clearRows();
	        this._fireRefresh();
	        this._fireRowCountChanged();
	    };
	    LocalDataProvider.prototype.setRows = function (rows, start, count) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        if (!this._checkClientState())
	            return;
	        if (count == 0)
	            return;
	        this.refreshFieldFormats();
	        this.beginUpdate();
	        try {
	            this.$_clearRows();
	            var checkSt = this.checkStates;
	            var filters = this.filters;
	            var runtime = this.filterRuntime;
	            var len = void 0;
	            if (rows && (len = rows.length) > 0 && start < len) {
	                start = Math.max(0, start);
	                if (count < 0) {
	                    count = len;
	                }
	                else {
	                    count = Math.min(count, len - start);
	                }
	                if (filters) {
	                    this._values.length = this._rowIds.length = this._rowStates.length = count;
	                    filters.prepare(runtime, this);
	                    var end = len;
	                    var r = 0;
	                    var n = 0;
	                    for (var i = start; i < end && r < count; i++) {
	                        var row = rows[i];
	                        if (!(row instanceof Array)) {
	                            row = this.objectToRow(row);
	                        }
	                        if (filters.select(runtime, n++, row)) {
	                            this.internalSetRow(r++, row, checkSt);
	                        }
	                    }
	                    this._values.length = this._rowIds.length = this._rowStates.length = r;
	                }
	                else {
	                    var end = Math.min(len, start + count);
	                    if (end > start) {
	                        this._values.length = this._rowIds.length = this._rowStates.length = end - start;
	                        var r = 0;
	                        for (var i = start; i < end; i++) {
	                            var row = rows[i];
	                            if (!(row instanceof Array)) {
	                                row = this.objectToRow(row);
	                            }
	                            this.internalSetRow(r++, row, checkSt);
	                        }
	                    }
	                }
	            }
	        }
	        finally {
	            this.endUpdate(false);
	        }
	        this.tags.setRows();
	        this._fireRefresh();
	        this._fireRowCountChanged();
	    };
	    LocalDataProvider.prototype.setXmlRows = function (rows, start, count) {
	        if (count === void 0) { count = -1; }
	        if (!this._checkClientState())
	            return;
	        if (count == 0)
	            return;
	        // rows = DataHelper.xmlToArray(this, rows, start, count);
	        // this.setRows(rows);
	    };
	    LocalDataProvider.prototype.insertRows = function (row, rows, start, count, rowEvents) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        if (rowEvents === void 0) { rowEvents = false; }
	        if (!this._checkClientState())
	            return;
	        if (!rows)
	            return;
	        var len = rows.length;
	        if (len < 1)
	            return;
	        count = (count < 0) ? len : Math.min(len, count);
	        if (count == 0) {
	            return;
	        }
	        if (row < 0 || row > this._values.length) {
	            throw new DataSource_1.DataSourceError("row is out of bounds:" + row);
	        }
	        this.refreshFieldFormats();
	        start = Math.max(0, start);
	        var end = Math.min(len, start + count);
	        if (rowEvents) {
	            var r = row;
	            for (var i = start; i < end; i++) {
	                var v = rows[i];
	                if (!(v instanceof Array)) {
	                    v = this.objectToRow(v);
	                }
	                if (this.fireRowInserting(r, v)) {
	                    this.internalInsertRow(r, v);
	                    this.tags.insertRow(r);
	                    this.fireRowInserted(r);
	                    this._fireRowCountChanged();
	                    r++;
	                }
	            }
	        }
	        else {
	            var r = row;
	            for (var i = start; i < end; i++, r++) {
	                var v = rows[i];
	                if (!(v instanceof Array)) {
	                    v = this.objectToRow(v);
	                }
	                this.internalInsertRow(r, v);
	            }
	            this.tags.insertRows(row, count = end - start);
	            this.fireRowsInserted(row, count);
	            this._fireRowCountChanged();
	        }
	    };
	    LocalDataProvider.prototype.appendRows = function (rows, start, count, rowEvents) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        if (rowEvents === void 0) { rowEvents = false; }
	        this.insertRows(this.rowCount, rows, start, count, rowEvents);
	    };
	    LocalDataProvider.prototype.insertXmlRows = function (row, rows, start, count, rowEvents) {
	        throw new Error("Method not implemented.");
	    };
	    LocalDataProvider.prototype.appendXmlRows = function (rows, start, count, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        this.insertXmlRows(this.rowCount, rows, start, count, rowEvents);
	    };
	    LocalDataProvider.prototype.updateRows = function (row, rows, start, count, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        this.$_updateRows(row, rows, start, count, false, rowEvents);
	    };
	    LocalDataProvider.prototype.updateStrictRows = function (row, rows, start, count, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        this.$_updateRows(row, rows, start, count, true, rowEvents);
	    };
	    LocalDataProvider.prototype.updateXmlRows = function (row, rows, start, count, rowEvents) {
	        throw new Error("Method not implemented.");
	    };
	    LocalDataProvider.prototype.getValue = function (row, field) {
	        this.checkRowIndex(row);
	        this.checkFieldIndex(field);
	        var vals = this._values[row];
	        return vals ? vals[field] : undefined;
	    };
	    LocalDataProvider.prototype.setValue = function (row, field, value) {
	        if (!this._checkClientState())
	            return false;
	        this.checkRowIndex(row);
	        this.checkFieldIndex(field);
	        var fld = this.getField(field);
	        var state = this._rowStates[row];
	        if (!fld.updatable && (state == RowState_1.RowState.NONE || state == RowState_1.RowState.UPDATED)) {
	            return false;
	        }
	        var vals = this._values[row];
	        var newVal = fld.readValue(value);
	        if (vals && fld.equalValues(newVal, vals[field])) {
	            return false;
	        }
	        this.refreshFieldFormat(fld);
	        var oldVals;
	        var needState = this.checkStates && (state == RowState_1.RowState.NONE || !state);
	        if (!vals) {
	            this._values[row] = vals = [];
	        }
	        if (needState && this._orgValues) {
	            oldVals = vals.concat();
	        }
	        vals[field] = newVal;
	        this._internalCalculateValues(vals, row);
	        if (needState) {
	            if (oldVals) {
	                this._orgValues[row] = oldVals;
	            }
	            this.changeRowState(row, RowState_1.RowState.UPDATED, true);
	        }
	        else if (this._needRestore) {
	            this.restoreState(row);
	        }
	        this.tags.setValue(row, field);
	        this.fireValueChanged(row, field);
	        return true;
	    };
	    LocalDataProvider.prototype.updateRow = function (row, values) {
	        return this.$_updateRow(row, values, false);
	    };
	    LocalDataProvider.prototype.updateStrictRow = function (row, values) {
	        return this.$_updateRow(row, values, true);
	    };
	    LocalDataProvider.prototype.getRow = function (row) {
	        this.checkRowIndex(row);
	        var vals = this._values[row];
	        return vals ? vals.slice() : [];
	    };
	    LocalDataProvider.prototype.getRowObject = function (row) {
	        this.checkRowIndex(row);
	        return this.$_getRowObject(row, this.fieldCount);
	    };
	    LocalDataProvider.prototype.getRows = function (startRow, endRow) {
	        if (startRow === void 0) { startRow = 0; }
	        if (endRow === void 0) { endRow = -1; }
	        var rowCount = this._values.length;
	        var r1 = Math.max(0, startRow);
	        var r2 = endRow < 0 ? rowCount - 1 : Math.min(rowCount - 1, endRow);
	        if (r1 >= rowCount || r2 < r1) {
	            return [];
	        }
	        var cnt = r2 - r1 + 1;
	        var rows = new Array(cnt);
	        for (var i = 0; i < cnt; i++) {
	            rows[i] = this._values[i + r1] || [];
	        }
	        return rows;
	    };
	    LocalDataProvider.prototype.getRowObjects = function (startRow, endRow) {
	        if (startRow === void 0) { startRow = 0; }
	        if (endRow === void 0) { endRow = -1; }
	        var rowCount = this._values.length;
	        var r1 = Math.max(0, startRow);
	        var r2 = endRow < 0 ? rowCount - 1 : Math.min(rowCount - 1, endRow);
	        if (r1 >= rowCount || r2 < r1) {
	            return [];
	        }
	        var fldCount = this.fieldCount;
	        var cnt = r2 - r1 + 1;
	        var rows = new Array(cnt);
	        for (var i = 0; i < cnt; i++) {
	            rows[i] = this.$_getRowObject(i + r1, fldCount);
	        }
	        return rows;
	    };
	    LocalDataProvider.prototype.getOutputObject = function (options, row) {
	        var obj = this.getRowObject(row);
	        options && this.$_createOutputRows([obj], options);
	        return obj;
	    };
	    LocalDataProvider.prototype.getOutputObjects = function (options, startRow, endRow) {
	        if (startRow === void 0) { startRow = 0; }
	        if (endRow === void 0) { endRow = -1; }
	        var rows = this.getRowObjects(startRow, endRow);
	        options && this.$_createOutputRows(rows, options, startRow);
	        return rows;
	    };
	    LocalDataProvider.prototype.getColumn = function (field, startRow, endRow) {
	        if (startRow === void 0) { startRow = 0; }
	        if (endRow === void 0) { endRow = -1; }
	        this.checkFieldIndex(field);
	        var rowCount = this._values.length;
	        endRow = endRow < 0 ? rowCount - 1 : Math.min(rowCount - 1, endRow);
	        startRow = Math.max(0, startRow);
	        if (startRow >= rowCount || endRow < startRow) {
	            return null;
	        }
	        var values = new Array(endRow - startRow + 1);
	        for (var i = startRow; i <= endRow; i++) {
	            var vals = this._values[i];
	            values[i - startRow] = vals && vals[field];
	        }
	        return values;
	    };
	    LocalDataProvider.prototype.hasData = function (row) {
	        return row >= 0 && row < this._values.length && this._values[row] !== undefined;
	    };
	    LocalDataProvider.prototype.insertRow = function (row, values) {
	        if (!this._checkClientState())
	            return false;
	        if (row < 0 || row > this._values.length) {
	            throw new DataSource_1.DataSourceError("row is out of bounds:" + row);
	        }
	        this.refreshFieldFormats();
	        if (values && this.fireRowInserting(row, values)) {
	            if (!(values instanceof Array)) {
	                values = this.objectToRow(values);
	            }
	            this.internalInsertRow(row, values);
	            this.tags.insertRow(row);
	            this.fireRowInserted(row);
	            this._fireRowCountChanged();
	            return true;
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.appendRow = function (values) {
	        return this.insertRow(this.rowCount, values);
	    };
	    LocalDataProvider.prototype.removeRow = function (row) {
	        if (!this._checkClientState())
	            return false;
	        this.checkRowIndex(row);
	        if (this.softDeleting && this.checkStates) {
	            var state = this._rowStates[row];
	            switch (state) {
	                case RowState_1.RowState.CREATED:
	                    if (this.deleteCreated) {
	                        this.$_deleteRow(row);
	                    }
	                    else {
	                        this.changeRowState(row, RowState_1.RowState.CREATE_AND_DELETED, true, true, true);
	                    }
	                    break;
	                case RowState_1.RowState.DELETED:
	                case RowState_1.RowState.CREATE_AND_DELETED:
	                    break;
	                default:
	                    this.changeRowState(row, RowState_1.RowState.DELETED, true, true, true);
	                    break;
	            }
	            return true;
	        }
	        else {
	            return this.$_deleteRow(row);
	        }
	    };
	    LocalDataProvider.prototype.removeRows = function (rows, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        if (!this._checkClientState())
	            return;
	        var deleteCreated = this.deleteCreated;
	        var cnt;
	        if (!rows || (cnt = rows.length) < 1) {
	            return;
	        }
	        if (this.softDeleting && this.checkStates) {
	            var stateRows = rowEvents ? null : [];
	            for (var i = cnt; i--;) {
	                var row = rows[i];
	                this.checkRowIndex(row);
	                var changed = false;
	                var state = this._rowStates[row];
	                switch (state) {
	                    case RowState_1.RowState.CREATED:
	                        if (!deleteCreated) {
	                            changed = this.changeRowState(row, RowState_1.RowState.CREATE_AND_DELETED, rowEvents, false, true);
	                            rows.splice(i, 1);
	                        }
	                        break;
	                    case RowState_1.RowState.DELETED:
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        rows.splice(i, 1);
	                        break;
	                    default:
	                        changed = this.changeRowState(row, RowState_1.RowState.DELETED, rowEvents, false, true);
	                        rows.splice(i, 1);
	                        break;
	                }
	                if (stateRows && changed) {
	                    stateRows.push(row);
	                }
	            }
	            if (!rowEvents) {
	                if (stateRows && stateRows.length > 0) {
	                    this.fireRowStatesChanged(stateRows);
	                }
	            }
	        }
	        if ((cnt = rows.length) > 0) {
	            if (cnt > 1) {
	                rows.sort(function (v1, v2) {
	                    return v1 - v2;
	                });
	            }
	            if (rowEvents) {
	                for (var i = cnt; i--;) {
	                    var row = rows[i];
	                    this.checkRowIndex(row);
	                    this.$_deleteRow(row);
	                }
	            }
	            else if (this.fireRowsRemoving(rows)) {
	                for (var i = cnt; i--;) {
	                    var row = rows[i];
	                    this.checkRowIndex(row);
	                    var state = this._rowStates[row];
	                    this.internalRemoveRow(row);
	                    if (RowState_1.isDeletedState(state)) {
	                        this._deletedCount--;
	                    }
	                }
	                this.tags.removeRows(rows);
	                this.fireRowsRemoved(rows);
	                this._fireRowCountChanged();
	            }
	        }
	    };
	    LocalDataProvider.prototype.moveRow = function (row, newRow) {
	        if (!this._checkClientState())
	            return;
	        if (row == newRow) {
	            return;
	        }
	        this.checkRowIndex(row);
	        this.checkRowIndex(newRow);
	        if (this.fireRowMoving(row, newRow)) {
	            this.internalMoveRow(row, newRow);
	            this.tags.moveRow(row, newRow);
	            this.fireRowMoved(row, newRow);
	        }
	    };
	    LocalDataProvider.prototype.moveRows = function (row, count, newRow) {
	        if (!this._checkClientState())
	            return;
	        if (count < 1 || row == newRow) {
	            return;
	        }
	        this.checkRowIndex(row);
	        this.checkRowIndex(newRow);
	        if (this.fireRowsMoving(row, count, newRow)) {
	            this.internalMoveRows(row, count, newRow);
	            this.tags.moveRows(row, count, newRow);
	            this.fireRowsMoved(row, count, newRow);
	        }
	    };
	    LocalDataProvider.prototype.getRowState = function (row) {
	        this.checkRowIndex(row);
	        return this._rowStates[row] || RowState_1.RowState.NONE;
	    };
	    LocalDataProvider.prototype.$_checkDeleted = function (oldState, newState) {
	        if (RowState_1.isDeletedState(newState)) {
	            this._deletedCount++;
	        }
	        else if (RowState_1.isDeletedState(oldState) && !RowState_1.isDeletedState(newState)) {
	            this._deletedCount--;
	        }
	    };
	    LocalDataProvider.prototype.setRowState = function (row, state, force) {
	        if (!this._checkClientState())
	            return;
	        this.checkRowIndex(row);
	        if (this._orgValues) {
	            this.changeRowStateEx(row, state, true, force, false);
	        }
	        else {
	            this.changeRowState(row, state, true, force);
	        }
	    };
	    LocalDataProvider.prototype.setRowStates = function (rows, state, force, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        if (!this._checkClientState())
	            return;
	        var cnt;
	        if (!rows || (cnt = rows.length) < 1) {
	            return;
	        }
	        if (rowEvents) {
	            for (var i = 0; i < cnt; i++) {
	                var row = rows[i];
	                this.checkRowIndex(row);
	                this.changeRowStateEx(row, state, true, force, false);
	            }
	        }
	        else {
	            var list = [];
	            var states = this._rowStates;
	            for (var i = 0; i < cnt; i++) {
	                var row = rows[i];
	                var oldState = states[row];
	                this.checkRowIndex(row);
	                if (state != oldState) {
	                    states[row] = state;
	                    list.push(row);
	                    this.$_checkDeleted(oldState, state);
	                    if (this._orgValues) {
	                        this.prepareOrgValues(row, oldState, state);
	                    }
	                }
	            }
	            if (list.length > 0) {
	                this.fireRowStatesChanged(list);
	            }
	        }
	    };
	    LocalDataProvider.prototype.clearRowStates = function (deleteRows, rowEvents) {
	        if (rowEvents === void 0) { rowEvents = false; }
	        if (!this._checkClientState())
	            return;
	        var states = this._rowStates;
	        var rows = [];
	        for (var i = states.length; i--;) {
	            var state = states[i];
	            switch (state) {
	                case RowState_1.RowState.CREATE_AND_DELETED:
	                case RowState_1.RowState.DELETED:
	                    if (deleteRows) {
	                        if (rowEvents) {
	                            this.$_deleteRow(i);
	                        }
	                        else {
	                            this.internalRemoveRow(i);
	                            this._deletedCount--;
	                        }
	                        rows.push(i);
	                    }
	                    else {
	                        this.changeRowState(i, RowState_1.RowState.NONE, rowEvents);
	                        this._deletedCount--;
	                    }
	                    break;
	                default:
	                    this.changeRowState(i, RowState_1.RowState.NONE, rowEvents);
	                    break;
	            }
	        }
	        this.$_resetOrgValues();
	        if (!rowEvents) {
	            if (rows.length > 0) {
	                this.fireRowsRemoved(rows);
	                this._fireRowCountChanged();
	            }
	            this.fireRowStatesCleared();
	        }
	    };
	    LocalDataProvider.prototype.getStateRows = function (state) {
	        var rows = [];
	        if (state) {
	            for (var i = 0, cnt = this._rowStates.length; i < cnt; i++) {
	                var st = this._rowStates[i];
	                if (st == state) {
	                    rows.push(i);
	                }
	            }
	        }
	        return rows;
	    };
	    LocalDataProvider.prototype.getAllStateRows = function () {
	        var rows = {};
	        var created = rows["created"] = [];
	        var updated = rows["updated"] = [];
	        var deleted = rows["deleted"] = [];
	        var cdeleted = rows["createAndDeleted"] = [];
	        for (var i = 0, cnt = this._rowStates.length; i < cnt; i++) {
	            var st = this._rowStates[i];
	            if (st === RowState_1.RowState.CREATED) {
	                created.push(i);
	            }
	            else if (st === RowState_1.RowState.UPDATED) {
	                updated.push(i);
	            }
	            else if (st === RowState_1.RowState.DELETED) {
	                deleted.push(i);
	            }
	            else if (st === RowState_1.RowState.CREATE_AND_DELETED) {
	                cdeleted.push(i);
	            }
	        }
	        return rows;
	    };
	    LocalDataProvider.prototype.getRowStateCount = function (states) {
	        var len = states ? states.length : 0;
	        var cnt = this._rowStates.length;
	        var count = 0;
	        if (len && cnt) {
	            if (len > 1) {
	                for (var i = 0; i < cnt; i++) {
	                    var state = this._rowStates[i];
	                    if (states.indexOf(state) >= 0) {
	                        count++;
	                    }
	                }
	            }
	            else {
	                var state = states[0];
	                for (var i = 0; i < cnt; i++) {
	                    if (this._rowStates[i] === state) {
	                        count++;
	                    }
	                }
	            }
	        }
	        return count;
	    };
	    LocalDataProvider.prototype.$_restoreState = function (row) {
	        var state = this._rowStates[row];
	        if (state === RowState_1.RowState.UPDATED) {
	            var orgs = this._orgValues[row];
	            if (orgs) {
	                var vals = this._values[row];
	                var strict = this.strictRestore;
	                for (var i = 0, cnt = this.fieldCount; i < cnt; i++) {
	                    var v1 = vals.length > i ? vals[i] : undefined;
	                    var v2 = orgs.length > i ? orgs[i] : undefined;
	                    var field = this.getField(i);
	                    if (strict) {
	                        if (!field.equalValues(v1, v2)) {
	                            return false;
	                        }
	                    }
	                    else {
	                        if (!field.sameValues(v1, v2)) {
	                            return false;
	                        }
	                    }
	                }
	                this._rowStates[row] = RowState_1.RowState.NONE;
	                return true;
	            }
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.restoreUpdatedStates = function (rows) {
	        if (!this._orgValues)
	            return;
	        if (!this._checkClientState())
	            return;
	        var list = [];
	        if (rows != null) {
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var r = rows[i];
	                if (r >= 0 && r < this._values.length) {
	                    if (this.$_restoreState(r)) {
	                        list.push(r);
	                    }
	                }
	            }
	        }
	        else {
	            for (var i = 0, cnt = this._values.length; i < cnt; i++) {
	                if (this.$_restoreState(i)) {
	                    list.push(i);
	                }
	            }
	        }
	        if (list.length > 0) {
	            this.fireRowStatesChanged(list);
	        }
	    };
	    LocalDataProvider.prototype.$_restoreRow = function (row) {
	        var state = this._rowStates[row];
	        if (state === RowState_1.RowState.UPDATED) {
	            var orgs = this._orgValues[row];
	            if (orgs) {
	                var vals = this._values[row];
	                for (var i = 0, cnt = Math.min(orgs.length, this.fieldCount); i < cnt; i++) {
	                    vals[i] = orgs[i];
	                }
	                this._rowStates[row] = RowState_1.RowState.NONE;
	                return true;
	            }
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.restoreUpdatedRows = function (rows) {
	        if (!this._orgValues)
	            return;
	        if (!this._checkClientState())
	            return;
	        var list = [];
	        if (rows != null) {
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var r = rows[i];
	                if (r >= 0 && r < this._values.length) {
	                    if (this.$_restoreRow(r)) {
	                        list.push(r);
	                    }
	                }
	            }
	        }
	        else {
	            for (var i = 0, cnt = this._values.length; i < cnt; i++) {
	                if (this.$_restoreRow(i)) {
	                    list.push(i);
	                }
	            }
	        }
	        if (list.length > 0) {
	            this.fireRestoreRows(list);
	            this.fireRowStatesChanged(list);
	        }
	    };
	    LocalDataProvider.prototype.getUpdatedCells = function (rows) {
	        var mode = this.restoreMode;
	        if (!this._orgValues || !(mode == RestoreMode_1.RestoreMode.AUTO || mode == RestoreMode_1.RestoreMode.EXPLICIT)) {
	            return null;
	        }
	        if (rows == null) {
	            rows = this.getStateRows(RowState_1.RowState.UPDATED);
	        }
	        if (rows == null) {
	            return null;
	        }
	        var ret = [];
	        for (var i = 0, cnt = rows.length; i < cnt; i++) {
	            var row = rows[i];
	            var orgs = row >= 0 && this._orgValues && row < this._orgValues.length ? this._orgValues[row] : null;
	            if (orgs) {
	                var vals = this._values[row];
	                var strict = this.strictRestore;
	                var updateCells = [];
	                for (var j = 0, fcnt = this.fieldCount; j < fcnt; j++) {
	                    var v1 = vals.length > j ? vals[j] : undefined;
	                    var v2 = orgs.length > j ? orgs[j] : undefined;
	                    var field = this.getField(j);
	                    if (field.calculated)
	                        continue;
	                    if (strict) {
	                        if (!field.equalValues(v1, v2)) {
	                            updateCells.push({
	                                fieldName: this.getOrgFieldName(j),
	                                oldValue: orgs[j],
	                                newValue: vals[j]
	                            });
	                        }
	                    }
	                    else {
	                        if (!field.sameValues(v1, v2)) {
	                            updateCells.push({
	                                fieldName: this.getOrgFieldName(j),
	                                oldValue: orgs[j],
	                                newValue: vals[j]
	                            });
	                        }
	                    }
	                }
	                if (updateCells.length > 0) {
	                    ret.push({
	                        __rowId: row,
	                        updatedCells: updateCells
	                    });
	                }
	            }
	        }
	        return ret;
	    };
	    LocalDataProvider.prototype._doRestoreModeChanged = function () {
	        this.$_resetOrgValues();
	    };
	    LocalDataProvider.prototype.findRow = function (fields, values) {
	        if (fields.length < 1 || values.length < fields.length) {
	            return -1;
	        }
	        var flds = [];
	        var vals = [];
	        var rows = this._values;
	        for (var i = 0, cnt_1 = fields.length; i < cnt_1; i++) {
	            var c = void 0;
	            if (typeof fields[i] === "string") {
	                c = this.getFieldIndex(fields[i]);
	            }
	            else {
	                c = Number(fields[i]);
	            }
	            if (c >= 0 && c < this.fieldCount && flds.indexOf(c) < 0) {
	                flds.push(c);
	                vals.push(values[i]);
	            }
	        }
	        var len = flds.length;
	        for (var i = 0; i < len; i++) {
	            flds[i] = this.getField(flds[i]);
	        }
	        var cnt = rows.length;
	        for (var i = 0; i < cnt; i++) {
	            var row = rows[i];
	            var found = true;
	            for (var c = 0; c < len; c++) {
	                if (!flds[c].equalValues(vals[c], row[c])) {
	                    found = false;
	                    break;
	                }
	            }
	            if (found) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    LocalDataProvider.prototype.canUpdateRow = function (row) {
	        return true;
	    };
	    LocalDataProvider.prototype.canAppendRow = function () {
	        return true;
	    };
	    LocalDataProvider.prototype.canInsertRow = function (row) {
	        return true;
	    };
	    LocalDataProvider.prototype.canDeleteRow = function (row) {
	        return true;
	    };
	    LocalDataProvider.prototype.$_getSortedRows = function (field) {
	        var compFunc;
	        var rows = new Array(this._values.length);
	        switch (this.getField(field).dataType) {
	            case Types.ValueType.NUMBER:
	                compFunc = this.compareNumbers;
	                break;
	            case Types.ValueType.DATETIME:
	                compFunc = this.compareDates;
	                break;
	            case Types.ValueType.BOOLEAN:
	                compFunc = this.compareBools;
	                break;
	            case Types.ValueType.OBJECT:
	                compFunc = this.compareObjects;
	                break;
	            default:
	                compFunc = this.compareValues;
	                break;
	        }
	        for (var i = rows.length; i--;) {
	            rows[i] = i;
	        }
	        this.$_sortRows(rows, field, compFunc.bind(this), 0, rows.length - 1);
	        return rows;
	    };
	    LocalDataProvider.prototype.getDistinctValues = function (field, maxCount, sortDir) {
	        if (maxCount === void 0) { maxCount = -1; }
	        if (sortDir === void 0) { sortDir = Types.SortDirection.ASCENDING; }
	        maxCount = arguments.length > 1 ? maxCount : -1;
	        this.checkFieldIndex(field);
	        var values = [];
	        if (maxCount < 0) {
	            maxCount = this._values.length;
	        }
	        if (maxCount > 0) {
	            var isNum = this.getField(field).dataType == Types.ValueType.NUMBER;
	            var rows = this.$_getSortedRows(field);
	            sortDir === Types.SortDirection.DESCENDING && rows.reverse();
	            var row = this._values[rows[0]];
	            values.push(row ? row[field] : undefined);
	            for (var i = 1, cnt = rows.length; i < cnt; i++) {
	                if (values.length >= maxCount) {
	                    break;
	                }
	                if (!this.equalValues(field, rows[i - 1], rows[i])) {
	                    var row_1 = this._values[rows[i]];
	                    var value = row_1 ? row_1[field] : undefined;
	                    if (values.indexOf(value) == -1 && (!isNum || !isNaN(value))) { // undefined나 NaN이 중복들어가는것을 방지
	                        values.push(value);
	                    }
	                }
	            }
	        }
	        return values;
	    };
	    LocalDataProvider.prototype.compareValues = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : null;
	            var v2 = vals2 ? vals2[field] : null;
	            if (v1 === undefined || v1 === null) {
	                return (v2 === undefined || v2 === null) ? 0 : -1;
	            }
	            if (v2 === undefined || v2 === null) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : (v1 < v2) ? -1 : 0;
	        }
	    };
	    LocalDataProvider.prototype.compareTexts = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : null;
	            var v2 = vals2 ? vals2[field] : null;
	            if (v1 === undefined || v1 === null) {
	                return (v2 === undefined || v2 === null) ? 0 : -1;
	            }
	            if (v2 === undefined || v2 === null) {
	                return 1;
	            }
	            v1 = String(v1).toLocaleLowerCase();
	            v2 = String(v2).toLocaleLowerCase();
	            return v1 > v2 ? 1 : (v1 < v2) ? -1 : 0;
	        }
	    };
	    LocalDataProvider.prototype.compareNumbers = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : NaN;
	            var v2 = vals2 ? vals2[field] : NaN;
	            if (isNaN(v1)) {
	                return (isNaN(v2)) ? 0 : -1;
	            }
	            if (isNaN(v2)) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : (v1 < v2) ? -1 : 0;
	        }
	    };
	    LocalDataProvider.prototype.compareDates = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : null;
	            var v2 = vals2 ? vals2[field] : null;
	            if (!(v1 instanceof Date)) {
	                return !(v2 instanceof Date) ? 0 : -1;
	            }
	            if (!(v2 instanceof Date)) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;
	        }
	    };
	    LocalDataProvider.prototype.compareBools = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? Boolean(vals1[field]) : false;
	            var v2 = vals2 ? Boolean(vals2[field]) : false;
	            return (v1 && !v2) ? 1 : (!v1 && v2) ? -1 : 0;
	        }
	    };
	    LocalDataProvider.prototype.compareObjects = function (field, row1, row2) {
	        var vals1 = this._values[row1];
	        var vals2 = this._values[row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : null;
	            var v2 = vals2 ? vals2[field] : null;
	            if (!v1) {
	                return !v2 ? 0 : -1;
	            }
	            if (!v2) {
	                return 1;
	            }
	            var fld = this.getField(field);
	            return fld["$_compareObject"](v1, v2, row1, row2);
	        }
	    };
	    LocalDataProvider.prototype.summarize = function (field, calcVars) {
	        if (field == null) {
	            return false;
	        }
	        field.clear();
	        var count = this.rowCount;
	        if (count < 1) {
	            return false;
	        }
	        var n = 0;
	        var f = field.field;
	        var sum = 0;
	        var min = NaN;
	        var max = NaN;
	        var i = 0;
	        while (i < count) {
	            var vals = this._values[i++];
	            var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	            if (!isNaN(v)) {
	                sum = min = max = v;
	                n++;
	                break;
	            }
	        }
	        while (i < count) {
	            var vals = this._values[i++];
	            var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	            if (!isNaN(v)) {
	                sum += v;
	                if (v < min)
	                    min = v;
	                if (v > max)
	                    max = v;
	                n++;
	            }
	        }
	        field.count = count;
	        if (n > 0) {
	            field.sum = sum;
	            field.min = min;
	            field.max = max;
	            field.avg = sum / count;
	            if (calcVars) {
	                var vars = 0;
	                var avg = field.avg;
	                for (var i_1 = 0; i_1 < count; i_1++) {
	                    var vals = this._values[i_1];
	                    var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	                    if (!isNaN(v)) {
	                        vars += Math.pow(v - avg, 2);
	                    }
	                }
	                field.varsp = vars / count;
	                field.vars = vars / (count - 1);
	            }
	            else {
	                field.varsp = NaN;
	                field.vars = NaN;
	            }
	        }
	        return true;
	    };
	    LocalDataProvider.prototype.summarizeRange = function (field, rows, calcVars) {
	        if (field == null || rows == null) {
	            return false;
	        }
	        field.clear();
	        var count = rows.length;
	        if (count < 1) {
	            return false;
	        }
	        var n = 0;
	        var f = field.field;
	        var sum = 0;
	        var min = NaN;
	        var max = NaN;
	        var i = 0;
	        while (i < count) {
	            var r = rows[i++];
	            var vals = this._values[r];
	            var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	            if (!isNaN(v)) {
	                sum = min = max = v;
	                n++;
	                break;
	            }
	        }
	        while (i < count) {
	            var r = rows[i++];
	            var vals = this._values[r];
	            var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	            if (!isNaN(v)) {
	                sum += v;
	                if (v < min)
	                    min = v;
	                if (v > max)
	                    max = v;
	                n++;
	            }
	        }
	        field.count = count;
	        if (n > 0) {
	            field.sum = sum;
	            field.min = min;
	            field.max = max;
	            field.avg = sum / count;
	            if (calcVars) {
	                var vars = 0;
	                var avg = field.avg;
	                for (var i_2 = 0; i_2 < count; i_2++) {
	                    var r = rows[i_2];
	                    var vals = this._values[r];
	                    var v = vals ? (vals[f] == null ? undefined : vals[f]) : NaN;
	                    if (!isNaN(v)) {
	                        vars += Math.pow(v - avg, 2);
	                    }
	                }
	                field.varsp = vars / count;
	                field.vars = vars / (count - 1);
	            }
	            else {
	                field.varsp = NaN;
	                field.vars = NaN;
	            }
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    LocalDataProvider.prototype.checkRowIndex = function (row) {
	        if (row < 0 || row >= this._values.length) {
	            //if ($_debug) debugger;
	            throw new DataSource_1.DataSourceError("row is out of bounds: " + row);
	        }
	    };
	    LocalDataProvider.prototype.$_resetOrgValues = function () {
	        var mode = this.restoreMode;
	        this._orgValues = (!this.checkStates || mode == RestoreMode_1.RestoreMode.NONE) ? null : [];
	        this._needRestore = this._orgValues && mode == RestoreMode_1.RestoreMode.AUTO;
	    };
	    LocalDataProvider.prototype.arrayToRow = function (values, row) {
	        var cols = Math.min(values ? values.length : 0, this.fieldCount);
	        var vals = new Array(cols);
	        for (var c = 0; c < cols; c++) {
	            vals[c] = this.getField(c).readValue(values[c]);
	        }
	        this._internalCalculateValues(vals, row);
	        return vals;
	    };
	    LocalDataProvider.prototype.internalSetRow = function (row, values, checkState) {
	        var vals = this.arrayToRow(values, row);
	        this._values[row] = vals;
	        this._rowIds[row] = this._nextRowId++;
	        if (this.checkStates) {
	            this._rowStates[row] = RowState_1.RowState.NONE;
	        }
	    };
	    LocalDataProvider.prototype.internalInsertRow = function (row, values) {
	        var vals = this.arrayToRow(values, row), append = row == this._values.length;
	        if (append) {
	            this._values.push(vals);
	            this._rowIds.push(this._nextRowId++);
	        }
	        else {
	            this._values.splice(row, 0, vals);
	            this._rowIds.splice(row, 0, this._nextRowId++);
	        }
	        if (append) {
	            this._rowStates.push(this.checkStates ? RowState_1.RowState.CREATED : RowState_1.RowState.NONE);
	        }
	        else {
	            this._rowStates.splice(row, 0, this.checkStates ? RowState_1.RowState.CREATED : RowState_1.RowState.NONE);
	            if (this._orgValues) {
	                this._orgValues.splice(row, 0, undefined);
	            }
	        }
	    };
	    LocalDataProvider.prototype.$_updateRow = function (row, values, strict) {
	        if (strict === void 0) { strict = false; }
	        if (!this._checkClientState())
	            return;
	        this.checkRowIndex(row);
	        this.refreshFieldFormats();
	        if (values && this.fireRowUpdating(row, values)) {
	            this.internalUpdateRow(row, values, strict, true);
	            this.tags.updateRow(row);
	            this.fireRowUpdated(row);
	            return true;
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.$_updateRows = function (row, rows, start, count, strict, rowEvents) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        if (strict === void 0) { strict = false; }
	        if (rowEvents === void 0) { rowEvents = false; }
	        if (!this._checkClientState())
	            return;
	        if (!rows)
	            return;
	        var len = rows.length;
	        if (len < 1) {
	            return;
	        }
	        count = (count < 0) ? len : Math.min(len, count);
	        if (count == 0) {
	            return;
	        }
	        this.refreshFieldFormats();
	        var rowCount = this.rowCount;
	        start = Math.max(0, start);
	        var end = Math.min(len, start + count);
	        if (end <= start) {
	            return;
	        }
	        if (rowEvents) {
	            var r = row;
	            for (var i = start; i < end; i++, r++) {
	                if (r >= rowCount) {
	                    break;
	                }
	                if (this.fireRowUpdating(r, rows)) {
	                    var v = rows[i];
	                    this.internalUpdateRow(r, v, strict, true);
	                    this.tags.updateRow(r);
	                    this.fireRowUpdated(r);
	                }
	            }
	        }
	        else {
	            var list = [];
	            var r = row;
	            for (var i = start; i < end; i++, r++) {
	                if (r >= rowCount) {
	                    break;
	                }
	                if (this._rowStates[r] == RowState_1.RowState.NONE) {
	                    list.push(r);
	                }
	                var v = rows[i];
	                this.internalUpdateRow(r, v, strict, false);
	            }
	            if (list.length > 0) {
	                this.fireRowStatesChanged(list);
	            }
	            this.tags.updateRows(row, count = end - start);
	            this.fireRowsUpdated(row, count);
	        }
	    };
	    LocalDataProvider.prototype.internalUpdateRow = function (row, values, strict, stateEvent) {
	        var fields = this.getFields();
	        var isAry = values instanceof Array;
	        var cnt = Math.min(fields.length, isAry ? values.length : fields.length);
	        var vals = this._values[row];
	        var state = this._rowStates[row];
	        var needState = this.checkStates && (state == RowState_1.RowState.NONE || !state);
	        var oldVals;
	        if (!vals) {
	            this._values[row] = vals = [];
	        }
	        if (needState && this._orgValues) {
	            oldVals = vals.concat();
	        }
	        var changed = false;
	        for (var c = 0; c < cnt; c++) {
	            var fld = fields[c];
	            if (fld.updatable || state == RowState_1.RowState.CREATED || state == RowState_1.RowState.CREATE_AND_DELETED) {
	                if (isAry || values.hasOwnProperty(fld.orgFieldName)) {
	                    var v = isAry ? values[c] : values[fld.orgFieldName];
	                    if (!strict || v !== undefined) {
	                        if (this._needRestore) {
	                            changed = changed || (strict ? !fld.equalValues(vals[c], fld.readValue(v)) : !fld.sameValues(vals[c], fld.readValue(v)));
	                        }
	                        else {
	                            changed = true;
	                        }
	                        vals[c] = fld.readValue(v);
	                    }
	                }
	            }
	        }
	        if (changed)
	            this._internalCalculateValues(vals, row);
	        if (needState && changed) {
	            if (oldVals) {
	                this._orgValues[row] = oldVals;
	            }
	            this.changeRowState(row, RowState_1.RowState.UPDATED, stateEvent);
	        }
	        else if (this._needRestore) {
	            this.restoreState(row);
	        }
	    };
	    LocalDataProvider.prototype.changeRowState = function (row, newState, fireEvent, force, checkDeleted) {
	        if (force === void 0) { force = false; }
	        if (checkDeleted === void 0) { checkDeleted = false; }
	        if (this.checkStates || force) {
	            var state = this._rowStates[row];
	            newState = newState || RowState_1.RowState.NONE;
	            if (newState != state) {
	                this._rowStates[row] = newState;
	                if (checkDeleted) {
	                    if (!RowState_1.isDeletedState(state) && RowState_1.isDeletedState(newState)) {
	                        this._deletedCount++;
	                    }
	                    else if (RowState_1.isDeletedState(state) && !RowState_1.isDeletedState(newState)) {
	                        this._deletedCount--;
	                    }
	                }
	                if (fireEvent) {
	                    this.fireRowStateChanged(row);
	                }
	                return true;
	            }
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.restoreState = function (row) {
	        var state = this._rowStates[row];
	        if (state === RowState_1.RowState.UPDATED) {
	            var orgs = this._orgValues[row];
	            if (orgs) {
	                var vals = this._values[row];
	                var strict = this.strictRestore;
	                for (var i = 0, cnt = this.fieldCount; i < cnt; i++) {
	                    var v1 = vals.length > i ? vals[i] : undefined;
	                    var v2 = orgs.length > i ? orgs[i] : undefined;
	                    if (strict) {
	                        if (!this.getField(i).equalValues(v1, v2)) {
	                            return false;
	                        }
	                    }
	                    else {
	                        if (!this.getField(i).sameValues(v1, v2)) {
	                            return false;
	                        }
	                    }
	                }
	                this._rowStates[row] = RowState_1.RowState.NONE;
	                return true;
	            }
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.prepareOrgValues = function (row, oldState, newState) {
	        if (newState == RowState_1.RowState.UPDATED) {
	            this._orgValues[row] = this._values[row] ? this._values[row].concat() : [];
	        }
	        else if (oldState == RowState_1.RowState.UPDATED) {
	            if (this._orgValues[row]) {
	                this._orgValues[row] = undefined;
	            }
	        }
	    };
	    LocalDataProvider.prototype.changeRowStateEx = function (row, newState, fireEvent, force, checkDeleted) {
	        var oldState = this._rowStates[row];
	        if (this.changeRowState(row, newState, false, force, checkDeleted)) {
	            if (this._orgValues) {
	                this.prepareOrgValues(row, oldState, newState);
	            }
	            if (fireEvent) {
	                this.fireRowStateChanged(row);
	            }
	            return true;
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.$_getRowObject = function (row, fldCount) {
	        var data = {};
	        var vals = this._values[row];
	        if (vals) {
	            for (var i = 0; i < fldCount; i++) {
	                var fld = this.getOrgFieldName(i);
	                data[fld] = vals[i];
	            }
	        }
	        return data;
	    };
	    LocalDataProvider.prototype.$_deleteRow = function (row) {
	        if (this.fireRowRemoving(row)) {
	            var state = this._rowStates[row];
	            this.internalRemoveRow(row);
	            if (RowState_1.isDeletedState(state)) {
	                this._deletedCount--;
	            }
	            this.tags.removeRow(row);
	            this.fireRowRemoved(row);
	            this._fireRowCountChanged();
	            return true;
	        }
	        return false;
	    };
	    LocalDataProvider.prototype.internalRemoveRow = function (row) {
	        var rowId = this._rowIds[row];
	        //this._hideRowIds.indexOf(rowId) >= 0 && this._hideRowIds.splice(this._hideRowIds.indexOf(rowId),1);
	        this._values.splice(row, 1);
	        this._rowIds.splice(row, 1);
	        if (this._orgValues && this._orgValues.length > row) {
	            this._orgValues.splice(row, 1);
	        }
	        this._rowStates.splice(row, 1);
	    };
	    LocalDataProvider.prototype.internalMoveRow = function (row, newRow) {
	        var vals = this._values[row];
	        var id = this._rowIds[row];
	        var state = this._rowStates[row];
	        this._values.splice(row, 1);
	        this._rowIds.splice(row, 1);
	        this._rowStates.splice(row, 1);
	        this._values.splice(newRow, 0, vals);
	        this._rowIds.splice(newRow, 0, id);
	        this._rowStates.splice(newRow, 0, state);
	        if (this._orgValues && this._orgValues.length > row) {
	            vals = this._orgValues[row];
	            this._orgValues.splice(row, 1);
	            this._orgValues.splice(newRow, 0, vals);
	        }
	    };
	    LocalDataProvider.prototype.internalMoveRows = function (row, count, newRow) {
	        var rows = this._values.splice(row, count);
	        var ids = this._rowIds.splice(row, count);
	        var states = this._rowStates.splice(row, count);
	        for (var i = 0, cnt = rows.length; i < cnt; i++) {
	            this._values.splice(newRow + i, 0, rows[i]);
	            this._rowIds.splice(newRow + i, 0, ids[i]);
	            this._rowStates.splice(newRow + i, 0, states[i]);
	        }
	        if (this._orgValues && this._orgValues.length > row) {
	            rows = this._orgValues.splice(row, count);
	            this._orgValues.splice(newRow + i, 0, rows[i]);
	        }
	    };
	    LocalDataProvider.prototype.$_searchDataRow = function (fields, values, options, startDataRow, endDataRow) {
	        var rows = this.rowCount;
	        if (rows < 1) {
	            return -1;
	        }
	        var flds = Math.min(fields.length, values.length);
	        if (flds < 1) {
	            return -1;
	        }
	        var all = !options || options.allFields;
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < flds; c++) {
	            fieldTypes[c] = this.getField(fields[c]).dataType;
	        }
	        startDataRow = Math.max(0, startDataRow);
	        endDataRow = Math.min(rows - 1, endDataRow);
	        for (var i = startDataRow; i <= endDataRow; i++) {
	            var found = true;
	            for (var c = 0; c < flds; c++) {
	                var v = this.getValue(i, fields[c]);
	                switch (fieldTypes[c]) {
	                    case Types.ValueType.DATETIME:
	                    case Types.ValueType.DATE:
	                        if (values[c] instanceof Date) {
	                            found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                        }
	                        else {
	                            if (!dateConvert) {
	                                var fmt = /[.]/.test(values[c]) ? "yyyy.MM.dd" : /[/]/.test(values[c]) ? "yyyy/MM/dd" : /[-]/.test(values[c]) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                            }
	                            found = Utils_1.Utils.compareTextValue(values[c], v ? dateConvert.getText(v) : v, sensitive, partial);
	                        }
	                        break;
	                    default:
	                        found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                        break;
	                }
	                if (found && !all) {
	                    return i;
	                }
	                if (!found && all) {
	                    break;
	                }
	            }
	            if (found) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    LocalDataProvider.prototype.searchDataRow = function (fields, values, options, startDataRow, wrap) {
	        if (startDataRow === void 0) { startDataRow = 0; }
	        if (wrap === void 0) { wrap = true; }
	        var result = -1;
	        if (fields && fields.length > 0 && values && values.length > 0) {
	            options = options instanceof SearchOptions_1.SearchOptions ? options : options ? new SearchOptions_1.SearchOptions(options) : null;
	            var cnt = fields.length;
	            var flds = [];
	            for (var c = 0; c < cnt; c++) {
	                var n = parseFloat(fields[c]);
	                if (!isNaN(n)) {
	                    flds.push(n);
	                }
	                else {
	                    var f = this.getFieldIndex(fields[c]);
	                    if (f >= 0) {
	                        flds.push(f);
	                    }
	                }
	            }
	            if (flds.length > 0) {
	                cnt = this.rowCount;
	                startDataRow = Math.max(0, startDataRow);
	                result = startDataRow < cnt ? this.$_searchDataRow(flds, values, options, startDataRow, cnt - 1) : -1;
	                if (result < 0 && wrap && startDataRow > 0) {
	                    result = this.$_searchDataRow(flds, values, options, 0, startDataRow - 1);
	                }
	            }
	        }
	        return result;
	    };
	    LocalDataProvider.prototype.$_searchData = function (fields, value, options, startDataRow, endDataRow, startFieldIndex) {
	        var rows = this.rowCount;
	        if (rows < 1) {
	            return null;
	        }
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var fldCount = this.fieldCount;
	        var fldLen = fields.length;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < fldCount; c++) {
	            fieldTypes[c] = this.getField(c).dataType;
	        }
	        startDataRow = Math.max(0, startDataRow);
	        endDataRow = Math.min(rows - 1, endDataRow);
	        startFieldIndex = Math.max(0, startFieldIndex);
	        if (startFieldIndex >= fields.length) {
	            startDataRow++;
	            startFieldIndex = 0;
	        }
	        for (var i = startDataRow; i <= endDataRow; i++) {
	            var c = (i > startDataRow) ? 0 : startFieldIndex;
	            for (; c < fldLen; c++) {
	                var f = fields[c];
	                if (f >= 0 && f < fldCount) {
	                    var v = this.getValue(i, f);
	                    var found = false;
	                    switch (fieldTypes[f]) {
	                        case Types.ValueType.DATETIME:
	                        case Types.ValueType.DATE:
	                            if (value instanceof Date) {
	                                found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                            }
	                            else {
	                                if (!dateConvert) {
	                                    var fmt = /[.]/.test(value) ? "yyyy.MM.dd" : /[/]/.test(value) ? "yyyy/MM/dd" : /[-]/.test(value) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                    dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                }
	                                found = Utils_1.Utils.compareTextValue(value, v ? dateConvert.getText(v) : v, sensitive, partial);
	                            }
	                            break;
	                        default:
	                            found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                            break;
	                    }
	                    if (found) {
	                        return {
	                            dataRow: i,
	                            fieldIndex: f,
	                            searchFieldIndex: c
	                        };
	                    }
	                }
	            }
	        }
	        return null;
	    };
	    LocalDataProvider.prototype.searchData = function (fields, value, searchOptions, startDataRow, startFieldIndex, wrap) {
	        if (startDataRow === void 0) { startDataRow = 0; }
	        if (startFieldIndex === void 0) { startFieldIndex = 0; }
	        if (wrap === void 0) { wrap = true; }
	        var options = searchOptions instanceof SearchOptions_1.SearchCellOptions ? searchOptions : searchOptions ? new SearchOptions_1.SearchCellOptions(searchOptions) : null;
	        var result = null;
	        if (!fields || fields.length < 1) {
	            fields = [];
	            var arr = this.getFields();
	            for (var i = 0; i < arr.length; i++) {
	                fields.push(arr[i].orgFieldName);
	            }
	        }
	        if (fields && fields.length > 0 && value != null) {
	            var c, n;
	            var cnt = fields.length;
	            var flds = [];
	            for (c = 0; c < cnt; c++) {
	                n = parseFloat(fields[c]);
	                if (!isNaN(n)) {
	                    flds.push(n);
	                }
	                else {
	                    flds.push(this.getFieldIndex(fields[c]));
	                }
	            }
	            if (flds.length > 0) {
	                cnt = this.rowCount;
	                startDataRow = Math.max(0, startDataRow);
	                startFieldIndex = Math.max(0, startFieldIndex);
	                result = startDataRow < cnt ? this.$_searchData(flds, value, options, startDataRow, cnt - 1, startFieldIndex) : null;
	                if (!result && wrap && startDataRow > 0) {
	                    result = this.$_searchData(flds, value, options, 0, startDataRow - 1, 0);
	                }
	                if (result) {
	                    result.fieldName = this.getOrgFieldName(result["fieldIndex"]);
	                }
	            }
	        }
	        return result;
	    };
	    LocalDataProvider.prototype.isDataChanged = function (row, fieldIndex) {
	        if (this._rowStates[row] !== RowState_1.RowState.UPDATED || !this._orgValues) {
	            return false;
	        }
	        this.checkRowIndex(row);
	        this.checkFieldIndex(fieldIndex);
	        if (this._orgValues && this._orgValues[row]) {
	            var v1 = this._orgValues[row][fieldIndex];
	            var v2 = this.getValue(row, fieldIndex);
	            var field = this.getField(fieldIndex);
	            return field && field.dataType !== Types.ValueType.OBJECT && !field.sameValues(v1, v2);
	        }
	        return false;
	    };
	    return LocalDataProvider;
	}(DataProvider_1.DataProvider));
	exports.LocalDataProvider = LocalDataProvider;
	});

	unwrapExports(LocalDataProvider_1);
	var LocalDataProvider_2 = LocalDataProvider_1.LocalDataProvider;

	var TreeItemSorter = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeItemsSorter.ts
	// 2019. 09. 20. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var TreeItemsSorter = /** @class */ (function (_super) {
	    __extends(TreeItemsSorter, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemsSorter() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // internal members
	        //-------------------------------------------------------------------------
	        _this.$_userComparer = function (field, leftItem, rightItem) {
	            if (this._comparer) {
	                return this._comparer(field, leftItem["_rowId"], rightItem["rowId"]);
	            }
	        };
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeItemsSorter.prototype.run = function (parent, field, dir, ignoreCase, left, right, checkRow) {
	        this._rs = parent.provider;
	        var ds = this._ds = this._rs.dataSource;
	        this._parent = parent;
	        this._field = field;
	        var fld = this._ds.getField(field);
	        //this._comparer = fld._comparer ? fld._comparer : _dataSource._comparers[field] ? _dataSource._comparers[field] : _items._labelComparer[field];
	        this._comparer = this._ds["_comparers"][field] || this._rs["_labelComparer"][field];
	        if (this._comparer) {
	            this._comparer = this.$_userComparer;
	        }
	        else {
	            switch (fld.dataType) {
	                case Types.ValueType.NUMBER:
	                    this._comparer = ds["compareNumbers"];
	                    break;
	                case Types.ValueType.DATETIME:
	                    this._comparer = ds["compareNumbers"];
	                    break;
	                case Types.ValueType.BOOLEAN:
	                    this._comparer = ds["compareBools"];
	                    break;
	                case Types.ValueType.OBJECT:
	                    this._comparer = ds["compareObjects"];
	                    break;
	                default:
	                    this._comparer = ignoreCase ? ds["compareTexts"] : ds["compareValues"];
	                    break;
	            }
	        }
	        this.$_sort(left, right, dir, checkRow);
	    };
	    TreeItemsSorter.prototype.$_sort = function (left, right, dir, checkRow) {
	        do {
	            var p = this._parent;
	            var field = this._field;
	            var i = left;
	            var j = right;
	            var m = Math.floor((left + right) / 2);
	            var mi = p.getItem(m).dataRow;
	            var mr = p.getItem(m).row;
	            do {
	                if (dir == Types.SortDirection.ASCENDING) {
	                    while (i <= j) {
	                        var v = this._comparer(this._field, mr, p.getItem(i).row);
	                        if (v == 0 && checkRow) {
	                            v = mi - p.getItem(i).dataRow;
	                        }
	                        if (v <= 0) {
	                            break;
	                        }
	                        i++;
	                    }
	                    while (i <= j) {
	                        var v = this._comparer(field, mr, p.getItem(j).row);
	                        if (v == 0 && checkRow) {
	                            v = mi - p.getItem(j).dataRow;
	                        }
	                        if (v >= 0) {
	                            break;
	                        }
	                        j--;
	                    }
	                }
	                else {
	                    while (i <= j) {
	                        var v = this._comparer(field, mr, p.getItem(i).row);
	                        if (v == 0 && checkRow) {
	                            v = mi - p.getItem(i).dataRow;
	                        }
	                        if (v >= 0) {
	                            break;
	                        }
	                        i++;
	                    }
	                    while (i <= j) {
	                        var v = this._comparer(field, mr, p.getItem(j).row);
	                        if (v == 0 && checkRow) {
	                            v = mi - p.getItem(j).dataRow;
	                        }
	                        if (v <= 0) {
	                            break;
	                        }
	                        j--;
	                    }
	                }
	                if (i <= j) {
	                    if (i != j) {
	                        p["_exchangeItems"](i, j);
	                    }
	                    i++;
	                    j--;
	                }
	            } while (i <= j);
	            if (left < j) {
	                this.$_sort(left, j, dir, checkRow);
	            }
	            left = i;
	        } while (left < right);
	    };
	    return TreeItemsSorter;
	}(Base_1.Base));
	exports.TreeItemsSorter = TreeItemsSorter;
	});

	unwrapExports(TreeItemSorter);
	var TreeItemSorter_1 = TreeItemSorter.TreeItemsSorter;

	var TreeItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeItemsProvider.ts
	// 2019. 09. 20. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });












	var TreeCheckableTag = /** @class */ (function (_super) {
	    __extends(TreeCheckableTag, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeCheckableTag(owner, expression) {
	        var _this = _super.call(this) || this;
	        _this._owner = owner;
	        _this._exprNode = Expression.ExpressionParser.Default.parse(expression, ["value", "values"]);
	        _this._runtime = new DefaultItemProvider_1.CheckableExpressionRuntime();
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    TreeCheckableTag.clearCheckables = function (rs) {
	        var clearCheckable = function (item) {
	            if (item) {
	                item.setCheckable(true);
	                for (var i = item.count; i--;) {
	                    var child = item.getItem(i);
	                    child instanceof TreeItem && clearCheckable(child);
	                }
	            }
	        };
	        for (var i = rs.itemCount; i--;) {
	            var item = rs.getItem(i);
	            if (item instanceof TreeItem) {
	                clearCheckable(item);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeCheckableTag.prototype.connect = function (ds) {
	        this._runtime.setDataSource(ds);
	    };
	    TreeCheckableTag.prototype.disconnect = function () {
	    };
	    TreeCheckableTag.prototype.clearRows = function () {
	        TreeCheckableTag.clearCheckables(this._owner);
	    };
	    TreeCheckableTag.prototype.setRows = function () {
	        for (var i = this._owner.itemCount; i--;) {
	            var item = this._owner.getItem(i);
	            if (item instanceof TreeItem) {
	                this.$_setCheckable(item, true);
	            }
	        }
	    };
	    TreeCheckableTag.prototype.addRow = function (row, recursive) {
	        if (recursive === void 0) { recursive = true; }
	        var item = this._owner.getItemOfRow(row.rowId);
	        if (item instanceof TreeItem) {
	            this.$_setCheckable(item, recursive);
	        }
	    };
	    TreeCheckableTag.prototype.addRows = function (rows) {
	        for (var i = rows.length; i--;) {
	            var item = this._owner.getItemOfRow(rows[i].rowId);
	            if (item instanceof TreeItem) {
	                this.$_setCheckable(item, true);
	            }
	        }
	    };
	    TreeCheckableTag.prototype.updateRow = function (row) {
	        var item = this._owner.getItemOfRow(row.rowId);
	        if (item instanceof TreeItem) {
	            this.$_setCheckable(item, false);
	        }
	    };
	    TreeCheckableTag.prototype.changeStates = function (rows) {
	        for (var i = rows.length; i--;) {
	            var item = this._owner.getItemOfRow(rows[i].rowId);
	            if (item instanceof TreeItem) {
	                this.$_setCheckable(item, false);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeCheckableTag.prototype.$_setCheckable = function (item, recursive) {
	        if (item) {
	            this._runtime.setItem(item);
	            item.setCheckable(this._exprNode.evaluate(this._runtime));
	            if (recursive) {
	                for (var i = item.count; i--;) {
	                    var child = item.getItem(i);
	                    child instanceof TreeItem && this.$_setCheckable(child, true);
	                }
	            }
	        }
	    };
	    return TreeCheckableTag;
	}(Base_1.Base));
	var TreeItemFooter = /** @class */ (function (_super) {
	    __extends(TreeItemFooter, _super);
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemFooter() {
	        return _super.call(this) || this;
	    }
	    Object.defineProperty(TreeItemFooter.prototype, "isLeaf", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeItemFooter;
	}(GridItem_1.GridItem));
	exports.TreeItemFooter = TreeItemFooter;
	var TreeItem = /** @class */ (function (_super) {
	    __extends(TreeItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItem(dataRow) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._iconHeight = 0;
	        _this._dataRow = dataRow;
	        return _this;
	    }
	    TreeItem.getTemp = function (row) {
	        TreeItem.$_tempItem._dataRow = row;
	        return TreeItem.$_tempItem;
	    };
	    Object.defineProperty(TreeItem.prototype, "iconHeight", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** iconHeight */
	        get: function () {
	            return this._iconHeight;
	        },
	        set: function (value) {
	            this._iconHeight = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "row", {
	        /** row */
	        get: function () {
	            return this._dataRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "rowId", {
	        /** rowId */
	        get: function () {
	            return this._dataRow ? this._dataRow.rowId : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "iconIndex", {
	        /** iconIndex */
	        get: function () {
	            return this._dataRow.iconIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "hasChildren", {
	        /** hasChildren */
	        get: function () {
	            return this.count > 0 || this._dataRow.hasChildren;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "rootItem", {
	        /** rootItem */
	        get: function () {
	            var p = this;
	            while (p.level > 1) {
	                p = p.parent;
	            }
	            return p;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "summaryMode", {
	        // /** lastVisible */
	        // get lastVisible(): TreeItem {
	        // 	return (this.expanded && this.count > 0) ? this.lastVisible : this;
	        // }
	        /** summaryMode */
	        get: function () {
	            return Types.SummaryMode.AGGREGATE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "isData", {
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "checked", {
	        get: function () {
	            return this._dataRow && (this._dataRow["_extents"] & GridItem_1.ITEM_EXT_CHECKED) != 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "footer", {
	        get: function () {
	            return this._footer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "dataRow", {
	        get: function () {
	            return this._dataRow ? this._dataRow.rowId : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "dataId", {
	        get: function () {
	            return this._dataRow ? this._dataRow.rowId : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "descendantCount", {
	        get: function () {
	            return this._dataRow.descendantCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "rowState", {
	        get: function () {
	            return this._dataRow.rowState;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "isLeaf", {
	        get: function () {
	            return this.count == 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "editable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "resizable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeItem.prototype.canEdit = function () {
	        return true;
	    };
	    TreeItem.prototype.createFooter = function () {
	        if (!this._footer) {
	            this._footer = new TreeItemFooter();
	            //this._attachItem(this._footer);
	        }
	    };
	    TreeItem.prototype._setChecked = function (value) {
	        if (this._dataRow) {
	            var ext = this._dataRow["_extents"];
	            this._dataRow["_extents"] = value ? (ext | GridItem_1.ITEM_EXT_CHECKED) : (ext & ~GridItem_1.ITEM_EXT_CHECKED);
	        }
	    };
	    Object.defineProperty(TreeItem.prototype, "checkable", {
	        get: function () {
	            return !this._dataRow || (this._dataRow["_extents"] & GridItem_1.ITEM_UNCHECKABLE) == 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeItem.prototype._setCheckable = function (value) {
	        if (this._dataRow) {
	            var ext = this._dataRow["_extents"];
	            this._dataRow["_extents"] = value ? (ext & ~GridItem_1.ITEM_UNCHECKABLE) : (ext | GridItem_1.ITEM_UNCHECKABLE);
	        }
	    };
	    TreeItem.prototype.setExpanded = function (value, recursive, force) {
	        if (value != this.expanded || force) ;
	    };
	    TreeItem.prototype.getData = function (field) {
	        return this._dataRow.getValue(field);
	    };
	    TreeItem.prototype.setData = function (field, value) {
	        this._dataRow.setValue(field, value, false);
	    };
	    TreeItem.prototype.setItem = function (item, newItem) {
	        _super.prototype.setItem.call(this, item, newItem);
	        newItem._addChildren(item.children);
	        newItem.clear();
	    };
	    TreeItem.prototype.exchange = function (index1, index2) {
	        this._exchangeItems(index1, index2);
	    };
	    TreeItem.prototype.moveChild = function (index, delta) {
	        var newIndex = index + delta;
	        var children = this["_children"];
	        var child = children[index];
	        if (delta < 0) {
	            for (var i = index; i > newIndex; i--)
	                children[i] = children[i - 1];
	        }
	        else {
	            for (var i = index; i < newIndex; i++)
	                children[i] = children[i + 1];
	        }
	        children[newIndex] = child;
	    };
	    TreeItem.prototype.changeParent = function (parent, index) {
	        var old = this.parent;
	        old.remove(this);
	        if (parent) {
	            parent.insert(index, this);
	        }
	    };
	    TreeItem.prototype.getRowData = function () {
	        return this._dataRow && this._dataRow["_values"].concat();
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    TreeItem.$_tempItem = new TreeItem(null);
	    return TreeItem;
	}(GridItem_1.GroupItem));
	exports.TreeItem = TreeItem;
	var RootTreeItem = /** @class */ (function (_super) {
	    __extends(RootTreeItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RootTreeItem(provider) {
	        var _this = _super.call(this, null) || this;
	        _this._rs = provider;
	        return _this;
	    }
	    Object.defineProperty(RootTreeItem.prototype, "id", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeItem.prototype, "provider", {
	        get: function () {
	            return this._rs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeItem.prototype, "level", {
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeItem.prototype, "expanded", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RootTreeItem.prototype.setExpanded = function (value, recursive, force) {
	    };
	    Object.defineProperty(RootTreeItem.prototype, "isLeaf", {
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeItem.prototype, "visible", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeItem.prototype, "dataSource", {
	        get: function () {
	            return this._rs.dataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RootTreeItem;
	}(TreeItem));
	var HierarchicalVisibleItems = /** @class */ (function (_super) {
	    __extends(HierarchicalVisibleItems, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function HierarchicalVisibleItems(provider) {
	        var _this = _super.call(this) || this;
	        _this._fixedCount = 0;
	        _this._items = new Array();
	        _this._list = new Array();
	        _this._rs = provider;
	        return _this;
	    }
	    Object.defineProperty(HierarchicalVisibleItems.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HierarchicalVisibleItems.prototype, "count", {
	        get: function () {
	            return this._items.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HierarchicalVisibleItems.prototype, "fixedCount", {
	        get: function () {
	            return this._fixedCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    HierarchicalVisibleItems.prototype.getItem = function (index) {
	        return this._items[index];
	    };
	    HierarchicalVisibleItems.prototype.setItem = function (index, newItem) {
	        this._items[index] = newItem;
	    };
	    HierarchicalVisibleItems.prototype.indexOf = function (item) {
	        return this._items.indexOf(item);
	    };
	    HierarchicalVisibleItems.prototype.clear = function () {
	        this._items.length = 0;
	    };
	    HierarchicalVisibleItems.prototype.expand = function (item, recursive, level) {
	        if (level === void 0) { level = 0; }
	        item && this.$_expandItem(item, recursive, level);
	    };
	    HierarchicalVisibleItems.prototype.collapse = function (item) {
	        if (item) {
	            var rs = this._rs;
	            var items = this._items;
	            var idx = item.index + 1;
	            while (idx < items.length && items[idx].level > item.level) {
	                if (items[idx] == item.footer) {
	                    if (!rs.footerWhenCollapsed) {
	                        items[idx]["_index"] = -1;
	                        items.splice(idx, 1);
	                    }
	                    break;
	                }
	                items[idx]["_index"] = -1;
	                items.splice(idx, 1);
	            }
	        }
	    };
	    HierarchicalVisibleItems.prototype.getNext = function (item) {
	        if (item && item.visible && item.index < this.count - 1) {
	            return this._items[item.index + 1];
	        }
	        return null;
	    };
	    HierarchicalVisibleItems.prototype.getPrior = function (item) {
	        if (item && item.visible && item.index > 0) {
	            return this._items[item.index - 1];
	        }
	        return null;
	    };
	    HierarchicalVisibleItems.prototype.insert = function (item, index) {
	        this._items.splice(index, 0, item);
	    };
	    HierarchicalVisibleItems.prototype.remove = function (item) {
	        var items = this._items;
	        var i = items.indexOf(item);
	        if (i >= 0) {
	            items.splice(i, 1);
	            if (item.expanded) {
	                while (i < items.length && item.isDescendant(items[i])) {
	                    items.splice(i, 1);
	                }
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    HierarchicalVisibleItems.prototype.$_collectChildren = function (parent, list, recursive, level) {
	        for (var i = 0, cnt = parent.count; i < cnt; i++) {
	            var item = parent.getItem(i);
	            if (item) {
	                list.push(item);
	                if ((recursive && item.level < level) || item.expanded) {
	                    this.$_collectChildren(item, list, recursive, level);
	                }
	            }
	        }
	        var footer = parent.footer;
	        if (footer) {
	            list.push(parent.footer);
	        }
	    };
	    HierarchicalVisibleItems.prototype.$_expandItem = function (item, recursive, level) {
	        var items = this._items;
	        var list = this._list;
	        var idx;
	        if (item instanceof RootTreeItem) {
	            idx = this._fixedCount;
	        }
	        else {
	            idx = item.index + 1;
	        }
	        level = Math.max(0, level);
	        list.length = 0;
	        this.$_collectChildren(item, list, recursive, level > 0 ? item.level + level : 1000000);
	        if (recursive) {
	            var i = idx;
	            for (var cnt = items.length; i < cnt; i++) {
	                if (items[i].level <= item.level) {
	                    break;
	                }
	            }
	            items.splice(idx, i - idx);
	        }
	        for (var i = 0, cnt = list.length; i < cnt; i++) {
	            items.splice(idx + i, 0, list[i]);
	        }
	    };
	    HierarchicalVisibleItems.prototype._clearAndInit = function (fixedCount) {
	        this.clear();
	        this._fixedCount = Math.min(fixedCount, this._rs.itemCount);
	        for (var i = 0; i < this._fixedCount; i++) {
	            this._items.push(this._rs.getItem(i));
	        }
	    };
	    return HierarchicalVisibleItems;
	}(Base_1.Base));
	var TreeItemProvider = /** @class */ (function (_super) {
	    __extends(TreeItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemProvider() {
	        var _this = _super.call(this, null) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._sortMode = Types.SortMode.AUTO;
	        _this._expandWhenGrouping = true;
	        _this._footerWhenExpanded = true;
	        _this._footerWhenCollapsed = true;
	        _this._summaryMode = Types.SummaryMode.AGGREGATE;
	        _this._groupSummaryMode = Types.SummaryMode.AGGREGATE;
	        _this._checkableExpression = null;
	        _this._cellStyles = null; //new TreeCellStyleMap(this);
	        _this._editableMap = null; ///new TreeCellEditableMap(this);
	        _this._filters = {};
	        _this._filterRuntime = new ColumnFilter_1.ColumnFilterRuntime();
	        _this._filtered = false;
	        _this._sorter = new TreeItemSorter.TreeItemsSorter();
	        _this._sortFields = [];
	        _this._sortDirections = [];
	        _this._sortCases = [];
	        _this._visibleItems = new HierarchicalVisibleItems(_this);
	        _this._itemMap = [];
	        _this._itemCount = 0;
	        _this._summaryMap = null;
	        _this._checkableTag = null;
	        _this._filterLock = 0;
	        _this._addParentNodeOnFiltering = false;
	        return _this;
	    }
	    TreeItemProvider.prototype.dispose = function () {
	        this._filters = null;
	        this._filterRuntime = null;
	        this._sorter = null;
	        this._sortFields = null;
	        this._sortDirections = null;
	        this._sortCases = null;
	        this._visibleItems = null;
	        this._itemMap = null;
	        this._summaryMap = null;
	        this._checkableExpression = null;
	        this._checkableTag = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeItemProvider.prototype, "expandWhenGrouping", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expandWhenGrouping */
	        get: function () {
	            return this._expandWhenGrouping;
	        },
	        set: function (value) {
	            if (value != this._expandWhenGrouping) {
	                this._expandWhenGrouping = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "footerWhenExpanded", {
	        /** footerWhenExpanded */
	        get: function () {
	            return this._footerWhenExpanded;
	        },
	        set: function (value) {
	            if (value != this._footerWhenExpanded) {
	                this._footerWhenExpanded = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "footerWhenCollapsed", {
	        /** footerWhenCollapsed */
	        get: function () {
	            return this._footerWhenCollapsed;
	        },
	        set: function (value) {
	            if (value != this._footerWhenCollapsed) {
	                this._footerWhenCollapsed = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "sorted", {
	        /** sorted */
	        get: function () {
	            return this._sortFields && this._sortFields.length > 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "labelComparer", {
	        /** labelComparer */
	        get: function () {
	            return this._labelComparer;
	        },
	        set: function (value) {
	            this._labelComparer = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "summaryMode", {
	        /** summaryMode */
	        get: function () {
	            return this._summaryMode;
	        },
	        set: function (value) {
	            if (value != this._summaryMode) {
	                this._summaryMode = value;
	                this.$_resetSummary();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "groupSummaryMode", {
	        /** groupSummaryMode */
	        get: function () {
	            return this._groupSummaryMode;
	        },
	        set: function (value) {
	            if (value != this._groupSummaryMode) {
	                this._groupSummaryMode = value;
	                this.$_resetGroupSummary();
	                this._fireRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "hideDeleted", {
	        /** hideDeleted */
	        get: function () {
	            return this["_hideDeleted"];
	        },
	        set: function (value) {
	            if (value != this["_hideDeleted"]) {
	                this["_hideDeleted"] = value;
	                this._saveAndRefresh();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "checkableExpression", {
	        /** checkableExpression */
	        get: function () {
	            return this._checkableExpression;
	        },
	        set: function (value) {
	            if (value != this._checkableExpression) {
	                this._checkableExpression = value;
	                if (this._checkableTag) {
	                    this._checkableTag.disconnect();
	                    this._checkableTag = null;
	                }
	                if (value) {
	                    this._checkableTag = new TreeCheckableTag(this, value);
	                    if (this.dataSource) {
	                        this._checkableTag.connect(this.dataSource);
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeItemProvider.prototype.$_needSort = function () {
	        return this._sortFields && this._sortFields.length > 0 && this._sortMode == Types.SortMode.AUTO;
	    };
	    // addObserver(observer) {
	    // 	if (observer && this._observers.indexOf(observer) < 0) {
	    // 		this._observers.push(observer);
	    // 	}
	    // }
	    // removeObserver(observer) {
	    // 	var index = this._observers.indexOf(observer);
	    // 	if (index >= 0) {
	    // 		this._observers.splice(index, 1);
	    // 	}
	    // }
	    TreeItemProvider.prototype.insertItem = function (parent, item, index, after) {
	        var visibles = this._visibleItems;
	        if (parent.collapsed) {
	            visibles.expand(parent, false);
	        }
	        var i = visibles.indexOf(parent.getItem(index));
	        if (after) {
	            parent.insert(index + 1, item);
	            var cnt = visibles.count;
	            var lev = parent.level + 1;
	            while (++i < cnt) {
	                if (visibles.getItem(i).level <= lev) {
	                    break;
	                }
	            }
	            visibles.insert(item, i);
	        }
	        else {
	            parent.insert(index, item);
	            visibles.insert(item, i);
	        }
	    };
	    TreeItemProvider.prototype.appendItem = function (parent, item) {
	        var visibles = this._visibleItems;
	        if (parent.collapsed) {
	            visibles.expand(parent, false);
	        }
	        var i;
	        if (parent.count > 0) {
	            i = visibles.indexOf(parent.getItem(parent.count - 1));
	        }
	        else {
	            i = visibles.indexOf(parent);
	        }
	        var cnt = visibles.count;
	        var lev = parent.level;
	        while (++i < cnt) {
	            if (visibles.getItem(i).level <= lev) {
	                break;
	            }
	        }
	        parent.add(item);
	        visibles.insert(item, i);
	    };
	    TreeItemProvider.prototype.removeItem = function (item) {
	        this._visibleItems.remove(item);
	        item.parent.remove(item);
	    };
	    TreeItemProvider.prototype.$_calcLevel = function (item, level, visibleOnly) {
	        var i, child;
	        var cnt = item.count;
	        var lev = level;
	        for (i = 0; i < cnt; i++) {
	            child = item.getItem(i);
	            if (child) {
	                lev = Math.max(lev, level + 1);
	                if (!visibleOnly || child.expanded) {
	                    lev = Math.max(lev, this.$_calcLevel(child, level + 1, visibleOnly));
	                }
	            }
	        }
	        return lev;
	    };
	    TreeItemProvider.prototype.getLevels = function (visibleOnly) {
	        return this.$_calcLevel(this._rootItem, 0, visibleOnly);
	    };
	    TreeItemProvider.prototype.$_setExpanded = function (item, recursive, level) {
	        this._setExpanded(item, true);
	        this.dataSource.setHasChildren(item.row, false);
	        if (recursive) {
	            for (var i = 0, cnt = item.count; i < cnt; i++) {
	                var child = item.getItem(i);
	                if (child instanceof TreeItem && (child.expanded || child.level < level)) {
	                    this.$_setExpanded(child, true, level);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype._expandItem = function (item, force, recursive, level, fireEvents) {
	        if (item && (force || !item.expanded)) {
	            if (fireEvents && !this._fireExpanding(item)) {
	                return;
	            }
	            this._visibleItems.collapse(item);
	            this._visibleItems.expand(item, recursive, level);
	            this._resetItemIndicies(item === this._rootItem ? 0 : item.index);
	            this.$_setExpanded(item, recursive, level > 0 ? item.level + level : 1000000);
	            try {
	                this._fireRefresh();
	            }
	            finally {
	                if (fireEvents) {
	                    this._fireExpanded(item);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.expand = function (item, recursive, force) {
	        this._expandItem(item, force, recursive, 0, true);
	    };
	    TreeItemProvider.prototype.expandAll = function (level) {
	        this._expandItem(this._rootItem, true, true, level > 0 ? level + 1 : 0, true);
	    };
	    TreeItemProvider.prototype.$_setCollapsed = function (item, recursive) {
	        this._setExpanded(item, false);
	        if (recursive) {
	            for (var i = 0, cnt = item.count; i < cnt; i++) {
	                var child = item.getItem(i);
	                if (child instanceof TreeItem) {
	                    this.$_setCollapsed(child, true);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype._collapseItem = function (item, force, recursive, fireEvents) {
	        if (item && (force || item.expanded)) {
	            if (fireEvents && !this._fireCollapsing(item)) {
	                return;
	            }
	            this._visibleItems.collapse(item);
	            this.$_setCollapsed(item, recursive);
	            if (item == this._rootItem) {
	                this._visibleItems.expand(this._rootItem, false);
	            }
	            this._resetItemIndicies(item === this._rootItem ? 0 : item.index);
	            try {
	                this._fireRefresh();
	            }
	            finally {
	                if (fireEvents) {
	                    this._fireCollapsed(item);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.collapse = function (item, recursive) {
	        this._collapseItem(item, false, recursive, true);
	    };
	    TreeItemProvider.prototype.collapseAll = function () {
	        this._collapseItem(this._rootItem, true, true, true);
	    };
	    TreeItemProvider.prototype.$_saveExpanded = function (map, item) {
	        for (var i = 0, cnt = item.count; i < cnt; i++) {
	            var child = item.getItem(i);
	            if (child) {
	                // child._extents = child.isExpanded() ? (child._extents | ITEM_EXT_SAVEEXPAND) : (child._extents & ~ITEM_EXT_SAVEEXPAND);
	                map[child.rowId] = GridItem_1.ITEM_EXT_FILTERED | (child.expanded ? GridItem_1.ITEM_EXT_SAVEEXPAND : 0);
	                if (child.count > 0) {
	                    this.$_saveExpanded(map, child);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.orderBy = function (fields, directions, textCases, fireEvent) {
	        if (fireEvent === void 0) { fireEvent = true; }
	        this._fireSort(fields, directions, textCases);
	        this._sortFields = [];
	        this._sortDirections = [];
	        this._sortCases = [];
	        var cnt = fields ? fields.length : 0;
	        var len = directions ? directions.length : 0;
	        var clen = textCases ? textCases.length : 0;
	        for (var i = 0; i < cnt; i++) {
	            this._sortFields.push(fields[i]);
	            if (len > i) {
	                this._sortDirections.push(directions[i]);
	            }
	            else if (len > 0) {
	                this._sortDirections.push(directions[len - 1]);
	            }
	            else {
	                this._sortDirections.push(Types.SortDirection.ASCENDING);
	            }
	            if (clen > i) {
	                this._sortCases.push(textCases[i]);
	            }
	            else if (clen > 0) {
	                this._sortCases.push(textCases[clen - 1]);
	            }
	            else {
	                this._sortCases.push(Types.SortCase.SENSITIVE);
	            }
	        }
	        var map = [];
	        this.$_saveExpanded(map, this._rootItem);
	        this.$_clearItems();
	        this.$_buildTree(map);
	        try {
	            if (fireEvent) {
	                this._fireRefresh();
	            }
	        }
	        finally {
	            this._fireSorted();
	        }
	    };
	    TreeItemProvider.prototype.getSortFields = function () {
	        return this._sortFields.concat();
	    };
	    TreeItemProvider.prototype.getSortDirections = function () {
	        return this._sortDirections.concat();
	    };
	    TreeItemProvider.prototype.getSortCases = function () {
	        return this._sortCases.concat();
	    };
	    TreeItemProvider.prototype.beginFiltering = function () {
	        this._filterLock++;
	    };
	    TreeItemProvider.prototype.$_prepareFiltering = function (map, item) {
	        var cnt = item["_dataRow"].count;
	        var rowId = item.rowId;
	        var filtered = rowId <= -1 ? true : this.$_selectItem(item);
	        for (var i = 0; i < cnt; i++) {
	            var child = new TreeItem(item["_dataRow"]["_children"][i]);
	            if (child && !this.dataSource.isHiddenRow(child.rowId)) {
	                filtered = this.$_prepareFiltering(map, child) || filtered;
	            }
	        }
	        map[rowId] = filtered && rowId >= 0 ? map[rowId] | GridItem_1.ITEM_EXT_FILTERED : map[rowId] & ~GridItem_1.ITEM_EXT_FILTERED;
	        return filtered;
	    };
	    TreeItemProvider.prototype.endFiltering = function (apply, filterCollection, filter) {
	        var prepareMap = [];
	        if (apply) {
	            // this.$_saveExpanded(prepareMap, this._rootItem); // expanded가 정리될때.
	            this._addParentNodeOnFiltering && this.$_prepareFiltering(prepareMap, this._rootItem);
	        }
	        if (this._filterLock > 0) {
	            this._filterLock = Math.max(0, this._filterLock - 1);
	            (apply && this._filterLock == 0) && this.applyFilters(prepareMap, filterCollection, filter);
	        }
	    };
	    TreeItemProvider.prototype.hasFilter = function (field) {
	        var filters = this._filters[field];
	        return filters ? filters.length > 0 : false;
	    };
	    TreeItemProvider.prototype.addFilter = function (field, refFilter) {
	        this._fireFilterAdded(field, refFilter.text);
	        var filters = this._filters[field];
	        if (!filters) {
	            filters = [];
	            this._filters[field] = filters;
	        }
	        var filter = new ColumnFilter_1.ColumnFilterRun(refFilter);
	        filters.push(filter);
	        // this.applyFilters();
	        return filter;
	    };
	    TreeItemProvider.prototype.removeFilter = function (field, filter) {
	        if (this._filtered && this._filters[field]) {
	            this._fireFilterRemoved(field, filter);
	            var filters = this._filters[field];
	            for (var i = filters.length; i--;) {
	                if (filters[i] === filter) {
	                    filters.splice(i, 1);
	                    this.applyFilters(null, null, null);
	                    break;
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.clearFilters = function (field) {
	        if (this._filtered && this._filters[field]) {
	            this._fireFilterCleared(field);
	            var filters = this._filters[field];
	            if (filters && filters.length > 0) {
	                filters.splice(0, filters.length);
	                this._filters[field] = null;
	                this.applyFilters(null, null, null);
	            }
	        }
	    };
	    TreeItemProvider.prototype.clearAllFilters = function () {
	        if (this._filtered) {
	            this._fireFilterAllCleared();
	            this._filters = {};
	            this.applyFilters(null, null, null);
	        }
	    };
	    TreeItemProvider.prototype.hasFilters = function () {
	        for (var fld in this._filters) {
	            var filters = this._filters[fld];
	            if (filters && filters.length > 0) {
	                return true;
	            }
	        }
	        return false;
	    };
	    TreeItemProvider.prototype.applyFilters = function (map, filterCollection, filter) {
	        var ds = this.dataSource;
	        var cnt = ds.fieldCount;
	        for (var fld in this._filters) {
	            if (Number(fld) >= cnt) {
	                this._filters[fld] = null;
	            }
	        }
	        this._filtered = this.hasFilters();
	        if (this._filtered) {
	            for (var f in this._filters) {
	                var filters = this._filters[f];
	                if (filters) {
	                    for (var i = filters.length; i--;) {
	                        filters[i].prepare(this._filterRuntime, ds);
	                    }
	                }
	            }
	        }
	        if (this._filterLock == 0) { // expanded가 정리될때.
	            this.$_clearItems();
	            this.$_buildTree(map);
	            try {
	                this._fireRefresh();
	            }
	            finally {
	                this._fireFiltered(filterCollection, filter);
	            }
	        }
	    };
	    TreeItemProvider.prototype.getItemByRow = function (row) {
	        return row ? this._itemMap[row.rowId] : null;
	    };
	    TreeItemProvider.prototype.getCheckedRows = function () {
	        function collectCheckedRows(parent, rows) {
	            if (parent instanceof TreeItem) {
	                for (var i = 0, cnt = parent.count; i < cnt; i++) {
	                    var item = parent.getItem(i);
	                    var r = void 0;
	                    item.checked && (r = item.row) && rows.push(r);
	                    collectCheckedRows(item, rows);
	                }
	            }
	        }
	        var rows = [];
	        collectCheckedRows(this._rootItem, rows);
	        return rows;
	    };
	    TreeItemProvider.prototype.getCheckedRowIds = function () {
	        function collectCheckedRows(parent, rows) {
	            if (parent instanceof TreeItem) {
	                for (var i = 0, cnt = parent.count; i < cnt; i++) {
	                    var item = parent.getItem(i);
	                    var r = void 0;
	                    if (item.checked && (r = item.dataRow) >= 0) {
	                        rows.push(r);
	                    }
	                    collectCheckedRows(item, rows);
	                }
	            }
	        }
	        var rows = [];
	        collectCheckedRows(this._rootItem, rows);
	        return rows;
	    };
	    TreeItemProvider.prototype.resetCheckables = function () {
	        if (this._checkableTag) {
	            this._checkableTag.clearRows();
	            this._fireRefresh();
	        }
	    };
	    TreeItemProvider.prototype.applyCheckables = function () {
	        if (this._checkableTag) {
	            this._checkableTag.setRows();
	        }
	        else {
	            TreeCheckableTag.clearCheckables(this);
	        }
	        this._fireRefresh();
	    };
	    TreeItemProvider.prototype.$_checkChildren = function (parent, checked, checkableOnly) {
	        for (var i = 0, cnt = parent.count; i < cnt; i++) {
	            var item = parent.getItem(i);
	            if (item) {
	                if (checkableOnly) {
	                    if (item.checkable) {
	                        this._setCheckItem(item, checked);
	                    }
	                }
	                else {
	                    this._setCheckItem(item, checked);
	                }
	            }
	            if (item instanceof TreeItem) {
	                this.$_checkChildren(item, checked, checkableOnly);
	            }
	        }
	    };
	    TreeItemProvider.prototype._clearChecked = function () {
	        this.$_checkChildren(this._rootItem, false, false);
	    };
	    TreeItemProvider.prototype.checkAll = function (checked, visibleOnly, checkableOnly, checkEvent) {
	        if (visibleOnly) {
	            _super.prototype.checkAll.call(this, checked, visibleOnly, checkableOnly, checkEvent, false);
	        }
	        else {
	            this.$_checkChildren(this._rootItem, checked, checkableOnly);
	            checkEvent ? this._fireItemAllChecked(checked) : this._fireRefreshClient();
	        }
	    };
	    TreeItemProvider.prototype.hasCellstyle = function () {
	        return !this._cellStyles.isEmpty();
	    };
	    TreeItemProvider.prototype.setCellStyle = function (row, field, style) {
	        this._cellStyles.setCellStyle(row, field, style);
	    };
	    TreeItemProvider.prototype.setCellStyles = function (provider, rows, fieldMap) {
	        this._cellStyles.setCellStyles(provider, rows, fieldMap);
	    };
	    TreeItemProvider.prototype.removeCellStyle = function (style) {
	        this._cellStyles.removeCellStyle(style);
	    };
	    TreeItemProvider.prototype.clearCellStyles = function () {
	        this._cellStyles.clearCellStyles();
	    };
	    TreeItemProvider.prototype.checkCellStyle = function (rowId, field) {
	        return this._cellStyles.checkCellStyle(rowId, field);
	    };
	    TreeItemProvider.prototype.getCellStyle = function (dataRow, field) {
	        return this._cellStyles.getCellStyle(dataRow, field);
	    };
	    TreeItemProvider.prototype.setCellEditable = function (dataRow, column, value) {
	        this._editableMap.setEditable(dataRow, column, value);
	    };
	    TreeItemProvider.prototype.setCellReadOnly = function (dataRow, column, value) {
	        this._editableMap.setReadOnly(dataRow, column, value);
	    };
	    TreeItemProvider.prototype.getCellEditable = function (dataRow, column) {
	        return this._editableMap.getEditable(dataRow, column);
	    };
	    TreeItemProvider.prototype.getCellReadOnly = function (dataRow, column, value) {
	        return this._editableMap.getReadOnly(dataRow, column);
	    };
	    TreeItemProvider.prototype.setCellCursor = function (dataRow, column, value) {
	        this._editableMap.setCursor(dataRow, column, value);
	    };
	    TreeItemProvider.prototype.getCellCursor = function (dataRow, column) {
	        return this._editableMap.getCursor(dataRow, column);
	    };
	    TreeItemProvider.prototype.setCellEditor = function (dataRow, column, value) {
	        this._editableMap.setEditor(dataRow, column, value);
	    };
	    TreeItemProvider.prototype.getCellEditor = function (dataRow, column) {
	        return this._editableMap.getEditor(dataRow, column);
	    };
	    TreeItemProvider.prototype.clearEditableMap = function () {
	        return this._editableMap.clearEditableMap();
	    };
	    Object.defineProperty(TreeItemProvider.prototype, "dataSource", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._ds;
	        },
	        set: function (value) {
	            if (value === this._ds) {
	                return;
	            }
	            this.$_clearItems();
	            this.$_resetSummary();
	            if (this._ds) {
	                this._ds.removeTag(this._cellStyles);
	                this._ds.removeTag(this._editableMap);
	                this._ds.removeListener(this);
	            }
	            this._ds = value;
	            if (this._ds) {
	                this.$_buildTree(null);
	                this._ds.addTag(this._cellStyles);
	                this._ds.addTag(this._editableMap);
	                this._ds.addListener(this);
	            }
	            this._fireReset();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "itemCount", {
	        get: function () {
	            return this._visibleItems.count;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemProvider.prototype, "rowCount", {
	        get: function () {
	            return this._itemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeItemProvider.prototype._createRootItem = function () {
	        var root = new RootTreeItem(this);
	        this._setExpanded(root, true);
	        return root;
	    };
	    TreeItemProvider.prototype.getItem = function (index) {
	        if (index >= 0 && index < this._visibleItems.count) {
	            return this._visibleItems.getItem(index);
	        }
	        else {
	            return null;
	        }
	    };
	    TreeItemProvider.prototype.getItems = function (index, count) {
	        throw new Error("Method not implemented.");
	    };
	    TreeItemProvider.prototype.getItemOfRow = function (dataRow, force) {
	        throw new Error("Method not implemented.");
	    };
	    TreeItemProvider.prototype.$_collectItems = function (item, list) {
	        for (var i = 0, cnt = item.count; i < cnt; i++) {
	            var child = item.getItem(i);
	            if (child instanceof TreeItem) {
	                list.push(child);
	                this.$_collectItems(child, list);
	            }
	        }
	    };
	    TreeItemProvider.prototype.getAllItems = function () {
	        var items = [];
	        this.$_collectItems(this._rootItem, items);
	        return items;
	    };
	    TreeItemProvider.prototype.getSum = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.sum : NaN;
	    };
	    TreeItemProvider.prototype.getMax = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.max : NaN;
	    };
	    TreeItemProvider.prototype.getMin = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.min : NaN;
	    };
	    TreeItemProvider.prototype.getAvg = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.avg : NaN;
	    };
	    TreeItemProvider.prototype.getVar = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.vars : NaN;
	    };
	    TreeItemProvider.prototype.getVarp = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.varsp : NaN;
	    };
	    TreeItemProvider.prototype.getStdev = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? Math.sqrt(fs.vars) : NaN;
	    };
	    TreeItemProvider.prototype.getStdevp = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? Math.sqrt(fs.varsp) : NaN;
	    };
	    TreeItemProvider.prototype.getDataCount = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.dataCount : 0;
	    };
	    TreeItemProvider.prototype.getDataAvg = function (field) {
	        var fs = this.$_getSummary(field);
	        return fs ? fs.dataAvg : NaN;
	    };
	    TreeItemProvider.prototype.findItem = function (fields, values, options, startIndex, endIndex) {
	        var ds = this.dataSource;
	        if (!ds) {
	            return -1;
	        }
	        var rows = this.itemCount;
	        if (rows < 1) {
	            return -1;
	        }
	        var flds = Math.min(fields.length, values.length);
	        if (flds < 1) {
	            return -1;
	        }
	        var all = !options || options.allFields;
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < flds; c++) {
	            fieldTypes[c] = ds.getField(fields[c]).dataType;
	        }
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(this._visibleItems.count - 1, endIndex);
	        for (var i = startIndex; i <= endIndex; i++) {
	            var item = this._visibleItems.getItem(i);
	            var found = item.dataRow >= 0;
	            if (found) {
	                for (var c = 0; c < flds; c++) {
	                    var v = item.getData(fields[c]);
	                    switch (fieldTypes[c]) {
	                        case Types.ValueType.DATETIME:
	                        case Types.ValueType.DATE:
	                            if (values[c] instanceof Date) {
	                                found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                            }
	                            else {
	                                if (!dateConvert) {
	                                    var fmt = /[.]/.test(values[c]) ? "yyyy.MM.dd" : /[/]/.test(values[c]) ? "yyyy/MM/dd" : /[-]/.test(values[c]) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                    dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                }
	                                found = Utils_1.Utils.compareTextValue(values[c], v ? dateConvert.getText(v) : v, sensitive, partial);
	                            }
	                            break;
	                        default:
	                            found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                            break;
	                    }
	                    if (found && !all) {
	                        return i;
	                    }
	                    if (!found && all) {
	                        break;
	                    }
	                }
	            }
	            if (found) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    TreeItemProvider.prototype.findCell = function (fields, value, options, startIndex, endIndex, startFieldIndex) {
	        var ds = this.dataSource;
	        if (!ds) {
	            return null;
	        }
	        var rows = this.itemCount;
	        if (rows < 1) {
	            return null;
	        }
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var fldCount = ds.fieldCount;
	        var fldLen = fields.length;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < fldCount; c++) {
	            fieldTypes[c] = ds.getField(c).dataType;
	        }
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(this._visibleItems.count - 1, endIndex);
	        startFieldIndex = Math.max(0, startFieldIndex);
	        if (startFieldIndex >= fields.length) {
	            startIndex++;
	            startFieldIndex = 0;
	        }
	        for (var i = startIndex; i <= endIndex; i++) {
	            var item = this._visibleItems.getItem(i);
	            var found = false;
	            if (item.dataRow >= 0) {
	                var c = (i > startIndex) ? 0 : startFieldIndex;
	                for (; c < fldLen; c++) {
	                    var f = fields[c];
	                    if (f >= 0 && f < fldCount) {
	                        var v = item.getData(f);
	                        switch (fieldTypes[f]) {
	                            case Types.ValueType.DATETIME:
	                            case Types.ValueType.DATE:
	                                if (value instanceof Date) {
	                                    found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                                }
	                                else {
	                                    if (!dateConvert) {
	                                        var fmt = /[.]/.test(value) ? "yyyy.MM.dd" : /[/]/.test(value) ? "yyyy/MM/dd" : /[-]/.test(value) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                        dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                    }
	                                    found = Utils_1.Utils.compareTextValue(value, v ? dateConvert.getText(v) : v, sensitive, partial);
	                                }
	                                break;
	                            default:
	                                found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                                break;
	                        }
	                        if (found) {
	                            var returnObj = {
	                                itemIndex: i,
	                                fieldIndex: f,
	                                searchFieldIndex: c
	                            };
	                            return returnObj;
	                        }
	                    }
	                }
	            }
	        }
	        return null;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeItemProvider.prototype.$_internalAddItem = function (parent, row, expandedMap) {
	        var item = TreeItem.getTemp(row);
	        var ds = this.dataSource;
	        if ((this.hideDeleted && RowState_1.isDeletedState(item.rowState)) || (ds.isHiddenRow(row.rowId))) {
	            item = null;
	        }
	        if (item && (expandedMap && (expandedMap[row.rowId] & GridItem_1.ITEM_EXT_FILTERED) || this.$_selectItem(item))) {
	            item = new TreeItem(row);
	            parent.insert(row.index, item);
	            this._itemCount++;
	            this._itemMap[row.rowId] = item;
	            return item;
	        }
	        return null;
	    };
	    TreeItemProvider.prototype.$_internalRemoveItem = function (item) {
	        if (item) {
	            item.parent.remove(item);
	            this._itemCount--;
	            this._itemMap[item.row.rowId] = undefined;
	        }
	    };
	    TreeItemProvider.prototype.$_internalRowStateChanged = function (item, refresh) {
	        if (refresh === void 0) { refresh = true; }
	        if (item) {
	            if (this.hideDeleted && RowState_1.isDeletedState(item.rowState)) {
	                var p = item.parent;
	                this.$_internalRemoveItem(item);
	                this.$_clearSummary();
	                if (p.expanded && p.visible) {
	                    this._visibleItems.remove(item);
	                    refresh = true;
	                }
	                refresh && this._fireRefresh();
	            }
	            else {
	                this._fireItemChanged(item);
	            }
	        }
	    };
	    TreeItemProvider.prototype.$_selectField = function (filters, item, field) {
	        for (var i = 0, cnt = filters.length; i < cnt; i++) {
	            var filter = filters[i];
	            if (filter.select(this._filterRuntime, item, field)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    TreeItemProvider.prototype.$_selectItem = function (item) {
	        if (!item) {
	            return false;
	        }
	        for (var fld in this._filters) {
	            var filters = this._filters[fld];
	            if (filters && !this.$_selectField(filters, item, Number(fld))) {
	                return false;
	            }
	        }
	        return !!item && true;
	    };
	    TreeItemProvider.prototype.$_resetVisibleItems = function () {
	        this._visibleItems["_clearAndInit"](this.fixedCount);
	        this._visibleItems.expand(this._rootItem, false);
	        this._setExpanded(this._rootItem, true);
	        this._resetItemIndicies(0);
	    };
	    TreeItemProvider.prototype.$_clearItems = function () {
	        this._visibleItems.clear();
	        this._rootItem.clear();
	        this._itemMap = [];
	        this._itemCount = 0;
	    };
	    TreeItemProvider.prototype.$_buildItems = function (parent, expandedMap) {
	        var row = parent.row;
	        var cnt = row.count;
	        for (var i = 0; i < cnt; i++) {
	            var child = row.getChild(i);
	            var item = this.$_internalAddItem(parent, child, expandedMap);
	            if (item) {
	                if (expandedMap) {
	                    // item._extents = expandedMap[child.rowId] ? (expandedMap[child.rowId] & ~ITEM_EXT_SAVEEXPAND) : 0;
	                    this._setExpanded(item, (expandedMap[child.rowId] & GridItem_1.ITEM_EXT_SAVEEXPAND) != 0);
	                }
	                if (child.count > 0) {
	                    this.$_buildItems(item, expandedMap);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.$_sortItem = function (parent) {
	        var cnt = parent.count;
	        if (cnt > 1) {
	            this.$_sort(parent, 0, 0, cnt - 1);
	        }
	        for (var i = 0; i < cnt; i++) {
	            var child = parent.getItem(i);
	            if (child instanceof TreeItem) {
	                this.$_sortItem(child);
	            }
	        }
	    };
	    TreeItemProvider.prototype.$_sort = function (parent, level, startIndex, endIndex) {
	        var field = this._sortFields[level];
	        var dir = this._sortDirections[level];
	        var ds = this.dataSource;
	        var ignoreCase = this._sortCases[level] == Types.SortCase.INSENSITIVE;
	        this._sorter.run(parent, field, dir, ignoreCase, startIndex, endIndex, level + 1 == this._sortFields.length);
	        var t = ds.getField(field).dataType;
	        var equalFunc;
	        if (t == Types.ValueType.TEXT && ignoreCase) {
	            equalFunc = ds["equalTexts"].bind(ds);
	        }
	        else {
	            equalFunc = ds["equalValues"].bind(ds);
	        }
	        if (level + 1 < this._sortFields.length) {
	            var i = startIndex;
	            var pi = i;
	            while (i < endIndex) {
	                i++;
	                if (!equalFunc(field, parent.getItem(i).row, parent.getItem(i - 1).row)) {
	                    this.$_sort(parent, level + 1, pi, i - 1);
	                    pi = i;
	                }
	            }
	            if (pi < endIndex) {
	                this.$_sort(parent, level + 1, pi, endIndex);
	            }
	        }
	    };
	    TreeItemProvider.prototype.$_buildTree = function (expandedMap) {
	        var ds = this.dataSource;
	        this._rootItem["_dataRow"] = ds.rootRow;
	        this._itemMap[this._rootItem["_dataRow"].rowId] = this._rootItem;
	        this.$_buildItems(this._rootItem, expandedMap);
	        this.$_clearSummary();
	        var flds = ds.fieldCount;
	        var sortFlds = this._sortFields;
	        var sortDirs = this._sortDirections;
	        var sortCases = this._sortCases;
	        for (var i = sortFlds.length; i--;) {
	            if (sortFlds[i] < 0 || sortFlds[i] >= flds) {
	                sortFlds.splice(i, 1);
	                sortDirs.splice(i, 1);
	                sortCases.splice(i, 1);
	            }
	        }
	        if (this.sorted && this._rootItem.count > 0) {
	            this.$_sortItem(this._rootItem);
	        }
	        this.$_resetVisibleItems();
	        if (this._checkableTag && (!expandedMap || expandedMap.length <= 0)) {
	            this._checkableTag.setRows();
	        }
	    };
	    TreeItemProvider.prototype.$_resetSummary = function () {
	        this._summaryMap = [];
	    };
	    TreeItemProvider.prototype.$_resetGroupSummary = function () {
	    };
	    TreeItemProvider.prototype.$_clearSummary = function () {
	        if (this._summaryMap) {
	            for (var i = this._summaryMap.length; i--;) {
	                this._summaryMap[i] && this._summaryMap[i].clear();
	            }
	        }
	    };
	    TreeItemProvider.prototype.$_getSummary = function (field) {
	        var summary = this._summaryMap[field];
	        if (!summary) {
	            var ds = this.dataSource;
	            if (ds && ds.canSummarize(field)) {
	                summary = new FieldSummary_1.FieldSummary(field);
	                this._summaryMap[field] = summary;
	            }
	        }
	        if (summary && summary.count == 0 && this.itemCount > 0) {
	            this.$_summarize(summary);
	        }
	        return summary;
	    };
	    TreeItemProvider.prototype.$_summarize = function (summary) {
	        var ds = this.dataSource;
	        if (ds) {
	            if (this._filtered || this.hideDeleted || ds.hiddenCount > 0) {
	                var items = this._rootItem.getDescendants(false);
	                var cnt = items.length;
	                var rows = [];
	                for (var i = 0; i < cnt; i++) {
	                    var item = items[i];
	                    if (item instanceof TreeItem && !ds.isHiddenRow(item.rowId)) {
	                        rows.push(item.row);
	                    }
	                }
	                summary.count = rows.length;
	                ds.summarizeRange(summary, rows, this.summaryMode == Types.SummaryMode.STATISTICAL);
	            }
	            else {
	                summary.count = ds.rowCount;
	                ds.summarize(summary, this.summaryMode == Types.SummaryMode.STATISTICAL);
	            }
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    TreeItemProvider.prototype._fireItemChanged = function (item) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider.ITEM_CHANGED, item);
	        }
	    };
	    TreeItemProvider.prototype._fireExpanding = function (item) {
	        if (this["_eventLock"] <= 0) {
	            return this.fireConfirmEvent(TreeItemProvider.EXPANDING, item);
	        }
	        return true;
	    };
	    TreeItemProvider.prototype._fireExpanded = function (item) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider.EXPANDED, item);
	        }
	    };
	    TreeItemProvider.prototype._fireCollapsing = function (item) {
	        if (this["_eventLock"] <= 0) {
	            return this.fireConfirmEvent(TreeItemProvider.COLLAPSING, item);
	        }
	        return true;
	    };
	    TreeItemProvider.prototype._fireCollapsed = function (item) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider.COLLAPSED, item);
	        }
	    };
	    TreeItemProvider.prototype._fireParentChanging = function (itemIndex, parent, childIndex) {
	        if (this["_eventLock"] <= 0) {
	            return this.fireConfirmEvent(TreeItemProvider.PARENT_CHANGING, itemIndex, parent, childIndex);
	        }
	        return true;
	    };
	    TreeItemProvider.prototype._fireParentChanged = function (item, oldIndex, parent) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider.PARENT_CHANGED, item, oldIndex, parent);
	        }
	    };
	    TreeItemProvider.prototype._refreshItems = function () {
	        this.$_clearItems();
	        this.$_buildTree(null);
	        this._fireRefresh();
	    };
	    TreeItemProvider.prototype._saveAndRefresh = function () {
	        var save = [];
	        this.$_saveExpanded(save, this._rootItem);
	        this.$_clearItems();
	        this.$_buildTree(save);
	        this._fireRefresh();
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    TreeItemProvider.prototype.onTreeDataProviderDisposed = function (ds) {
	        ds.removeTag(this._cellStyles);
	        this.$_clearItems();
	        this.$_resetSummary();
	        this._fireReset();
	        this.dataSource = null;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderReset = function (provider) {
	        this.$_clearItems();
	        this.$_resetSummary();
	        this.$_buildTree(null);
	        this._fireReset();
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRefresh = function (provider) {
	        this._refreshItems();
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRefreshClient = function (provider) {
	        this._fireRefreshClient();
	    };
	    TreeItemProvider.prototype.onDataProvderCleared = function (provider) {
	        this._refreshItems();
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowCountChanged = function (provider, newCount) {
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowAdding = function (provider, row, index) {
	        return true;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowAdded = function (provider, row) {
	        if (this.$_needSort()) {
	            this._saveAndRefresh();
	        }
	        else {
	            var p = this._itemMap[row.parent.rowId];
	            var item = this.$_internalAddItem(p, row, null);
	            if (item) {
	                this.$_buildItems(item, null);
	                this.$_clearSummary();
	                if (p.expanded) {
	                    this._expandItem(p, true, false, 0, false);
	                }
	                else {
	                    this._fireItemChanged(p);
	                }
	            }
	            else { // filter등에 의해서 item이 제거되는 경우 itemIndicies를 다시 설정해 주어야 한다.
	                this.$_resetVisibleItems();
	            }
	        }
	        if (this._checkableTag) {
	            this._checkableTag.addRow(row, false);
	            if (row.parent.level > 0) {
	                this._checkableTag.addRow(row.parent, false);
	            }
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowsAdded = function (provider, parent, rows) {
	        if (this.$_needSort()) {
	            this._saveAndRefresh();
	            return;
	        }
	        var p = this._itemMap[parent.rowId];
	        var cnt;
	        if (p && rows && (cnt = rows.length) > 0) {
	            for (var i = 0; i < cnt; i++) {
	                var row = rows[i];
	                var item = this.$_internalAddItem(p, row, null);
	                if (item) {
	                    this.$_buildItems(item, null);
	                }
	            }
	            this.$_clearSummary();
	            if (p.expanded) {
	                this._expandItem(p, true, false, 0, false);
	            }
	            else {
	                this._fireItemChanged(p);
	            }
	            if (this._checkableTag) {
	                this._checkableTag.addRows(rows);
	                if (parent.level > 0) {
	                    this._checkableTag.addRow(parent);
	                }
	            }
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowRemoving = function (provider, row) {
	        return true;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowRemoved = function (provider, row) {
	        var item = this._itemMap[row.rowId];
	        if (item) {
	            var p = item.parent;
	            this.$_internalRemoveItem(item);
	            this.$_clearSummary();
	            if (p.expanded && p.visible) {
	                this._visibleItems.remove(item);
	                this._fireRefresh();
	            }
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowsRemoving = function (provider, rows) {
	        return true;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowsRemoved = function (provider, rows) {
	        var cnt = rows.length;
	        var removed = false;
	        for (var i = 0; i < cnt; i++) {
	            var row = rows[i];
	            var item = this._itemMap[row.rowId];
	            if (item) {
	                var p = item.parent;
	                this.$_internalRemoveItem(item);
	                if (p.expanded && p.visible) {
	                    this._visibleItems.remove(item);
	                    removed = true;
	                }
	            }
	        }
	        this.$_clearSummary();
	        if (removed) {
	            this._fireRefresh();
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowUpdating = function (provider, row) {
	        return true;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowUpdated = function (provider, row) {
	        if (this.$_needSort()) {
	            this._saveAndRefresh();
	        }
	        else {
	            var item = this._itemMap[row.rowId];
	            this.$_clearSummary();
	            this._fireItemUpdated(item);
	        }
	        if (this._checkableTag) {
	            this._checkableTag.updateRow(row);
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderValueChanging = function (provider, row, field) {
	        return true;
	    };
	    TreeItemProvider.prototype.onTreeDataProviderValueChanged = function (provider, row, field) {
	        if (this.$_needSort()) {
	            this._saveAndRefresh();
	        }
	        else {
	            var item = this._itemMap[row.rowId];
	            this.$_clearSummary();
	            this._fireItemUpdated(item);
	        }
	        if (this._checkableTag) {
	            this._checkableTag.updateRow(row);
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderIconIndexChanged = function (provider, row) {
	        var item = this._itemMap[row.rowId];
	        if (item && item.isVisible()) {
	            this._fireItemChanged(item);
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderHasChildrenChanged = function (provider, row) {
	        var item = this._itemMap[row.rowId];
	        if (item && item.isVisible()) {
	            this._fireItemChanged(item);
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowStateChanged = function (provider, row, refresh) {
	        var item = this._itemMap[row.rowId];
	        this.$_internalRowStateChanged(item, refresh);
	        if (this._checkableTag) {
	            this._checkableTag.updateRow(row);
	        }
	        !item && refresh && this._saveAndRefresh();
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowStatesChanged = function (provider, rows) {
	        var len = rows.length;
	        var saveRefresh = false;
	        if (len == 1) {
	            var row = rows[0];
	            var item = this._itemMap[row.rowId];
	            saveRefresh = !item;
	            this.$_internalRowStateChanged(item);
	            if (this._checkableTag) {
	                this._checkableTag.updateRow(row);
	            }
	            saveRefresh && this._saveAndRefresh();
	        }
	        else if (len > 0) {
	            var removed = false;
	            if (this.hideDeleted) {
	                for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                    var item = this._itemMap[rows[i].rowId];
	                    saveRefresh = saveRefresh || !item;
	                    if (item && RowState_1.isDeletedState(item.rowState)) {
	                        var p = item.parent;
	                        this.$_internalRemoveItem(item);
	                        if (p.expanded && p.visible) {
	                            this._visibleItems.remove(item);
	                        }
	                        removed = true;
	                    }
	                }
	            }
	            if (this._checkableTag) {
	                this._checkableTag.changeStates(rows);
	            }
	            if (removed) {
	                this.$_clearSummary();
	            }
	            saveRefresh ? this._saveAndRefresh() : this._fireRefresh();
	            // this._fireRefresh();
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowSiblingMoved = function (provider, row, delta) {
	        if (!this.$_needSort()) { // sort중에는 row이동이 안된다.
	            var item = this._itemMap[row.rowId];
	            if (item) {
	                var parent_1 = item.parent;
	                parent_1.moveChild(item.childIndex, delta);
	                this.$_resetVisibleItems();
	                this._fireRefresh();
	            }
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowParentChanged = function (provider, row, parent, childIndex) {
	        var item = this._itemMap[row.rowId];
	        if (item) {
	            var p = this._itemMap[parent.rowId];
	            if (this.$_needSort()) { // sort중일때는 childIndex가 의미가 없다. 마지막으로 붙인다.
	                childIndex = p ? p.count() : 0;
	            }
	            item.changeParent(p, childIndex);
	            this.$_resetVisibleItems();
	            this._fireRefresh();
	        }
	    };
	    TreeItemProvider.prototype.onTreeDataProviderRowHiddenChanged = function (provider, rows, hidden) {
	        if (hidden) { // 숨기는 경우이다.
	            var changed = false;
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var rowId = rows[i];
	                var item = this._itemMap[rowId];
	                if (item) {
	                    var p = item.parent;
	                    this.$_internalRemoveItem(item);
	                    if (p.expanded && p.visible) {
	                        this._visibleItems.remove(item);
	                    }
	                    changed = true;
	                }
	            }
	            if (changed) {
	                this.$_clearSummary();
	            }
	            this._fireRefresh();
	        }
	        else {
	            this._saveAndRefresh();
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    TreeItemProvider.ITEM_CHANGED = "onTreeItemProviderItemChanged";
	    TreeItemProvider.EXPANDING = "onTreeItemProviderExpanding";
	    TreeItemProvider.EXPANDED = "onTreeItemProviderExpanded";
	    TreeItemProvider.COLLAPSING = "onTreeItemProviderCollapsing";
	    TreeItemProvider.COLLAPSED = "onTreeItemProviderCollapsed";
	    TreeItemProvider.PARENT_CHANGING = "onTreeItemProviderParentChanging";
	    TreeItemProvider.PARENT_CHANGED = "onTreeItemProviderParentChanged";
	    return TreeItemProvider;
	}(ItemProvider_1.ItemProvider));
	exports.TreeItemProvider = TreeItemProvider;
	});

	unwrapExports(TreeItemProvider_1);
	var TreeItemProvider_2 = TreeItemProvider_1.TreeItemFooter;
	var TreeItemProvider_3 = TreeItemProvider_1.TreeItem;
	var TreeItemProvider_4 = TreeItemProvider_1.TreeItemProvider;

	var TreeGridItemProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeGridItemProvider.ts
	// 2019. 09. 23. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var TreeEditItem = /** @class */ (function (_super) {
	    __extends(TreeEditItem, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeEditItem(rs, item, state) {
	        var _this = _super.call(this, item && item.row) || this;
	        _this._values = [];
	        _this._started = false;
	        _this._checkDiff = false;
	        _this._strictDiff = false;
	        _this._rs = rs;
	        _this._item = item;
	        _this._state = state;
	        return _this;
	    }
	    TreeEditItem.prototype.dispose = function () {
	        this._values = null;
	    };
	    Object.defineProperty(TreeEditItem.prototype, "values", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** values */
	        get: function () {
	            return this._values.concat();
	        },
	        set: function (vals) {
	            var ds = this.dataSource;
	            var cnt = ds.fieldCount;
	            if (vals) {
	                cnt = Math.min(cnt, vals.length);
	                for (var i = 0; i < cnt; i++) {
	                    var fld = ds.getField(i);
	                    var oldValue = this._values[i];
	                    var newValue = fld.readValue(vals[i]);
	                    this._values[i] = newValue;
	                    if (this._started && parent && !fld.equalValues(oldValue, newValue)) {
	                        this._rs["_editItemCellUpdated"](this, i, oldValue, newValue);
	                    }
	                }
	            }
	            else {
	                this._values = [];
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeEditItem.prototype.beginEdit = function (checkDiff, strictDiff) {
	        this._started = true;
	        this._checkDiff = checkDiff;
	        this._strictDiff = strictDiff;
	    };
	    TreeEditItem.prototype.setValue = function (field, value) {
	        var ds = this.dataSource;
	        if (field < 0 && field >= ds.fieldCount) {
	            throw new RangeError("field index is out of bounds: " + field);
	        }
	        var fld = ds.getField(field);
	        var oldValue = this._values[field];
	        value = fld.readValue(value);
	        this._values[field] = value;
	        if (this._started && this.parent && !fld.equalValues(oldValue, value)) {
	            this._rs["_editItemCellUpdated"](this, field, oldValue, value);
	        }
	    };
	    Object.defineProperty(TreeEditItem.prototype, "dataSource", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rs.dataSource;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeEditItem.prototype, "itemState", {
	        get: function () {
	            return this._state;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeEditItem.prototype, "rowState", {
	        get: function () {
	            return this._item ? this._item.rowState : RowState_1.RowState.NONE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeEditItem.prototype, "expanded", {
	        get: function () {
	            return this._item ? this._item.expanded : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeEditItem.prototype.getData = function (field) {
	        if (field < 0 && field >= this.dataSource.fieldCount) {
	            throw new RangeError("field index is out of bounds: " + field);
	        }
	        return this._values[field];
	    };
	    TreeEditItem.prototype.setData = function (field, value) {
	        var ds = this.dataSource;
	        if (field < 0 && field >= ds.fieldCount) {
	            throw new RangeError("field index is out of bounds: " + field);
	        }
	        var fld = ds.getField(field);
	        var oldValue = this._values[field];
	        value = fld.readValue(value);
	        var can = !this._checkDiff;
	        if (!can) {
	            if (this._strictDiff) {
	                can = !fld.equalValues(oldValue, value);
	            }
	            else {
	                can = !fld.sameValues(oldValue, value);
	            }
	        }
	        if (can) {
	            this._values[field] = value;
	            if (this.parent) {
	                this._rs["_editItemCellUpdated"](this, field, oldValue, value);
	                this._rs["_editItemCellEdited"](this, field);
	            }
	        }
	    };
	    TreeEditItem.prototype.getRowData = function () {
	        return this._values.concat();
	    };
	    TreeEditItem.prototype.getRowObject = function () {
	        var ds = this.dataSource;
	        if (ds) {
	            var row = {};
	            for (var i = 0, cnt = ds.fieldCount; i < cnt; i++) {
	                var fld = ds.getOrgFieldName(i);
	                row[fld] = this._values[i];
	            }
	            return row;
	        }
	        else {
	            return null;
	        }
	    };
	    return TreeEditItem;
	}(TreeItemProvider_1.TreeItem));
	var TreeGridItemProvider = /** @class */ (function (_super) {
	    __extends(TreeGridItemProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeGridItemProvider(indexing) {
	        var _this = _super.call(this, null, indexing) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._observers = [];
	        _this._appending = false;
	        _this._insertAfter = false;
	        _this._insertIndex = -1;
	        _this._rs = new TreeItemProvider_1.TreeItemProvider();
	        _this.source = _this._rs;
	        _this._summarizer = new GridSummarizer.DefaultSummarizer(_this._rs);
	        return _this;
	    }
	    TreeGridItemProvider.prototype.dispose = function () {
	        this._rs = null;
	        this._summarizer = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "summarizer", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._summarizer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeGridItemProvider.prototype.getLevels = function (visibleOnly) {
	        return this._rs.getLevels(visibleOnly);
	    };
	    TreeGridItemProvider.prototype.orderBy = function (fields, directions, textCases) {
	        this._rs.orderBy(fields, directions, textCases);
	    };
	    TreeGridItemProvider.prototype.getSortFields = function () {
	        return this._rs.getSortFields();
	    };
	    TreeGridItemProvider.prototype.getSortDirections = function () {
	        return this._rs.getSortDirections();
	    };
	    TreeGridItemProvider.prototype.getSortCases = function () {
	        return this._rs.getSortCases();
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "labelComparer", {
	        get: function () {
	            return this._rs.labelComparer;
	        },
	        set: function (comparer) {
	            this._rs.labelComparer = comparer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridItemProvider.prototype.isFiltered = function (field) {
	        return field != null ? this._rs.hasFilter(field) : this._rs.hasFilters();
	    };
	    TreeGridItemProvider.prototype.addFilter = function (field, refFilter) {
	        this._rs.addFilter(field, refFilter);
	    };
	    TreeGridItemProvider.prototype.removeFilter = function (field, filter) {
	        this._rs.removeFilter(field, filter);
	    };
	    TreeGridItemProvider.prototype.clearFilters = function (field) {
	        this._rs.clearFilters(field);
	    };
	    TreeGridItemProvider.prototype.clearAllFilters = function () {
	        this._rs.clearAllFilters();
	    };
	    TreeGridItemProvider.prototype.beginFiltering = function () {
	        this._rs.beginFiltering();
	    };
	    TreeGridItemProvider.prototype.endFiltering = function (filterCollection, filter) {
	        //this._rs["_addParentNodeOnFiltering"] = this._addParentNodeOnFiltering;
	        this._rs.endFiltering(true, filterCollection, filter);
	    };
	    TreeGridItemProvider.prototype.expand = function (item, recursive, force) {
	        this._rs.expand(item, recursive, force);
	    };
	    TreeGridItemProvider.prototype.collapse = function (item, recursive) {
	        this._rs.collapse(item, recursive);
	    };
	    TreeGridItemProvider.prototype.expandAll = function (level) {
	        this._rs.expandAll(level);
	    };
	    TreeGridItemProvider.prototype.collapseAll = function () {
	        this._rs.collapseAll();
	    };
	    TreeGridItemProvider.prototype.getCheckedRows = function () {
	        return this._rs.getCheckedRows();
	    };
	    TreeGridItemProvider.prototype.getCheckedRowIds = function () {
	        return this._rs.getCheckedRowIds();
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "checkableExpression", {
	        set: function (value) {
	            this._rs.checkableExpression = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridItemProvider.prototype.resetCheckables = function () {
	        this._rs.resetCheckables();
	    };
	    TreeGridItemProvider.prototype.applyCheckables = function () {
	        this._rs.applyCheckables();
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "hideDeleted", {
	        get: function () {
	            return this._rs.hideDeleted;
	        },
	        set: function (value) {
	            this._rs.hideDeleted = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridItemProvider.prototype.getAllItems = function () {
	        return this._rs.getAllItems();
	    };
	    TreeGridItemProvider.prototype.getItem = function (index) {
	        return this._rs.getItem(index);
	    };
	    TreeGridItemProvider.prototype.getItemOfRow = function (dataRow) {
	        return this._rs.getItemOfRow(dataRow);
	    };
	    TreeGridItemProvider.prototype.findItem = function (fields, values, options, startIndex, endIndex) {
	        return this._rs.findItem(fields, values, options, startIndex, endIndex);
	    };
	    TreeGridItemProvider.prototype.findCell = function (fields, value, options, startIndex, endIndex, startFieldIndex) {
	        return this._rs.findCell(fields, value, options, startIndex, endIndex, startFieldIndex);
	    };
	    TreeGridItemProvider.prototype.checkItem = function (item, checked, exclusive, checkEvent) {
	        this._rs.checkItem(item, checked, exclusive, checkEvent);
	    };
	    TreeGridItemProvider.prototype.checkAll = function (checked, visibleOnly, checkableOnly, checkEvent) {
	        this._rs.checkAll(checked, visibleOnly, checkableOnly, checkEvent);
	    };
	    TreeGridItemProvider.prototype.hasCellStyle = function () {
	        return this._rs.hasCellstyle();
	    };
	    TreeGridItemProvider.prototype.setCellStyle = function (row, field, style) {
	        this._rs.setCellStyle(row, field, style);
	    };
	    TreeGridItemProvider.prototype.setCellStyles = function (provider, rows, fieldMap) {
	        this._rs.setCellStyles(provider, rows, fieldMap);
	    };
	    TreeGridItemProvider.prototype.removeCellStyle = function (style) {
	        this._rs.removeCellStyle(style);
	    };
	    TreeGridItemProvider.prototype.clearCellStyles = function () {
	        this._rs.clearCellStyles();
	    };
	    TreeGridItemProvider.prototype.checkCellStyle = function (rowId, field) {
	        return this._rs.checkCellStyle(rowId, field);
	    };
	    TreeGridItemProvider.prototype.getCellStyle = function (dataRow, field) {
	        return this._rs.getCellStyle(dataRow, field);
	    };
	    TreeGridItemProvider.prototype.setCellEditable = function (dataRow, column, value) {
	        this._rs.setCellEditable(dataRow, column, value);
	    };
	    TreeGridItemProvider.prototype.setCellReadOnly = function (dataRow, column, value) {
	        this._rs.setCellReadOnly(dataRow, column, value);
	    };
	    TreeGridItemProvider.prototype.getCellEditable = function (dataRow, column) {
	        return this._rs.getCellEditable(dataRow, column);
	    };
	    TreeGridItemProvider.prototype.getCellReadOnly = function (dataRow, column) {
	        return this._rs.getCellReadOnly(dataRow, column, null);
	    };
	    TreeGridItemProvider.prototype.setCellCursor = function (dataRow, column, value) {
	        this._rs.setCellCursor(dataRow, column, value);
	    };
	    TreeGridItemProvider.prototype.getCellCursor = function (dataRow, column) {
	        return this._rs.getCellCursor(dataRow, column);
	    };
	    TreeGridItemProvider.prototype.setCellEditor = function (dataRow, column, value) {
	        this._rs.setCellEditor(dataRow, column, value);
	    };
	    TreeGridItemProvider.prototype.getCellEditor = function (dataRow, column) {
	        return this._rs.getCellEditor(dataRow, column);
	    };
	    TreeGridItemProvider.prototype.clearEditableMap = function () {
	        return this._rs.clearEditableMap();
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "summaryMode", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        set: function (value) {
	            this._rs.summaryMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeGridItemProvider.prototype, "groupSummaryMode", {
	        set: function (value) {
	            this._rs.groupSummaryMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeGridItemProvider.prototype, "itemCount", {
	        // set sortMode(value: SortMode) {
	        //     this._rs.sortMode = value;
	        // }
	        get: function () {
	            return this._rs.itemCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridItemProvider.prototype.getItems = function (index, count) {
	        throw new Error("Method not implemented.");
	    };
	    TreeGridItemProvider.prototype.canAppend = function () {
	        return false;
	    };
	    TreeGridItemProvider.prototype.canInsert = function (item) {
	        if (item) {
	            return true;
	        }
	        return false;
	    };
	    TreeGridItemProvider.prototype.canDelete = function (item) {
	        if (item) {
	            return true;
	        }
	        return false;
	    };
	    TreeGridItemProvider.prototype.$_replaceItem = function (item, newItem) {
	        var parent = item.parent;
	        parent.setItem(item, newItem);
	        this._rs["_setItem"](item, newItem);
	    };
	    TreeGridItemProvider.prototype._doBeginUpdate = function (item) {
	        this["_editingItem"] = this._editItem = this._createEditItem(item, GridItem_1.ItemState.UPDATING, null);
	        this.$_replaceItem(item, this._editItem);
	        return this._editItem;
	    };
	    TreeGridItemProvider.prototype._doBeginAppend = function (defaultValues) {
	        this["_editingItem"] = this._editItem = this._createEditItem(null, GridItem_1.ItemState.APPENDING, defaultValues);
	        return this._editItem;
	    };
	    TreeGridItemProvider.prototype._doBeginInsert = function (item, defaultValues, shift, ctrl) {
	        if (shift === void 0) { shift = false; }
	        if (ctrl === void 0) { ctrl = false; }
	        if (ctrl) {
	            this._appending = true;
	            item.setExpanded(true, false, false);
	            this["_editingItem"] = this._editItem = this._createEditItem(null, GridItem_1.ItemState.INSERTING, defaultValues);
	            this._rs.appendItem(item, this._editItem);
	        }
	        else {
	            var p = item.parent;
	            this._appending = false;
	            this._insertAfter = shift;
	            this._insertIndex = p.indexOf(item);
	            this["_editingItem"] = this._editItem = this._createEditItem(item, GridItem_1.ItemState.INSERTING, defaultValues);
	            this._rs.insertItem(p, this._editItem, this._insertIndex, this._insertAfter);
	        }
	        return this._editItem;
	    };
	    TreeGridItemProvider.prototype._doCompleteUpdate = function (orgItem) {
	        var ds = this.dataSource;
	        var rslt = false;
	        if (ds) {
	            this.$_replaceItem(this._editItem, orgItem);
	            var row = this._editItem.row;
	            try {
	                rslt = row.update(this._editItem.values);
	            }
	            catch (e) {
	                this.$_replaceItem(orgItem, this._editItem);
	                throw e;
	            }
	            if (rslt) ;
	            else {
	                this.$_replaceItem(orgItem, this._editItem);
	            }
	        }
	        return rslt;
	    };
	    TreeGridItemProvider.prototype._doCompleteInsert = function (appending) {
	        var ds = this.dataSource;
	        var rslt = false;
	        if (ds) {
	            var parent_1 = this._editItem.parent;
	            var row = parent_1.row;
	            var child = ds.createRow(this._editItem.values, -1, false);
	            var index = this._editItem.parent.indexOf(this._editItem);
	            this._rs.removeItem(this._editItem);
	            try {
	                if (this.isAppending) {
	                    rslt = row.addChild(child, false);
	                }
	                else {
	                    rslt = row.insertChild(index, child, false);
	                }
	            }
	            catch (e) {
	                if (this._appending) {
	                    this._rs.appendItem(parent_1, this._editItem);
	                }
	                else {
	                    this._rs.insertItem(parent_1, this._editItem, this._insertIndex, this._insertAfter);
	                }
	                throw e;
	            }
	            if (rslt) {
	                var item = parent_1.itemOfRow(child.rowId);
	                this._copyExtents(this._editItem, item);
	            }
	            else {
	                if (this._appending) {
	                    this._rs.appendItem(parent_1, this._editItem);
	                }
	                else {
	                    this._rs.insertItem(parent_1, this._editItem, this._insertIndex, this._insertAfter);
	                }
	            }
	        }
	        return rslt;
	    };
	    TreeGridItemProvider.prototype._doCancelEdit = function (state, orgItem) {
	        if (state == GridItem_1.ItemState.UPDATING) {
	            this.$_replaceItem(this._editItem, orgItem);
	            this._copyExtents(this._editItem, orgItem);
	        }
	        else if (state == GridItem_1.ItemState.INSERTING) {
	            if (this._editItem.parent) {
	                this._rs.removeItem(this._editItem);
	            }
	        }
	        _super.prototype._doCancelEdit.call(this, state, orgItem);
	    };
	    TreeGridItemProvider.prototype._doCommitEdit = function (state, orgItem) {
	        if (state == GridItem_1.ItemState.UPDATING) ;
	        else if (state == GridItem_1.ItemState.INSERTING) ;
	        return _super.prototype._doCommitEdit.call(this, state, orgItem);
	    };
	    TreeGridItemProvider.prototype.remove = function (item) {
	        if (item) {
	            var row = item.row;
	            if (row) {
	                row.parent.removeChild(row);
	            }
	        }
	    };
	    TreeGridItemProvider.prototype.removeAll = function (items) {
	        if (items && items.length > 0) {
	            var rows = [];
	            for (var i = 0, cnt = items.length; i < cnt; i++) {
	                var item = this._rs.getItem(items[i]);
	                rows.push(item.row);
	            }
	            this.dataSource.removeRows(rows);
	        }
	    };
	    TreeGridItemProvider.prototype.getRemovableRows = function (items) {
	        if (items.length > 0) {
	            var rows = [];
	            for (var i = 0, cnt = items.length; i < cnt; i++) {
	                var item = this._rs.getItem(items[i]);
	                rows.push(item.row);
	            }
	            return rows;
	        }
	    };
	    TreeGridItemProvider.prototype.removeRows = function (rows) {
	        if (rows) {
	            this.dataSource.removeRows(rows);
	        }
	    };
	    TreeGridItemProvider.prototype.setDataSource = function (value) {
	        this._rs.dataSource = value;
	    };
	    Object.defineProperty(TreeGridItemProvider.prototype, "rootItem", {
	        get: function () {
	            return this._rs["_rootItem"];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeGridItemProvider.prototype._createEditItem = function (target, state, defaultValues) {
	        this["_editingItem"] = null;
	        var ds = this.dataSource;
	        if (!ds) {
	            return null;
	        }
	        var flds = ds.fieldCount;
	        switch (state) {
	            case GridItem_1.ItemState.UPDATING:
	                this["_editingItem"] = new TreeEditItem(this, target, state);
	                for (var i = 0; i < flds; i++) {
	                    this["_editingItem"].setValue(i, target.getData(i));
	                }
	                this._copyExtents(target, this["_editingItem"]);
	                break;
	            case GridItem_1.ItemState.INSERTING:
	            case GridItem_1.ItemState.APPENDING:
	                this["_editingItem"] = new TreeEditItem(this, null, state);
	                if (defaultValues) {
	                    for (var i = 0; i < flds; i++) {
	                        if (defaultValues.length > i) {
	                            this["_editingItem"].setValue(i, defaultValues[i]);
	                        }
	                    }
	                }
	                break;
	        }
	        return this["_editingItem"];
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    TreeGridItemProvider.prototype.onItemProviderFilterAdd = function (rs, field, criteria) {
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterRemove = function (rs, field, filter) {
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterClear = function (rs, field) {
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterClearAll = function (rs) {
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterAdded = function (rs, field, criteria) {
	        this._fireFilterAdded(field, criteria);
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterRemoved = function (rs, field, filter) {
	        this._fireFilterRemoved(field, filter);
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterCleared = function (rs, field) {
	        this._fireFilterCleared(field);
	    };
	    TreeGridItemProvider.prototype.onItemProviderFilterAllCleared = function (rs) {
	        this._fireFilterAllCleared();
	    };
	    TreeGridItemProvider.prototype.onItemProviderFiltered = function (rs) {
	        this._fireFiltered(null, null); //filterCollection, filter);
	    };
	    TreeGridItemProvider.prototype.onItemProviderSort = function (rs, fields, directions) {
	        this._fireSort(fields, directions, null);
	    };
	    TreeGridItemProvider.prototype.onItemProviderSorted = function (rs) {
	        this._fireSorted();
	    };
	    TreeGridItemProvider.prototype.onTreeItemProviderItemChanged = function (rs, item) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider_1.TreeItemProvider.ITEM_CHANGED, item);
	        }
	    };
	    TreeGridItemProvider.prototype.onTreeItemProviderExpanding = function (rs, item) {
	        if (this["_eventLock"] <= 0) {
	            return this.fireConfirmEvent(TreeItemProvider_1.TreeItemProvider.EXPANDING, item);
	        }
	        return true;
	    };
	    TreeGridItemProvider.prototype.onTreeItemProviderExpanded = function (rs, item) {
	        if (this["_eventLock"] <= 0) {
	            this.fireEvent(TreeItemProvider_1.TreeItemProvider.EXPANDED, item);
	        }
	    };
	    TreeGridItemProvider.prototype.onTreeItemProviderCollapsing = function (rs, item) {
	        if (this["_eventLock"] <= 0) {
	            return this.fireConfirmEvent(TreeItemProvider_1.TreeItemProvider.COLLAPSING, item);
	        }
	        return true;
	    };
	    return TreeGridItemProvider;
	}(EditableItemProvider_1.EditableItemProvider));
	exports.TreeGridItemProvider = TreeGridItemProvider;
	});

	unwrapExports(TreeGridItemProvider_1);
	var TreeGridItemProvider_2 = TreeGridItemProvider_1.TreeGridItemProvider;

	var TreeOptions_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeOptions.ts
	// 2019. 09. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var TreeOptions = /** @class */ (function (_super) {
	    __extends(TreeOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeOptions(grid) {
	        var _this = _super.call(this, grid) || this;
	        //-------------------------------------------------------------------------
	        // consts
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // static members
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._expanderWidth = 17;
	        _this._lineVisible = true;
	        _this._showCheckBox = false;
	        _this._defaultIcon = -1;
	        _this._iconWidth = 0; // 0 보다 큰 값으로 지정하면 아이콘이 존재하지 않아도 그 너비를 차지한다.
	        _this._iconHeight = 0;
	        _this._collapseWhenLeftKey = true;
	        _this._collapseWhenCtrlKey = true;
	        _this._expandWhenRightKey = true;
	        _this._expandWhenCtrlKey = true;
	        _this._expandedIconUrl = "images/tree-expanded.png";
	        _this._collapsedIconUrl = "images/tree-collapsed.png";
	        return _this;
	    }
	    TreeOptions.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeOptions.prototype, "expanderWidth", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expanderWidth */
	        get: function () {
	            return this._expanderWidth;
	        },
	        set: function (value) {
	            if (value != this._expanderWidth) {
	                this._expanderWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "lineVisible", {
	        /** lineVisible */
	        get: function () {
	            return this._lineVisible;
	        },
	        set: function (value) {
	            if (value != this._lineVisible) {
	                this._lineVisible = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "showCheckBox", {
	        /** showCheckBox */
	        get: function () {
	            return this._showCheckBox;
	        },
	        set: function (value) {
	            if (value != this._showCheckBox) {
	                this._showCheckBox = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "iconImages", {
	        /** iconImages */
	        get: function () {
	            return this._iconImages;
	        },
	        set: function (value) {
	            if (value != this._iconImages) {
	                this._iconImages = value;
	                this._icons = value && this.grid && this.grid.getImageList(value);
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "defaultIcon", {
	        /** defaultIcon */
	        get: function () {
	            return this._defaultIcon;
	        },
	        set: function (value) {
	            if (value != this._defaultIcon) {
	                this._defaultIcon = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "iconWidth", {
	        /** iconWidth */
	        get: function () {
	            return this._iconWidth;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._iconWidth) {
	                this._iconWidth = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "iconHeight", {
	        /** iconHeight */
	        get: function () {
	            return this._iconHeight;
	        },
	        set: function (value) {
	            value = Math.max(0, value);
	            if (value != this._iconHeight) {
	                this._iconHeight = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "collapseWhenLeftKey", {
	        /** collapseWhenLeftKey */
	        get: function () {
	            return this._collapseWhenLeftKey;
	        },
	        set: function (value) {
	            if (value != this._collapseWhenLeftKey) {
	                this._collapseWhenLeftKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "collapseWhenCtrlKey", {
	        /** collapseWhenCtrlKey */
	        get: function () {
	            return this._collapseWhenCtrlKey;
	        },
	        set: function (value) {
	            if (value != this._collapseWhenCtrlKey) {
	                this._collapseWhenCtrlKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "expandWhenRightKey", {
	        /** expandWhenRightKey */
	        get: function () {
	            return this._expandWhenRightKey;
	        },
	        set: function (value) {
	            if (value != this._expandWhenRightKey) {
	                this._expandWhenRightKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "expandWhenCtrlKey", {
	        /** expandWhenCtrlKey */
	        get: function () {
	            return this._expandWhenCtrlKey;
	        },
	        set: function (value) {
	            if (value != this._expandWhenCtrlKey) {
	                this._expandWhenCtrlKey = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeOptions.prototype, "icons", {
	        /** icons */
	        get: function () {
	            return this._icons;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeOptions;
	}(GridOptions.GridBaseOptions));
	exports.TreeOptions = TreeOptions;
	});

	unwrapExports(TreeOptions_1);
	var TreeOptions_2 = TreeOptions_1.TreeOptions;

	var TreeElements = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeDataTag.ts
	// 2019. 09. 18. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var TreeExpandHandle = /** @class */ (function (_super) {
	    __extends(TreeExpandHandle, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeExpandHandle(cellView) {
	        var _this = _super.call(this, cellView, "rowGroupExpandHandle") || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._expanded = false;
	        _this.clickable = true;
	        return _this;
	    }
	    Object.defineProperty(TreeExpandHandle.prototype, "expanded", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** expanded */
	        get: function () {
	            return this._expanded;
	        },
	        set: function (value) {
	            if (value != this._expanded) {
	                this._expanded = value;
	                this._changed();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeExpandHandle.prototype._createDom = function () {
	        return null;
	    };
	    return TreeExpandHandle;
	}(HandleElement_1.CellHandle));
	exports.TreeExpandHandle = TreeExpandHandle;
	var TreeCheckElement = /** @class */ (function (_super) {
	    __extends(TreeCheckElement, _super);
	    function TreeCheckElement() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeCheckElement.prototype._getCssSelector = function () {
	        throw new Error("Method not implemented.");
	    };
	    TreeCheckElement.prototype._doDraw = function (element) {
	        throw new Error("Method not implemented.");
	    };
	    return TreeCheckElement;
	}(VisualElement_1.VisualElement));
	var TreeCellElement = /** @class */ (function (_super) {
	    __extends(TreeCellElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeCellElement() {
	        var _this = _super.call(this, "treeCellView") || this;
	        _this._expander = new TreeExpandHandle(_this);
	        _this.addChild(_this._expander);
	        _this._expanderDom = document.createElement("span");
	        var css = _this._expanderDom.style;
	        var check = _this._checkDom = document.createElement("input");
	        check.type = "checkbox";
	        check.className = "rg-checkbox";
	        check.style.display = "inline-block";
	        css = check.style;
	        css.marginLeft = css.marginRight = "2px";
	        _this._iconDom = document.createElement("img");
	        css = _this._iconDom.style;
	        css.marginLeft = css.marginRight = "2px";
	        css.verticalAlign = "middle";
	        _this._valueDom = document.createElement("span");
	        return _this;
	    }
	    TreeCellElement.prototype.dispose = function () {
	        this._expanderDom = null;
	        this._checkDom = null;
	        this._iconDom = null;
	        this._valueDom = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeCellElement.prototype._doUpdateContent = function (grid, model, dom) {
	        //super._doUpdateContent(grid, model, dom);
	        var item = model.item;
	        var css = dom.style;
	        this._expander.expanded = item.expanded;
	        css.textAlign = "left";
	        css.textIndent = ((item.level - 1) * 16) + "px";
	        dom.appendChild(this._expanderDom);
	        //this._expander.src = this._expanded ? "images/tree-expanded.png" : "images/tree-collapsed.png";
	        this._expanderDom.className = item.isLeaf ? "rg-tree-leaf" : this._expander.expanded ? "rg-tree-expanded" : "rg-tree-collapsed";
	        dom.appendChild(this._iconDom);
	        this._iconDom.src = grid.getTreeIcon(item) || "";
	        dom.appendChild(this._checkDom);
	        dom.appendChild(this._valueDom);
	        this._valueDom.textContent = this.text;
	    };
	    TreeCellElement.prototype._doLayoutContent = function (lm) {
	        var dom = this._expanderDom;
	        this._expander.setBounds(dom.offsetLeft, dom.offsetTop, dom.offsetWidth, dom.offsetHeight);
	    };
	    return TreeCellElement;
	}(ItemElement_1.DataCellElement));
	var TreeItemElement = /** @class */ (function (_super) {
	    __extends(TreeItemElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemElement() {
	        var _this = _super.call(this, "treeItemView") || this;
	        _this._treeCellView = new TreeCellElement();
	        _this.addChild(_this._treeCellView);
	        return _this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeItemElement.prototype._getCell = function (column) {
	        if (column.index == 0) {
	            return this._treeCellView;
	        }
	        else {
	            return _super.prototype._getCell.call(this, column);
	        }
	    };
	    return TreeItemElement;
	}(ItemElement_1.RowElement));
	var TreeBodyElement = /** @class */ (function (_super) {
	    __extends(TreeBodyElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeBodyElement(body) {
	        return _super.call(this, body) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeBodyElement.prototype.createRowElement = function () {
	        return new TreeItemElement();
	    };
	    return TreeBodyElement;
	}(GridBodyElement_1.GridBodyElement));
	exports.TreeBodyElement = TreeBodyElement;
	var TreeLinesElement = /** @class */ (function (_super) {
	    __extends(TreeLinesElement, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeLinesElement(treeView) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._levelWidth = 16;
	        _this._handleWidth = 9;
	        _this._handleHeight = 9;
	        _this._stroke = "gray";
	        _this._linePool = [];
	        _this._lines = [];
	        _this._startIndex = -1;
	        _this._endIndex = -1;
	        _this._treeView = treeView;
	        return _this;
	    }
	    TreeLinesElement.prototype.dispose = function () {
	        this._linePool = null;
	        this._lines = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeLinesElement.prototype, "levelWidth", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** levelWidth */
	        get: function () {
	            return this._levelWidth;
	        },
	        set: function (value) {
	            if (value != this._levelWidth) {
	                this._levelWidth = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeLinesElement.prototype, "handleWidth", {
	        /** handleWidth */
	        get: function () {
	            return this._handleWidth;
	        },
	        set: function (value) {
	            if (value != this._handleWidth) {
	                this._handleWidth = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeLinesElement.prototype, "handleHeight", {
	        /** handleHeight */
	        get: function () {
	            return this._handleHeight;
	        },
	        set: function (value) {
	            if (value != this._handleHeight) {
	                this._handleHeight = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeLinesElement.prototype, "stroke", {
	        /** stroke */
	        get: function () {
	            return this._stroke;
	        },
	        set: function (value) {
	            if (value != this._stroke) {
	                this._stroke = value;
	                this.invalidate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeLinesElement.prototype.setRange = function (treeView, startIndex, endIndex) {
	        if (startIndex != this._startIndex || endIndex != this._endIndex) {
	            this._startIndex = startIndex;
	            this._endIndex = endIndex;
	            this.invalidate();
	        }
	    };
	    TreeLinesElement.prototype.layout = function (lm) {
	        var tree = this._treeView;
	        this.$_hideAll();
	        if (!tree || this._startIndex < 0 || this._endIndex < 0 || this._startIndex > this._endIndex) {
	            return;
	        }
	        var item = null;
	        var i;
	        for (i = this._startIndex; i <= this._endIndex; i++) {
	            item = tree.getItem(i);
	            if (item) {
	                break;
	            }
	        }
	        if (!item) {
	            return;
	        }
	        var level = item.level;
	        if (level > 1 || item.childIndex > 0) {
	            for (var j = 0; j < level; j++) {
	                var parent_1 = item.getAncestor(j);
	                var next = parent_1.last;
	                if (next && next.index >= i) {
	                    next = this.$_findLevelItem(j + 1, i);
	                    this.$_drawVertLine(lm, this.$_borrowLine(), null, next, parent_1.level);
	                }
	            }
	            if (item.childIndex > 0) {
	                this.$_drawVertLine(lm, this.$_borrowLine(), null, item, item.parent.level);
	            }
	        }
	        for (; i <= this._endIndex; i++) {
	            var item_1 = tree.getItem(i);
	            var parent_2 = item_1.parent;
	            var j = item_1.childIndex;
	            if (j < parent_2.count - 1) {
	                var next = parent_2.getItem(j + 1);
	                if (next.index > this._endIndex) {
	                    next = null;
	                }
	                this.$_drawVertLine(lm, this.$_borrowLine(), item_1, next, parent_2.level);
	            }
	            parent_2 = item_1;
	            if (parent_2 && parent_2.expanded && parent_2.count > 0) {
	                var next = parent_2.getItem(0);
	                if (next.index > this._endIndex) {
	                    next = null;
	                }
	                this.$_drawChildLine(lm, this.$_borrowLine(), item_1, next);
	            }
	            this.$_drawHorzLine(lm, this.$_borrowLine(), item_1);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeLinesElement.prototype._initDom = function (dom) {
	        _super.prototype._initDom.call(this, dom);
	        var css = dom.style;
	        css.setProperty("pointer-events", "none", "important");
	    };
	    TreeLinesElement.prototype._doDraw = function (dom) {
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeLinesElement.prototype.$_borrowLine = function () {
	        var line = this._linePool.pop();
	        if (!line) {
	            line = document.createElement("div");
	            this["_dom"].appendChild(line);
	            line.className = "rg-tree-line";
	            var css = line.style;
	            css.position = "absolute";
	            // css.border = "none";
	            // css.boxSizing = "border-box";
	            // css["-webkit-print-color-adjust"] = "exact";
	            // css.padding = "0px";
	            // css.margin = "0px";
	        }
	        line.style.display = "inline-block";
	        this._lines.push(line);
	        return line;
	    };
	    TreeLinesElement.prototype.$_hideAll = function () {
	        for (var i = this._lines.length - 1; i >= 0; i--) {
	            this._lines[i].style.display = "none";
	        }
	    };
	    TreeLinesElement.prototype.$_findLevelItem = function (level, start) {
	        for (var i = start; i <= this._endIndex; i++) {
	            var item = this._treeView.getItem(i);
	            if (item && item.level == level) {
	                return item;
	            }
	        }
	        return null;
	    };
	    TreeLinesElement.prototype.$_setBounds = function (elt, x, y, w, h) {
	        var css = elt.style;
	        css.left = x + "px";
	        css.top = y + "px";
	        css.width = w == 1 ? "1px" : w + "px";
	        css.height = h == 1 ? "1px" : h + "px";
	    };
	    TreeLinesElement.prototype.$_drawVertLine = function (lm, elt, src, dst, level) {
	        var top = lm.topIndex;
	        var x1 = level * this._levelWidth + this._levelWidth / 2;
	        var y1 = 0;
	        var y2 = this.height;
	        if (src) {
	            var r = lm.getItemBounds(src.index - top);
	            var sz = (src instanceof TreeItemProvider_1.TreeItem && src.hasChildren) ? this._handleHeight : 0;
	            y1 = r.y + r.height / 2 + sz / 2;
	        }
	        if (dst) {
	            var r = lm.getItemBounds(dst.index - top);
	            var sz = (dst instanceof TreeItemProvider_1.TreeItem && dst.hasChildren) ? this._handleHeight : 0;
	            y2 = r.y + r.height / 2 - sz / 2;
	        }
	        this.$_setBounds(elt, x1, y1, 1, y2 - y1);
	    };
	    TreeLinesElement.prototype.$_drawHorzLine = function (lm, elt, item) {
	        var top = lm.topIndex;
	        var x1 = item.parent.level * this._levelWidth + this._levelWidth / 2;
	        var x2 = item.level * this._levelWidth;
	        var y = 0;
	        if (item.hasChildren) {
	            x1 += this._handleWidth / 2;
	        }
	        var r = lm.getItemBounds(item.index - top);
	        y = r.y + r.height / 2;
	        this.$_setBounds(elt, x1, y, x2 - x1, 1);
	    };
	    TreeLinesElement.prototype.$_drawChildLine = function (lm, elt, src, dst) {
	        var top = lm.topIndex;
	        var x1 = src.level * this._levelWidth + this._levelWidth / 2;
	        var y2 = this.height;
	        var r = lm.getItemBounds(src.index - top);
	        var y1;
	        { //this._treeView.treeOptions.showCheckBox()) {
	            var checkSize = 12;
	            checkSize -= 2;
	            y1 = r.y + r.height / 2 + checkSize / 2;
	            // } else if (this._options.icons() && src instanceof TreeItem && src.iconHeight() > 0) {
	            // 	y1 = r.y + r.height / 2 + src.iconHeight() / 2;
	            // } else {
	            // 	y1 = r.bottom() - r.height / 4;
	        }
	        if (dst) {
	            r = lm.getItemBounds(dst.index - top);
	            var sz = dst.hasChildren ? this._handleHeight : 0;
	            y2 = r.y + r.height / 2 - sz / 2;
	        }
	        this.$_setBounds(elt, x1, y1, 1, y2 - y1);
	    };
	    return TreeLinesElement;
	}(VisualElement_1.LayerElement));
	exports.TreeLinesElement = TreeLinesElement;
	});

	unwrapExports(TreeElements);
	var TreeElements_1 = TreeElements.TreeExpandHandle;
	var TreeElements_2 = TreeElements.TreeBodyElement;
	var TreeElements_3 = TreeElements.TreeLinesElement;

	var TreeView_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeView.ts
	// 2019. 09. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });











	var TreeViewSelectionTool = /** @class */ (function (_super) {
	    __extends(TreeViewSelectionTool, _super);
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeViewSelectionTool(container) {
	        return _super.call(this, container, "treeViewSelectionTool") || this;
	    }
	    TreeViewSelectionTool.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeViewSelectionTool.prototype._doKeyDown = function (key, ctrl, shift, alt, event) {
	        // var item;
	        // var idx = this.focused.clone();
	        // var treeOptions = this.grid()._treeOptions;
	        // if (idx && (item = idx.item())) {
	        // 	switch (key) {
	        // 		case Keys.RIGHT:
	        // 			if ( (!ctrl && this.grid().visibleColumnCount() == 1 && idx.isRight() && treeOptions.isExpandWhenRightArrow()) || ( ctrl && treeOptions.isExpandWhenCtrlArrow()) ) {
	        // 				if (item.isExpanded()) {
	        // 					if (item.count() > 0) {
	        // 						idx.down();
	        // 						this.setFocused(idx, true);
	        // 						return true;
	        // 					}
	        // 				} else {
	        // 					item.setExpanded(true);
	        // 					return true;
	        // 				}
	        // 			}
	        // 			break;
	        // 		case Keys.LEFT:
	        // 			if ( (!ctrl && idx.isLeft() && treeOptions.isCollapseWhenLeftArrow()) || ( ctrl && treeOptions.isCollapseWhenCtrlArrow()) ) {
	        // 				if (item.isExpanded()) {
	        // 					item.setExpanded(false);
	        // 					return true;
	        // 				} else {
	        // 					if (!(item.parent() instanceof RootTreeItem)) {
	        // 						idx.itemIndex(item.parent().index());
	        // 						this.setFocused(idx, true);
	        // 						return true;
	        // 					}
	        // 				}
	        // 			}
	        // 			break;
	        // 	}
	        // }
	        return _super.prototype._doKeyDown.call(this, key, ctrl, shift, alt, event);
	    };
	    TreeViewSelectionTool.prototype._doColumnHeaderClicked = function (column, rightClicked, event) {
	        // this._super(column);
	        // var tree = this.grid();
	        // var dcol = _cast(column, DataColumn);
	        // if (!tree.isEmpty() && dcol && dcol.isSortable() && tree.sortingOptions().isEnabled()) {
	        // 	tree.sortColumn(dcol,event);
	        // }
	    };
	    TreeViewSelectionTool.prototype._doElementClicked = function (element) {
	        // this._super(element);
	        // if (element instanceof TreeCheckElement) {
	        // 	var tree = this.grid();
	        // 	if (tree.editOptions().isCheckable()) {
	        // 		var item = element.item();
	        // 		item && item.isCheckable() && tree.itemSource().checkItem(item, !item.isChecked(), tree.checkBar().isExclusive(), true);
	        // 	}
	        // }
	    };
	    TreeViewSelectionTool.prototype._doHandleClicked = function (handle) {
	        // if (handle instanceof TreeExpandHandle) {
	        // 	var item = handle.cellView().item();
	        // 	if (item) {
	        // 		item.setExpanded(!item.isExpanded());
	        // 	}
	        // } else {
	        // 	this._super(handle);
	        // }
	    };
	    TreeViewSelectionTool.prototype._doMouseDown = function (x, y, ctrl, shift, button) {
	        var tree = this.grid;
	        var elt = this.findElementAt(x, y, false);
	        if (elt instanceof TreeElements.TreeExpandHandle) {
	            var item = elt.cellView.item;
	            if (item instanceof TreeItemProvider_1.TreeItem) {
	                if (item.expanded) {
	                    tree.collapse(item, false);
	                }
	                else {
	                    tree.expand(item, false, false);
	                }
	            }
	            return;
	        }
	        _super.prototype._doMouseDown.call(this, x, y, ctrl, shift, button);
	    };
	    return TreeViewSelectionTool;
	}(GridTool_1.GridSelectionTool));
	var TreeContainer = /** @class */ (function (_super) {
	    __extends(TreeContainer, _super);
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeContainer(containerId) {
	        return _super.call(this, containerId) || this;
	    }
	    TreeContainer.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeContainer.prototype, "treeView", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** treeView */
	        get: function () {
	            return this.gridView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeContainer.prototype._createGridView = function () {
	        return new TreeView(this);
	    };
	    TreeContainer.prototype._createDefaultTool = function () {
	        // if ($_mobileEnable) {
	        // 	return _isMobile() ? new MobileTreeSelectionTool(this) : new TreeSelectionTool(this);
	        // } else {
	        return new TreeViewSelectionTool(this);
	        // }		
	    };
	    return TreeContainer;
	}(GridContainer_1.GridContainer));
	exports.TreeContainer = TreeContainer;
	var TreeItemExpanderCell = /** @class */ (function (_super) {
	    __extends(TreeItemExpanderCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemExpanderCell() {
	        return _super.call(this, "treeItemExpanderCell") || this;
	    }
	    Object.defineProperty(TreeItemExpanderCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemExpanderCell.prototype, "value", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeItemExpanderCell;
	}(GridCell_1.GridCell));
	var TreeItemFooterCell = /** @class */ (function (_super) {
	    __extends(TreeItemFooterCell, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeItemFooterCell() {
	        return _super.call(this, "treeItemFooterCell") || this;
	    }
	    Object.defineProperty(TreeItemFooterCell.prototype, "getText", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            var s = String(this.value());
	            if (!s) {
	                var index = this.index;
	                if (index.dataColumn) {
	                    s = index.column.footer.groupText;
	                }
	            }
	            return s;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItemFooterCell.prototype, "value", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeItemFooterCell;
	}(GridCell_1.GridCell));
	var TreeView = /** @class */ (function (_super) {
	    __extends(TreeView, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeView(container) {
	        var _this = _super.call(this, container) || this;
	        _this._expanderCell = new TreeItemExpanderCell();
	        _this._footerCell = new TreeItemFooterCell();
	        _this._currentRowId = -1;
	        _this._focusedRow = -1;
	        _this.itemSource = _this._rs = _this._createItemSource();
	        return _this;
	    }
	    TreeView.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeView.prototype, "treeOptions", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** treeOptions */
	        get: function () {
	            return this._treeOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeView.prototype, "linesView", {
	        /** linesView */
	        get: function () {
	            return this._linesView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeView.prototype.getLevels = function (visibleOnly) {
	        return this._rs.getLevels(visibleOnly);
	    };
	    TreeView.prototype.getExpanderCell = function (index) {
	        //this._expanderCell.setStyles(this._treeOptions.expanderStyles());
	        this._expanderCell.setIndex(CellIndex_1.CellIndex.temp(this, index));
	        return this._expanderCell;
	    };
	    TreeView.prototype.getFooterCell = function (index) {
	        //this._footerCell.setStyles(this._treeOptions.footerStyles());
	        this._footerCell.setIndex(index);
	        return this._footerCell;
	    };
	    TreeView.prototype.expand = function (item, recursive, force) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.expand(item, recursive, force);
	    };
	    TreeView.prototype.collapse = function (item, recursive) {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.collapse(item, recursive);
	    };
	    TreeView.prototype.expandAll = function (level) {
	        if (level === void 0) { level = 0; }
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.expandAll(level);
	    };
	    TreeView.prototype.collapseAll = function () {
	        if (this.isItemEditing(null)) {
	            return;
	        }
	        this._rs.collapseAll();
	    };
	    TreeView.prototype.getTreeIcon = function (item) {
	        var images = this._treeOptions.icons;
	        if (images) {
	            var idx = item.iconIndex;
	            if (idx < 0 || idx >= images.count) {
	                idx = this._treeOptions.defaultIcon;
	            }
	            if (idx >= 0 && idx < images.count) {
	                return images.getImage(idx);
	            }
	        }
	        return null;
	    };
	    TreeView.prototype.getCheckedItems = function () {
	        var items = [];
	        for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	            var item = this.getItem(i);
	            item.checked && items.push(item);
	        }
	        return items;
	    };
	    TreeView.prototype.getCheckedItemIndices = function () {
	        var items = [];
	        for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	            var item = this.getItem(i);
	            item.checked && items.push(item.index);
	        }
	        return items;
	    };
	    TreeView.prototype.getCheckedRows = function (visibleOnly) {
	        var rows = null;
	        if (visibleOnly) {
	            rows = [];
	            for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	                var item = this.getItem(i);
	                item.checked && rows.push(item.row);
	            }
	        }
	        else {
	            rows = this._rs.getCheckedRows();
	        }
	        return rows;
	    };
	    TreeView.prototype.getCheckedRowIds = function (visibleOnly) {
	        var rows = null;
	        if (visibleOnly) {
	            rows = [];
	            for (var i = 0, cnt = this.itemCount; i < cnt; i++) {
	                var item = this.getItem(i);
	                item.checked && rows.push(item.dataRow);
	            }
	        }
	        else {
	            rows = this._rs.getCheckedRowIds();
	        }
	        return rows;
	    };
	    TreeView.prototype.checkChildren = function (parent, checked, recursive, visibleOnly, checkableOnly, checkEvent) {
	        if (checkableOnly === void 0) { checkableOnly = true; }
	        if (checkEvent === void 0) { checkEvent = false; }
	        if (parent) {
	            for (var i = 0, cnt = parent.count; i < cnt; i++) {
	                var item = parent.getItem(i);
	                if (checkableOnly) {
	                    item.checkable && item.setChecked(checked, checkEvent);
	                }
	                else {
	                    item.setChecked(checked, checkEvent);
	                }
	                if (recursive && (item.expanded || !visibleOnly)) {
	                    this.checkChildren(item, checked, true, visibleOnly, checkableOnly, checkEvent);
	                }
	            }
	        }
	    };
	    TreeView.prototype.resetCheckables = function () {
	        this._rs.resetCheckables();
	    };
	    TreeView.prototype.applyCheckables = function () {
	        this._rs.applyCheckables();
	    };
	    Object.defineProperty(TreeView.prototype, "dataSource", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rs && this._rs.dataSource;
	        },
	        set: function (value) {
	            this._rs && (this._rs.dataSource = value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeView.prototype, "maxItemCount", {
	        get: function () {
	            return this._rs ? this._rs.maxItemCount : 0;
	        },
	        set: function (value) {
	            this._rs && (this._rs.maxItemCount = value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeView.prototype, "summarizer", {
	        get: function () {
	            throw new Error("Method not implemented.");
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeView.prototype._initStyles = function () {
	        _super.prototype._initStyles.call(this);
	        this._treeOptions = new TreeOptions_1.TreeOptions(this);
	        //this._addGridObject(this._treeOptions = new TreeOptions(this));
	    };
	    TreeView.prototype._createItemSource = function () {
	        var rs = new TreeGridItemProvider_1.TreeGridItemProvider(true);
	        //rs._addParentNodeOnFiltering  = this._filteringOptions ? this._filteringOptions._addParentNodeOnFiltering : undefined;
	        return rs;
	    };
	    TreeView.prototype._createSidePane = function () {
	        this._linesView = new TreeElements.TreeLinesElement(this);
	        this.addElement(this._linesView);
	        return _super.prototype._createSidePane.call(this);
	    };
	    TreeView.prototype.addMasks = function () {
	        /*
	        m_linesMask = new Shape();
	        addMask(m_linesMask);
	        m_treeLinesView.mask = m_linesMask;
	        */
	    };
	    // _createDelegate() {
	    // 	return new TreeGridDelegate(this);
	    // }
	    TreeView.prototype._createLayoutManager = function () {
	        return new TreeGridLayoutManager(this);
	    };
	    TreeView.prototype._createBodyView = function (body) {
	        return new TreeElements.TreeBodyElement(body);
	    };
	    TreeView.prototype._createFixedBodyView = function (body) {
	        return _super.prototype._createFixedBodyView.call(this, body);
	    };
	    TreeView.prototype._createRightBodyView = function (body) {
	        return _super.prototype._createRightBodyView.call(this, body);
	    };
	    TreeView.prototype._visualObjectChanged = function (obj) {
	        _super.prototype._visualObjectChanged.call(this, obj);
	        if (obj instanceof CheckBar_1.CheckBar) ;
	    };
	    TreeView.prototype.append = function () {
	        return this.insert(this._rs.rootItem, false, true);
	    };
	    TreeView.prototype._doCanInsert = function (item, shift, ctrl) {
	        return item && (item.count > 0 || !ctrl || item.level == 0 || this.editOptions.appendable);
	    };
	    TreeView.prototype.getSummarizer = function () {
	        return this._rs.summarizer;
	    };
	    TreeView.prototype._doMaxRowCountChanged = function () {
	        this._rs.maxItemCount = this.maxItemCount;
	    };
	    // onImageListImageLoaded(images: ImageList, index: number): void {
	    //     super.onImageListImageLoaded(images, index);
	    // 	if (images === this._treeOptions.icons) {
	    // 		this.refreshView();
	    // 	}
	    // }
	    // onImageLoaded(url: string): void {
	    // 	// this._super(url);
	    // }
	    TreeView.prototype.getSortFields = function () {
	        return this._rs.getSortFields();
	    };
	    TreeView.prototype.getSortDirections = function () {
	        return this._rs.getSortDirections();
	    };
	    TreeView.prototype.getSortCases = function () {
	        return this._rs.getSortCases();
	    };
	    TreeView.prototype._doSortItems = function (fields, directions, textCases) {
	        //this._items.orderBy(fields, directions, textCases);
	    };
	    TreeView.prototype._doColumnFiltersChanged = function (filterCollection, filter) {
	        //this.applyFilters(filterCollection, filter);
	    };
	    TreeView.prototype.$_doLayout = function (lm, bounds) {
	        var treeOptions = this._treeOptions;
	        // treeOptions.expanderStyles().setParent(this.fixedOptions().colCount() > 0 ? this.fixedOptions().styles() : this.body().styles(), false);
	        _super.prototype.$_doLayout.call(this, lm, bounds);
	        // if (treeOptions.isLineVisible()) {
	        // 	this._treeLinesView.setVisible(true);
	        // 	this._treeLinesView.setStroke(treeOptions.expanderStyles().line());
	        // 	this._treeLinesView.invalidate();
	        // } else {
	        // 	this._treeLinesView.setVisible(false);
	        // }
	        /*
	        var r = m_treeLinesView.getGlobalBounds();
	        var g = m_linesMask.graphics;
	        g.clear();
	        if (r.width > 0 && r.height > 0) {
	            g.beginFill(0, 0);
	            g.drawRect(r.x, r.y, r.width, r.height);
	            g.endFill();
	        }
	        */
	    };
	    TreeView.prototype.assignImageList = function (list) {
	        // this._super(list);
	        // if (this.treeOptions().iconImages() == list.name()) {
	        // 	this.treeOptions._icons = list;
	        // }
	    };
	    TreeView.prototype.refreshView = function () {
	        // if (this._treeLinesView) {
	        // 	this._treeLinesView.invalidate();
	        // }
	        _super.prototype.refreshView.call(this);
	    };
	    TreeView.prototype.getEditBounds = function (index) {
	        /*
	        if (index.column().root().displayIndex() == 0) {
	            var view = this.getFocusedCellView();
	            if (view) {
	                var r = view.boundsByContainer();
	                if (view instanceof DataCellElement) {
	                    r.width -= view.getButtonsWidth();
	                }
	                r.width = Math.max(2, r.width);
	                return r;
	            }
	        }
	        */
	        return _super.prototype.getEditBounds.call(this, index);
	    };
	    TreeView.prototype.updatePastedRow = function (item, values, strict) {
	        if (item instanceof TreeItemProvider_1.TreeItem) {
	            var row = item.row;
	            if (row) {
	                strict ? row.updateStrict(values) : row.update(values);
	            }
	        }
	    };
	    TreeView.prototype.appendPastedRow = function (values) {
	        var ds = this.dataSource;
	        if (ds) {
	            var row = ds.createRow(values, -1, false);
	            ds.rootRow.addChild(row, false);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeView.prototype.$_getVisibleAncestor = function (rowId) {
	        var item = this._rs.getItemOfRow(rowId);
	        if (item) {
	            while (item && !item.visible) {
	                item = item.parent;
	            }
	            return item;
	        }
	        else {
	            return null;
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event handlers
	    //-------------------------------------------------------------------------
	    TreeView.prototype.onItemProviderReset = function (rs) {
	        this._currentRowId = -1;
	        _super.prototype.onItemProviderReset.call(this, rs);
	    };
	    TreeView.prototype.onTreeItemProviderItemChanged = function (rs, item) {
	        //this._treeLinesView.invalidate();
	        this.invalidateLayout();
	        this.fireEvent(TreeView.CHANGED, item);
	    };
	    TreeView.prototype.onTreeItemProviderExpanding = function (rs, item) {
	        this._focusedRow = this.focusedIndex ? this.focusedIndex.dataRow : -1;
	        // if (this.editController().isEditing() && !this._items.isEditing()) {
	        // 	this.editController().cancelEditor(true);
	        // }
	        // return !this.editController().isEditing() && !this._items.isEditing() &&
	        // 	this.fireConfirmEvent(TreeView.EXPANDING, item);
	        return true;
	    };
	    TreeView.prototype.onTreeItemProviderExpanded = function (rs, item) {
	        // if (this._focusedRow >= 0) {
	        // 	var index = this.focusedIndex().clone();
	        // 	var item = this.$_getVisibleAncestor(this._focusedRow);
	        // 	index._itemIndex = item ? item.index() : -1;
	        // 	this.setFocusedIndex(index, true);
	        // }
	        // this.fireEvent(TreeView.EXPANDED, item);
	    };
	    TreeView.prototype.onTreeItemProviderCollapsing = function (rs, item) {
	        this._focusedRow = this.focusedIndex ? this.focusedIndex.dataRow : -1;
	        // if (this.editController().isEditing() && !this._items.isEditing()) {
	        // 	this.editController().cancelEditor(true);
	        // }
	        // return !this.editController().isEditing() && !this._items.isEditing() &&
	        //     this.fireConfirmEvent(TreeView.COLLAPSING, item);
	        return true;
	    };
	    TreeView.prototype.onTreeItemProviderCollapsed = function (rs, item) {
	        // if (this._focusedRow >= 0) {
	        // 	var index = this.focusedIndex().clone();
	        // 	var item = this.$_getVisibleAncestor(this._focusedRow);
	        // 	index._itemIndex = item ? item.index() : -1;
	        // 	this.setFocusedIndex(index, true);
	        // }
	        this.fireEvent(TreeView.COLLAPSED, item);
	    };
	    //-------------------------------------------------------------------------
	    // consts
	    //-------------------------------------------------------------------------
	    // events
	    TreeView.EXPANDING = "onTreeViewExpanding";
	    TreeView.EXPANDED = "onTreeViewExpanded";
	    TreeView.COLLAPSING = "onTreeViewCollapsing";
	    TreeView.COLLAPSED = "onTreeViewCollapsed";
	    TreeView.CHANGED = "onTreeViewChanged";
	    return TreeView;
	}(GridBase_1.GridBase));
	exports.TreeView = TreeView;
	var TreeGridLayoutManager = /** @class */ (function (_super) {
	    __extends(TreeGridLayoutManager, _super);
	    //-------------------------------------------------------------------------
	    // property fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // fields
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeGridLayoutManager(treeView) {
	        return _super.call(this, treeView) || this;
	    }
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    TreeGridLayoutManager.prototype._doLayout = function (bounds) {
	        _super.prototype._doLayout.call(this, bounds);
	        var tree = this.grid;
	        var elt = tree.linesView;
	        if (elt) {
	            var r = (this.fixedColCount > 0 ? this.fixedBodyBounds : this.bodyBounds).clone();
	            if (this.columnCount > 0) {
	                r.width = Math.max(0, this.getColumnWidth(0));
	            }
	            else {
	                r.width = 0;
	            }
	            elt.setRect(r);
	            elt.levelWidth = 16; //tree.treeOptions().expanderWidth());
	            elt.setRange(tree, this.topIndex, Math.min(tree.itemCount, this.topIndex + this.itemCount) - 1);
	            elt.layout(this);
	        }
	    };
	    return TreeGridLayoutManager;
	}(GridLayoutManager_1.GridLayoutManager));
	exports.TreeGridLayoutManager = TreeGridLayoutManager;
	});

	unwrapExports(TreeView_1);
	var TreeView_2 = TreeView_1.TreeContainer;
	var TreeView_3 = TreeView_1.TreeView;
	var TreeView_4 = TreeView_1.TreeGridLayoutManager;

	var TreeDataTag = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeDataTag.ts
	// 2019. 09. 18. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var TreeDataTagCollection = /** @class */ (function (_super) {
	    __extends(TreeDataTagCollection, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeDataTagCollection(owner) {
	        var _this = _super.call(this) || this;
	        _this._tags = new Array();
	        _this._owner = owner;
	        return _this;
	    }
	    TreeDataTagCollection.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // properties
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeDataTagCollection.prototype.add = function (tag) {
	        if (tag) {
	            var tags = this._tags || (this._tags = []);
	            if (tags.indexOf(tag) < 0) {
	                tags.push(tag);
	            }
	            tag.connect(this._owner);
	        }
	    };
	    TreeDataTagCollection.prototype.remove = function (tag) {
	        if (tag && this._tags) {
	            var idx = this._tags.indexOf(tag);
	            if (idx >= 0) {
	                this._tags.splice(idx, 1);
	                tag.disconnect();
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.clearRows = function () {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].clearRows();
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.setRows = function () {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].setRows();
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.addRow = function (row) {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].addRow(row);
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.addRows = function (rows) {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].addRows(rows);
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.removeRow = function (row) {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].removeRow(row);
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.removeRows = function (rows) {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].removeRows(rows);
	            }
	        }
	    };
	    TreeDataTagCollection.prototype.updateRow = function (row) {
	        if (this._tags) {
	            for (var i = this._tags.length; i--;) {
	                this._tags[i].updateRow(row);
	            }
	        }
	    };
	    return TreeDataTagCollection;
	}(Base_1.Base));
	exports.TreeDataTagCollection = TreeDataTagCollection;
	});

	unwrapExports(TreeDataTag);
	var TreeDataTag_1 = TreeDataTag.TreeDataTagCollection;

	var DataHelper_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataHelper.ts
	// 2019. 09. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	function _getXmlAttr(xml, attr) {
	    return xml && xml.getAttribute(attr);
	}
	var DataHelper = /** @class */ (function (_super) {
	    __extends(DataHelper, _super);
	    function DataHelper() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DataHelper.csvToArray = function (ds, source, start, count, quoted, delimiter) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        if (quoted === void 0) { quoted = false; }
	        if (delimiter === void 0) { delimiter = ","; }
	        var lines = [];
	        var line = [];
	        var len = source.length;
	        var i = 0;
	        var s = [];
	        var started = false;
	        var quoting = false;
	        while (i < len) {
	            var c = source.charAt(i);
	            // next = i < len -1 ? source.charAt(i+1) : '';
	            if (c == '"') {
	                if (!started) { // 시작 
	                    started = quoting = true;
	                    !quoted && s.push(c);
	                }
	                else if (quoting && source.charAt(i + 1) == '"') { //quoting 시 따옴표 두개
	                    s.push(c);
	                    i++;
	                }
	                else if (quoting) { //quoting 시 따옴표 한개 
	                    quoting = false;
	                    !quoted && s.push(c);
	                }
	                else { //quoting 바깥쪽의 따옴표 
	                    s.push(c);
	                }
	            }
	            else if (!quoting && (c == delimiter || c == '\r' || c == '\n')) {
	                if (c == delimiter) {
	                    line.push(s.join(""));
	                }
	                else if (c == '\r' || c == '\n') {
	                    line.push(s.join(""));
	                    lines.push(line);
	                    line = [];
	                    if (source.charAt(i + 1) == '\n')
	                        i++;
	                }
	                s = [];
	                started = false;
	            }
	            else {
	                started = true;
	                s.push(c);
	            }
	            i++;
	        }
	        // 개행문자로 끝나지 않은 경우 처리
	        if (quoting)
	            s.splice(0, 0, '"');
	        if (s.length > 0) // \t로 끝나는 경우 다음 cell의 값이 공백...
	            line.push(s.join(""));
	        if (line.length > 0) {
	            lines.push(line);
	        }
	        if (start > 0) {
	            if (count <= 0) {
	                lines.splice(0, start);
	            }
	            else {
	                lines = lines.splice(start, count);
	            }
	        }
	        var flds = ds.getFields();
	        var fieldCount = flds.length;
	        var hasFlds = fieldCount > 0;
	        for (var i_1 = 0, cnt = lines.length; i_1 < cnt; i_1++) {
	            line = lines[i_1];
	            if (hasFlds && line.length > fieldCount) {
	                line.length = fieldCount;
	            }
	            for (var j = 0; j < fieldCount; j++) {
	                line[j] = flds[j].readValue(line[j]);
	            }
	        }
	        return lines;
	    };
	    DataHelper.xmlToRow = function (xml, fields, fieldNames) {
	        var nodes = xml.childNodes;
	        var fldCnt = fields.length;
	        var vals = new Array(fldCnt);
	        for (var j = 0, len = nodes.length; j < len; j++) {
	            var node = nodes[j];
	            var c = void 0;
	            if ((c = fieldNames.indexOf(node.tagName)) >= 0) {
	                vals[c] = fields[c].readValue(node.nodeValue || (node.hasChildNodes() && node.childNodes[0].nodeType === 3 && node.childNodes[0].nodeValue));
	            }
	        }
	        for (var j = 0; j < fldCnt; j++) {
	            if (vals[j] === undefined) {
	                vals[j] = fields[j].readValue(_getXmlAttr(xml, fieldNames[j]));
	            }
	        }
	        return vals;
	    };
	    DataHelper.xmlToArray = function (ds, xmlList, start, count) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = -1; }
	        var rows = null;
	        var xmlToRow = DataHelper.xmlToRow;
	        var cnt = xmlList ? xmlList.length : 0;
	        if (cnt) {
	            start = Math.max(0, start);
	            if (count < 0) {
	                count = cnt;
	            }
	            count = Math.min(cnt - start, count);
	            if (count) {
	                var flds = ds.getFields();
	                var fldNames = ds.getOrgFieldNames();
	                var fldCnt = flds.length;
	                rows = new Array(count);
	                for (var i = 0; i < count; i++) {
	                    var xml = xmlList[i + start];
	                    var vals = xmlToRow(xml, flds, fldNames);
	                    rows[i] = vals;
	                }
	            }
	        }
	        return rows;
	    };
	    return DataHelper;
	}(Base_1.Base));
	exports.DataHelper = DataHelper;
	});

	unwrapExports(DataHelper_1);
	var DataHelper_2 = DataHelper_1.DataHelper;

	var DataLoader = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// DataLoader.ts
	// 2019. 09. 19. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	function _getXmlList(xml, tagName) {
	    var nodes = [];
	    if (xml) {
	        var list = xml.childNodes;
	        if (list) {
	            for (var i = 0, cnt = list.length; i < cnt; i++) {
	                var node = list[i];
	                if (node.tagName === tagName) {
	                    nodes.push(node);
	                }
	            }
	        }
	    }
	    return nodes;
	}
	var DataPath = /** @class */ (function (_super) {
	    __extends(DataPath, _super);
	    function DataPath() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    DataPath.extractJson = function (source, path) {
	        var data = source;
	        path = path && path.trim();
	        if (path) {
	            var segs = path.split(".");
	            for (var k = 0; k < segs.length; k++) {
	                var seg = segs[k] && segs[k].trim();
	                if (seg) {
	                    var i = seg.indexOf("[");
	                    var j = seg.lastIndexOf("]");
	                    if (i > 0 && j > i) {
	                        var s = seg.substring(0, i);
	                        var arr = (s != "$") ? data[s] : data;
	                        if (Array.isArray(arr)) {
	                            s = seg.substring(i + 1, j);
	                            var idx = parseInt(s);
	                            if (idx >= 0 && idx < arr.length) {
	                                data = arr[idx];
	                            }
	                            else {
	                                data = null;
	                            }
	                        }
	                        else {
	                            data = null;
	                        }
	                    }
	                    else if (seg != "$") {
	                        data = data[seg];
	                    }
	                    if (!data) {
	                        break;
	                    }
	                }
	            }
	        }
	        return Array.isArray(data) ? data : null;
	    };
	    /**
	     * row => root의 "row" elements
	     * row.row => root -> row[0] -> "row" elements 즉, row[0].row 와 같다.
	     * row[0].row => root -> row[0] -> "row"
	     */
	    DataPath.extractXml = function (root, path) {
	        var data = null;
	        path = path && path.trim();
	        if (path) {
	            var segs = path.split(".");
	            for (var k = 0; k < segs.length; k++) {
	                var seg = segs[k] && segs[k].trim();
	                if (seg) {
	                    var i = seg.indexOf("[");
	                    var j = seg.lastIndexOf("]");
	                    if (i > 0 && j > i) {
	                        var s = seg.substring(0, i);
	                        if (data) {
	                            data = _getXmlList(data[0], s);
	                        }
	                        else {
	                            data = _getXmlList(root, s);
	                        }
	                        if (data) {
	                            s = seg.substring(i + 1, j);
	                            var idx = parseInt(s);
	                            data = data[idx];
	                        }
	                    }
	                    else {
	                        if (data) {
	                            data = _getXmlList(data[0], seg);
	                        }
	                        else {
	                            data = _getXmlList(root, seg);
	                        }
	                    }
	                    if (!data) {
	                        break;
	                    }
	                }
	            }
	        }
	        return data;
	    };
	    return DataPath;
	}(Base_1.Base));
	exports.DataPath = DataPath;
	var DataFillMode;
	(function (DataFillMode) {
	    DataFillMode[DataFillMode["SET"] = 0] = "SET";
	    DataFillMode[DataFillMode["APPEND"] = 1] = "APPEND";
	    DataFillMode[DataFillMode["INSERT"] = 2] = "INSERT";
	    DataFillMode[DataFillMode["UPDATE"] = 3] = "UPDATE";
	})(DataFillMode = exports.DataFillMode || (exports.DataFillMode = {}));
	var DataFillOptions = /** @class */ (function (_super) {
	    __extends(DataFillOptions, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function DataFillOptions(source) {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        _this.fillMode = DataFillMode.SET;
	        _this.fillPos = 0;
	        _this.count = -1;
	        _this.rootArray = true;
	        _this.rows = "row";
	        _this.start = 0;
	        _this.delimiter = ",";
	        _this.quoted = false;
	        _this.parentId = 0;
	        _this.childrenField = null;
	        _this.treeField = null;
	        _this.iconField = null;
	        _this.needSorting = false;
	        _this.itemIndex = -1;
	        if (source) {
	            if (source.hasOwnProperty("append")) {
	                _this.fillMode = DataFillMode.APPEND;
	            }
	            if (source.hasOwnProperty("fillMode")) {
	                _this.fillMode = source.fillMode;
	            }
	            if (source.hasOwnProperty("fillPos")) {
	                _this.fillPos = source.fillPos;
	            }
	            if (source.hasOwnProperty("count")) {
	                _this.count = source.count;
	            }
	            if (source.hasOwnProperty("rootArray")) {
	                _this.rootArray = source.rootArray;
	            }
	            if (source.hasOwnProperty("rows")) {
	                _this.rows = source.rows;
	            }
	            if (source.hasOwnProperty("start")) {
	                _this.start = source.start;
	            }
	            if (source.hasOwnProperty("delimiter")) {
	                _this.delimiter = source.delimiter;
	            }
	            if (source.hasOwnProperty("quoted")) {
	                _this.quoted = source.quoted;
	            }
	            if (source.hasOwnProperty("itemIndex")) {
	                _this.itemIndex = source.itemIndex;
	            }
	            for (var p in source) {
	                if (source[p] !== undefined) {
	                    _this[p] = source[p];
	                }
	            }
	            _this.parentId = source.parentId || source.parent;
	            _this.childrenField = source.childrenField || source.children;
	            _this.treeField = source.treeField || source.tree;
	            _this.iconField = source.iconField || source.icon;
	            _this.needSorting = source.needSorting || source.sorting;
	        }
	        return _this;
	    }
	    return DataFillOptions;
	}(Base_1.Base));
	exports.DataFillOptions = DataFillOptions;
	});

	unwrapExports(DataLoader);
	var DataLoader_1 = DataLoader.DataPath;
	var DataLoader_2 = DataLoader.DataFillMode;
	var DataLoader_3 = DataLoader.DataFillOptions;

	var XmlUtils_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// XmlUtil.ts 
	// 2019. 07. 25. created by jun
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });
	// import { DOMParser as SDomParser, XMLSerializer as SXmlSerializer } from 'xmldom';
	var XmlUtils = /** @class */ (function () {
	    function XmlUtils() {
	    }
	    //-------------------------------------------------------------------------
	    // static members
	    //-------------------------------------------------------------------------
	    XmlUtils.parse = function (source) {
	        var parser = new window.DOMParser();
	        var doc = parser.parseFromString(source, "text/xml");
	        return doc;
	    };
	    XmlUtils.toString = function (doc) {
	        return new window.XMLSerializer().serializeToString(doc);
	    };
	    XmlUtils.getNodeValue = function (node) {
	        return node.firstChild.nodeValue;
	    };
	    XmlUtils.getAttr = function (node, attr) {
	        return node.getAttribute(attr);
	    };
	    XmlUtils.setAttr = function (xml, attr, value) {
	        xml.setAttribute(attr, value);
	    };
	    XmlUtils.addChild = function (doc, parent, child) {
	        var node = doc.createElement(child);
	        parent.appendChild(node);
	        return node;
	    };
	    XmlUtils.addChildWithAttr = function (doc, parent, child, attr, value) {
	        var node = doc.createElement(child);
	        node.setAttribute(attr, value);
	        parent.appendChild(node);
	        return node;
	    };
	    XmlUtils.parseXml = function (source) {
	        var doc = null;
	        try {
	            doc = new ActiveXObject("Microsoft.XMLDOM");
	            doc.async = false;
	            doc.loadXML(source);
	        }
	        catch (e) {
	            if (doc)
	                throw e;
	            doc = new window.DOMParser().parseFromString(source, "text/xml");
	        }
	        return doc;
	    };
	    return XmlUtils;
	}());
	exports.XmlUtils = XmlUtils;
	});

	unwrapExports(XmlUtils_1);
	var XmlUtils_2 = XmlUtils_1.XmlUtils;

	var TreeDataSource_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeDataSource.ts
	// 2019. 09. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });





	var TreeDataSource = /** @class */ (function (_super) {
	    __extends(TreeDataSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeDataSource(provider, rootRow) {
	        var _this = _super.call(this) || this;
	        _this._rowCount = 0;
	        _this._ds = provider;
	        _this._rootRow = rootRow;
	        return _this;
	    }
	    TreeDataSource.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeDataSource.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** provider */
	        get: function () {
	            return this._ds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataSource.prototype, "rootRow", {
	        /** rootRow */
	        get: function () {
	            return this._rootRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataSource.prototype, "insertedRows", {
	        /** insertedRows */
	        get: function () {
	            return this._rows;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataSource.prototype, "insertedCount", {
	        /** insertedCount */
	        get: function () {
	            return this._rowCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // overriden members
	    //-------------------------------------------------------------------------
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeDataSource.prototype._prepareLoad = function (parent) {
	        this._rowCount = 0;
	        this._rows = [];
	    };
	    TreeDataSource.prototype._objectToArray = function (row, ds) {
	        var flds = ds.fieldCount;
	        var vals = new Array(flds);
	        for (var c = 0; c < flds; c++) {
	            var fld = ds.getOrgFieldName(c);
	            if (row.hasOwnProperty(fld)) {
	                vals[c] = row[fld];
	            }
	        }
	        ds["_internalCalculateValues"](vals, -1);
	        return vals;
	    };
	    TreeDataSource.prototype._createRow = function (childrenField, iconField, values) {
	        var row = new TreeDataProvider_1.TreeDataRowImpl(this._ds, values);
	        this._ds["_internalCalculateValues"](row["_values"], row.rowId);
	        if (childrenField >= 0) {
	            this._ds["setHasChildren"](row, values[childrenField]);
	        }
	        if (iconField >= 0) {
	            this._ds["setIconIndex"](row, values[iconField]);
	        }
	        return row;
	    };
	    TreeDataSource.prototype._createRow2 = function (hasChildren, iconIndex, values) {
	        var row = new TreeDataProvider_1.TreeDataRowImpl(this._ds, values);
	        this._ds["_internalCalculateValues"](row["_values"], row.rowId);
	        if (hasChildren !== undefined) {
	            this._ds["setHasChildren"](row, hasChildren);
	        }
	        if (iconIndex !== undefined) {
	            this._ds["setIconIndex"](row, iconIndex);
	        }
	        return row;
	    };
	    TreeDataSource.prototype._rowAdded = function (root, row) {
	        this._rowCount++;
	        if (this._rows && row.parent === root) {
	            this._rows.push(row);
	        }
	    };
	    TreeDataSource.prototype._addRow = function (root, parent, childrenField, iconField, values) {
	        var row = this._createRow(childrenField, iconField, values);
	        parent["_insertChild"](parent.count, row, true, true);
	        this._rowAdded(root, row);
	        return row;
	    };
	    TreeDataSource.prototype._addRow2 = function (root, parent, hasChildren, iconIndex, values) {
	        var row = this._createRow2(hasChildren, iconIndex, values);
	        parent["_insertChild"](parent.count, row, true, true);
	        this._rowAdded(root, row);
	        return row;
	    };
	    return TreeDataSource;
	}(Base_1.Base));
	exports.TreeDataSource = TreeDataSource;
	var ArraySourceImpl = /** @class */ (function (_super) {
	    __extends(ArraySourceImpl, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ArraySourceImpl(ds, rootRow) {
	        return _super.call(this, ds, rootRow) || this;
	    }
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    ArraySourceImpl.prototype._loadData = function (source, parent, treeField, needSorting, childrenField, iconField) {
	        this._prepareLoad(parent);
	        if (!source || source.length < 1) {
	            return this._rowCount;
	        }
	        var ds = this.provider;
	        var cnt = source.length;
	        var rows = [];
	        for (var i = 0; i < cnt; i++) {
	            rows[i] = i;
	            if (!Array.isArray(source[i])) {
	                source[i] = this._objectToArray(source[i], ds);
	                //} else {
	                //	provider.$_internalCalculateValues(source[i]);
	            }
	        }
	        if (needSorting) {
	            this.$_sortRows(rows, source, treeField, 0, cnt - 1);
	        }
	        ds.beginUpdate();
	        try {
	            this.$_buildTree(parent ? parent : this.rootRow, rows, source, treeField, childrenField, iconField);
	        }
	        finally {
	            ds.endUpdate(false);
	        }
	        return this.insertedCount;
	    };
	    ArraySourceImpl.prototype.$_sortRows = function (rows, values, field, left, right) {
	        function compare(r1, r2) {
	            var s1 = values[r1][field];
	            var s2 = values[r2][field];
	            if (s1 == s2) {
	                return 0;
	            }
	            if (s1 < s2) {
	                return -1;
	            }
	            return 1;
	        }
	        do {
	            var r = void 0;
	            var v = void 0;
	            var i = left;
	            var j = right;
	            var m = rows[Math.floor((left + right) / 2)];
	            do {
	                while (true) {
	                    r = rows[i];
	                    v = compare(m, r);
	                    if (v <= 0)
	                        break;
	                    i++;
	                }
	                while (true) {
	                    r = rows[j];
	                    v = compare(m, r);
	                    if (v >= 0)
	                        break;
	                    j--;
	                }
	                if (i <= j) {
	                    if (i != j) {
	                        var t = rows[i];
	                        rows[i] = rows[j];
	                        rows[j] = t;
	                    }
	                    i++;
	                    j--;
	                }
	            } while (i <= j);
	            if (left < j) {
	                this.$_sortRows(rows, values, field, left, j);
	            }
	            left = i;
	        } while (left < right);
	    };
	    ArraySourceImpl.prototype.$_buildTree = function (parent, rows, values, treeField, childrenField, iconField) {
	        function getParent(self, prev, row, values) {
	            var tree = values[treeField];
	            while (prev != parent) {
	                var s = prev.getValue(treeField);
	                if (self.parentCallback) {
	                    if (self.parentCallback(s, tree)) {
	                        return prev;
	                    }
	                }
	                else if (tree.indexOf(s) == 0) {
	                    return prev;
	                }
	                prev = prev.parent;
	            }
	            return parent;
	        }
	        var r = rows[0];
	        var row = this._createRow(childrenField, iconField, values[r]);
	        var p = getParent(this, parent, row, values[r]);
	        p["_insertChild"](p.count, row, true, true);
	        this._rowAdded(parent, row);
	        if (rows.length > 1) {
	            var cnt = rows.length;
	            var prev = row;
	            for (var i = 1; i < cnt; i++) {
	                r = rows[i];
	                row = this._createRow(childrenField, iconField, values[r]);
	                p = getParent(this, prev, row, values[r]);
	                p["_insertChild"](p.count, row, true, true);
	                this._rowAdded(parent, row);
	                prev = row;
	            }
	        }
	    };
	    return ArraySourceImpl;
	}(TreeDataSource));
	var ArrayTreeSource = /** @class */ (function (_super) {
	    __extends(ArrayTreeSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function ArrayTreeSource(ds, rootRow) {
	        return _super.call(this, ds, rootRow) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    ArrayTreeSource.prototype.load = function (parent, source, treeField, needSorting, childrenField, iconField) {
	        return this._loadData(source, parent, treeField, needSorting, childrenField, iconField);
	    };
	    return ArrayTreeSource;
	}(ArraySourceImpl));
	exports.ArrayTreeSource = ArrayTreeSource;
	var CsvTreeSource = /** @class */ (function (_super) {
	    __extends(CsvTreeSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function CsvTreeSource(ds, rootRow) {
	        return _super.call(this, ds, rootRow) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    CsvTreeSource.prototype.load = function (parent, source, treeField, needSorting, childrenField, iconField) {
	        var rows = DataHelper_1.DataHelper.csvToArray(this.provider, source);
	        return this._loadData(rows, parent, treeField, needSorting, childrenField, iconField);
	    };
	    return CsvTreeSource;
	}(ArraySourceImpl));
	exports.CsvTreeSource = CsvTreeSource;
	var JsonTreeSource = /** @class */ (function (_super) {
	    __extends(JsonTreeSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function JsonTreeSource(ds, rootRow) {
	        return _super.call(this, ds, rootRow) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    JsonTreeSource.prototype.load = function (parent, source, rowsProp, childrenField, iconField) {
	        this._prepareLoad(parent);
	        if (source) {
	            var rows = DataLoader.DataPath.extractJson(source, rowsProp);
	            if (rows && rows.length > 0) {
	                this.provider.beginUpdate();
	                try {
	                    this.$_buildJsonTree(this.provider, parent ? parent : this.rootRow, rows, rowsProp, childrenField, iconField);
	                }
	                finally {
	                    this.provider.endUpdate(false);
	                }
	            }
	        }
	        return this._rowCount;
	    };
	    JsonTreeSource.prototype.load2 = function (parent, source, rowsProp, childRowsProp, childrenProp, iconProp) {
	        this._prepareLoad(parent);
	        if (source) {
	            var rows = DataLoader.DataPath.extractJson(source, rowsProp);
	            if (rows && rows.length > 0) {
	                this.provider.beginUpdate();
	                try {
	                    this.$_buildJsonTree2(this.provider, parent ? parent : this.rootRow, rows, childRowsProp, childrenProp, iconProp);
	                }
	                finally {
	                    this.provider.endUpdate(false);
	                }
	            }
	        }
	        return this._rowCount;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    JsonTreeSource.prototype.$_buildJsonTree = function (ds, parent, source, rowsProp, childrenField, iconField) {
	        function build(self, p, rows, fldNames) {
	            var flds = fldNames.length;
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var obj = rows[i];
	                var vals = new Array(flds);
	                for (var c = 0; c < flds; c++) {
	                    var fld = fldNames[c];
	                    if (obj.hasOwnProperty(fld)) {
	                        vals[c] = obj[fld];
	                    }
	                }
	                var row = self["_addRow"](parent, p, childrenField, iconField, vals);
	                if (obj.hasOwnProperty(rowsProp)) {
	                    var arr = obj[rowsProp];
	                    if (Array.isArray(arr) && arr.length > 0) {
	                        build(self, row, arr, fldNames);
	                    }
	                }
	            }
	        }
	        var fldNames = ds.getOrgFieldNames();
	        build(this, parent, source, fldNames);
	    };
	    JsonTreeSource.prototype.$_buildJsonTree2 = function (ds, parent, source, rowsProp, childrenProp, iconProp) {
	        function build(self, p, rows, fldNames) {
	            var flds = fldNames.length;
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var obj = rows[i];
	                var vals = new Array(flds);
	                for (var c = 0; c < flds; c++) {
	                    var fld = fldNames[c];
	                    if (obj.hasOwnProperty(fld)) {
	                        vals[c] = obj[fld];
	                    }
	                }
	                var row = self["_addRow2"](parent, p, obj[childrenProp], obj[iconProp], vals);
	                if (obj.hasOwnProperty(rowsProp)) {
	                    var arr = obj[rowsProp];
	                    if (Array.isArray(arr) && arr.length > 0) {
	                        build(self, row, arr, fldNames);
	                    }
	                }
	            }
	        }
	        var fldNames = ds.getOrgFieldNames();
	        build(this, parent, source, fldNames);
	    };
	    return JsonTreeSource;
	}(TreeDataSource));
	exports.JsonTreeSource = JsonTreeSource;
	var XmlTreeSource = /** @class */ (function (_super) {
	    __extends(XmlTreeSource, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function XmlTreeSource(ds, rootRow) {
	        return _super.call(this, ds, rootRow) || this;
	    }
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    XmlTreeSource.prototype.load = function (parent, source, rowsProp, childrenField, iconField) {
	        this._prepareLoad(parent);
	        if (source) {
	            var xml = typeof source === "string" ? XmlUtils_1.XmlUtils.parseXml(source) : source;
	            if (xml) {
	                var rows = DataLoader.DataPath.extractXml(xml.documentElement, rowsProp);
	                if (rows && rows.length > 0) {
	                    this.provider.beginUpdate();
	                    try {
	                        this.$_buildXmlTree(this.provider, parent ? parent : this.rootRow, rows, rowsProp, childrenField, iconField);
	                    }
	                    finally {
	                        this.provider.endUpdate(false);
	                    }
	                }
	            }
	        }
	        return this._rowCount;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    XmlTreeSource.prototype.$_buildXmlTree = function (ds, parent, source, rowElement, childrenField, iconField) {
	        function build(self, p, rows, fields, fieldNames) {
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                var xml = rows[i];
	                var vals = DataHelper_1.DataHelper.xmlToRow(xml, fields, fieldNames);
	                var row = self["_addRow"](parent, p, childrenField, iconField, vals);
	                var elts = DataLoader.DataPath.extractXml(xml, rowElement);
	                if (elts && elts.length > 0) {
	                    build(self, row, elts, fields, fieldNames);
	                }
	            }
	        }
	        build(this, parent, source, ds.getFields(), ds.getOrgFieldNames());
	    };
	    return XmlTreeSource;
	}(ArraySourceImpl));
	exports.XmlTreeSource = XmlTreeSource;
	});

	unwrapExports(TreeDataSource_1);
	var TreeDataSource_2 = TreeDataSource_1.TreeDataSource;
	var TreeDataSource_3 = TreeDataSource_1.ArrayTreeSource;
	var TreeDataSource_4 = TreeDataSource_1.CsvTreeSource;
	var TreeDataSource_5 = TreeDataSource_1.JsonTreeSource;
	var TreeDataSource_6 = TreeDataSource_1.XmlTreeSource;

	var TreeDataProvider_1 = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// TreeDataProvider.ts
	// 2019. 09. 17. created by gslim
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });










	var TreeDataRow = /** @class */ (function (_super) {
	    __extends(TreeDataRow, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeDataRow(ds) {
	        var _this = _super.call(this) || this;
	        _this._children = null;
	        _this._descendantCount = 0;
	        _this._rowId = ds && ds["_nextRowId"]++;
	        return _this;
	    }
	    TreeDataRow.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeDataRow.prototype, "rowId", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        /** rowId */
	        get: function () {
	            return this._rowId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "provider", {
	        /** provider */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "parent", {
	        /** parent */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "index", {
	        /** index */
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "level", {
	        /** level */
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "iconIndex", {
	        /** iconIndex */
	        get: function () {
	            return -1;
	        },
	        set: function (value) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "hasChildren", {
	        /** hasChildren */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "count", {
	        /** count */
	        get: function () {
	            return this._children ? this._children.length : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "descendantCount", {
	        /** descendantCount */
	        get: function () {
	            return this._descendantCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "children", {
	        /** children */
	        get: function () {
	            return this._children ? this._children.concat() : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "descendants", {
	        /** descendants */
	        get: function () {
	            function collectRows(p, rows) {
	                for (var i = 0, cnt = p.count; i < cnt; i++) {
	                    var row = p.getChild(i);
	                    rows.push(row);
	                    collectRows(row, rows);
	                }
	            }
	            if (this._children) {
	                var rows = [];
	                collectRows(this, rows);
	                return rows;
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "ancestors", {
	        /** ancestors */
	        get: function () {
	            var rows = null;
	            var p = this.parent;
	            if (p) {
	                rows = [];
	                while (p && p.rowId >= 0) {
	                    rows.push(p);
	                    p = p.parent;
	                }
	            }
	            return rows;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "rowState", {
	        /** rowState */
	        get: function () {
	            return RowState_1.RowState.NONE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRow.prototype, "values", {
	        /** values */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    TreeDataRow.prototype.getChild = function (index) {
	        if (index >= 0) {
	            if (!this._children || index >= this._children.length) {
	                throw new RangeError("Index is invalid: " + index);
	            }
	            return this._children[index];
	        }
	        throw new RangeError("Index is invalid: " + index);
	    };
	    TreeDataRow.prototype.getChildObjects = function (recursive, childrenProp, iconProp, addRowId) {
	        var children = this._children;
	        if (children) {
	            var objects = [];
	            childrenProp = childrenProp || "rows";
	            iconProp = iconProp || "iconIndex";
	            for (var i = 0, cnt = children.length; i < cnt; i++) {
	                var child = children[i];
	                var obj = child.getObject();
	                if (addRowId) {
	                    obj["_rowId"] = child._rowId;
	                }
	                if (recursive) {
	                    obj[childrenProp] = child.getChildObjects(recursive, childrenProp, iconProp, addRowId);
	                }
	                obj[iconProp] = child.iconIndex;
	                objects.push(obj);
	            }
	            return objects;
	        }
	        return null;
	    };
	    TreeDataRow.prototype.$_createTreeOutputRows = function (rows, options, childrenProp) {
	        // function rowsToDataRows(rows, dataRows, childrenProp) {
	        //   for (var i=0, cnt=rows.length; i < cnt; i++) {
	        //   	var row = rows[i];
	        //     dataRows.push(rows[i]);
	        //     if (childrenProp && row[childrenProp] && row[childrenProp].length) {
	        //       rowsToDataRows(row[childrenProp], dataRows, childrenProp)
	        //     }
	        //   }
	        // }
	        // var dataRows = [];
	        // rowsToDataRows(rows,dataRows,childrenProp);
	        // var provider = this.provider();
	        // var fldCount = provider.fieldCount();
	        // var rowCount = dataRows.length;
	        // var r, row;
	        // if (!(options instanceof DataOutputOptions)) {
	        //     options = new DataOutputOptions(options);
	        // }
	        // var nullDate = options.nullDateText();
	        // var nullText = options.nullText();
	        // var nanText = options.nanText();
	        // for (var i = 0; i < fldCount; i++) {
	        //     var field = provider.getField(i);
	        //     var prop = field.orgFieldName();
	        //     var callback, writer;
	        //     if (field._dataType == ValueType.DATETIME && ((callback = options._datetimeCallback) || (writer = options._datetimeWriter) || (nullDate != null && nullDate != undefined) )) {
	        //         if (callback) {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 row[prop] = callback(row["_rowId"], prop, row[prop]);
	        //             }
	        //         } else {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 var d = row[prop];
	        //                 row[prop] = d ? writer ? writer.getText(row[prop]) : d : nullDate;
	        //             }
	        //         }
	        //     } else if (field._dataType == ValueType.BOOLEAN && ((callback = options._booleanCallback) || (writer = options._booleanFormatter))) {
	        //         if (callback) {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 row[prop] = callback(row["_rowId"], prop, row[prop]);
	        //             }
	        //         } else {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 row[prop] = writer.formatValue(row[prop]);
	        //             }
	        //         }
	        //     } else if (field._dataType == ValueType.NUMBER && ((callback = options._numberCallback) || (writer = options._numberFormatter) || (nanText != null && nanText != undefined))) {
	        //         if (callback) {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 row[prop] = callback(row["_rowId"], prop, row[prop]);
	        //             }
	        //         } else {
	        //             for (r = 0; r < rowCount; r++) {
	        //                 row = dataRows[r];
	        //                 var v = row[prop];
	        //                 row[prop] = v == null || isNaN(v) ? nanText : writer ? writer.format(v) : v;
	        //             }
	        //         }
	        //     } else if (nullText != null && nullText != undefined) {
	        //         for (r = 0; r < rowCount; r++) {
	        //             row = dataRows[r];
	        //             var v = row[prop];
	        //             row[prop] = v == null || v == undefined ? nullText : v;
	        //         }
	        //     }
	        // }
	        // for (var i =0, cnt=dataRows.length; i<cnt; i++) {
	        // 	delete dataRows[i]["_rowId"];
	        // }
	    };
	    TreeDataRow.prototype.getOutput = function (options, iconProp) {
	        // if (options) {
	        // 	var row = this.getObject();
	        // 	row[iconProp || "iconIndex"] = this.iconIndex();
	        // 	row["_rowId"] = this._rowId;
	        // 	this.$_createTreeOutputRows([row], options);
	        // 	return row;
	        // }
	        return null;
	    };
	    TreeDataRow.prototype.getChildOutputObjects = function (options, recursive, childrenProp, iconProp) {
	        var rows = this.getChildObjects(recursive, childrenProp, iconProp, true);
	        rows && options && this.$_createTreeOutputRows(rows, options, childrenProp);
	        return rows;
	    };
	    TreeDataRow.prototype.findById = function (rowId) {
	        if (this._children) {
	            for (var i = 0, cnt = this._children.length; i < cnt; i++) {
	                var child = this._children[i];
	                if (child.rowId == rowId) {
	                    return child;
	                }
	                child = child.findById(rowId);
	                if (child) {
	                    return child;
	                }
	            }
	        }
	        return null;
	    };
	    TreeDataRow.prototype.indexOf = function (child) {
	        return this._children ? this._children.indexOf(child) : -1;
	    };
	    TreeDataRow.prototype.insertChild = function (index, child, noState) {
	        return this._insertChild(index, child, false, noState);
	    };
	    TreeDataRow.prototype.addChild = function (child, noState) {
	        return this._insertChild(this.count, child, false, noState);
	    };
	    TreeDataRow.prototype.removeChild = function (child) {
	        return this._removeChild(child, false);
	    };
	    TreeDataRow.prototype.clearChildren = function () {
	        var ds = this.provider;
	        if (ds && !ds["_checkClientState"]())
	            return;
	        this._removeChildren();
	    };
	    TreeDataRow.prototype.findChild = function (fields, values) {
	        var ds = this.provider;
	        if (!ds || !fields || fields.length < 1 || !values || values.length < fields.length) {
	            return null;
	        }
	        var flds = [];
	        var vals = [];
	        for (var i = 0, cnt = fields.length; i < cnt; i++) {
	            var c = void 0;
	            if (typeof fields[i] === "string") {
	                c = ds.getFieldIndex(fields[i]);
	            }
	            else {
	                c = Number(fields[i]);
	            }
	            if (c >= 0 && c < ds.fieldCount && flds.indexOf(c) < 0) {
	                flds.push(c);
	                vals.push(values[i]);
	            }
	        }
	        for (var i = 0, len = flds.length; i < len; i++) {
	            flds[i] = ds.getField(flds[i]);
	        }
	        return this.$_findChild(flds, vals);
	    };
	    TreeDataRow.prototype.isAncestorOf = function (row) {
	        if (row && row !== this) {
	            var p = row.parent;
	            while (p && p !== this) {
	                p = p.parent;
	            }
	            return p === this;
	        }
	        return false;
	    };
	    TreeDataRow.prototype.clearRowStates = function (deleteRows, rowEvents) {
	        var ds = this.provider;
	        if (!ds) {
	            return;
	        }
	        var rows = [];
	        var deletes = deleteRows ? [] : null;
	        this._collectStateRows(rows, deletes);
	        var nState = rows.length;
	        var nDelete = deletes ? deletes.length : 0;
	        if (nState == 0 && nDelete == 0) {
	            return;
	        }
	        if (rowEvents) {
	            for (var i = 0, cnt = rows.length; i < cnt; i++) {
	                rows[i]._changeRowState(RowState_1.RowState.NONE, true, false);
	            }
	        }
	        else if (nState) {
	            ds.changeRowStates(rows, RowState_1.RowState.NONE);
	        }
	        if (nDelete) {
	            //   	if (rowEvents) {
	            //   		for (var i in deletes) {
	            // 		provider.deleteRow(deletes[i]);
	            // 	}
	            // } else {
	            ds.deleteRows(deletes);
	            // }
	        }
	    };
	    TreeDataRow.prototype.toTreeString = function () {
	        var s = this.rowId + "";
	        var indent = new Array(this.level + 1).join("  ");
	        for (var i = 0; i < this.count; i++) {
	            s += "\n" + indent + this.getChild(i).toTreeString();
	        }
	        return s;
	    };
	    TreeDataRow.prototype._checkFieldIndex = function (field) {
	        var flds = this.provider.fieldCount;
	        if (field < 0 || field >= flds) {
	            throw new DataSource_1.DataSourceError("Field index is out of bounds: " + field);
	        }
	    };
	    TreeDataRow.prototype._descendantCountChanged = function (count) {
	        this._descendantCount += count;
	        var p = this.parent;
	        if (p) {
	            p._descendantCountChanged(count);
	        }
	    };
	    TreeDataRow.prototype._moveChild = function (index, newIndex) {
	        if (index < 0 || index >= this._children.length) {
	            throw new RangeError("index is out of range: " + index);
	        }
	        if (newIndex < 0 || newIndex >= this._children.length) {
	            throw new RangeError("newIndex is out of range: " + newIndex);
	        }
	        var child = this._children[index];
	        if (index > newIndex) {
	            for (var i = index; i > newIndex; i--) {
	                this._children[i] = this._children[i - 1];
	            }
	        }
	        else {
	            for (var i = index; i < newIndex; i++) {
	                this._children[i] = this._children[i + 1];
	            }
	        }
	        this._children[newIndex] = child;
	    };
	    TreeDataRow.prototype._changeParent = function (parent, index) {
	        if (index < 0 || index > parent._children.length) {
	            throw new RangeError("index is out of range: " + index);
	        }
	        var old = this.parent;
	        var oldIndex = this.index;
	        old._children.splice(oldIndex, 1);
	        old._descendantCountChanged(-1 - this.descendantCount);
	        old._detach(this);
	        parent._children.splice(index, 0, this);
	        parent._descendantCountChanged(1 + this.descendantCount);
	        parent._attach(this);
	    };
	    TreeDataRow.prototype._insertChild = function (index, child, force, noState) {
	        var ds = this.provider;
	        if (ds && !force) {
	            if (!ds["_checkClientState"]()) {
	                return false;
	            }
	            ds.refreshFieldFormats();
	        }
	        if (!child) {
	            throw new Error("child is null");
	        }
	        this._children = this._children || [];
	        if (index < 0 || index > this._children.length) {
	            throw new RangeError("Insert index is invalid: " + index);
	        }
	        if (force || this._doChildAdding(index, child)) {
	            this._children.splice(index, 0, child);
	            this._descendantCountChanged(1 + child.descendantCount);
	            this._attach(child);
	            if (!noState) {
	                child._changeRowState(RowState_1.RowState.CREATED, true, false);
	            }
	            this._doChildAdded(index, child);
	            return true;
	        }
	        return false;
	    };
	    TreeDataRow.prototype._addChild = function (child, force, noState) {
	        return this._insertChild(this.count, child, force, noState);
	    };
	    TreeDataRow.prototype.$_removeChild = function (child, index, force) {
	        if (force || this._doChildRemoving(child)) {
	            this._children.splice(index, 1);
	            this._descendantCountChanged(-1 - child.descendantCount);
	            this._detach(child);
	            this._doChildRemoved(child);
	            return true;
	        }
	        return false;
	    };
	    TreeDataRow.prototype._removeChild = function (child, force) {
	        var ds = this.provider;
	        if (ds && !force) {
	            if (!ds["_checkClientState"]())
	                return;
	        }
	        if (child && this._children) {
	            for (var i = this._children.length; i--;) {
	                if (this._children[i] === child) {
	                    if (ds.softDeleting && ds.checkStates) {
	                        switch (child.rowState) {
	                            case RowState_1.RowState.CREATED:
	                                if (ds.deleteCreated) {
	                                    return this.$_removeChild(child, i, force);
	                                }
	                                else {
	                                    child._changeRowState(RowState_1.RowState.CREATE_AND_DELETED, true, false);
	                                }
	                                break;
	                            case RowState_1.RowState.DELETED:
	                            case RowState_1.RowState.CREATE_AND_DELETED:
	                                break;
	                            default:
	                                child._changeRowState(RowState_1.RowState.DELETED, true, false);
	                        }
	                    }
	                    else {
	                        return this.$_removeChild(child, i, force);
	                    }
	                }
	            }
	        }
	        return false;
	    };
	    TreeDataRow.prototype._removeChildren = function () {
	        if (this._children && this._children.length > 0) {
	            this._children.splice(0, this._children.length);
	            this._descendantCountChanged(-this._descendantCount);
	            this._doCleared();
	        }
	    };
	    TreeDataRow.prototype._setChildren = function (children) {
	        if (this._children && this._children.length > 0) {
	            this._children.splice(0, this._children.length);
	        }
	        var dcount = -this._descendantCount;
	        var cnt;
	        if (children && (cnt = children.length) > 0) {
	            if (!this._children) {
	                this._children = [];
	            }
	            for (var i = 0; i < cnt; i++) {
	                var child = children[i];
	                this._children.push(child);
	                dcount += 1 + child.descendantCount;
	                this._attach(child);
	            }
	        }
	        this._descendantCountChanged(dcount);
	    };
	    TreeDataRow.prototype.$_findChild = function (flds, vals) {
	        var len = flds.length;
	        var cnt = this.count;
	        for (var i = 0; i < cnt; i++) {
	            var child = this._children[i];
	            var found = true;
	            for (var c = 0; c < len; c++) {
	                if (!flds[c].equalValues(vals[c], child.getValue(flds[c].index))) {
	                    found = false;
	                    break;
	                }
	            }
	            if (found) {
	                return child;
	            }
	            child = child.$_findChild(flds, vals);
	            if (child) {
	                return child;
	            }
	        }
	        return null;
	    };
	    TreeDataRow.prototype._collectStateRows = function (rows, deletes) {
	        for (var i = this.count; i--;) {
	            var row = this.getChild(i);
	            var state = row.rowState;
	            if (deletes && (state == RowState_1.RowState.DELETED || state == RowState_1.RowState.CREATE_AND_DELETED)) {
	                deletes.push(row);
	            }
	            else {
	                if (state != RowState_1.RowState.NONE) {
	                    rows.push(row);
	                }
	                row._collectStateRows(rows, deletes);
	            }
	        }
	    };
	    TreeDataRow.prototype._clearOrgValues = function () {
	        for (var i = this.count; i--;) {
	            this.getChild(i)._clearOrgValues();
	        }
	    };
	    TreeDataRow.prototype._restoreState = function (recursive, restoredRows) {
	        if (recursive) {
	            for (var i = this.count; i--;) {
	                this.getChild(i)._restoreState(true, restoredRows);
	            }
	        }
	        return false;
	    };
	    TreeDataRow.prototype._restoreRow = function (recursive, restoredRows) {
	        if (recursive) {
	            for (var i = this.count; i--;) {
	                this.getChild(i)._restoreRow(true, restoredRows);
	            }
	        }
	        return false;
	    };
	    TreeDataRow.prototype._doChildAdding = function (index, child) {
	        var ds = this.provider;
	        return ds ? ds["_rowAdding"](this, index, child) : true;
	    };
	    TreeDataRow.prototype._doChildAdded = function (index, child) {
	        var ds = this.provider;
	        ds && ds["_rowAdded"](child);
	    };
	    TreeDataRow.prototype._doChildRemoving = function (child) {
	        var ds = this.provider;
	        return ds ? ds["_rowRemoving"](child) : true;
	    };
	    TreeDataRow.prototype._doChildRemoved = function (child) {
	        var ds = this.provider;
	        ds && ds["_rowRemoved"](child);
	    };
	    TreeDataRow.prototype._doCleared = function () {
	        var ds = this.provider;
	        ds && ds["_rowCleared"](this);
	    };
	    return TreeDataRow;
	}(Base_1.Base));
	exports.TreeDataRow = TreeDataRow;
	var TreeDataRowImpl = /** @class */ (function (_super) {
	    __extends(TreeDataRowImpl, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeDataRowImpl(ds, values) {
	        var _this = _super.call(this, ds) || this;
	        //-------------------------------------------------------------------------
	        // property fields
	        //-------------------------------------------------------------------------
	        _this._iconIndex = -1;
	        _this._hasChildren = false;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._parent = null;
	        _this._values = null;
	        _this._orgValues = null;
	        _this._state = RowState_1.RowState.NONE;
	        _this._extents = 0;
	        if (ds && values) {
	            var flds = ds.fieldCount;
	            var cnt = Math.min(values.length, flds);
	            _this._values = new Array(flds);
	            for (var i = 0, cnt_1 = Math.min(values.length, flds); i < cnt_1; i++) {
	                _this._values[i] = ds.getField(i).readValue(values[i]);
	            }
	        }
	        return _this;
	    }
	    TreeDataRowImpl.prototype.dispose = function () {
	        this._values = null;
	        this._orgValues = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(TreeDataRowImpl.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // methods
	        //-------------------------------------------------------------------------
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._parent && this._parent.provider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "parent", {
	        get: function () {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "index", {
	        get: function () {
	            return this._parent ? this._parent.indexOf(this) : -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "level", {
	        get: function () {
	            return this._parent ? this._parent.level + 1 : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "hasChildren", {
	        get: function () {
	            return this._hasChildren;
	        },
	        set: function (value) {
	            if (value != this._hasChildren) {
	                this._hasChildren = value;
	                var ds = this.provider;
	                ds && ds["_hasChildrenChanged"](this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "iconIndex", {
	        get: function () {
	            return this._iconIndex;
	        },
	        set: function (value) {
	            if (isNaN(value)) {
	                value = -1;
	            }
	            if (value != this._iconIndex) {
	                this._iconIndex = value;
	                var ds = this.provider;
	                ds && ds["_iconIndexChanged"](this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "rowState", {
	        get: function () {
	            return this._state;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeDataRowImpl.prototype, "values", {
	        /** values */
	        get: function () {
	            return this._values && this._values.concat();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeDataRowImpl.prototype._attach = function (child) {
	        child._parent = this;
	    };
	    TreeDataRowImpl.prototype._detach = function (child) {
	        if (child._parent === this) {
	            child._parent = null;
	        }
	    };
	    TreeDataRowImpl.prototype._changeRowState = function (newState, fireEvent, refresh) {
	        var ds = this.provider;
	        if (ds && newState != this._state) {
	            var oldState = this._state;
	            this._state = newState;
	            if (newState == RowState_1.RowState.UPDATED && ds["_needOrgValues"]) {
	                this._orgValues = this._values.concat();
	            }
	            else if (oldState == RowState_1.RowState.UPDATED) {
	                if (this._orgValues) {
	                    this._orgValues = null;
	                }
	            }
	            if (fireEvent) {
	                ds["_stateChanged"](this, refresh);
	            }
	            return true;
	        }
	        return false;
	    };
	    TreeDataRowImpl.prototype.getValue = function (field) {
	        var ds = this.provider;
	        if (ds) {
	            this._checkFieldIndex(field);
	            if (this._values) {
	                return this._values[field];
	            }
	            throw new Error("Row data is not loaded");
	        }
	        return undefined;
	    };
	    TreeDataRowImpl.prototype.setValue = function (field, value, noState) {
	        var ds = this.provider;
	        if (ds) {
	            if (!ds["_checkClientState"]())
	                return;
	            ds.refreshFieldFormats();
	            this._checkFieldIndex(field);
	            if (this._values) {
	                if (value != this._values[field]) {
	                    var oldVals = null;
	                    var needState = ds.checkStates && (this._state == RowState_1.RowState.NONE || !this._state);
	                    if (!noState && needState && ds["_needOrgValues"]) {
	                        oldVals = this._values.concat();
	                    }
	                    this._values[field] = value;
	                    ds["_internalCalculateValues"](this._values, this.rowId);
	                    if (!noState && needState) {
	                        if (ds["_needOrgValues"]) {
	                            this._orgValues = oldVals;
	                        }
	                        this._state = RowState_1.RowState.UPDATED;
	                        ds["_stateChanged"](this, false);
	                    }
	                    else if (ds["_needRestore"]) {
	                        this.$_restoreState(ds);
	                    }
	                    ds["_valueChanged"](this, field);
	                }
	                return;
	            }
	            throw new Error("Row data is not loaded");
	        }
	    };
	    TreeDataRowImpl.prototype.getObject = function () {
	        var ds = this.provider;
	        if (ds) {
	            var cnt = ds.fieldCount;
	            var row = {};
	            for (var i = 0; i < cnt; i++) {
	                var fld = ds.getOrgFieldName(i);
	                row[fld] = this._values[i];
	            }
	            return row;
	        }
	        return null;
	    };
	    TreeDataRowImpl.prototype.copy = function () {
	        var row = new TreeDataRowImpl(null, null);
	        row["_rowId"] = this["_rowId"];
	        row._iconIndex = this._iconIndex;
	        row._hasChildren = this._hasChildren;
	        row._state = this._state;
	        row._values = this._values ? this._values.concat() : null;
	        for (var i = 0, cnt = this.count; i < cnt; i++) {
	            var child = this.getChild(i).copy();
	            row._addChild(child, true, true);
	        }
	        return row;
	    };
	    TreeDataRowImpl.prototype.update = function (values) {
	        return this.$_update(values, false, false);
	    };
	    TreeDataRowImpl.prototype.updateStrict = function (values) {
	        return this.$_update(values, true, false);
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    TreeDataRowImpl.prototype._update = function (values, force) {
	        return this.$_update(values, false, force);
	    };
	    TreeDataRowImpl.prototype._updateStrict = function (values, force) {
	        return this.$_update(values, true, force);
	    };
	    TreeDataRowImpl.prototype.$_update = function (values, strict, force) {
	        var ds = this.provider;
	        if (ds) {
	            if (!force) {
	                if (!ds["_checkClientState"]())
	                    return;
	                ds.refreshFieldFormats();
	            }
	            if (values && (force || ds["_rowUpdating"](this))) {
	                this.$_internalUpdate(values, strict, true);
	                ds["_rowUpdated"](this);
	                return true;
	            }
	        }
	        return false;
	    };
	    TreeDataRowImpl.prototype._clearOrgValues = function () {
	        if (this._orgValues) {
	            this._orgValues.length = 0;
	            this._orgValues = null;
	        }
	        _super.prototype._clearOrgValues.call(this);
	    };
	    TreeDataRowImpl.prototype._restoreState = function (recursive, restoredRows) {
	        var restored = this.$_restoreState(this.provider);
	        if (restored && restoredRows) {
	            restoredRows.push(this);
	        }
	        _super.prototype._restoreState.call(this, recursive, restoredRows);
	        return restored;
	    };
	    TreeDataRowImpl.prototype._restoreRow = function (recursive, restoredRows) {
	        var restored = false;
	        if (this._state === RowState_1.RowState.UPDATED) {
	            var orgs = this._orgValues;
	            if (orgs) {
	                var vals = this._values;
	                for (var i = 0, cnt = Math.min(orgs.length, this.provider.fieldCount); i < cnt; i++) {
	                    vals[i] = orgs[i];
	                }
	                this._state = RowState_1.RowState.NONE;
	                if (restoredRows) {
	                    restoredRows.push(this);
	                }
	                restored = true;
	            }
	        }
	        _super.prototype._restoreRow.call(this, recursive, restoredRows);
	        return restored;
	    };
	    TreeDataRowImpl.prototype.$_restoreState = function (ds) {
	        if (this._state == RowState_1.RowState.UPDATED && this._orgValues) {
	            var orgs = this._orgValues;
	            var vals = this._values;
	            var ds_1 = this.provider;
	            var strict = ds_1.strictRestore;
	            for (var i = 0, cnt = ds_1.fieldCount; i < cnt; i++) {
	                var v1 = vals.length > i ? vals[i] : undefined;
	                var v2 = orgs.length > i ? orgs[i] : undefined;
	                if (strict) {
	                    if (!ds_1.getField(i).equalValues(v1, v2)) {
	                        return false;
	                    }
	                }
	                else {
	                    if (!ds_1.getField(i).sameValues(v1, v2)) {
	                        return false;
	                    }
	                }
	            }
	            this._state = RowState_1.RowState.NONE;
	            return true;
	        }
	        return false;
	    };
	    TreeDataRowImpl.prototype.$_getUpdatedCells = function () {
	        var orgs = this._orgValues;
	        var vals = this._values;
	        var ds = this.provider;
	        var strict = ds.strictRestore;
	        var cells = [];
	        if (!orgs || orgs.length <= 0) {
	            return null;
	        }
	        for (var i = 0, cnt = ds.fieldCount; i < cnt; i++) {
	            var v1 = vals.length > i ? vals[i] : undefined;
	            var v2 = orgs.length > i ? orgs[i] : undefined;
	            var field = ds.getField(i);
	            if (field.calculated) {
	                continue;
	            }
	            if (strict) {
	                if (!field.equalValues(v1, v2)) {
	                    cells.push({
	                        fieldName: ds.getOrgFieldName(i),
	                        oldValue: orgs[i],
	                        newValue: vals[i]
	                    });
	                }
	            }
	            else {
	                if (!field.sameValues(v1, v2)) {
	                    cells.push({
	                        fieldName: ds.getOrgFieldName(i),
	                        oldValue: orgs[i],
	                        newValue: vals[i]
	                    });
	                }
	            }
	        }
	        return cells;
	    };
	    TreeDataRowImpl.prototype.$_setHasChildren = function (value) {
	        this._hasChildren = value;
	    };
	    TreeDataRowImpl.prototype.$_setIconIndex = function (value) {
	        this._iconIndex = isNaN(value) ? -1 : value;
	    };
	    TreeDataRowImpl.prototype.$_internalUpdate = function (values, strict, stateEvent) {
	        var changed = false;
	        var isAry = Array.isArray(values);
	        var ds = this.provider;
	        if (ds) {
	            var cnt = Math.min(ds.fieldCount, isAry ? values.length : ds.fieldCount);
	            var needState = ds.checkStates && (this._state == RowState_1.RowState.NONE || !this._state);
	            var oldVals = null;
	            if (needState && ds["_needOrgValues"]) {
	                oldVals = this._values.concat();
	            }
	            for (var i = 0; i < cnt; i++) {
	                var fld = ds.getField(i);
	                if (isAry || values.hasOwnProperty(fld.orgFieldName)) {
	                    var v = isAry ? values[i] : values[fld.orgFieldName];
	                    if (!strict || v !== undefined) {
	                        if (ds["_needRestore"]) {
	                            changed = changed || (strict ? !fld.equalValues(this._values[i], fld.readValue(v)) : !fld.sameValues(this._values[i], fld.readValue(v)));
	                        }
	                        else {
	                            changed = true;
	                        }
	                        this._values[i] = ds.getField(i).readValue(v);
	                    }
	                }
	            }
	            ds["_internalCalculateValues"](this._values, this.rowId);
	            if (needState && changed) {
	                if (oldVals) {
	                    this._orgValues = oldVals;
	                }
	                this._state = RowState_1.RowState.UPDATED;
	                if (stateEvent) {
	                    ds["_stateChanged"](this, false);
	                }
	            }
	            else if (ds["_needRestore"]) {
	                this.$_restoreState(ds);
	            }
	        }
	    };
	    return TreeDataRowImpl;
	}(TreeDataRow));
	exports.TreeDataRowImpl = TreeDataRowImpl;
	var RootTreeRow = /** @class */ (function (_super) {
	    __extends(RootTreeRow, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function RootTreeRow(provider) {
	        var _this = _super.call(this, provider) || this;
	        _this._provider = provider;
	        return _this;
	    }
	    RootTreeRow.prototype.dispose = function () {
	        this._provider = null;
	        _super.prototype.dispose.call(this);
	    };
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    RootTreeRow.prototype.set = function (source) {
	        var children = [];
	        for (var i = 0; i < source.count; i++) {
	            children.push(source.getChild(i).copy());
	        }
	        this._setChildren(children);
	    };
	    Object.defineProperty(RootTreeRow.prototype, "provider", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._provider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeRow.prototype, "rowId", {
	        get: function () {
	            return -1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeRow.prototype, "index", {
	        get: function () {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RootTreeRow.prototype, "hasChildren", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RootTreeRow.prototype.copy = function () {
	        var root = new RootTreeRow(null);
	        for (var i = 0, cnt = this.count; i < cnt; i++) {
	            var row = this.getChild(i).copy();
	            root._addChild(row, true, true);
	        }
	        root._provider = this._provider;
	        return root;
	    };
	    RootTreeRow.prototype._changeRowState = function (newState, fireEvent, refresh) {
	        return false;
	    };
	    RootTreeRow.prototype.getObject = function () {
	        return null;
	    };
	    RootTreeRow.prototype.getValue = function (field) {
	        return undefined;
	    };
	    RootTreeRow.prototype.setValue = function (field, value, noState) {
	    };
	    RootTreeRow.prototype._attach = function (child) {
	        child["_parent"] = this;
	    };
	    RootTreeRow.prototype._detach = function (child) {
	        if (child["_parent"] === this) {
	            child["_parent"] = null;
	        }
	    };
	    RootTreeRow.prototype.update = function (values) {
	        return false;
	    };
	    RootTreeRow.prototype.updateStrict = function (values) {
	        return false;
	    };
	    RootTreeRow.prototype.$_setHasChildren = function (value) {
	    };
	    RootTreeRow.prototype.$_setIconIndex = function (value) {
	    };
	    return RootTreeRow;
	}(TreeDataRow));
	var TreeDataProvider = /** @class */ (function (_super) {
	    __extends(TreeDataProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function TreeDataProvider() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._nextRowId = 0;
	        return _this;
	    }
	    TreeDataProvider.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    return TreeDataProvider;
	}(DataSource_1.DataSource));
	exports.TreeDataProvider = TreeDataProvider;
	var LocalTreeDataProvider = /** @class */ (function (_super) {
	    __extends(LocalTreeDataProvider, _super);
	    //-------------------------------------------------------------------------
	    // constructor
	    //-------------------------------------------------------------------------
	    function LocalTreeDataProvider() {
	        var _this = _super.call(this) || this;
	        //-------------------------------------------------------------------------
	        // fields
	        //-------------------------------------------------------------------------
	        _this._countDirty = false;
	        _this._tagLock = false;
	        _this._points = [];
	        _this._nextPoint = 0;
	        _this._rowMap = [];
	        _this._needOrgValues = false;
	        _this._needRestore = false;
	        _this._checkParentProc = null;
	        _this._hiddenRows = [];
	        _this._rootRow = new RootTreeRow(_this);
	        _this._tags = new TreeDataTag.TreeDataTagCollection(_this);
	        return _this;
	    }
	    LocalTreeDataProvider.prototype.dispose = function () {
	        this._points = null;
	        this._rootRow = null;
	        this._rowMap = null;
	        this._tags = null;
	        this._hiddenRows = null;
	        _super.prototype.dispose.call(this);
	    };
	    Object.defineProperty(LocalTreeDataProvider.prototype, "rootRow", {
	        //-------------------------------------------------------------------------
	        // properties
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rootRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalTreeDataProvider.prototype, "parentCallback", {
	        /** parentCallback */
	        get: function () {
	            return this._parentCallback;
	        },
	        set: function (value) {
	            this._parentCallback = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalTreeDataProvider.prototype, "needOrgValues", {
	        /** needOrgValues */
	        get: function () {
	            return this._needOrgValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalTreeDataProvider.prototype, "needRestore", {
	        /** needRestore */
	        get: function () {
	            return this._needRestore;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    //-------------------------------------------------------------------------
	    // methods
	    //-------------------------------------------------------------------------
	    LocalTreeDataProvider.prototype.addTag = function (tag) {
	        this._tags.add(tag);
	    };
	    LocalTreeDataProvider.prototype.removeTag = function (tag) {
	        this._tags.remove(tag);
	    };
	    LocalTreeDataProvider.prototype.setRows = function (rows, treeField, needSorting, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var count = 0;
	        var tfield = this.getFieldIndex(treeField);
	        if (tfield >= 0) {
	            this.beginUpdate();
	            try {
	                this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.ArrayTreeSource(this, this._rootRow);
	                source.parentCallback = this._parentCallback;
	                count = source.load(null, rows, tfield, needSorting, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	                this._checkSum(count);
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return count;
	    };
	    LocalTreeDataProvider.prototype.setCsvRows = function (rows, treeField, needSorting, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var count = 0;
	        var tfield = this.getFieldIndex(treeField);
	        if (tfield >= 0) {
	            this.beginUpdate();
	            try {
	                this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.CsvTreeSource(this, this._rootRow);
	                source.parentCallback = this._parentCallback;
	                count = source.load(null, rows, tfield, needSorting, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	                this._checkSum(count);
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return count;
	    };
	    LocalTreeDataProvider.prototype.setXmlRows = function (rows, rowElement, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var count = 0;
	        if (rows) {
	            this.beginUpdate();
	            try {
	                this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.XmlTreeSource(this, this._rootRow);
	                count = source.load(null, rows, rowElement, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	                this._checkSum(count);
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return count;
	    };
	    LocalTreeDataProvider.prototype.setJsonRows = function (rows, rowsProp, childrenProp, iconProp) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        if (rows) {
	            this.beginUpdate();
	            try {
	                this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.JsonTreeSource(this, this._rootRow);
	                this["_rowCount"] = source.load(null, rows, rowsProp, this.getFieldIndex(childrenProp), this.getFieldIndex(iconProp));
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return this.rowCount;
	    };
	    LocalTreeDataProvider.prototype.setJsonRows2 = function (rows, rowsProp, childRowsProp, childrenProp, iconProp) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        if (rows) {
	            this.beginUpdate();
	            try {
	                this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.JsonTreeSource(this, this._rootRow);
	                this["_rowCount"] = source.load2(null, rows, rowsProp, childRowsProp, childrenProp, iconProp);
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return this.rowCount;
	    };
	    LocalTreeDataProvider.prototype.appendDataRows = function (parent, rows, treeField, needSorting, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var cnt = 0;
	        var tfield = this.getFieldIndex(treeField);
	        if (tfield >= 0) {
	            var source = new TreeDataSource_1.ArrayTreeSource(this, this._rootRow);
	            source.parentCallback = this._parentCallback;
	            this.beginUpdate();
	            try {
	                this.refreshFieldFormats();
	                cnt = source.load(parent, rows, tfield, needSorting, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	            }
	            finally {
	                this.endUpdate(false);
	                if (cnt > 0) {
	                    var newRows = source.insertedRows;
	                    if (newRows && (cnt = newRows.length) > 0) {
	                        this._rowsAdded(parent, newRows);
	                    }
	                }
	                //source = null;
	            }
	        }
	        return cnt;
	    };
	    LocalTreeDataProvider.prototype.appendCsvRows = function (parent, rows, treeField, needSorting, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var count = 0;
	        var tfield = this.getFieldIndex(treeField);
	        if (tfield >= 0) {
	            this.beginUpdate();
	            try {
	                // this._clearRows();
	                this.refreshFieldFormats();
	                var source = new TreeDataSource_1.CsvTreeSource(this, this._rootRow);
	                source.parentCallback = this._parentCallback;
	                count = source.load(parent, rows, tfield, needSorting, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	                // this._checkSum(count);
	            }
	            finally {
	                this.endUpdate(false);
	            }
	        }
	        this._tags.setRows();
	        this._fireReset();
	        this._fireRowCountChanged();
	        return count;
	    };
	    LocalTreeDataProvider.prototype.appendXmlRows = function (parent, rows, rowElement, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var cnt = 0;
	        if (rows) {
	            var source = new TreeDataSource_1.XmlTreeSource(this, this._rootRow);
	            this.beginUpdate();
	            try {
	                this.refreshFieldFormats();
	                cnt = source.load(parent, rows, rowElement, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	            }
	            finally {
	                this.endUpdate(false);
	                if (cnt > 0) {
	                    var newRows = source.insertedRows;
	                    if (newRows && (cnt = newRows.length) > 0) {
	                        this._rowsAdded(parent, newRows);
	                    }
	                }
	                //source = null;
	            }
	        }
	        this._fireRowCountChanged();
	        return cnt;
	    };
	    LocalTreeDataProvider.prototype.appendJsonRows = function (parent, rows, rowsProp, childrenField, iconField) {
	        if (!this._checkClientState()) {
	            return -1;
	        }
	        var cnt = 0;
	        if (rows) {
	            var source = new TreeDataSource_1.JsonTreeSource(this, this._rootRow);
	            this.beginUpdate();
	            try {
	                this.refreshFieldFormats();
	                cnt = source.load(parent, rows, rowsProp, this.getFieldIndex(childrenField), this.getFieldIndex(iconField));
	            }
	            finally {
	                this.endUpdate(false);
	                if (cnt > 0) {
	                    var newRows = source.insertedRows;
	                    if (newRows && (cnt = newRows.length) > 0) {
	                        this._rowsAdded(parent, newRows);
	                    }
	                }
	                //source = null;
	            }
	        }
	        this._fireRowCountChanged();
	        return cnt;
	    };
	    LocalTreeDataProvider.prototype.setIconIndex = function (row, value) {
	        if (row.iconIndex != value) {
	            //row.iconIndex = value;
	            row["$_setIconIndex"](value);
	            return true;
	        }
	        return false;
	        // if (row instanceof TreeDataRowImpl && row.iconIndex != value) {
	        // 	row["$_setIconIndex"](value);
	        // 	return true;
	        // } else if (row.iconIndex != value) {
	        // 	row.setIconIndex(value);
	        // 	return true;
	        // }
	        // return false;
	    };
	    LocalTreeDataProvider.prototype.setHasChildren = function (row, value) {
	        if (value != row.hasChildren) {
	            row["$_setHasChildren"](value);
	            return true;
	        }
	        return false;
	        // if (row instanceof TreeDataRow && row.hasChildren() != value) {
	        // 	row._setHasChildren(value);
	        // 	return true;
	        // } else if (row.hasChildren() != value) {
	        // 	row._setHasChildren(value);
	        // 	return true;
	        // }
	        // return false;
	    };
	    LocalTreeDataProvider.prototype.getAllRows = function () {
	        var rows = [];
	        return rows;
	    };
	    LocalTreeDataProvider.prototype.getJsonRows = function (rowId, rowsProp, childrenProp) {
	        var rows = [];
	        return rows;
	    };
	    LocalTreeDataProvider.prototype.getChildCount = function (parent) {
	        var p = parent || this._rootRow;
	        return p.count;
	    };
	    LocalTreeDataProvider.prototype.getRows = function (parent) {
	        var p = parent ? parent : this._rootRow;
	        return p.children;
	    };
	    LocalTreeDataProvider.prototype.getDescendantCount = function (parent) {
	        var p = parent || this._rootRow;
	        return p.descendantCount;
	    };
	    LocalTreeDataProvider.prototype.getDescendants = function (parent, maxLevel) {
	        function collectRows(p, rows, maxLevel) {
	            for (var i = 0, cnt = p.count; i < cnt; i++) {
	                var row = void 0;
	                rows.push(row = p.getChild(i));
	                if (maxLevel > row.level) {
	                    collectRows(row, rows, maxLevel);
	                }
	            }
	        }
	        maxLevel = arguments.length > 1 ? maxLevel : 0;
	        var p = parent || this._rootRow;
	        if (maxLevel <= 0) {
	            return p.descendants;
	        }
	        else if (maxLevel > p.level) {
	            var rows = [];
	            collectRows(p, rows, maxLevel);
	            return rows;
	        }
	        else {
	            return null;
	        }
	    };
	    LocalTreeDataProvider.prototype.getChild = function (parent, index) {
	        var p = parent || this._rootRow;
	        return p.getChild(index);
	    };
	    LocalTreeDataProvider.prototype.hasData = function (rowId) {
	        return this.rowById(rowId) != null;
	    };
	    LocalTreeDataProvider.prototype.rowById = function (rowId) {
	        var row = this._rowMap[rowId];
	        if (!row) {
	            row = this._findRowById(rowId);
	            if (row) {
	                this._rowMap[rowId] = row;
	            }
	        }
	        return row;
	    };
	    LocalTreeDataProvider.prototype.createRow = function (values, iconIndex, hasChildren) {
	        var row = null;
	        this.refreshFieldFormats();
	        if (Array.isArray(values)) {
	            row = new TreeDataRowImpl(this, values);
	        }
	        else if (values) {
	            var vals = new Array(this.fieldCount);
	            for (var prop in values) {
	                var fld = this.getFieldIndex(prop);
	                if (fld >= 0) {
	                    vals[fld] = values[prop];
	                }
	            }
	            row = new TreeDataRowImpl(this, vals);
	        }
	        if (row) {
	            this._internalCalculateValues(row["_values"], row.rowId);
	            row["_iconIndex"] = iconIndex;
	            row["_hasChildren"] = hasChildren;
	        }
	        return row;
	    };
	    LocalTreeDataProvider.prototype.clearRows = function () {
	        if (!this._checkClientState()) {
	            return;
	        }
	        this._clearRows();
	        if (this._eventLock <= 0) {
	            this._fireRefresh();
	            this._fireRowCountChanged();
	        }
	    };
	    LocalTreeDataProvider.prototype.removeRows = function (rows) {
	        function checkOrphaned(row, from) {
	            for (var i = from; i >= 0; i--) {
	                if (rows[i].isAncestorOf(row)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        if (!this._checkClientState())
	            return;
	        if (!rows || rows.length < 1) {
	            return;
	        }
	        rows.sort(function (row1, row2) {
	            return row1.level - row2.level;
	        });
	        var orgRows = rows; // splice 이전 값 저장
	        for (var i = rows.length; i--;) {
	            if (rows[i].level > 1 && !checkOrphaned(rows[i], i - 1)) {
	                rows.splice(i, 1);
	            }
	        }
	        if (rows.length < 1 || !this._rowsRemoving(rows)) {
	            return false;
	        }
	        if (this.softDeleting && this.checkStates) {
	            var stateRows = [];
	            for (var i = rows.length - 1; i >= 0; i--) {
	                var row = rows[i];
	                var st = row.rowState;
	                var changed = false;
	                switch (st) {
	                    case RowState_1.RowState.CREATED:
	                        if (!this.deleteCreated) {
	                            changed = row["_changeRowState"](RowState_1.RowState.CREATE_AND_DELETED, false, false);
	                            rows.splice(i, 1);
	                        }
	                        break;
	                    case RowState_1.RowState.DELETED:
	                    case RowState_1.RowState.CREATE_AND_DELETED:
	                        rows.splice(i, 1);
	                        break;
	                    default:
	                        changed = row["_changeRowState"](RowState_1.RowState.DELETED, true, false);
	                        rows.splice(i, 1);
	                        break;
	                }
	                if (changed) {
	                    stateRows.push(row);
	                }
	            }
	            if (stateRows.length > 0) {
	                this._fireRowStatesChanged(stateRows);
	            }
	        }
	        this.deleteRows(orgRows);
	        return true;
	    };
	    LocalTreeDataProvider.prototype.moveRowSibling = function (row, delta) {
	        if (delta == 0) {
	            return false;
	        }
	        if (!this._checkClientState()) {
	            return false;
	        }
	        var parent = row.parent;
	        var count = parent.children.length;
	        var index = row.index;
	        var newIndex = Math.min(Math.max(index + delta, 0), count - 1);
	        delta = newIndex - index;
	        if (delta == 0)
	            return false;
	        if (this._fireRowSiblingMoving(row, delta)) {
	            parent["_moveChild"](index, newIndex);
	            this._fireRowSiblingMoved(row, delta);
	            return true;
	        }
	        return false;
	    };
	    LocalTreeDataProvider.prototype.changeRowParent = function (row, parent, childIndex) {
	        if (row === parent) {
	            throw new Error("parent must not be self.");
	        }
	        if (row.isAncestorOf(parent)) {
	            throw new Error("can`t move to child of descendant.");
	        }
	        var old = row.parent;
	        if (old === parent && childIndex == row.index) {
	            return false;
	        }
	        if (!this._checkClientState()) {
	            return false;
	        }
	        if (!parent["_children"]) {
	            parent["_children"] = [];
	        }
	        var count = parent["_children"].length;
	        childIndex = Math.min(Math.max(childIndex, 0), count);
	        if (this._fireRowParentChanging(row, parent, childIndex)) {
	            row["_changeParent"](parent, childIndex);
	            if (!(parent instanceof RootTreeRow)) {
	                this.setHasChildren(parent, true);
	            }
	            if (!(old instanceof RootTreeRow) && old.count == 0) {
	                this.setHasChildren(old, false);
	            }
	            this._fireRowParentChanged(row, parent, childIndex);
	            return true;
	        }
	        return false;
	    };
	    LocalTreeDataProvider.prototype.toTreeString = function () {
	        return this._rootRow.toTreeString();
	    };
	    LocalTreeDataProvider.prototype.beginUpdate = function () {
	        this._checkClientState();
	        this._eventLock++;
	    };
	    LocalTreeDataProvider.prototype.endUpdate = function (refresh) {
	        if (refresh === void 0) { refresh = true; }
	        this._checkClientState();
	        this._eventLock = Math.max(0, this._eventLock - 1);
	        if (this._eventLock == 0) {
	            if (refresh) {
	                if (this._resetLock > 0) {
	                    this._fireReset();
	                }
	                else {
	                    this._fireRefresh();
	                }
	                if (this._countDirty) {
	                    this._fireRowCountChanged();
	                }
	            }
	            this._resetLock = 0;
	            this._countDirty = false;
	        }
	    };
	    LocalTreeDataProvider.prototype.$_extractTreeRowIds = function (rows) {
	        if (rows) {
	            var cnt = rows.length;
	            var ids = new Array(cnt);
	            for (var i = 0; i < cnt; i++) {
	                ids[i] = rows[i].rowId;
	            }
	            return ids;
	        }
	        return null;
	    };
	    LocalTreeDataProvider.prototype.$_searchDataRow = function (dataRows, fields, values, options, startIndex, endIndex) {
	        var rows = dataRows.length;
	        if (rows < 1) {
	            return -1;
	        }
	        var flds = Math.min(fields.length, values.length);
	        if (flds < 1) {
	            return -1;
	        }
	        var all = !options || options.allFields;
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < flds; c++) {
	            fieldTypes[c] = this.getField(fields[c]).dataType;
	        }
	        /* tree의 경우 dataRow가 0부터 시작하는 것이 아니고 순차적이지도 않다.전체 dataRow를 받아서 돌려야 한다. */
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(rows - 1, endIndex);
	        for (var i = startIndex; i <= endIndex; i++) {
	            var found = true;
	            if (found) {
	                for (var c = 0; c < flds; c++) {
	                    var v = this.rowById(dataRows[i]).getValue(fields[c]);
	                    switch (fieldTypes[c]) {
	                        case Types.ValueType.DATETIME:
	                        case Types.ValueType.DATE:
	                            if (values[c] instanceof Date) {
	                                found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                            }
	                            else {
	                                if (!dateConvert) {
	                                    var fmt = /[.]/.test(values[c]) ? "yyyy.MM.dd" : /[/]/.test(values[c]) ? "yyyy/MM/dd" : /[-]/.test(values[c]) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                    dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                }
	                                found = Utils_1.Utils.compareTextValue(values[c], v ? dateConvert.getText(v) : v, sensitive, partial);
	                            }
	                            break;
	                        default:
	                            found = Utils_1.Utils.compareTextValue(values[c], v, sensitive, partial);
	                            break;
	                    }
	                    if (found && !all) {
	                        return dataRows[i];
	                    }
	                    if (!found && all) {
	                        break;
	                    }
	                }
	            }
	            if (found) {
	                return dataRows[i];
	            }
	        }
	        return -1;
	    };
	    LocalTreeDataProvider.prototype.searchDataRow = function (fields, values, options, startRowId, wrap, parentId) {
	        if (startRowId === void 0) { startRowId = 0; }
	        if (wrap === void 0) { wrap = true; }
	        if (parentId === void 0) { parentId = null; }
	        options = options instanceof SearchOptions_1.SearchOptions ? options : options ? new SearchOptions_1.SearchOptions(options) : null;
	        var dataRows;
	        if (parentId != null) {
	            var row = this.rowById(parentId);
	            if (row) {
	                dataRows = this.$_extractTreeRowIds(row.descendants);
	            }
	            else {
	                return -1;
	            }
	        }
	        else {
	            dataRows = this.$_extractTreeRowIds(this._rootRow.descendants);
	        }
	        if (!Array.isArray(dataRows) || dataRows.length <= 0) {
	            return -1;
	        }
	        var rowCnt = dataRows.length;
	        var startIndex = Math.max(0, dataRows.indexOf(startRowId));
	        var result = -1;
	        if (fields && fields.length > 0 && values && values.length > 0) {
	            var cnt = fields.length;
	            var flds = [];
	            for (var c = 0; c < cnt; c++) {
	                var n = fields[c];
	                if (Utils_1.Utils.isNumber(n)) {
	                    flds.push(n);
	                }
	                else {
	                    var f = this.getFieldIndex(fields[c]);
	                    if (f >= 0) {
	                        flds.push(f);
	                    }
	                }
	            }
	            if (flds.length > 0) {
	                result = startIndex < rowCnt ? this.$_searchDataRow(dataRows, flds, values, options, startIndex, rowCnt - 1) : -1;
	                if (result < 0 && wrap && startIndex > 0) {
	                    result = this.$_searchDataRow(dataRows, flds, values, options, 0, startIndex - 1);
	                }
	            }
	        }
	        return result;
	    };
	    LocalTreeDataProvider.prototype.$_searchData = function (dataRows, fields, value, options, startIndex, endIndex, startFieldIndex) {
	        var rows = this.rowCount;
	        if (rows < 1) {
	            return null;
	        }
	        var sensitive = options && options.caseSensitive;
	        var partial = options && options.partialMatch;
	        var fldCount = this.fieldCount;
	        var fldLen = fields.length;
	        var dateConvert = null;
	        var fieldTypes = [];
	        for (var c = 0; c < fldCount; c++) {
	            fieldTypes[c] = this.getField(c).dataType;
	        }
	        startIndex = Math.max(0, startIndex);
	        endIndex = Math.min(rows - 1, endIndex);
	        startFieldIndex = Math.max(0, startFieldIndex);
	        if (startFieldIndex >= fields.length) {
	            startIndex++;
	            startFieldIndex = 0;
	        }
	        for (var i = startIndex; i <= endIndex; i++) {
	            var c = (i > startIndex) ? 0 : startFieldIndex;
	            for (; c < fldLen; c++) {
	                var found = false;
	                var f = fields[c];
	                if (f >= 0 && f < fldCount) {
	                    var v = this.rowById(dataRows[i]).getValue(f);
	                    switch (fieldTypes[f]) {
	                        case Types.ValueType.DATETIME:
	                        case Types.ValueType.DATE:
	                            if (value instanceof Date) {
	                                found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                            }
	                            else {
	                                if (!dateConvert) {
	                                    var fmt = /[.]/.test(value) ? "yyyy.MM.dd" : /[/]/.test(value) ? "yyyy/MM/dd" : /[-]/.test(value) ? "yyyy-MM-dd" : "yyyyMMdd";
	                                    dateConvert = new DateTimeConverter_1.DateTimeConverter(fmt);
	                                }
	                                found = Utils_1.Utils.compareTextValue(value, v ? dateConvert.getText(v) : v, sensitive, partial);
	                            }
	                            break;
	                        default:
	                            found = Utils_1.Utils.compareTextValue(value, v, sensitive, partial);
	                            break;
	                    }
	                    if (found) {
	                        var returnObj = {
	                            dataRow: dataRows[i],
	                            fieldIndex: f,
	                            searchFieldIndex: c
	                        };
	                        return returnObj;
	                    }
	                }
	            }
	        }
	        return null;
	    };
	    LocalTreeDataProvider.prototype.searchData = function (fields, value, options, startIndex, startFieldIndex, wrap, parentId) {
	        if (startIndex === void 0) { startIndex = 0; }
	        if (startFieldIndex === void 0) { startFieldIndex = 0; }
	        if (wrap === void 0) { wrap = true; }
	        if (parentId === void 0) { parentId = -1; }
	        options = options instanceof SearchOptions_1.SearchCellOptions ? options : options ? new SearchOptions_1.SearchCellOptions(options) : null;
	        var dataRows;
	        if (parentId >= 0) {
	            var row = this.rowById(parentId);
	            if (row) {
	                dataRows = this.$_extractTreeRowIds(row.descendants);
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            dataRows = this.$_extractTreeRowIds(this._rootRow.descendants);
	        }
	        if (!Array.isArray(dataRows) || dataRows.length <= 0) {
	            return null;
	        }
	        var rowCnt = dataRows.length;
	        var result = null;
	        startIndex = Math.max(0, dataRows.indexOf(startIndex));
	        if (!fields || fields.length < 1) {
	            fields = [];
	            var arr = this.getFields();
	            for (var i = 0; i < arr.length; i++) {
	                fields.push(arr[i].orgFieldName);
	            }
	        }
	        if (fields && fields.length > 0 && value != null) {
	            var cnt = fields.length;
	            var flds = [];
	            for (var c = 0; c < cnt; c++) {
	                var n = fields[c];
	                if (Utils_1.Utils.isNumber(n)) {
	                    flds.push(n);
	                }
	                else {
	                    flds.push(this.getFieldIndex(fields[c]));
	                }
	            }
	            if (flds.length > 0) {
	                startFieldIndex = Math.max(0, startFieldIndex);
	                result = startIndex < rowCnt ? this.$_searchData(dataRows, flds, value, options, startIndex, rowCnt - 1, startFieldIndex) : null;
	                if (!result && wrap && startIndex > 0) {
	                    result = this.$_searchData(dataRows, flds, value, options, 0, startIndex - 1, 0);
	                }
	                if (result) {
	                    result.fieldName = this.getOrgFieldName(result["fieldIndex"]);
	                }
	            }
	        }
	        return result;
	    };
	    LocalTreeDataProvider.prototype.$_hideDataRows = function (rowIds, hidden) {
	        if (rowIds == null || rowIds.length < 1) {
	            return;
	        }
	        var oldCnt = this._hiddenRows.length;
	        var ids = [];
	        for (var i = 0, cnt = rowIds.length; i < cnt; i++) {
	            var rowId = rowIds[i];
	            if (this._findRowById(rowId) != null) {
	                ids.push(rowId);
	                if (hidden) {
	                    this._hiddenRows.indexOf(rowId) < 0 && this._hiddenRows.push(rowId);
	                }
	                else {
	                    var idx = this._hiddenRows.indexOf(rowId);
	                    idx >= 0 && this._hiddenRows.splice(idx, 1);
	                }
	            }
	        }
	        this._hiddenRows.length !== oldCnt && this._fireRowsHiddenChanged(ids, hidden);
	    };
	    LocalTreeDataProvider.prototype.hideRows = function (rowIds) {
	        this.$_hideDataRows(rowIds, true);
	    };
	    LocalTreeDataProvider.prototype.showRows = function (rowIds) {
	        this.$_hideDataRows(rowIds, false);
	    };
	    LocalTreeDataProvider.prototype.clearHiddenRows = function () {
	        if (this._hiddenRows.length > 0) {
	            var rows = this._hiddenRows.concat();
	            this._hiddenRows = [];
	            this._fireRowsHiddenChanged(rows, false);
	        }
	    };
	    LocalTreeDataProvider.prototype.getHiddenRows = function () {
	        var ret = this._hiddenRows.concat();
	        ret.sort(function (r1, r2) {
	            return r1 - r2;
	        });
	        return ret;
	    };
	    LocalTreeDataProvider.prototype.isHiddenRow = function (rowId) {
	        var row = this.rowById(rowId);
	        return !!row && this._hiddenRows.indexOf(rowId) >= 0;
	    };
	    Object.defineProperty(LocalTreeDataProvider.prototype, "hiddenCount", {
	        get: function () {
	            return this._hiddenRows.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LocalTreeDataProvider.prototype.summarize = function (summary, calcVars) {
	        if (summary == null) {
	            return false;
	        }
	        summary.clear();
	        var count = this.rowCount;
	        if (count < 1) {
	            return false;
	        }
	        summary.count = count;
	        summary.sum = 0;
	        summary.min = Number.MAX_VALUE;
	        summary.max = Number.MIN_VALUE;
	        summary.dataCount = 0;
	        this.$_summarizeChildren(this._rootRow, summary);
	        summary.avg = summary.sum / summary.count;
	        summary.dataAvg = summary.dataCount === 0 ? NaN : summary.sum / summary.dataCount;
	        if (calcVars) {
	            var vars = this.$_summarizeVars(this._rootRow, summary);
	            summary.varsp = vars / summary.count;
	            summary.vars = vars / (summary.count - 1);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype.summarizeRange = function (summary, rows, calcVars) {
	        if (summary == null || rows == null) {
	            return false;
	        }
	        summary.clear();
	        var count = rows.length;
	        if (count < 1) {
	            return false;
	        }
	        var n = 0;
	        var f = summary.field;
	        var sum = 0;
	        var min = NaN;
	        var max = NaN;
	        var i = 0;
	        while (i < count) {
	            var row = rows[i++];
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                sum = min = max = v;
	                n++;
	                break;
	            }
	        }
	        while (i < count) {
	            var row = rows[i++];
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                sum += v;
	                if (v < min)
	                    min = v;
	                if (v > max)
	                    max = v;
	                n++;
	            }
	        }
	        summary.count = count;
	        if (n > 0) {
	            summary.sum = sum;
	            summary.min = min;
	            summary.max = max;
	            summary.avg = sum / count;
	            summary.dataCount = n;
	            summary.dataAvg = summary.dataCount === 0 ? NaN : summary.sum / summary.dataCount;
	            if (calcVars) {
	                if (count > 1) {
	                    var vars = 0;
	                    var avg = summary.avg;
	                    for (var i_1 = 0; i_1 < count; i_1++) {
	                        var row = rows[i_1++];
	                        var v = row.getValue(f);
	                        if (!isNaN(v)) {
	                            vars += Math.pow(v - avg, 2);
	                        }
	                    }
	                    summary.varsp = vars / count;
	                    summary.vars = vars / (count - 1);
	                }
	                else {
	                    summary.varsp = 0;
	                    summary.vars = 0;
	                }
	            }
	        }
	        return true;
	    };
	    Object.defineProperty(LocalTreeDataProvider.prototype, "rowCount", {
	        //-------------------------------------------------------------------------
	        // overriden members
	        //-------------------------------------------------------------------------
	        get: function () {
	            return this._rootRow.descendantCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalTreeDataProvider.prototype, "immediateUpdate", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LocalTreeDataProvider.prototype, "isSummarized", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LocalTreeDataProvider.prototype.getRow = function (rowId) {
	        return this.rowById(rowId).values;
	    };
	    LocalTreeDataProvider.prototype.deleteRows = function (rows) {
	        if (!this._checkClientState()) {
	            return;
	        }
	        if (rows && rows.length > 0) {
	            var saveSoftDeleting = this["_softDeleting"];
	            this.beginUpdate();
	            try {
	                this["_softDeleting"] = false;
	                this._tagLock = true;
	                try {
	                    for (var i = rows.length - 1; i >= 0; i--) {
	                        var row = rows[i];
	                        var p = row && row.parent;
	                        p && p["_removeChild"](row, true);
	                    }
	                }
	                finally {
	                    this._tagLock = false;
	                }
	            }
	            finally {
	                this["_softDeleting"] = saveSoftDeleting;
	                this.endUpdate(false);
	            }
	            this._rowsRemoved(rows);
	        }
	    };
	    LocalTreeDataProvider.prototype.equalValues = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var fld = this["_fields"][field];
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            return fld.equalValues(v1, v2);
	        }
	        else {
	            return true;
	        }
	    };
	    LocalTreeDataProvider.prototype.sameValues = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var fld = this["_fields"][field];
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            return fld.sameValues(v1, v2);
	        }
	        else {
	            return true;
	        }
	    };
	    LocalTreeDataProvider.prototype.compareValues = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            if (v1 === null) {
	                return (v2 === null) ? 0 : -1;
	            }
	            if (v2 === null) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : (v1 < v2) ? -1 : 0;
	        }
	        else {
	            return 0;
	        }
	    };
	    LocalTreeDataProvider.prototype.compareNumbers = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            if (isNaN(v1)) {
	                return (isNaN(v2)) ? 0 : -1;
	            }
	            if (isNaN(v2)) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : (v1 < v2) ? -1 : 0;
	        }
	        else {
	            return 0;
	        }
	    };
	    LocalTreeDataProvider.prototype.compareBools = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            return (v1 && !v2) ? 1 : (!v1 && v2) ? -1 : 0;
	        }
	        else {
	            return 0;
	        }
	    };
	    LocalTreeDataProvider.prototype.compareDates = function (field, row1, row2) {
	        if (row1 !== row2) {
	            var v1 = row1.getValue(field);
	            var v2 = row2.getValue(field);
	            if (!(v1 instanceof Date)) {
	                return !(v2 instanceof Date) ? 0 : -1;
	            }
	            if (!(v2 instanceof Date)) {
	                return 1;
	            }
	            return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;
	        }
	        else {
	            return 0;
	        }
	    };
	    LocalTreeDataProvider.prototype.compareObjects = function (field, row1, row2) {
	        var vals1 = this["_values"][row1];
	        var vals2 = this["_values"][row2];
	        if (vals1 === vals2) {
	            return 0;
	        }
	        else {
	            var v1 = vals1 ? vals1[field] : null;
	            var v2 = vals2 ? vals2[field] : null;
	            if (!v1) {
	                return !v2 ? 0 : -1;
	            }
	            if (!v2) {
	                return 1;
	            }
	            var fld = this.getField(field);
	            return fld["$_compareObject"](v1, v2, row1, row2);
	        }
	    };
	    LocalTreeDataProvider.prototype.$_getSortedRows = function (field) {
	        var compFunc;
	        switch (this.getField(field).dataType) {
	            case Types.ValueType.NUMBER:
	                compFunc = this.compareNumbers;
	                break;
	            case Types.ValueType.DATETIME:
	                compFunc = this.compareDates;
	                break;
	            case Types.ValueType.BOOLEAN:
	                compFunc = this.compareBools;
	                break;
	            case Types.ValueType.OBJECT:
	                compFunc = this.compareObjects;
	                break;
	            default:
	                compFunc = this.compareValues;
	                break;
	        }
	        var rows = this.getDescendants(this._rootRow, 0);
	        this.$_sortRows(rows, field, compFunc.bind(this), 0, rows.length - 1);
	        return rows;
	    };
	    LocalTreeDataProvider.prototype.getDistinctValues = function (field, maxCount, sortDir) {
	        if (maxCount === void 0) { maxCount = -1; }
	        if (sortDir === void 0) { sortDir = Types.SortDirection.ASCENDING; }
	        this.checkFieldIndex(field);
	        var values = [];
	        if (maxCount < 0) {
	            maxCount = this.getDescendantCount(this["_rootRow"]);
	        }
	        if (maxCount > 0) {
	            var isNum = this.getField(field).dataType == Types.ValueType.NUMBER;
	            var rows = this.$_getSortedRows(field);
	            sortDir === Types.SortDirection.DESCENDING && rows.reverse();
	            values.push(rows[0]["_values"][field]);
	            for (var i = 1, cnt = rows.length; i < cnt; i++) {
	                if (values.length >= maxCount) {
	                    break;
	                }
	                if (!this.equalValues(field, rows[i - 1], rows[i])) {
	                    var value = rows[i]["_values"][field];
	                    if (values.indexOf(value) == -1 && (!isNum || !isNaN(value))) { // undefined나 NaN이 중복들어가는것을 방지
	                        values.push(value);
	                    }
	                }
	            }
	        }
	        return values;
	    };
	    LocalTreeDataProvider.prototype._doFieldsReset = function () {
	        _super.prototype._doFieldsReset.call(this);
	        this._clearRows();
	        this._fireReset();
	    };
	    LocalTreeDataProvider.prototype.refreshClients = function () {
	        this._fireRefreshClient();
	    };
	    LocalTreeDataProvider.prototype.savePoint = function (saveStates) {
	        if (saveStates === void 0) { saveStates = true; }
	        if (!this._checkClientState()) {
	            return;
	        }
	        var flds = this.fieldCount;
	        if (flds > 0 && this._rootRow.count > 0) {
	            var root = this._rootRow.copy();
	            var i = this._nextPoint++;
	            if (!saveStates) {
	                root.clearRowStates(false, false);
	            }
	            this._points.push({
	                id: i,
	                data: root
	            });
	            return i;
	        }
	        return -1;
	    };
	    LocalTreeDataProvider.prototype.rollback = function (savePoint) {
	        if (savePoint === void 0) { savePoint = 0; }
	        if (!this._checkClientState()) {
	            return;
	        }
	        for (var i = this._points.length - 1; i >= 0; i--) {
	            var point = this._points[i];
	            if (point.id == savePoint) {
	                this.$_removeSavePoints(i + 1);
	                this._rowMap = [];
	                this._rootRow.set(point.data);
	                this._fireReset();
	                break;
	            }
	        }
	    };
	    LocalTreeDataProvider.prototype.$_removeSavePoints = function (index) {
	        var points = this._points;
	        for (var i = points.length - 1; i >= index; i--) {
	            var point = points[i];
	            point.data = null;
	            points.pop();
	        }
	    };
	    LocalTreeDataProvider.prototype.clearSavePoints = function () {
	        this.$_removeSavePoints(0);
	    };
	    LocalTreeDataProvider.prototype.getSavePoints = function () {
	        var points = [];
	        for (var i = 0, cnt = this._points.length; i < cnt; i++) {
	            points.push(this._points[i].id);
	        }
	        return points;
	    };
	    LocalTreeDataProvider.prototype._doCheckStatesChanged = function () {
	        this.$_resetOrgValues();
	    };
	    LocalTreeDataProvider.prototype._doRestoreModeChanged = function () {
	        this.$_resetOrgValues();
	    };
	    LocalTreeDataProvider.prototype._hasChildrenChanged = function (row) {
	        this._fireHasChildrenChanged(row);
	    };
	    LocalTreeDataProvider.prototype._iconIndexChanged = function (row) {
	        this._fireIconIndexChanged(row);
	    };
	    LocalTreeDataProvider.prototype._stateChanged = function (row, refresh) {
	        this._fireRowStateChanged(row, refresh);
	    };
	    LocalTreeDataProvider.prototype._valueChanged = function (row, field) {
	        this._fireValueChanged(row, field);
	    };
	    LocalTreeDataProvider.prototype._rowAdding = function (parent, index, child) {
	        return this._fireRowAdding(parent, index, child);
	    };
	    LocalTreeDataProvider.prototype._rowAdded = function (row) {
	        if (!this._tagLock) {
	            this._tags.addRow(row);
	        }
	        if (this._eventLock <= 0) {
	            this._fireRowAdded(row);
	            this._fireRowCountChanged();
	        }
	    };
	    LocalTreeDataProvider.prototype._rowsAdded = function (parent, rows) {
	        if (!this._tagLock) {
	            this._tags.addRows(rows);
	        }
	        if (this._eventLock <= 0) {
	            this._fireRowsAdded(parent, rows);
	            this._fireRowCountChanged();
	        }
	    };
	    LocalTreeDataProvider.prototype._rowRemoving = function (row) {
	        return this._fireRowRemoving(row);
	    };
	    LocalTreeDataProvider.prototype._rowRemoved = function (row) {
	        if (!this._tagLock) {
	            this._tags.removeRow(row);
	        }
	        if (this._eventLock <= 0) {
	            this._fireRowRemoved(row);
	            this._fireRowCountChanged();
	        }
	    };
	    LocalTreeDataProvider.prototype._rowsRemoving = function (rows) {
	        return this._fireRowsRemoving(rows);
	    };
	    LocalTreeDataProvider.prototype._rowsRemoved = function (rows) {
	        if (!this._tagLock) {
	            this._tags.removeRows(rows);
	        }
	        if (this._eventLock <= 0) {
	            this._fireRowsRemoved(rows);
	            this._fireRowCountChanged();
	        }
	    };
	    LocalTreeDataProvider.prototype._rowCleared = function (row) {
	        if (row) {
	            var rows = row.children;
	            this._tags.removeRows(rows);
	            if (this._eventLock <= 0) {
	                this._fireRowsRemoved(rows);
	                this._fireRowCountChanged();
	            }
	        }
	    };
	    LocalTreeDataProvider.prototype._rowUpdating = function (row) {
	        return this._fireRowUpdating(row);
	    };
	    LocalTreeDataProvider.prototype._rowUpdated = function (row) {
	        this._tags.updateRow(row);
	        if (this._eventLock <= 0) {
	            this._fireRowUpdated(row);
	        }
	    };
	    LocalTreeDataProvider.prototype.getRowId = function (row) {
	        throw new Error("Method not implemented.");
	    };
	    LocalTreeDataProvider.prototype.getValue = function (row, fieldIndex) {
	        throw new Error("Method not implemented.");
	    };
	    LocalTreeDataProvider.prototype.setValue = function (row, fieldIndex, value) {
	        throw new Error("Method not implemented.");
	    };
	    LocalTreeDataProvider.prototype.getRowObject = function (row) {
	        throw new Error("Method not implemented.");
	    };
	    LocalTreeDataProvider.prototype.getRowState = function (rowId) {
	        var row = this.rowById(rowId);
	        return row ? row.rowState : RowState_1.RowState.NONE;
	    };
	    LocalTreeDataProvider.prototype.setRowState = function (rowId, newState, force) {
	        var row = this.rowById(rowId);
	        if (row && (this.checkStates || force)) {
	            var state = row.rowState;
	            if (newState != state) {
	                row["_changeRowState"](newState, true, RowState_1.isDeletedState(state) ? true : undefined);
	            }
	        }
	    };
	    LocalTreeDataProvider.prototype.changeRowStates = function (rows, newState) {
	        var cnt = rows.length;
	        var changed = [];
	        for (var i = 0; i < cnt; i++) {
	            var row = rows[i];
	            if (row["_changeRowState"](newState, false, false)) {
	                changed.push(row);
	            }
	        }
	        if (changed.length > 0) {
	            this._fireRowStatesChanged(changed);
	        }
	    };
	    LocalTreeDataProvider.prototype.clearRowStates = function (deleteRows, fireStateEvents) {
	        if (!this._checkClientState())
	            return;
	        this._rootRow.clearRowStates(deleteRows, fireStateEvents);
	    };
	    LocalTreeDataProvider.prototype.$_collectStateRows = function (row, state, rows) {
	        for (var i = 0, cnt = row.count; i < cnt; i++) {
	            var child = row.getChild(i);
	            if (child.rowState == state) {
	                rows.push(child.rowId);
	            }
	            this.$_collectStateRows(child, state, rows);
	        }
	    };
	    LocalTreeDataProvider.prototype.getStateRows = function (state) {
	        var rows = [];
	        this.$_collectStateRows(this._rootRow, state, rows);
	        return rows;
	    };
	    LocalTreeDataProvider.prototype.$_collectAllStateRows = function (row, rows) {
	        for (var i = 0, cnt = row.count; i < cnt; i++) {
	            var child = row.getChild(i);
	            switch (child.rowState) {
	                case RowState_1.RowState.CREATED:
	                    rows.created.push(child.rowId);
	                    break;
	                case RowState_1.RowState.UPDATED:
	                    rows.updated.push(child.rowId);
	                    break;
	                case RowState_1.RowState.DELETED:
	                    rows.deleted.push(child.rowId);
	                    break;
	                case RowState_1.RowState.CREATE_AND_DELETED:
	                    rows.createAndDeleted.push(child.rowId);
	                    break;
	            }
	            this.$_collectAllStateRows(child, rows);
	        }
	    };
	    LocalTreeDataProvider.prototype.getAllStateRows = function () {
	        var rows = {
	            created: [],
	            updated: [],
	            deleted: [],
	            createAndDeleted: []
	        };
	        this.$_collectAllStateRows(this._rootRow, rows);
	        return rows;
	    };
	    LocalTreeDataProvider.prototype.setRowStates = function (rows, state, force, rowEvents) {
	        if (!this._checkClientState()) {
	            return;
	        }
	        var changedRows = rowEvents ? null : [];
	        for (var i = 0, cnt = rows.length; i < cnt; i++) {
	            var row = this.rowById(rows[i]);
	            if (row) {
	                if (this.checkStates || force) {
	                    if (row["_changeRowState"](state, rowEvents, false) && !rowEvents) {
	                        changedRows.push(row);
	                    }
	                }
	            }
	        }
	        if (!rowEvents && changedRows.length > 0) {
	            this._fireRowStatesChanged(changedRows);
	        }
	    };
	    LocalTreeDataProvider.prototype.$_getRowStateCount = function (row, states) {
	        var count = 0;
	        for (var i = 0, cnt = row.count; i < cnt; i++) {
	            var child = row.getChild(i);
	            if (states.indexOf(child.rowState) >= 0) {
	                count++;
	            }
	            count += this.$_getRowStateCount(child, states);
	        }
	        return count;
	    };
	    LocalTreeDataProvider.prototype.getRowStateCount = function (states) {
	        return this.$_getRowStateCount(this._rootRow, states);
	    };
	    LocalTreeDataProvider.prototype.restoreUpdatedStates = function (rows) {
	        this.restoreUpdatedRows(rows);
	    };
	    LocalTreeDataProvider.prototype.restoreUpdatedRows = function (rows) {
	        if (!this._checkClientState()) {
	            return;
	        }
	        var list = [];
	        if (rows == null) {
	            this._rootRow["$_restoreRow"](true, list);
	        }
	        else {
	            for (var i = rows.length; i--;) {
	                var row = this.rowById(rows[i]);
	                if (row) {
	                    row["$_restoreRow"](false, list);
	                }
	            }
	        }
	        if (list.length == 1) {
	            this._fireRowStateChanged(list[0], false);
	        }
	        else if (list.length > 1) {
	            this._fireRowStatesChanged(list);
	        }
	    };
	    LocalTreeDataProvider.prototype.getUpdatedCells = function (rows) {
	        var mode = this.restoreMode;
	        if (!(mode == RestoreMode_1.RestoreMode.AUTO || mode == RestoreMode_1.RestoreMode.EXPLICIT)) {
	            return null;
	        }
	        if (rows == null) {
	            rows = this.getStateRows(RowState_1.RowState.UPDATED);
	        }
	        else if (!Array.isArray(rows)) {
	            if (typeof rows == "number") {
	                rows = [rows];
	            }
	            else {
	                return null;
	            }
	        }
	        if (!Array.isArray(rows)) {
	            return null;
	        }
	        var ret = [];
	        for (var i = 0, cnt = rows.length; i < cnt; i++) {
	            var row = this.rowById(rows[i]);
	            if (row) {
	                var updatedCells = row["$_getUpdatedCells"]();
	                if (updatedCells && updatedCells.length > 0) {
	                    ret.push({
	                        __rowId: row.rowId,
	                        updatedCells: updatedCells
	                    });
	                }
	            }
	        }
	        return ret;
	    };
	    LocalTreeDataProvider.prototype.canUpdateRow = function (row) {
	        return true;
	    };
	    LocalTreeDataProvider.prototype.canInsertRow = function (row) {
	        return true;
	    };
	    LocalTreeDataProvider.prototype.canDeleteRow = function (row) {
	        return true;
	    };
	    LocalTreeDataProvider.prototype.isDataChanged = function (rowId, fieldIndex) {
	        var row = this.rowById(rowId);
	        if (!row) {
	            debugger;
	        }
	        var orgVals = row["_orgValues"];
	        if (row.rowState !== RowState_1.RowState.UPDATED || !orgVals) {
	            return false;
	        }
	        if (orgVals) {
	            var v1 = orgVals[fieldIndex];
	            var v2 = row["_values"][fieldIndex];
	            var field = this["_fields"][fieldIndex];
	            return field && field.dataType !== Types.ValueType.OBJECT && !field.sameValues(v1, v2);
	        }
	        return false;
	    };
	    //-------------------------------------------------------------------------
	    // internal members
	    //-------------------------------------------------------------------------
	    LocalTreeDataProvider.prototype._findRowById = function (rowId) {
	        return this._rootRow.findById(rowId);
	    };
	    LocalTreeDataProvider.prototype._checkSum = function (count) {
	        if (count != this.rowCount) {
	            throw new Error("Invalid row count: " + count + " <> " + this.rowCount);
	        }
	    };
	    LocalTreeDataProvider.prototype._clearRows = function () {
	        this._rootRow["_removeChildren"]();
	        this._rowMap = [];
	        if (this._rootRow && this._rootRow.descendantCount > 0) ;
	        else {
	            this._nextRowId = 1; // rootRow가 0번이고 다음은 1부터 시작한다.
	        }
	        this._tags.clearRows();
	        this._checkSum(0);
	    };
	    LocalTreeDataProvider.prototype.findRow = function (fields, values) {
	        if (fields && fields.length > 0 && values && values.length >= fields.length) {
	            var row = this._rootRow.findChild(fields, values);
	            return row;
	        }
	        return null;
	    };
	    LocalTreeDataProvider.prototype.$_resetOrgValues = function () {
	        this._needOrgValues = this.checkStates && this.restoreMode != RestoreMode_1.RestoreMode.NONE;
	        this._needRestore = this._needOrgValues && this.restoreMode == RestoreMode_1.RestoreMode.AUTO;
	        this._rootRow["_clearOrgValues"]();
	    };
	    LocalTreeDataProvider.prototype.$_summarizeChildren = function (parent, summary) {
	        var f = summary.field;
	        var cnt = parent.count;
	        for (var i = 0; i < cnt; i++) {
	            var row = parent.getChild(i);
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                summary.sum += v;
	                summary.dataCount++;
	                if (v < summary.min)
	                    summary.min = v;
	                if (v > summary.max)
	                    summary.max = v;
	            }
	            this.$_summarizeChildren(row, summary);
	        }
	    };
	    LocalTreeDataProvider.prototype.$_summarizeVars = function (parent, summary) {
	        var f = summary.field;
	        var avg = summary.avg;
	        var cnt = parent.count;
	        var vars = 0;
	        for (var i = 0; i < cnt; i++) {
	            var row = parent.getChild(i);
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                vars += Math.pow(v - avg, 2);
	            }
	            vars += this.$_summarizeVars(row, summary);
	        }
	        return vars;
	    };
	    LocalTreeDataProvider.prototype._summarizeChildren = function (parent, field) {
	        var f = field.field;
	        var cnt = parent.count;
	        for (var i = 0; i < cnt; i++) {
	            var row = parent.getChild(i);
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                field.sum += v;
	                if (v < field.min)
	                    field.min = v;
	                if (v > field.max)
	                    field.max = v;
	            }
	            this._summarizeChildren(row, field);
	        }
	    };
	    LocalTreeDataProvider.prototype._summarizeVars = function (parent, field) {
	        var f = field.field;
	        var avg = field.avg;
	        var cnt = parent.count;
	        var vars = 0;
	        for (var i = 0; i < cnt; i++) {
	            var row = parent.getChild(i);
	            var v = row.getValue(f);
	            if (!isNaN(v)) {
	                vars += Math.pow(v - avg, 2);
	            }
	            vars += this._summarizeVars(row, field);
	        }
	        return vars;
	    };
	    LocalTreeDataProvider.prototype._summarize = function (field, calcVars) {
	        if (field == null) {
	            return false;
	        }
	        field.clear();
	        var count = this.rowCount;
	        if (count < 1) {
	            return false;
	        }
	        field.count = 0;
	        field.sum = 0;
	        field.min = Number.MIN_VALUE;
	        field.max = Number.MAX_VALUE;
	        this._summarizeChildren(this._rootRow, field);
	        field.avg = field.sum / field.count;
	        if (calcVars) {
	            var vars = this._summarizeVars(this._rootRow, field);
	            field.vars = vars / field.count;
	        }
	        return true;
	    };
	    //-------------------------------------------------------------------------
	    // event members
	    //-------------------------------------------------------------------------
	    LocalTreeDataProvider.prototype._fireDisposed = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.DISPOSED);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireReset = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.RESET);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRefresh = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.REFRESH);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRefreshClient = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.REFRESH_CLIENT);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireCleared = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.CLEARED);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowCountChanged = function () {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_COUNT_CHANGED, this.rowCount);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowAdding = function (row, index, child) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROW_ADDING, row, index, child);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowAdded = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_ADDED, row);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowsAdded = function (parent, rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROWS_ADDED, parent, rows);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowRemoving = function (row) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROW_REMOVING, row);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowRemoved = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_REMOVED, row);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowsRemoving = function (rows) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROWS_REMOVING, rows);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowsRemoved = function (rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROWS_REMOVED, rows);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowUpdating = function (row) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROW_UPDATING, row);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowUpdated = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_UPDATED, row);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireValueChanging = function (row, field, newValue) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.VALUE_CHNAGED, row, field, newValue);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireValueChanged = function (row, field) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.VALUE_CHNAGED, row, field);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireIconIndexChanged = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ICON_INDEX_CHANGED, row);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireHasChildrenChanged = function (row) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.HAS_CHILDREN_CHANGED, row);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowStateChanged = function (row, refresh) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_STATE_CHANGED, row, refresh);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowStatesChanged = function (rows) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_STATES_CHANGED, rows);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowSiblingMoving = function (row, delta) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROW_SIBLING_MOVING, row, delta);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowSiblingMoved = function (row, delta) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_SIBLING_MOVED, row, delta);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowParentChanging = function (row, parent, childIndex) {
	        if (this._eventLock <= 0) {
	            return this.fireConfirmEvent(LocalTreeDataProvider.ROW_PARENT_CHANGING, row, parent, childIndex);
	        }
	        return true;
	    };
	    LocalTreeDataProvider.prototype._fireRowParentChanged = function (row, parent, childIndex) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROW_PARENT_CHANGED, row, parent, childIndex);
	        }
	    };
	    LocalTreeDataProvider.prototype._fireRowsHiddenChanged = function (rowIds, hidden) {
	        if (this._eventLock <= 0) {
	            this.fireEvent(LocalTreeDataProvider.ROWS_HIDDEN_CHANGED, rowIds, hidden);
	        }
	    };
	    //-------------------------------------------------------------------------
	    // event types
	    //-------------------------------------------------------------------------
	    LocalTreeDataProvider.DISPOSED = "onTreeDataProviderDisposed";
	    LocalTreeDataProvider.RESET = "onTreeDataProviderReset";
	    LocalTreeDataProvider.REFRESH = "onTreeDataProviderRefresh";
	    LocalTreeDataProvider.REFRESH_CLIENT = "onTreeDataProviderRefreshClient";
	    LocalTreeDataProvider.CLEARED = "onTreeDataProviderCleared";
	    LocalTreeDataProvider.ROW_COUNT_CHANGED = "onTreeDataProviderRowCountChanged";
	    LocalTreeDataProvider.ROW_ADDING = "onTreeDataProviderRowAdding";
	    LocalTreeDataProvider.ROW_ADDED = "onTreeDataProviderRowAdded";
	    LocalTreeDataProvider.ROWS_ADDED = "onTreeDataProviderRowsAdded";
	    LocalTreeDataProvider.ROW_REMOVING = "onTreeDataProviderRowRemoving";
	    LocalTreeDataProvider.ROW_REMOVED = "onTreeDataProviderRowRemoved";
	    LocalTreeDataProvider.ROWS_REMOVING = "onTreeDataProviderRowsRemoving";
	    LocalTreeDataProvider.ROWS_REMOVED = "onTreeDataProviderRowsRemoved";
	    LocalTreeDataProvider.ROW_UPDATING = "onTreeDataProviderRowUpdating";
	    LocalTreeDataProvider.ROW_UPDATED = "onTreeDataProviderRowUpdated";
	    LocalTreeDataProvider.VALUE_CHANGING = "onTreeDataProviderValueChanging";
	    LocalTreeDataProvider.VALUE_CHNAGED = "onTreeDataProviderValueChanged";
	    LocalTreeDataProvider.ICON_INDEX_CHANGED = "onTreeDataProviderIconIndexChanged";
	    LocalTreeDataProvider.HAS_CHILDREN_CHANGED = "onTreeDataProviderHasChildrenChanged";
	    LocalTreeDataProvider.ROW_STATE_CHANGED = "onTreeDataProviderRowStateChanged";
	    LocalTreeDataProvider.ROW_STATES_CHANGED = "onTreeDataProviderRowStatesChanged";
	    LocalTreeDataProvider.ROW_SIBLING_MOVING = "onTreeDataProviderRowSiblingMoving";
	    LocalTreeDataProvider.ROW_SIBLING_MOVED = "onTreeDataProviderRowSiblingMoved";
	    LocalTreeDataProvider.ROW_PARENT_CHANGING = "onTreeDataProviderRowParentChanging";
	    LocalTreeDataProvider.ROW_PARENT_CHANGED = "onTreeDataProviderRowParentChanged";
	    LocalTreeDataProvider.ROWS_HIDDEN_CHANGED = "onTreeDataProviderRowsHideChanged";
	    LocalTreeDataProvider.GET_HANDLER = "getHandler";
	    return LocalTreeDataProvider;
	}(TreeDataProvider));
	exports.LocalTreeDataProvider = LocalTreeDataProvider;
	});

	unwrapExports(TreeDataProvider_1);
	var TreeDataProvider_2 = TreeDataProvider_1.TreeDataRow;
	var TreeDataProvider_3 = TreeDataProvider_1.TreeDataRowImpl;
	var TreeDataProvider_4 = TreeDataProvider_1.TreeDataProvider;
	var TreeDataProvider_5 = TreeDataProvider_1.LocalTreeDataProvider;

	var main = createCommonjsModule(function (module, exports) {
	////////////////////////////////////////////////////////////////////////////////
	// main.ts 
	// 2019. 07. 30. created by jun
	// -----------------------------------------------------------------------------
	// Copyright (c) 2019 Wooritech Inc.
	// All rights reserved.
	////////////////////////////////////////////////////////////////////////////////
	Object.defineProperty(exports, "__esModule", { value: true });















	var RealGridJS = /** @class */ (function () {
	    function RealGridJS() {
	    }
	    RealGridJS.getVersion = function () {
	        return this.version;
	    };
	    RealGridJS.getActiveGrid = function () {
	    };
	    RealGridJS.exportGrid = function () {
	    };
	    Object.defineProperty(RealGridJS, "ImageList", {
	        get: function () {
	            return ImageList_1.ImageList;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "GridContainer", {
	        get: function () {
	            return GridContainer_1.GridContainer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "GridView", {
	        get: function () {
	            return GridView_1.GridView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "TreeContainer", {
	        get: function () {
	            return TreeView_1.TreeContainer;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "TreeView", {
	        get: function () {
	            return TreeView_1.TreeView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "LocalDataProvider", {
	        get: function () {
	            return LocalDataProvider_1.LocalDataProvider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "LocalTreeDataProvider", {
	        get: function () {
	            return TreeDataProvider_1.LocalTreeDataProvider;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "DataType", {
	        get: function () {
	            return Types.ValueType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "DataField", {
	        get: function () {
	            return DataField_1.DataField;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "DataColumn", {
	        get: function () {
	            return DataColumn_1.DataColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "DataOutputOptions", {
	        // static DataFillMode: typeof DataFillMode;
	        // static DataFillOptions: typeof DataFillOptions;
	        get: function () {
	            return DataOutputOptions_1.DataOutputOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "RowState", {
	        get: function () {
	            return RowState_1.RowState;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "ColumnHeaderItemLocation", {
	        // static ChangingMode: typeof ChangingMode;
	        // static DropdownValueLabel: typeof DropdownValueLabel;
	        // static BackgroundImageLocation: typeof BackgroundImageLocation;
	        get: function () {
	            return Types.ColumnHeaderItemLocation;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "Column", {
	        // static SubTextLocation: typeof SubTextLocation
	        // static CellButton: typeof CellButton
	        // static ButtonVisibility: typeof ButtonVisibility
	        get: function () {
	            return GridColumn_1.GridColumn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "Rectangle", {
	        get: function () {
	            return Rectangle_1.Rectangle;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "GroupItemImpl", {
	        /* options */
	        // static RowGroupOptions: typeof RowGroupOptions;
	        // static FixedOptions: typeof FixedOptions;
	        // static SelectOptions: typeof SelectOptions;
	        // static SortingOptions: SortingOptions;
	        // static FilterSelectorOptions: typeof FilterSelectorOptions;
	        // static FilteringOptions: typeof FilteringOptions;
	        // static GroupingOptions: typeof GroupingOptions;
	        // static ColumnHeaderOptions: typeof ColumnHeaderOptions;
	        // static ToastOptions: typeof ToastOptions;
	        // static DisplayOptions: typeof DisplayOptions;
	        // static EditOptions: typeof EditOptions;
	        // static EditorOptions: typeof EditorOptions;
	        // static CopyOptions: typeof CopyOptions;
	        // static PasteOptions: typeof PasteOptions;
	        // static SearchOptions: typeof SearchOptions;
	        // static GridExportOptions: typeof GridExportOptions;
	        // static EditValidation: typeof EditValidation;
	        // static ImageList: typeof ImageList
	        /* TODO debugger Only가 필요하다. */
	        get: function () {
	            return GridItem_1.GroupItemImpl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "MergedGroupHeader", {
	        get: function () {
	            return RowGroup_1.MergedGroupHeader;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RealGridJS, "GridRow", {
	        get: function () {
	            return GridItem_1.GridRow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RealGridJS.version = "/*# version #*/";
	    return RealGridJS;
	}());
	exports.default = RealGridJS;
	});

	var main$1 = unwrapExports(main);

	return main$1;

}());
